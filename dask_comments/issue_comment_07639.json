[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/841244461",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-841244461",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 841244461,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTI0NDQ2MQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-14T13:29:17Z",
        "updated_at": "2021-05-14T13:29:17Z",
        "author_association": "MEMBER",
        "body": "Ping @eric-czech and @RogerMoens since you have both looked at the svd implementation recently.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/841244461/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/841627179",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-841627179",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 841627179,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYyNzE3OQ==",
        "user": {
            "login": "eric-czech",
            "id": 6130352,
            "node_id": "MDQ6VXNlcjYxMzAzNTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6130352?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eric-czech",
            "html_url": "https://github.com/eric-czech",
            "followers_url": "https://api.github.com/users/eric-czech/followers",
            "following_url": "https://api.github.com/users/eric-czech/following{/other_user}",
            "gists_url": "https://api.github.com/users/eric-czech/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eric-czech/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eric-czech/subscriptions",
            "organizations_url": "https://api.github.com/users/eric-czech/orgs",
            "repos_url": "https://api.github.com/users/eric-czech/repos",
            "events_url": "https://api.github.com/users/eric-czech/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eric-czech/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-15T09:08:50Z",
        "updated_at": "2021-05-15T09:08:50Z",
        "author_association": "MEMBER",
        "body": "> For real input, both methods yield the same results.\r\n\r\nWhat makes you say that?  If I remove the line in your example that casts `temp` to imaginary, the `allclose` still fails and afiak singular vectors from `np.lingalg.svd` aren't directly comparable to those from `da.lingalg.svd_compressed` like that.  \r\n\r\nYou could compare to `da.linalg.svd` instead, but even then the results will only be the same up to possible sign flips.  You would have to pass the numpy results through sign coercion as dask does by default now after https://github.com/dask/dask/pull/6613.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/841627179/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/841838279",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-841838279",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 841838279,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTgzODI3OQ==",
        "user": {
            "login": "nicrie",
            "id": 45175997,
            "node_id": "MDQ6VXNlcjQ1MTc1OTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45175997?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nicrie",
            "html_url": "https://github.com/nicrie",
            "followers_url": "https://api.github.com/users/nicrie/followers",
            "following_url": "https://api.github.com/users/nicrie/following{/other_user}",
            "gists_url": "https://api.github.com/users/nicrie/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nicrie/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nicrie/subscriptions",
            "organizations_url": "https://api.github.com/users/nicrie/orgs",
            "repos_url": "https://api.github.com/users/nicrie/repos",
            "events_url": "https://api.github.com/users/nicrie/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nicrie/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-16T16:10:09Z",
        "updated_at": "2021-05-16T16:26:03Z",
        "author_association": "NONE",
        "body": "Hi thanks for getting back! You're completely correct with your points, I added `svd_flip` to guarantee consistent signs in the solution and, as you suggested,  compared `da.linalg.svd_compressed` to `da.linalg.svd`.\r\n\r\nI'm aware that `da.linalg.svd_compressed` is an approximation and I'm not expecting it to yield the exact results as  `da.linalg.svd`. However, I would expect that they yield *similar* solutions (what would be the benefit of having such a method otherwise?). I rewrote the MWE a bit to make things clear.\r\n\r\n\r\n<details>\r\n    <summary><b>Imports</b> </summary>\r\n    <!-- have to be followed by an empty line! -->\r\n\r\n```py\r\nimport xarray as xr\r\nimport dask.array as da\r\nfrom dask.array.utils import svd_flip\r\n```\r\n  </details>\r\n\r\n\r\nMake two functions for (i) getting the kernel (real and complex) and (ii) performing svd both in standard and compressed form. `perform_svd` only returns the first 5 singular values/vectors for both SVD algorithms.\r\n<details>\r\n    <summary><b>Functions</b></summary>\r\n    <!-- have to be followed by an empty line! -->\r\n\r\n```py\r\ndef get_kernel():\r\n    data = xr.tutorial.open_dataset(\r\n        'air_temperature',\r\n        chunks={'lat': 25, 'lon': 25, 'time': -1}\r\n    )\r\n    temp = data.air\r\n    temp = temp.stack(x=('lat', 'lon')).compute()\r\n    temp -= temp.mean('time')\r\n    # artificial complexification of data\r\n    temp = temp + (1j * 0.1 * temp**2)\r\n    kernel = np.dot(temp.conj().T, temp) / temp.shape[0]\r\n    dask_kernel = da.from_array(kernel)\r\n    return dask_kernel\r\n\r\n\r\ndef perform_dask_svd(kernel):\r\n    # Dask SVD\r\n    dsvd1 = da.linalg.svd(kernel)\r\n    u1, s1, vt1 = (x.compute() for x in dsvd1)\r\n    u1, vt1 = svd_flip(u1, vt1)\r\n\r\n    # Dask SVD Compressed\r\n    k = 100\r\n    dsvd2 = da.linalg.svd_compressed(kernel, k)\r\n    u2, s2, vt2 = (x.compute() for x in dsvd2)\r\n    u2, vt2 = svd_flip(u2, vt2)\r\n\r\n    # compare only first n singular values/vectors\r\n    n = 5\r\n    result = {\r\n        # standard SVD\r\n        'svd' : {'u': u1[:, :n], 's': s1[:n], 'vt': vt1[:n]},\r\n        # compressed SVD\r\n        'com_svd' : {'u': u2[:, :n], 's': s2[:n], 'vt': vt2[:n]}\r\n    }\r\n    return result\r\n```\r\n\r\n  </details>\r\n\r\n\r\n\r\n<details>\r\n    <summary><b>Perform SVD</b> </summary>\r\n    <!-- have to be followed by an empty line! -->\r\n\r\n```py\r\ncomplex_kernel = get_kernel()\r\nreal_kernel = get_kernel().real\r\n\r\nreal = perform_dask_svd(real_kernel)\r\ncplx = perform_dask_svd(complex_kernel)\r\n```\r\n  </details>\r\n\r\n`real` contains the solution for  `da.linalg.svd_compressed` and `da.linalg.svd` for *real* input, `cplx` contains the same but for *complex* input.\r\n\r\n<details>\r\n    <summary><b>Check results</b> </summary>\r\n    <!-- have to be followed by an empty line! -->\r\n\r\n\r\n\r\n```py\r\n# REAL\r\n# ----------------------\r\n# Get an idea of the magnitude of the solution\r\nprint(np.max(real['svd']['s']))  # 3.4e6\r\nprint(np.max(real['svd']['vt']))  # around 0.1\r\n\r\nnp.allclose(real['svd']['s'], real['com_svd']['s'], rtol=1e-4)  # True\r\nnp.allclose(real['svd']['vt'], real['com_svd']['vt'], rtol=1e-4, atol=1e-4)  # True\r\n\r\n\r\n# Maximal absolute deviation\r\nprint(np.max(real['svd']['s'] - real['com_svd']['s']))  # 0.25 for singular values; that's fine\r\nprint(np.max(real['svd']['vt'] - real['com_svd']['vt']))  # 2e-5 for singular vector; that's fine\r\n\r\n\r\n# COMPLEX\r\n# ----------------------\r\n# Get an idea of the magnitude of the solution\r\nprint(np.max(cplx['svd']['s']))  # 3.4e6\r\nprint(np.max(cplx['svd']['vt'].real))  # around 0.1\r\nprint(np.max(cplx['svd']['vt'].imag))  # around 0.1\r\n\r\nnp.allclose(cplx['svd']['s'], cplx['com_svd']['s'], rtol=1e-4)  # False\r\nnp.allclose(cplx['svd']['vt'], cplx['com_svd']['vt'], rtol=1e-4, atol=1e-4)  # False\r\n\r\n# Maximal absolute deviation\r\nprint(np.max(cplx['svd']['s'] - cplx['com_svd']['s']))  # around 17, OK if compared to max absolute value of 3.4e6 \r\nprint(np.max(cplx['svd']['vt'].real - cplx['com_svd']['vt'].real))  # 0.06  really bad if compared to max absolute value of 0.1\r\nprint(np.max(cplx['svd']['vt'].imag - cplx['com_svd']['vt'].imag))  # 0.16j even worse, that translates to a relative error > 100%!\r\n```\r\n  </details>\r\nFrom the comparison below it is evident, that while for real input the solutions are approximately the same, the difference are substantial when taking complex input. \r\n\r\n## Example: Image of imaginary part of 2nd singular vector \r\n*Both figures are using the same colorbar range*\r\n### For `svd`  \r\n![svd-mode2](https://user-images.githubusercontent.com/45175997/118404649-133a9500-b674-11eb-8964-30e34cbd2f2a.jpg)\r\n\r\n### For  `svd_compressed`\r\n![svd-com-mode2](https://user-images.githubusercontent.com/45175997/118404648-12a1fe80-b674-11eb-89fe-115a893d19f1.jpg)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/841838279/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/841864977",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-841864977",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 841864977,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTg2NDk3Nw==",
        "user": {
            "login": "RogerMoens",
            "id": 45488927,
            "node_id": "MDQ6VXNlcjQ1NDg4OTI3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45488927?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RogerMoens",
            "html_url": "https://github.com/RogerMoens",
            "followers_url": "https://api.github.com/users/RogerMoens/followers",
            "following_url": "https://api.github.com/users/RogerMoens/following{/other_user}",
            "gists_url": "https://api.github.com/users/RogerMoens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RogerMoens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RogerMoens/subscriptions",
            "organizations_url": "https://api.github.com/users/RogerMoens/orgs",
            "repos_url": "https://api.github.com/users/RogerMoens/repos",
            "events_url": "https://api.github.com/users/RogerMoens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RogerMoens/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-16T19:25:47Z",
        "updated_at": "2021-05-17T08:47:47Z",
        "author_association": "CONTRIBUTOR",
        "body": "@nicrie:  You have not set an iterator for the randomized svd, setting it properly might improve the quality of the fit. Default is the no iterator, as the number of iterations is set to 0. The power iterator or the qr iterator are more precise depending on your singular value spectrum. Secondly, due to its sampling nature you should not compare the left and right singular vectors separately, but rather compare the whole reconstruction A_k w.r.t. the original A, e.g. by a Frobenius or 2-norm. Your maximal absolute deviation therefore doesn't seem appropriate to me. I guess you use it due to the dimensionality of your vectors?\r\n\r\n**Edit 1**: it might as well be that there is a problem with complex valued matrices, I will try some mock-up problem tomorrow. First I need to get acquainted with the complex type svd.\r\n\r\n**Edit 2**: for `np.max(cplx['svd']['s'] - cplx['com_svd']['s'])` you inherently assume that the singular vectors of both solutions are properly aligned and ordered w.r.t. each other (standard svd vs. randomized svd), I don't think such statement is generally true.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/841864977/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/842157956",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-842157956",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 842157956,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjE1Nzk1Ng==",
        "user": {
            "login": "RogerMoens",
            "id": 45488927,
            "node_id": "MDQ6VXNlcjQ1NDg4OTI3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45488927?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RogerMoens",
            "html_url": "https://github.com/RogerMoens",
            "followers_url": "https://api.github.com/users/RogerMoens/followers",
            "following_url": "https://api.github.com/users/RogerMoens/following{/other_user}",
            "gists_url": "https://api.github.com/users/RogerMoens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RogerMoens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RogerMoens/subscriptions",
            "organizations_url": "https://api.github.com/users/RogerMoens/orgs",
            "repos_url": "https://api.github.com/users/RogerMoens/repos",
            "events_url": "https://api.github.com/users/RogerMoens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RogerMoens/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-17T09:08:09Z",
        "updated_at": "2021-05-17T09:18:48Z",
        "author_association": "CONTRIBUTOR",
        "body": "I tried to review the reconstruction and I got: \r\n\r\n```python\r\nrecon = (cplx['svd']['u']*cplx['svd']['s'])@cplx['svd']['vt']\r\nrecon_com = (cplx['com_svd']['u']*cplx['com_svd']['s'])@cplx['com_svd']['vt']\r\nprint(np.linalg.norm(recon.imag - recon_com.imag, 2)/np.linalg.norm(recon.imag,2)) # 1.4710661\r\nprint(np.linalg.norm(recon.real - recon_com.real, 2)/np.linalg.norm(recon.real,2)) # 0.022141397\r\n```\r\n\r\nwhich is relatively large: 147% and 2.2% relative difference. It seems that the real part is well reconstructed to some extent, but the complex part not. It might be that the sampling of the imaginary part is not appropriate as only the real part is sampled, i.e. we use a real sampling matrix.\r\n\r\nI think we have to review lines 720 to 726 in linalg.py for it:\r\n```python\r\n    datatype = np.float64\r\n    if (data.dtype).type in {np.float32, np.complex64}:\r\n        datatype = np.float32\r\n    omega = state.standard_normal(\r\n        size=(n, comp_level), chunks=(data.chunks[1], (comp_level,))\r\n    ).astype(datatype, copy=False)\r\n    mat_h = data.dot(omega)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/842157956/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/842259775",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-842259775",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 842259775,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjI1OTc3NQ==",
        "user": {
            "login": "eric-czech",
            "id": 6130352,
            "node_id": "MDQ6VXNlcjYxMzAzNTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6130352?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eric-czech",
            "html_url": "https://github.com/eric-czech",
            "followers_url": "https://api.github.com/users/eric-czech/followers",
            "following_url": "https://api.github.com/users/eric-czech/following{/other_user}",
            "gists_url": "https://api.github.com/users/eric-czech/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eric-czech/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eric-czech/subscriptions",
            "organizations_url": "https://api.github.com/users/eric-czech/orgs",
            "repos_url": "https://api.github.com/users/eric-czech/repos",
            "events_url": "https://api.github.com/users/eric-czech/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eric-czech/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-17T11:48:52Z",
        "updated_at": "2021-05-17T11:48:52Z",
        "author_association": "MEMBER",
        "body": "> However, I would expect that they yield similar solutions (what would be the benefit of having such a method otherwise?).\r\n\r\nI was trying to understand that myself recently and came to the conclusion that I don't think this is true.  Afaik, SVD is not unique for non-square matrices so comparison of reconstruction quality is necessary instead of comparing singular vectors.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/842259775/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/842265686",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-842265686",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 842265686,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjI2NTY4Ng==",
        "user": {
            "login": "RogerMoens",
            "id": 45488927,
            "node_id": "MDQ6VXNlcjQ1NDg4OTI3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45488927?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RogerMoens",
            "html_url": "https://github.com/RogerMoens",
            "followers_url": "https://api.github.com/users/RogerMoens/followers",
            "following_url": "https://api.github.com/users/RogerMoens/following{/other_user}",
            "gists_url": "https://api.github.com/users/RogerMoens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RogerMoens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RogerMoens/subscriptions",
            "organizations_url": "https://api.github.com/users/RogerMoens/orgs",
            "repos_url": "https://api.github.com/users/RogerMoens/repos",
            "events_url": "https://api.github.com/users/RogerMoens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RogerMoens/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-17T11:58:29Z",
        "updated_at": "2021-05-17T11:59:46Z",
        "author_association": "CONTRIBUTOR",
        "body": "@eric-czech: The SVD is unique (up to signs) for square, non-square, and complex matrices as long as no singular value pairs (two or more singular values with the same value exist). See Trefethen, L. N. & Bau III, D. Numerical linear algebra, vol. 50 (Siam, 1997).\r\n\r\nI am not sure whether randomized methods such as svd_compressed provide unique solutions, as they severely depend on the sampling of the matrix. In my experience they are not unique.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/842265686/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/843893866",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-843893866",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 843893866,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzg5Mzg2Ng==",
        "user": {
            "login": "RogerMoens",
            "id": 45488927,
            "node_id": "MDQ6VXNlcjQ1NDg4OTI3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45488927?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RogerMoens",
            "html_url": "https://github.com/RogerMoens",
            "followers_url": "https://api.github.com/users/RogerMoens/followers",
            "following_url": "https://api.github.com/users/RogerMoens/following{/other_user}",
            "gists_url": "https://api.github.com/users/RogerMoens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RogerMoens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RogerMoens/subscriptions",
            "organizations_url": "https://api.github.com/users/RogerMoens/orgs",
            "repos_url": "https://api.github.com/users/RogerMoens/repos",
            "events_url": "https://api.github.com/users/RogerMoens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RogerMoens/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-19T08:52:59Z",
        "updated_at": "2021-05-19T08:52:59Z",
        "author_association": "CONTRIBUTOR",
        "body": "Just checked, the TSQR gives same results for complex matrices as numpy QR. I am not sure whether the sampling for complex matrices should also be a complex matrix.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/843893866/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/845754226",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-845754226",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 845754226,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTc1NDIyNg==",
        "user": {
            "login": "RogerMoens",
            "id": 45488927,
            "node_id": "MDQ6VXNlcjQ1NDg4OTI3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45488927?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RogerMoens",
            "html_url": "https://github.com/RogerMoens",
            "followers_url": "https://api.github.com/users/RogerMoens/followers",
            "following_url": "https://api.github.com/users/RogerMoens/following{/other_user}",
            "gists_url": "https://api.github.com/users/RogerMoens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RogerMoens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RogerMoens/subscriptions",
            "organizations_url": "https://api.github.com/users/RogerMoens/orgs",
            "repos_url": "https://api.github.com/users/RogerMoens/repos",
            "events_url": "https://api.github.com/users/RogerMoens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RogerMoens/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-21T08:15:44Z",
        "updated_at": "2021-05-21T08:16:27Z",
        "author_association": "CONTRIBUTOR",
        "body": "I think the sampling step is appropriate as is for complex matrices. I have planned to check the tsqr including svd next week:\r\n```python\r\nv, s, u = tsqr(a_compressed.T, compute_svd=True)\r\n```\r\n\r\n@nicrie: you could try to compare the outputs with sklearn randomized/compressed/truncated SVD: https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html\r\n\r\n@eric-czech: how does the svd flip function handles complex inputs?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/845754226/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/847976838",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-847976838",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 847976838,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0Nzk3NjgzOA==",
        "user": {
            "login": "eric-czech",
            "id": 6130352,
            "node_id": "MDQ6VXNlcjYxMzAzNTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6130352?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eric-czech",
            "html_url": "https://github.com/eric-czech",
            "followers_url": "https://api.github.com/users/eric-czech/followers",
            "following_url": "https://api.github.com/users/eric-czech/following{/other_user}",
            "gists_url": "https://api.github.com/users/eric-czech/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eric-czech/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eric-czech/subscriptions",
            "organizations_url": "https://api.github.com/users/eric-czech/orgs",
            "repos_url": "https://api.github.com/users/eric-czech/repos",
            "events_url": "https://api.github.com/users/eric-czech/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eric-czech/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-25T15:36:01Z",
        "updated_at": "2021-05-25T15:36:01Z",
        "author_association": "MEMBER",
        "body": "> how does the svd flip function handles complex inputs?\r\n\r\nIt should be fine AFAIK since the operations in that function only operate on the real term, so this invariant should be true regardless of the input:\r\n\r\n```python\r\nx = np.random.rand(1000, 100) + np.random.rand(1000, 100) * 1j\r\nu, s, v = np.linalg.svd(x, full_matrices=False)\r\nuf1, vf1 = svd_flip(u, vt)\r\nuf2, vf2 = svd_flip(np.real(u), np.real(vt))\r\nnp.testing.assert_array_equal(np.real(uf1), uf2)\r\nnp.testing.assert_array_equal(np.real(vf1), vf2)\r\n```\r\n\r\nIt will preserve the complex dtypes too since it's only using addition, multiplication and axis summation.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/847976838/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/849565827",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-849565827",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 849565827,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTU2NTgyNw==",
        "user": {
            "login": "RogerMoens",
            "id": 45488927,
            "node_id": "MDQ6VXNlcjQ1NDg4OTI3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45488927?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RogerMoens",
            "html_url": "https://github.com/RogerMoens",
            "followers_url": "https://api.github.com/users/RogerMoens/followers",
            "following_url": "https://api.github.com/users/RogerMoens/following{/other_user}",
            "gists_url": "https://api.github.com/users/RogerMoens/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RogerMoens/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RogerMoens/subscriptions",
            "organizations_url": "https://api.github.com/users/RogerMoens/orgs",
            "repos_url": "https://api.github.com/users/RogerMoens/repos",
            "events_url": "https://api.github.com/users/RogerMoens/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RogerMoens/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-27T11:47:19Z",
        "updated_at": "2021-05-27T11:47:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "Small update: I just checked the tsqr with svd, I think there is a casting in there somewhere that is not appropriate:\r\n\r\n```python\r\nimport xarray as xr\r\nimport dask.array as da\r\nfrom dask.array.utils import svd_flip\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\na = np.random.rand(500,100)+np.random.rand(500,100)*1j\r\na_da = da.asarray(a)\r\nu_da, s_da, vt_da = da.linalg.tsqr(a_da, compute_svd=True)\r\n```\r\n\r\ngives me\r\n\r\n```\r\ndask\\array\\utils.py:108: ComplexWarning: Casting complex values to real discards the imaginary part\r\n  meta = meta.astype(dtype)\r\n```\r\n\r\nThe singular values (s_da) seem to be correct, but the u_da and vt_da are not. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/849565827/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850358494",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-850358494",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 850358494,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDM1ODQ5NA==",
        "user": {
            "login": "nicrie",
            "id": 45175997,
            "node_id": "MDQ6VXNlcjQ1MTc1OTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45175997?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nicrie",
            "html_url": "https://github.com/nicrie",
            "followers_url": "https://api.github.com/users/nicrie/followers",
            "following_url": "https://api.github.com/users/nicrie/following{/other_user}",
            "gists_url": "https://api.github.com/users/nicrie/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nicrie/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nicrie/subscriptions",
            "organizations_url": "https://api.github.com/users/nicrie/orgs",
            "repos_url": "https://api.github.com/users/nicrie/repos",
            "events_url": "https://api.github.com/users/nicrie/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nicrie/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T11:40:42Z",
        "updated_at": "2021-05-28T11:40:42Z",
        "author_association": "NONE",
        "body": "Thanks for the updates @RogerMoens. I tried to compare with the truncated SVD of sklearn, but their implementation does not support complex data (perhaps for a reason?)\r\n\r\nI tried to understand where the `ComplexWarning` is coming from, but I realize I don't understand the code sufficiently well. \r\nNevertheless, I narrowed down the thrown warning to final lines of code in TSQR, lines 502 - 517, where `meta_from_array` is called and causes the casting from complex to real. However, not sure if its really a problem since it affects only the meta information (?):\r\n\r\n```py\r\ngraph = HighLevelGraph(layers, dependencies)\r\nu_meta = meta_from_array(data, len((m_u, n_u)), uu.dtype)\r\ns_meta = meta_from_array(data, len((n_s,)), ss.dtype)\r\nvh_meta = meta_from_array(data, len((d_vh, d_vh)), vvh.dtype)\r\nu = Array(\r\n    graph,\r\n    name_u_st4,\r\n    shape=(m_u, n_u),\r\n    chunks=(data.chunks[0], (n_u,)),\r\n    meta=u_meta,\r\n)\r\ns = Array(graph, name_s_st2, shape=(n_s,), chunks=((n_s,),), meta=s_meta)\r\nvh = Array(\r\n    graph, name_v_st2, shape=(d_vh, d_vh), chunks=((n,), (n,)), meta=vh_meta\r\n)\r\nreturn u, s, vh     \r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850358494/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/854127927",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-854127927",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 854127927,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDEyNzkyNw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-03T19:39:53Z",
        "updated_at": "2021-06-03T19:39:53Z",
        "author_association": "MEMBER",
        "body": "If the error arises before you call `.compute` then the meta might be the issue, but I think what you are seeing is not an error, but incorrect results, so I think the meta is not the root of the issue.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/854127927/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1221795163",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-1221795163",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 1221795163,
        "node_id": "IC_kwDOAbcwm85I0x1b",
        "user": {
            "login": "LUOXIAO92",
            "id": 89069722,
            "node_id": "MDQ6VXNlcjg5MDY5NzIy",
            "avatar_url": "https://avatars.githubusercontent.com/u/89069722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LUOXIAO92",
            "html_url": "https://github.com/LUOXIAO92",
            "followers_url": "https://api.github.com/users/LUOXIAO92/followers",
            "following_url": "https://api.github.com/users/LUOXIAO92/following{/other_user}",
            "gists_url": "https://api.github.com/users/LUOXIAO92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LUOXIAO92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LUOXIAO92/subscriptions",
            "organizations_url": "https://api.github.com/users/LUOXIAO92/orgs",
            "repos_url": "https://api.github.com/users/LUOXIAO92/repos",
            "events_url": "https://api.github.com/users/LUOXIAO92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LUOXIAO92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-22T04:24:17Z",
        "updated_at": "2022-08-22T04:24:17Z",
        "author_association": "NONE",
        "body": "The same issue. But on my case, I reconstructed the matrix using M'=U\u03a3V^\u2020 . The real matrix input yields reasonable answer, and it fails for complex matrix input. Here is my code\r\n```python\r\nimport os\r\nimport sys\r\nimport time\r\nimport numpy as np\r\nfrom opt_einsum import contract\r\n\r\nfrom dask.distributed import Client\r\nfrom dask_cuda import LocalCUDACluster\r\nfrom dask_cuda.initialize import initialize\r\nfrom dask.utils import parse_bytes\r\nfrom dask.distributed import performance_report\r\nfrom dask.distributed import wait\r\nfrom dask.distributed import get_task_stream\r\n\r\nimport cupy\r\nimport rmm\r\nimport cudf\r\nimport dask.array as da\r\n\r\n\r\ndef setup_rmm_pool(client):\r\n    client.run(\r\n        cudf.set_allocator,\r\n        pool=False,\r\n        #initial_pool_size= parse_bytes(\"1GB\"),\r\n        allocator=\"default\"\r\n    )\r\n    client.run(\r\n        cupy.cuda.set_allocator,\r\n        #rmm.rmm_cupy_allocator,\r\n        rmm.mr.set_current_device_resource(rmm.mr.ManagedMemoryResource())\r\n    )\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    initialize(create_cuda_context=True)\r\n    \r\n    cluster = LocalCUDACluster(local_directory=\"./tmp/\",\r\n                                memory_limit=None)\r\n       \r\n    client = Client(cluster)\r\n    setup_rmm_pool(client)\r\n\r\n    nprs = np.random.RandomState(seed=1234)\r\n    rs = da.random.RandomState(seed=1234,RandomState=cupy.random.RandomState)\r\n\r\n    SIZE = 15000\r\n    k = 32\r\n\r\n    b = nprs.rand(SIZE) + 1j * nprs.rand(SIZE)\r\n    b = da.from_array(b, chunks=(5000))\r\n    b = b.map_blocks(cupy.asarray)\r\n    #a = contract(\"i,j->ij\",b,b) * 10\r\n    a = da.einsum(\"i,j->ij\",b,b) * 10\r\n    #a = a.persist()\r\n\r\n    a = da.exp(1.2*a)\r\n    \r\n    t0=time.time()\r\n    u,s,vh=da.linalg.svd_compressed(a,k=k, seed=rs)\r\n    u,s,vh=da.compute(u,s,vh)\r\n    t1=time.time()\r\n    u=da.from_array(u,chunks=(5000,k))\r\n    vh=da.from_array(vh,chunks=(k,5000))\r\n        \r\n    #b = contract(\"ij,j,jk->ik\",u,s,vh)\r\n    b = da.einsum(\"ij,j,jk->ik\",u,s,vh)\r\n    a = a - b #<-a:M, b:M'\r\n    tr = da.sum(da.diagonal(a)).compute()\r\n    print(\"trace:{:}\".format(tr))\r\n    norm=da.linalg.norm(a).compute()\r\n    print(\"norm:{:}\".format(norm))\r\n\r\n    sys.exit(0)\r\n```\r\n\r\nI calculated the trace and norm of M-M' (M:original matrix; M':M'~U\u03a3V^\u2020) which should be small. On the complex case, difference between M and M' is large.\r\n```\r\ntrace:(768972.9893344672+7563949.776901031j)\r\nnorm:54801713.60352144\r\n```\r\nBut on the real case, it yields a reasonable answer.\r\n```\r\ntrace:-2.470109161656353e-08\r\nnorm:1.8832952585877038e-07\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1221795163/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1236279296",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-1236279296",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 1236279296,
        "node_id": "IC_kwDOAbcwm85JsCAA",
        "user": {
            "login": "LUOXIAO92",
            "id": 89069722,
            "node_id": "MDQ6VXNlcjg5MDY5NzIy",
            "avatar_url": "https://avatars.githubusercontent.com/u/89069722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LUOXIAO92",
            "html_url": "https://github.com/LUOXIAO92",
            "followers_url": "https://api.github.com/users/LUOXIAO92/followers",
            "following_url": "https://api.github.com/users/LUOXIAO92/following{/other_user}",
            "gists_url": "https://api.github.com/users/LUOXIAO92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LUOXIAO92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LUOXIAO92/subscriptions",
            "organizations_url": "https://api.github.com/users/LUOXIAO92/orgs",
            "repos_url": "https://api.github.com/users/LUOXIAO92/repos",
            "events_url": "https://api.github.com/users/LUOXIAO92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LUOXIAO92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-04T07:33:45Z",
        "updated_at": "2022-09-04T11:44:08Z",
        "author_association": "NONE",
        "body": "I think I have found the bugs in svd_compressed(). The svd calculation for complex matrix is $A=U\\Sigma V^\\dagger$, where $U$ and $V^\\dagger$ are complex matrices. The \" ${}^\\dagger$ \" means \"Hermitian transpose\", which on the case of real matrix reduces to a transpose matrix. While calculating complex matrix svd, we should use Hermitian transpose but not transpose matrix. \r\nAt the source code for dask.array.linalg, I found some bugs, and I will figure out the bugs by comments. First, at the \"compression_matrix()\" function, \r\n```python\r\n    if iterator == \"power\":\r\n        for i in range(n_power_iter):\r\n            if compute:\r\n                mat_h = mat_h.persist()\r\n                wait(mat_h)\r\n            tmp = data.T.dot(mat_h) #<-should be Hermitian transpose da.conj(data.T) on the complex case\r\n            if compute:\r\n                tmp = tmp.persist()\r\n                wait(tmp)\r\n            mat_h = data.dot(tmp)\r\n        q, _ = tsqr(mat_h)\r\n    else:\r\n        q, _ = tsqr(mat_h)\r\n        for i in range(n_power_iter):\r\n            if compute:\r\n                q = q.persist()\r\n                wait(q)\r\n            q, _ = tsqr(data.T.dot(q)) #<-should be Hermitian transpose da.conj(data.T) on the complex case\r\n            if compute:\r\n                q = q.persist()\r\n                wait(q)\r\n            q, _ = tsqr(data.dot(q))\r\n\r\n    return q.T #<-should be Hermitian transpose da.conj(q.T) on the complex case\r\n```\r\nThen, at the \"svd_compressed()\" function, \r\n```python\r\n    a_compressed = comp.dot(a)\r\n    v, s, u = tsqr(a_compressed.T, compute_svd=True)\r\n    u = comp.T.dot(u.T) #<-should be  da.conj(comp.T).dot(u.T) on the complex case\r\n    v = v.T\r\n    u = u[:, :k]\r\n    s = s[:k]\r\n    v = v[:k, :]\r\n    if coerce_signs:\r\n        u, v = svd_flip(u, v)\r\n    return u, s, v\r\n```\r\n\r\nHere is my code of randomized svd by the use of power iteration\r\n\r\n<details>\r\n<summary>randomized_svd.py</summary>\r\n\r\n```python\r\ndef rsvd(A:da.Array, k:int, n_oversamples=10, n_power_iter=0, seed=da.random.RandomState(seed=1234,RandomState=np.random.RandomState)):\r\n    \"\"\"\r\n    A: MxN dask array\\\\\r\n    k:rank\\\\\r\n    n_oversamples+k=l << min{M,N} must be satisfied\\\\\r\n    seed:default is numpy.random.RandomState(seed=1234)\r\n    \"\"\"\r\n    \r\n    M, N = (da.shape(A)[0], da.shape(A)[1])\r\n\r\n    l = k + n_oversamples\r\n    Omega = seed.normal(size=(N, l))\r\n    Q = __power_iteration__(A, Omega, n_power_iter)\r\n    del Omega\r\n\r\n    if A.dtype == \"complex16\" or A.dtype == \"complex32\" or A.dtype == \"complex64\" \\\r\n        or A.dtype == \"complex128\" or  A.dtype == \"complex256\" or A.dtype == \"complex512\":\r\n        B = da.conj(da.transpose(Q)) @ A\r\n    else:\r\n        B = da.transpose(Q) @ A\r\n\r\n    u_tilde, s, vh = da.linalg.svd(B)\r\n    del B\r\n    u = Q @ u_tilde\r\n    del u_tilde\r\n    \r\n    return u[:,:k], s[:k], vh[:k,:]\r\n\r\ndef __power_iteration__(A, Omega, n_power_iter:int):\r\n    \r\n    Y = A @ Omega\r\n    if A.dtype == \"complex16\" or A.dtype == \"complex32\" or A.dtype == \"complex64\" \\\r\n        or A.dtype == \"complex128\" or  A.dtype == \"complex256\" or A.dtype == \"complex512\":\r\n        for q in range(n_power_iter):\r\n            Y = A @ (da.conj(da.transpose(A)) @ Y)\r\n    else:\r\n        for q in range(n_power_iter):\r\n            Y = A @ (da.transpose(A) @ Y)\r\n    Q, _ = da.linalg.tsqr(Y)\r\n\r\n    return Q\r\n```\r\n</details>\r\n\r\nHere is the test code, which compares to the full svd \"cupy.linalg.svd\" and \"dask.array.linalg.svd_compressed\"\r\n\r\n<details>\r\n<summary>test.py</summary>\r\n\r\n```python\r\nimport sys\r\nimport time\r\nimport numpy as np\r\nfrom opt_einsum import contract\r\n\r\nfrom dask.distributed import Client\r\nfrom dask_cuda import LocalCUDACluster\r\nfrom dask_cuda.initialize import initialize\r\nfrom dask.utils import parse_bytes\r\nfrom dask.distributed import performance_report\r\nfrom dask.distributed import wait\r\nfrom dask.distributed import get_task_stream\r\n\r\nimport cupy\r\nimport rmm\r\nimport cudf\r\nimport dask.array as da\r\n\r\n\r\ndef setup_rmm_pool(client):\r\n    client.run(\r\n        cudf.set_allocator,\r\n        pool=False,\r\n        #initial_pool_size= parse_bytes(\"1GB\"),\r\n        allocator=\"default\"\r\n    )\r\n    client.run(\r\n        cupy.cuda.set_allocator,\r\n        #rmm.rmm_cupy_allocator,\r\n        rmm.mr.set_current_device_resource(rmm.mr.ManagedMemoryResource())\r\n    )\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    initialize(create_cuda_context=True)\r\n    \r\n    cluster = LocalCUDACluster(local_directory=\"./tmp/\",\r\n                                memory_limit=None)\r\n       \r\n    client = Client(cluster)\r\n    setup_rmm_pool(client)\r\n\r\n    nprs = np.random.RandomState(seed=1234)\r\n    rs = da.random.RandomState(seed=1234,RandomState=cupy.random.RandomState)\r\n\r\n    SIZE = 10000\r\n    k = 32\r\n\r\n    b = nprs.rand(SIZE) + 1j * nprs.rand(SIZE)\r\n    b = cupy.asarray(b, dtype=cupy.complex128)\r\n    a = contract(\"i,j->ij\",b,b) * 10\r\n    a = cupy.exp(1.2*a)\r\n\r\n    #full svd\r\n    t0 = time.time()\r\n    u,s,vh = cupy.linalg.svd(a)\r\n    t1=time.time()\r\n    del u,vh\r\n    print(\"full svd time: {:.2f} s\".format(t1-t0))\r\n    print(s[:k])\r\n\r\n    a = da.from_array(a, chunks=(5000,5000))\r\n\r\n    #rsvd\r\n    from randomized_svd import rsvd\r\n    t0 = time.time()\r\n    u,s,vh = rsvd(a, k=k, seed=rs)\r\n    u,s,vh = da.compute(u,s,vh) \r\n    t1 = time.time()\r\n    print(\"rsvd time: {:.2f} s\".format(t1-t0))\r\n    print(s)\r\n\r\n    u  = da.from_array(u,chunks=(SIZE,k))\r\n    vh = da.from_array(vh,chunks=(k,SIZE))\r\n    b = da.einsum(\"ij,j,jk->ik\",u,s,vh)\r\n    err = a - b\r\n    tr = da.trace(err).compute()\r\n    print(\"trace:{:19.12e}{:+19.12e}\".format(tr.real,tr.imag))\r\n    materr = da.linalg.norm(err).compute()\r\n    materr = float(materr / da.max(da.abs(a)))\r\n    print(\"err:{:18.12e}\".format(materr))\r\n\r\n\r\n    #dask.array.linalg.svd_compress\r\n    t0 = time.time()\r\n    u,s,vh = da.linalg.svd_compressed(a, k=k, seed=rs)\r\n    u,s,vh = da.compute(u,s,vh) \r\n    t1 = time.time()\r\n    print(\"da.linalg.svd_compress time: {:.2f} s\".format(t1-t0))\r\n    print(s)\r\n\r\n    u  = da.from_array(u,chunks=(SIZE,k))\r\n    vh = da.from_array(vh,chunks=(k,SIZE))\r\n    b = da.einsum(\"ij,j,jk->ik\",u,s,vh)\r\n    err = a - b\r\n    tr = da.trace(err).compute()\r\n    print(\"trace:{:19.12e}{:+19.12e}\".format(tr.real,tr.imag))\r\n    materr = da.linalg.norm(err).compute()\r\n    materr = float(materr / da.max(da.abs(a)))\r\n    print(\"err:{:18.12e}\".format(materr))\r\n\r\n    sys.exit(0)\r\n```\r\n</details>\r\n\r\nThe results are:\r\n<details>\r\n<summary>full svd by using cupy.linalg.svd()</summary>\r\n\r\n```\r\nfull svd time: 86.01 s\r\n[2.58296767e+07 1.05558179e+07 3.38844060e+06 9.88898912e+05\r\n 2.59627169e+05 6.74255883e+04 1.89209066e+04 5.94213692e+03\r\n 2.20050461e+03 8.92638939e+02 3.50820653e+02 1.26915979e+02\r\n 4.22639368e+01 1.30184354e+01 3.72038540e+00 9.90751139e-01\r\n 2.47328075e-01 5.81214650e-02 1.29043303e-02 2.71591129e-03\r\n 5.43455898e-04 1.03658501e-04 1.88871552e-05 3.29431051e-06\r\n 5.51039526e-07 8.85671784e-08 1.37849358e-08 6.26629286e-09\r\n 5.37837639e-09 5.31998482e-09 5.17301750e-09 5.07648171e-09]\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>ramdomized svd by using my function \"rsvd()\"</summary>\r\n\r\n```\r\nrsvd time: 4.72 s\r\n[2.58296767e+07 1.05558179e+07 3.38844060e+06 9.88898912e+05\r\n 2.59627169e+05 6.74255883e+04 1.89209066e+04 5.94213692e+03\r\n 2.20050461e+03 8.92638939e+02 3.50820653e+02 1.26915979e+02\r\n 4.22639368e+01 1.30184354e+01 3.72038540e+00 9.90751139e-01\r\n 2.47328075e-01 5.81214650e-02 1.29043303e-02 2.71591127e-03\r\n 5.43455901e-04 1.03658517e-04 1.88872026e-05 3.29426812e-06\r\n 5.50886046e-07 8.78125741e-08 1.03905719e-08 2.97395585e-09\r\n 2.87520604e-09 2.74762063e-09 2.67777793e-09 2.61763907e-09]\r\ntrace:-3.837440116878e-09-2.231108248151e-09\r\nerr:4.611527374705e-13\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>ramdomized svd by using dask.array.linalg.svd_compressed()</summary>\r\n\r\n```\r\nda.linalg.svd_compress time: 3.34 s\r\n[1.22753454e+07 3.51378639e+06 1.41504285e+06 2.65017653e+05\r\n 6.59603978e+04 2.11401367e+04 5.50606266e+03 1.51125671e+03\r\n 6.00777209e+02 2.37258157e+02 7.97001757e+01 2.92310333e+01\r\n 8.82265661e+00 2.17949256e+00 5.76741777e-01 1.48938971e-01\r\n 3.01250371e-02 7.56122991e-03 1.67292376e-03 3.35416451e-04\r\n 7.11668163e-05 1.36569683e-05 2.32605468e-06 3.61926695e-07\r\n 5.14757978e-08 6.07435046e-09 2.95743600e-09 2.66944135e-09\r\n 2.56615446e-09 2.42686096e-09 2.35138792e-09 2.28905663e-09]\r\ntrace: 1.585523226585e+06+4.090091981828e+06\r\nerr:2.223140103552e+02\r\n```\r\n</details>\r\n\r\nI calculated the trace and error of matrix $M-M\\'$, in which $M$ is the original matrix, and \r\n$$M_{ik} \\simeq M^\\prime_{ik}=\\sum_{k=1}^{32} U_{ij} \\sigma_{j} V^\\dagger_{jk}.$$\r\nThe error is defined by $\\text{err}=||M-M^\\prime||/||M||$. \r\nThe results show that my code yields a reasonable answer because the trace and error are quite small, and the large singular values are the same as full svd.\r\nBy the way, the skinny matrix svd and tsqr seem to be currect because I used them in my code. But I'm not sure if there are the same bugs (at where should use Hermitian transpose, but have used tranpose matrix for complex matrix) in the code.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1236279296/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1238260261",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-1238260261",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 1238260261,
        "node_id": "IC_kwDOAbcwm85Jzlol",
        "user": {
            "login": "ncclementi",
            "id": 7526622,
            "node_id": "MDQ6VXNlcjc1MjY2MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7526622?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncclementi",
            "html_url": "https://github.com/ncclementi",
            "followers_url": "https://api.github.com/users/ncclementi/followers",
            "following_url": "https://api.github.com/users/ncclementi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncclementi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncclementi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncclementi/subscriptions",
            "organizations_url": "https://api.github.com/users/ncclementi/orgs",
            "repos_url": "https://api.github.com/users/ncclementi/repos",
            "events_url": "https://api.github.com/users/ncclementi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncclementi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-06T14:50:01Z",
        "updated_at": "2022-09-06T14:50:01Z",
        "author_association": "MEMBER",
        "body": "@LUOXIAO92 Thank you for the detailed explanation. By looking at the dask code, we are clearly missing the case for complex numbers. I'm not sure what's the best approach to include this case here, but would you be interested in opening a PR? \r\n\r\nMaybe @ian-r-rose or @jakirkham might have some input here.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1238260261/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1295168428",
        "html_url": "https://github.com/dask/dask/issues/7639#issuecomment-1295168428",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7639",
        "id": 1295168428,
        "node_id": "IC_kwDOAbcwm85NMrOs",
        "user": {
            "login": "nicrie",
            "id": 45175997,
            "node_id": "MDQ6VXNlcjQ1MTc1OTk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/45175997?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nicrie",
            "html_url": "https://github.com/nicrie",
            "followers_url": "https://api.github.com/users/nicrie/followers",
            "following_url": "https://api.github.com/users/nicrie/following{/other_user}",
            "gists_url": "https://api.github.com/users/nicrie/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nicrie/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nicrie/subscriptions",
            "organizations_url": "https://api.github.com/users/nicrie/orgs",
            "repos_url": "https://api.github.com/users/nicrie/repos",
            "events_url": "https://api.github.com/users/nicrie/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nicrie/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-28T15:57:55Z",
        "updated_at": "2022-10-28T15:57:55Z",
        "author_association": "NONE",
        "body": "Perhaps I am wrong, but it seems to me that an easy fix such as replacing all expression in the form of `A.T` to `A.conj().T` should do the trick, no? `conj` creates the conjugates of a matrix which is the identity matrix for real matrices. Therefore, only complex matrices are affected by the change. \r\n\r\nI'd still like to get this work so I will try to make a PR if that's really all what's needed. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1295168428/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]