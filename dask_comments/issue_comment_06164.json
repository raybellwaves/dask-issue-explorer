[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622656418",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622656418",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622656418,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY1NjQxOA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T02:32:43Z",
        "updated_at": "2020-05-02T02:32:43Z",
        "author_association": "MEMBER",
        "body": "For dataframes in particular, we would make another shuffle method around this (alongside `\"disk\"` and `\"tasks\"`) that we would only use with the distributed scheduler.  It would be opt-in at first but if it performs well and robustly then it might take over as default in the future.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622656418/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622662653",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622662653",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622662653,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY2MjY1Mw==",
        "user": {
            "login": "kkraus14",
            "id": 3665167,
            "node_id": "MDQ6VXNlcjM2NjUxNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3665167?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kkraus14",
            "html_url": "https://github.com/kkraus14",
            "followers_url": "https://api.github.com/users/kkraus14/followers",
            "following_url": "https://api.github.com/users/kkraus14/following{/other_user}",
            "gists_url": "https://api.github.com/users/kkraus14/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kkraus14/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kkraus14/subscriptions",
            "organizations_url": "https://api.github.com/users/kkraus14/orgs",
            "repos_url": "https://api.github.com/users/kkraus14/repos",
            "events_url": "https://api.github.com/users/kkraus14/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kkraus14/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T03:37:00Z",
        "updated_at": "2020-05-02T03:37:00Z",
        "author_association": "MEMBER",
        "body": "@mrocklin thanks for taking the time to write this up. It's much appreciated. I've made sure to circulate this to all of the relevant individuals within NVIDIA to make sure people read this and chime in their thoughts and concerns.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622662653/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622663931",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622663931",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622663931,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY2MzkzMQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T03:52:49Z",
        "updated_at": "2020-05-02T03:52:49Z",
        "author_association": "MEMBER",
        "body": "To be clear, this is a pretty early dump of some thoughts.  It's intended\nto be the start of a conversation, not a finished proposal.\n\nOn Fri, May 1, 2020, 8:37 PM Keith Kraus <notifications@github.com> wrote:\n\n> @mrocklin <https://github.com/mrocklin> thanks for taking the time to\n> write this up. It's much appreciated. I've made sure to circulate this to\n> all of the relevant individuals within NVIDIA to make sure people read this\n> and chime in their thoughts and concerns.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/6164#issuecomment-622662653>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTCVYRNJ5EYYWCNSRCLRPOIOPANCNFSM4MXPXLOQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622663931/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622723165",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622723165",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622723165,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjcyMzE2NQ==",
        "user": {
            "login": "madsbk",
            "id": 1041088,
            "node_id": "MDQ6VXNlcjEwNDEwODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1041088?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/madsbk",
            "html_url": "https://github.com/madsbk",
            "followers_url": "https://api.github.com/users/madsbk/followers",
            "following_url": "https://api.github.com/users/madsbk/following{/other_user}",
            "gists_url": "https://api.github.com/users/madsbk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/madsbk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/madsbk/subscriptions",
            "organizations_url": "https://api.github.com/users/madsbk/orgs",
            "repos_url": "https://api.github.com/users/madsbk/repos",
            "events_url": "https://api.github.com/users/madsbk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/madsbk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T06:33:01Z",
        "updated_at": "2020-05-02T06:33:47Z",
        "author_association": "MEMBER",
        "body": "@mrocklin, the `O(n log(n))` tasks and `log(n)` full-dataset communications is when using stages right? Without staging, it is `O(n**2)` tasks and `1` full-dataset communications right?\r\n\r\nAlso, can we avoid the barrier somehow? One of the lessons we learned when implementing dataframe merges using [`explicts-comms`](https://github.com/rapidsai/dask-cuda/blob/branch-0.14/dask_cuda/explicit_comms/dataframe_merge.py) was that the implicit barrier killed the overall performance and increased the memory usage significantly even thought the merge itself was much faster (@rjzamora please correct me if I am wrong). \r\nSomething we also have to keep in mind when exploring approaches that uses external communication libraries.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622723165/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622961797",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622961797",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622961797,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk2MTc5Nw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T14:27:11Z",
        "updated_at": "2020-05-02T14:27:11Z",
        "author_association": "MEMBER",
        "body": "> the O(n log(n)) tasks and log(n) full-dataset communications is when using stages right? Without staging, it is O(n**2) tasks and 1 full-dataset communications right?\r\n\r\nCorrect, up to about n==32 I think.  After that I think we start staging.  (I could have the numbers wrong here.  So when we get to partition counts like 1000 we end up with task counts in the 10000's to 100,000, but not 1,000,000\r\n\r\n> Also, can we avoid the barrier somehow? One of the lessons we learned when implementing dataframe merges using explicts-comms was that the implicit barrier killed the overall performance and increased the memory usage significantly even thought the merge itself was much faster (@rjzamora please correct me if I am wrong).\r\n\r\nThe all-to-all nature means, I think, that computation after the merge is unlikely to start until 90% of the merge computation is done no matter what we do.  However, we can certainly do data movement during that time.  I don't think that I've seen a solution that allows for shuffling as part of a streaming workflow.\r\n\r\nI could be wrong here though.  It sounds like you have real-world experience that says otherwise.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622961797/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622978242",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622978242",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622978242,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk3ODI0Mg==",
        "user": {
            "login": "madsbk",
            "id": 1041088,
            "node_id": "MDQ6VXNlcjEwNDEwODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1041088?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/madsbk",
            "html_url": "https://github.com/madsbk",
            "followers_url": "https://api.github.com/users/madsbk/followers",
            "following_url": "https://api.github.com/users/madsbk/following{/other_user}",
            "gists_url": "https://api.github.com/users/madsbk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/madsbk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/madsbk/subscriptions",
            "organizations_url": "https://api.github.com/users/madsbk/orgs",
            "repos_url": "https://api.github.com/users/madsbk/repos",
            "events_url": "https://api.github.com/users/madsbk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/madsbk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T16:19:59Z",
        "updated_at": "2020-05-02T16:19:59Z",
        "author_association": "MEMBER",
        "body": "> The all-to-all nature means, I think, that computation after the merge is unlikely to start until 90% of the merge computation is done no matter what we do.\r\n\r\nRight, the merge itself is a loose barrier. In  [`explicts-comms`](https://github.com/rapidsai/dask-cuda/blob/branch-0.14/dask_cuda/explicit_comms/dataframe_merge.py) we have to do a barrier initially before the merge can begin, which makes it a big problem. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622978242/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622978811",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622978811",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622978811,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk3ODgxMQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T16:24:14Z",
        "updated_at": "2020-05-02T16:24:14Z",
        "author_association": "MEMBER",
        "body": "Right, in the approach proposed above there isn't an actuall `barrier()` call in order to start.  We have tasks that look like the following:\r\n\r\n```python\r\ndef start_shuffle(df: pandas/cudf.DataFrame) -> None:\r\n    shuffler = get_worker().get_shuffler()\r\n    shuffler.put(df)\r\n    return None\r\n\r\ndef end_shuffle(_, out_partition: int) -> pandas.cudf.DataFrame:\r\n    shuffler = get_worker().get_shuffler()\r\n    df = shuffler.get(out_partition)\r\n    return df\r\n\r\nx = ddf.map_partitions(start_shuffle)\r\ny = some_sort_of_reduction_to_a_single_task(x)\r\nz = expand_back_out_with(end_shuffle, ...)\r\n```\r\n\r\n(sorry for being very informal above.  I hope that that gets the point across)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622978811/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622991643",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622991643",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622991643,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk5MTY0Mw==",
        "user": {
            "login": "kkraus14",
            "id": 3665167,
            "node_id": "MDQ6VXNlcjM2NjUxNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3665167?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kkraus14",
            "html_url": "https://github.com/kkraus14",
            "followers_url": "https://api.github.com/users/kkraus14/followers",
            "following_url": "https://api.github.com/users/kkraus14/following{/other_user}",
            "gists_url": "https://api.github.com/users/kkraus14/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kkraus14/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kkraus14/subscriptions",
            "organizations_url": "https://api.github.com/users/kkraus14/orgs",
            "repos_url": "https://api.github.com/users/kkraus14/repos",
            "events_url": "https://api.github.com/users/kkraus14/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kkraus14/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T17:59:38Z",
        "updated_at": "2020-05-02T17:59:38Z",
        "author_association": "MEMBER",
        "body": "> The currrent \"tasks\" based shuffling method uses O(n log(n)) tasks and log(n) full-dataset communications. This is fine for ~100 partitions, but becomes challenging once you get to 1000 partition datasets. We also have a separate solution around partd, which does things in O(n) tasks, by buffering small shards of the data and using disk as a global communication store. Partd as written doesn't work in a distributed fashion, but we might think about how to do some similar approach in a distributed fashion.\r\n\r\n> Once all of those tasks are done we run some barrier task, and then there are a bunch of other tasks which pull output partitions from the DHT. There is some excess communication here because we aren't thinking about locality for the Dask-DHT nodes, but for now let's just allow that as an allowable cost (my apologies).\r\n\r\n> So great, we get by with 2*n tasks, and probably two full communications. Not great, but it's probably better than what we have now for large shuffle computations.\r\n\r\nTrading off communication complexity for task graph complexity is not a good architecture decision from my perspective. We (NVIDIA) have been pushing on things hard as we have very high performance hardware, but many people don't have this hardware. I.E. on a cloud system where networking isn't nearly as high performance as these machines we're using for benchmarking, the communication overhead is almost always significantly higher than the task graph overhead, even when we get to thousands of input partitions.\r\n\r\nIf there wasn't the task graph performance challenges we have today, we wouldn't be having this conversation as to how to shuffle data more efficiently. We'd likely be bottlenecked by our communication layer / interconnect bandwidth, which is a good bottleneck to have.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622991643/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622995250",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-622995250",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 622995250,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjk5NTI1MA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-02T18:27:52Z",
        "updated_at": "2020-05-02T18:27:52Z",
        "author_association": "MEMBER",
        "body": "Yeah, so maybe we need to dynamically add worker location restrictions to\ntasks based on the dht locations.  This would be the work of the scheduler\nplugin. I would do this in a next stage of work, but maybe it's critical to\ndo at the outset.\n\nOn Sat, May 2, 2020, 10:59 AM Keith Kraus <notifications@github.com> wrote:\n\n> The currrent \"tasks\" based shuffling method uses O(n log(n)) tasks and\n> log(n) full-dataset communications. This is fine for ~100 partitions, but\n> becomes challenging once you get to 1000 partition datasets. We also have a\n> separate solution around partd, which does things in O(n) tasks, by\n> buffering small shards of the data and using disk as a global communication\n> store. Partd as written doesn't work in a distributed fashion, but we might\n> think about how to do some similar approach in a distributed fashion.\n>\n> Once all of those tasks are done we run some barrier task, and then there\n> are a bunch of other tasks which pull output partitions from the DHT. There\n> is some excess communication here because we aren't thinking about locality\n> for the Dask-DHT nodes, but for now let's just allow that as an allowable\n> cost (my apologies).\n>\n> So great, we get by with 2*n tasks, and probably two full communications.\n> Not great, but it's probably better than what we have now for large shuffle\n> computations.\n>\n> Trading off communication complexity for task graph complexity is not a\n> good architecture decision from my perspective. We (NVIDIA) have been\n> pushing on things hard as we have very high performance hardware, but many\n> people don't have this hardware. I.E. on a cloud system where networking\n> isn't nearly as high performance as these machines we're using for\n> benchmarking, the communication overhead is almost always significantly\n> higher than the task graph overhead, even when we get to thousands of input\n> partitions.\n>\n> If there wasn't the task graph performance challenges we have today, we\n> wouldn't be having this conversation as to how to shuffle data more\n> efficiently. We'd likely be bottlenecked by our communication layer /\n> interconnect bandwidth, which is a good bottleneck to have.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/6164#issuecomment-622991643>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTCMXVTBNEDDB4JVDVTRPRNRNANCNFSM4MXPXLOQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622995250/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/636279631",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-636279631",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 636279631,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjI3OTYzMQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-30T05:26:55Z",
        "updated_at": "2020-05-30T05:26:55Z",
        "author_association": "MEMBER",
        "body": "cc @fjetter in case this interests you",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/636279631/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/637378530",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-637378530",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 637378530,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzM3ODUzMA==",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-02T08:26:24Z",
        "updated_at": "2020-06-02T08:26:24Z",
        "author_association": "MEMBER",
        "body": "> If there wasn't the task graph performance challenges we have today, we wouldn't be having this conversation as to how to shuffle data more efficiently. We'd likely be bottlenecked by our communication layer / interconnect bandwidth, which is a good bottleneck to have.\r\n\r\nIndeed, we (Blue Yonder) are currently bottlenecked by available memory and available network bandwidth but rarely by scheduler overhead. For this we created #6259. \r\nWe're usually only hit by scheduler overhead if the input data is partitioned to granularly which is when we repartition (and optimize/fuse) before we start shuffling.\r\n\r\n@crepererum made a good point there about out-of-band communication of the payload data which may tie in quite well with this approach of using a DHT (if the complexity this introduces is something we'd consider feasible)\r\n\r\nHowever, pragmatically speaking, I don't think we're actually trading in communication complexity but for most scenarios keep it as is or improve it. Currently we have one full communication per stage. The number of stages we need for the reshuffling scales with `log(N)` but just to make it very clear, the number of stages is calculated using `ceil(log(N) / log(max_branch))`. To illustrate this I'll keep the constant at the default value (max_branch=32) which is probably true for most users and spell out the critical points:\r\n\r\n| N (partitions) | stages / full comms |\r\n|-|-|\r\n| 10 | 1 |\r\n| 33 | 2 |\r\n| 1025 | 3 |\r\n\r\nSo only for relatively small dataframes with 32 partitions or less we do get away with only one data submission and this case is handled with it's dedicated code path by now (see [here](https://github.com/dask/dask/blob/622c9b453c58d81516485336dbca7a5b3a619513/dask/dataframe/shuffle.py#L471)) which is something we could still allow in the future, if need be.\r\nFor everything else, a constant two is either as bad as before or a significant improvement.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/637378530/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/839661790",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-839661790",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 839661790,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTY2MTc5MA==",
        "user": {
            "login": "madsbk",
            "id": 1041088,
            "node_id": "MDQ6VXNlcjEwNDEwODg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1041088?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/madsbk",
            "html_url": "https://github.com/madsbk",
            "followers_url": "https://api.github.com/users/madsbk/followers",
            "following_url": "https://api.github.com/users/madsbk/following{/other_user}",
            "gists_url": "https://api.github.com/users/madsbk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/madsbk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/madsbk/subscriptions",
            "organizations_url": "https://api.github.com/users/madsbk/orgs",
            "repos_url": "https://api.github.com/users/madsbk/repos",
            "events_url": "https://api.github.com/users/madsbk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/madsbk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-12T10:28:27Z",
        "updated_at": "2021-05-12T10:38:07Z",
        "author_association": "MEMBER",
        "body": "For reference, the Dask-CUDA's implementation of [shuffle](https://github.com/rapidsai/dask-cuda/blob/1d71749c6eed12ec60e175183c40300dcad914f3/dask_cuda/explicit_comms/dataframe/shuffle.py#L207) has been re-implemented and doesn't use more memory than the regular shuffle anymore. \r\nIt is basically a shuffle service that performs the all-to-all communication in a single stage without the involvement of the scheduler. It works with both CUDA and regular Dataframes such as Pandas and cuDF.\r\n\r\nIn order to enable it, simply `import dask_cuda` and set `DASK_EXPLICIT_COMMS=True` or set the `\"explicit-comms\"` key in the Dask configuration and Dask will automatically use the shuffle service.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/839661790/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/839835662",
        "html_url": "https://github.com/dask/dask/issues/6164#issuecomment-839835662",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6164",
        "id": 839835662,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTgzNTY2Mg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-12T14:50:08Z",
        "updated_at": "2021-05-12T14:50:08Z",
        "author_association": "MEMBER",
        "body": "Interesting.  Have you seen substantial performance gains?\n\nOn Wed, May 12, 2021 at 5:28 AM Mads R. B. Kristensen <\n***@***.***> wrote:\n\n> I would like to point to Dask-CUDA's implementation of shuffle\n> <https://github.com/rapidsai/dask-cuda/blob/1d71749c6eed12ec60e175183c40300dcad914f3/dask_cuda/explicit_comms/dataframe/shuffle.py#L207>,\n> which is basically a shuffle service that performs the all-to-all\n> communication in a single stage without the involvement of the scheduler.\n> It works with both CUDA and regular Dataframes such as Pandas and cuDF.\n>\n> In order to enable it, simply import dask_cuda and set\n> DASK_EXPLICIT_COMMS=True or set the \"explicit-comms\" key in the Dask\n> configuration and Dask will automatically use the shuffle service.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/6164#issuecomment-839661790>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTEOUMSRMQ2KI56HPJLTNJJ6BANCNFSM4MXPXLOQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/839835662/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]