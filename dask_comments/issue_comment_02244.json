[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/296405209",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-296405209",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 296405209,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjQwNTIwOQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-22T22:18:34Z",
        "updated_at": "2017-04-22T22:18:34Z",
        "author_association": "MEMBER",
        "body": "I'm glad to see an issue like this.  @jakirkham if you want to start the\nconversation with thoughts or questions you have that might be best.\nOtherwise this issue might be in danger of lingering here.\n\nOn Fri, Apr 21, 2017 at 3:57 PM, jakirkham <notifications@github.com> wrote:\n\n> Opening this issue to discuss supporting stencil operations in Dask. Am\n> interested to see a nice wrapper function or functions that do a reasonably\n> good job at wrapping up common case stencil function APIs. Also should work\n> for users interested in adding their own custom stencil operations. Just a\n> few cases and relevant discussions are listed below. As suggested elsewhere\n> by @mrocklin <https://github.com/mrocklin>, these might benefit from\n> using map_overlap for the implementation.\n>\n> It may make more sense to hash this out after we have tried to handle a\n> few cases. Then again a good wrapper could really open the door for a lot\n> of cool operations in Dask or with Dask much faster.\n>\n> cc @rabernat <https://github.com/rabernat> @mrocklin\n> <https://github.com/mrocklin>\n>\n> xref: #2241 <https://github.com/dask/dask/issues/2241>\n> xref: #2147 <https://github.com/dask/dask/issues/2147>\n> xref: #2132 (comment)\n> <https://github.com/dask/dask/issues/2132#issuecomment-290107519>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/2244>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszDy2Ew2cb2-LdpA9ZzU2CHSBqS3Sks5ryQoNgaJpZM4NEuCe>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/296405209/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/296415102",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-296415102",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 296415102,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjQxNTEwMg==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-23T02:32:29Z",
        "updated_at": "2017-04-23T02:32:29Z",
        "author_association": "MEMBER",
        "body": "I opened this issue mainly because there were particular cases of this problem that I was trying to solve. Perhaps it was a bit premature to open this right now. I think it will be easier to determine an answer to the question raised here after we solve some specific use cases and gain some intuition.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/296415102/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/296801345",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-296801345",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 296801345,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjgwMTM0NQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-24T19:43:50Z",
        "updated_at": "2017-04-24T19:43:50Z",
        "author_association": "MEMBER",
        "body": "OK.  If there aren't particular thoughts or questions then I'll go ahead and close this.  If you feel like starting the conversation again please do so, I would like to see progress on this topic.  I think that a good start to such a conversation would be a few options of things that we could try, or a description of the conversation so far and what issues and choices have arisen.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/296801345/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/296813940",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-296813940",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 296813940,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjgxMzk0MA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-24T20:34:01Z",
        "updated_at": "2017-04-24T20:34:01Z",
        "author_association": "MEMBER",
        "body": "I guess I'm a bit confused. It seems like you were interested in seeing this issue opened. Why close it then? That said, I have no real complaints as it will probably sit for a bit. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/296813940/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/296814755",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-296814755",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 296814755,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjgxNDc1NQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-24T20:36:57Z",
        "updated_at": "2017-04-25T01:36:09Z",
        "author_association": "MEMBER",
        "body": "Though I do have a small observation. One thing that I have encountered is often filters specify an `origin` that is used to store the result of the filter. Currently `map_overlap` or ghosting operations don't really have a way to factor this in directly. Though different origins seem to have an effect on how overlaps are determined.\r\n\r\nEdit: Raised issue ( https://github.com/dask/dask/issues/2254 ) to discuss this particular point.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/296814755/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/296819288",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-296819288",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 296819288,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjgxOTI4OA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-24T20:54:01Z",
        "updated_at": "2017-04-24T20:54:01Z",
        "author_association": "MEMBER",
        "body": "If you're interested in starting conversation then that would be great.  At the moment what I see here is \"here is a place for people to talk about stencil operations\".  Instead I think that an issue would be better phrased as \"Here is what we know about stencil operations in Dask: ...  It seems that we have the following options: ...  Given these objectives and constraints how should we proceed?\"  \r\n\r\nAs it is not clear to me how I or others can push this issue forward without doing the work of setting up the background and identifying the paths forward as suggested above.  I don't personally see value in having \"a place to talk about stencil operations\" without such context.  If someone does do the work to write out the background and sketch out some options they can create a github issue at any time.  Until then I wouldn't mind keeping things lean. \r\n\r\nI see that you have done some of the background here by linking to other issues (thanks!) You also provide that we want to support common stencil operations as well as user defined stencil functions.  It would be really useful to outline what these are and what other cases might be.  You say that a few cases are listed below.  I suspect that this refers to the referenced issues.  For the benefit of readers here it might be good explicilty listing them here so that people don't have to dive through many other issues.  You say that performance might be an issue and that we might try to make it better; it might be helpful to say how it might be an issue and what in particular we should expect as bottlenecks and how we might address them.  \r\n\r\nSorry to be a bit pedantic here.  As I said I'm in favor of better supporting stencil operations.  I think that I probably personally misinterpreted this issue as \"hey, other people should think about stencil operations\", which probably wasn't the intent.  I was probably a bit rushed at the time.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/296819288/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/296825240",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-296825240",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 296825240,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjgyNTI0MA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-24T21:18:45Z",
        "updated_at": "2017-04-24T21:18:45Z",
        "author_association": "MEMBER",
        "body": "So probably how I should have responded instead is with questions:\r\n\r\n1.  What are common operations?  Are these common just for your application space or do you have a sense of what is common in other domains?\r\n2.  What are some ways in which users might want to define custom operations that we wouldn't want to include standard?\r\n3.  Are there existing APIs that we can copy to avoid creating new APIs?  This tends to involve a fair amount of maintenance.   Alternatively, should we consider this as a spinoff package?\r\n4.  What are the performance expectations and performance issues of stencil operations?\r\n\r\nThank you for your effort in bringing this up @jakirkham .  Hopefully we can impose on you a bit further.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/296825240/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/299513568",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-299513568",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 299513568,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTUxMzU2OA==",
        "user": {
            "login": "gmocornejos",
            "id": 4778547,
            "node_id": "MDQ6VXNlcjQ3Nzg1NDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4778547?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmocornejos",
            "html_url": "https://github.com/gmocornejos",
            "followers_url": "https://api.github.com/users/gmocornejos/followers",
            "following_url": "https://api.github.com/users/gmocornejos/following{/other_user}",
            "gists_url": "https://api.github.com/users/gmocornejos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gmocornejos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gmocornejos/subscriptions",
            "organizations_url": "https://api.github.com/users/gmocornejos/orgs",
            "repos_url": "https://api.github.com/users/gmocornejos/repos",
            "events_url": "https://api.github.com/users/gmocornejos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gmocornejos/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-05-05T16:35:54Z",
        "updated_at": "2017-05-05T16:35:54Z",
        "author_association": "NONE",
        "body": "Hello! \r\n\r\nIn my experience, the general use of stencils operations is to approximate a Laplacian operation, for example, you have a linear differential equation that represents some physical process: heat transmission, fluid dynamics, magneto-dynamics, etc, with a small enough grid, you can get  a good approximation of the dynamic behavior of the system. \r\nMaybe I am not too creative, but I can't find another use for stencil operations, filter for example, are a convolution of a Laplacian operator over the grid.\r\nConsidering this, map_blocks and map_overlap together with array.ghost.ghost and array.ghost.trim are enough (again, this is only my opinion), programmer just have to specify a function (the laplacian operator). This function can come from another package or be hand-written (in general, they are short an simple functions).\r\n\r\nMy real concern with stencil operations in Dask is performance, consider the following code:\r\n\r\n    def local_stencil(block):\r\n        block[1:-1,1:-1,1:-1] = ( block[1:-1,1:-1,1:-1] + block[0:-2,1:-1,1:-1] + block[2:,1:-1,1:-1] + block[1:-1,0:-2,1:-1] + block[1:-1,2:,1:-1] + block[1:-1,1:-1,0:-2] + block[1:-1,1:-1,2:]) / 7.0;\r\n        return block\r\n\r\n    def stencil(grid, iterations, workers):\r\n        g = grid.map_overlap(local_stencil, depth={0:1, 1:1, 2:1}, boundary={0:0, 1:255, 2:0})\r\n        for iteration in range(iterations-1):\r\n            g = g.map_overlap(local_stencil, depth={0:1, 1:1, 2:1}, boundary={0:0, 1:255, 2:0})\r\n        return g\r\n\r\nEvery convolution of the laplacian operator over the grid represents a little time-step, to get to final the state of the system you have to apply the operator in a iterative fashion, the problem with doing this in Dask is that every call to array.ghost.map_overlap() or any other combination of functions available through array.ghost implies extending original array with boundaries, ghost cells, applying the given function to every chunk an then trimming boundaries and ghost cells again, this impose a unnecessary overheat, as shown in the figure bellow, dask version was bechmarked against a numpy version. \r\n\r\n![stencil_dask](https://cloud.githubusercontent.com/assets/4778547/25754108/50b437a6-317b-11e7-9426-e01ac911ddc3.png)\r\n\r\nA more suitable workflow would be to extend original array with boundaries, ghosting, applying the given function and then ghosting again (exchanging neighboring cells), and at the end trimming boundaries and ghost cells. \r\n\r\nI know that dask.array is not mutable, but chunks are simple numpy.array, so they are mutable and as far as I can see, this suggestion is implementable without changing a big portion of code. Actually, I tried the following:\r\n\r\nIn dask/array/ghost.py  I added a new function called new_map_overlap(), it is almost identical to original map_overlap(), but receives an extra key argumen: iterations, by default in 1, also it has a for loop that makes the \"iterative convolution\", in each iteration it calls ghost_internal() to exchange ghost cells.\r\n\r\n    def new_map_overlap(x, func, depth, boundary=None, trim=True, iterations=1, **kwargs):\r\n        depth2 = coerce_depth(x.ndim, depth)\r\n        boundary2 = coerce_boundary(x.ndim, boundary)\r\n\r\n        g = ghost(x, depth=depth2, boundary=boundary2)\r\n        for iteration in range(iterations):\r\n            g = g.map_blocks(func, **kwargs)\r\n            g = ghost_internal(g, depth2)        \r\n        if trim:\r\n            g3 = add_dummy_padding(g, depth2, boundary2)\r\n            return trim_internal(g3, depth2)\r\n        else:\r\n            return g\r\n\r\nThis code works awesome! Delivers the right answer in a sorter time than original map_overlap(). My hope was to present here some results, but my knowledge of dask internal implementation is not very wide and new_map_overlap() fails with more than 1 worker (I set number of workers with dask.set_options(pool=ThreadPool(num_of_workers)), so I had only tested this in a multithreading environment, not multiprocess, but it should work, I guess...)\r\n\r\nSo, if you think this is a good suggestion I would be happy to contribute and learning a little more about Dask. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/299513568/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/304900755",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-304900755",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 304900755,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDkwMDc1NQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-05-30T14:43:51Z",
        "updated_at": "2017-05-30T14:43:51Z",
        "author_association": "MEMBER",
        "body": "Hi @gmocornejos thank you for the writeup and profiling.  I apologize for letting this linger for so long (I have been at conferences most of last month). \r\n\r\nI agree with you that for laplacian-style operations we're likely to be heavily bound by memory-copies and stitching together of the current map_overlap operation.  I also agree with you that combining multiple iterations into a single task is probably the right way to amortize this cost.\r\n\r\nIt is important that tasks do not modify inputs in place (bad things can sometimes result if we do so), however we can always take inputs, create new copies, and then modify them extensively within our function.  This is where your suggestion of doing multiple iterations at once seems to come in.  \r\n\r\nSo perhaps a `map_overlap_iter` function (or with some better name) could exist that took an `interations=` keyword as you suggest.  Presumably it would have to get a larger depth than the user requests.  Something like `depth2 = depth * iterations`.  \r\n\r\nThoughts?   ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/304900755/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/306637942",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-306637942",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 306637942,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjYzNzk0Mg==",
        "user": {
            "login": "gmocornejos",
            "id": 4778547,
            "node_id": "MDQ6VXNlcjQ3Nzg1NDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4778547?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmocornejos",
            "html_url": "https://github.com/gmocornejos",
            "followers_url": "https://api.github.com/users/gmocornejos/followers",
            "following_url": "https://api.github.com/users/gmocornejos/following{/other_user}",
            "gists_url": "https://api.github.com/users/gmocornejos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gmocornejos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gmocornejos/subscriptions",
            "organizations_url": "https://api.github.com/users/gmocornejos/orgs",
            "repos_url": "https://api.github.com/users/gmocornejos/repos",
            "events_url": "https://api.github.com/users/gmocornejos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gmocornejos/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-06-06T22:41:16Z",
        "updated_at": "2017-06-06T22:41:16Z",
        "author_association": "NONE",
        "body": "Hi! \r\n\r\nGreat! I think this little change will improve performance in some of my programs. About the function name, I think it is more related with API design, I don't have much experience in that field...\r\n\r\nSorry, maybe I don't understand all the `depth2 = depth * iterations` thing. As I understand, depth parameter means how many cells should be ghosted, why would it depend on `iterations`? I have the feeling that what is wrong with the code snipped above, a changed it a little:\r\n\r\n    def new_map_overlap(x, func, depth=1, boundary=None, trim=True, iterations=1, **kwargs):\r\n        depth2 = coerce_depth(x.ndim, depth)\r\n        boundary2 = coerce_boundary(x.ndim, boundary)\r\n        \r\n        g = boundaries(x, depth2, boundary2)\r\n        g = ghost_internal(g, depth2)\r\n        trim = dict((k, v * 2 if boundary2.get(k, 'none') != 'none' else 0)\r\n                     for k, v in depth2.items())\r\n        g = chunk.trim(g, trim)\r\n        for iteration in range(iterations):\r\n            g = g.map_blocks(func, **kwargs)\r\n            g = ghost_internal(g, depth2)\r\n        if trim:\r\n            g2 = add_dummy_padding(g, depth2, boundary2)\r\n            return trim_internal(g2, depth2)\r\n        else:\r\n            return g\r\n\r\nIt works as expected with one workers, but with more than one, it breaks.  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/306637942/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/306640409",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-306640409",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 306640409,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjY0MDQwOQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-06-06T22:55:27Z",
        "updated_at": "2017-06-06T22:55:27Z",
        "author_association": "MEMBER",
        "body": "`ghost_internal`  still does a few copies and is probably fairly expensive (depending on how cheap your per-chunk function is).  By ghosting a greater depth once you might then be able to map several times before having to ghost again.\r\n\r\nI don't know why your computations are failing with multiple workers.  My guess is that you are operating on data in-place.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/306640409/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/307247828",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-307247828",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 307247828,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzI0NzgyOA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-06-08T22:46:13Z",
        "updated_at": "2017-06-08T22:46:13Z",
        "author_association": "MEMBER",
        "body": "Not sure if this is related to the current discussion, but it would be really neat if Dask could fuse sequential `map_overlap` calls.\r\n\r\nFor instance it is not uncommon to say apply a few filters in sequence that may be of different kinds (e.g. a median filter and a Gaussian filter) on the same data. Morphological operators fall in this same category.\r\n\r\nChained filters (where `A` and `B` are some regular Python functions):\r\n\r\n```\r\ninput -> map_overlap(A) -> map_overlap(B) -> output\r\n```\r\n\r\nFused `map_overlap` calls (where `AB` is `input block -> A -> B -> output block`):\r\n\r\n```\r\ninput -> map_overlap(AB) -> output\r\n```\r\n\r\nCould also see element-wise operators going through a similar fusion if they were inbetween `map_overlap` calls (e.g. type casting, scalar multiplication, etc.).\r\n\r\nI'm not totally sure how we go about tackling this in the current framework, but expect it also applies if one wants to iteratively apply the same filter.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/307247828/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/307248518",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-307248518",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 307248518,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzI0ODUxOA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-06-08T22:50:15Z",
        "updated_at": "2017-06-08T22:50:15Z",
        "author_association": "MEMBER",
        "body": "@jakirkham it sounds like you're talking about optimizations.  This page\nmay be of use to you: http://dask.pydata.org/en/latest/optimize.html\n\nOn Thu, Jun 8, 2017 at 6:46 PM, jakirkham <notifications@github.com> wrote:\n\n> Not sure if this is related to the current discussion, but it would be\n> really neat if Dask could fuse sequential map_overlap calls.\n>\n> For instance it is not uncommon to say apply a few filters in sequence\n> that may be of different kinds (e.g. a median filter and a Gaussian filter)\n> on the same data. Morphological operators fall in this same category.\n>\n> Chained filters (where A and B are some regular Python functions):\n>\n> input -> map_overlap(A) -> map_overlap(B) -> output\n>\n> Fused map_overlap calls (where AB is input block -> A -> B -> output block\n> ):\n>\n> input -> map_overlap(AB) -> output\n>\n> Could also see element-wise operators going through a similar fusion if\n> they were inbetween map_overlap calls (e.g. type casting, scalar\n> multiplication, etc.).\n>\n> I'm not totally sure how we go about tackling this in the current\n> framework, but expect it also applies if one wants to iteratively apply the\n> same filter.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/2244#issuecomment-307247828>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszIejJsZQ7hdSxWebTVPAzV7mM_ryks5sCHm1gaJpZM4NEuCe>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/307248518/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/307472470",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-307472470",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 307472470,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ3MjQ3MA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-06-09T18:58:41Z",
        "updated_at": "2017-06-09T18:58:41Z",
        "author_association": "MEMBER",
        "body": "I took a look at the list and I'm not totally sure how to apply them to this problem yet. The trick is that `map_overlap` ends up adding a bunch of stuff to the graph, which could prove tricky to optimize (especially while avoiding creating new problems).\r\n\r\nIn general, I think we would be better off to keep the problem in a form nearly identical to the one diagrammed above. This makes any operations one would apply to the DAG quite straightforward. Also it would avoid mucking with things like `getitem` in the operations, which could have unforeseen consequences.\r\n\r\nOne solution might be to use a Lisp style quote. Would `da.quote` work here? How does one \"`unquote`\" in Dask? If we could handle these sorts of operations, we could do the optimization on the simple DAG and then unfold the `map_overlap` afterwards.\r\n\r\nAlternatively I could see adding another function like `map_overlap_quoted` or similar that acts as a stand-in for `map_overlap`. Then one could do an optimization that consolidates the `map_overlap_quoted` instances. After consolidating the `map_overlap_quoted` calls, a rewrite rule could replace `map_overlap_quoted` with `map_overlap` (or possible evaluate `map_overlap`) creating the DAG.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/307472470/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/489872582",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-489872582",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 489872582,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4OTg3MjU4Mg==",
        "user": {
            "login": "gbaier",
            "id": 3514198,
            "node_id": "MDQ6VXNlcjM1MTQxOTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3514198?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gbaier",
            "html_url": "https://github.com/gbaier",
            "followers_url": "https://api.github.com/users/gbaier/followers",
            "following_url": "https://api.github.com/users/gbaier/following{/other_user}",
            "gists_url": "https://api.github.com/users/gbaier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gbaier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gbaier/subscriptions",
            "organizations_url": "https://api.github.com/users/gbaier/orgs",
            "repos_url": "https://api.github.com/users/gbaier/repos",
            "events_url": "https://api.github.com/users/gbaier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gbaier/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-05-07T01:37:23Z",
        "updated_at": "2019-05-07T01:37:23Z",
        "author_association": "NONE",
        "body": "Are there any updates on this? My use case is somewhat related to stencil operations. Essentially after one call of `map_blocks`, where the mapped function also writes to the overlapped regions, I need to also aggregate all results. The exact application are denoising algorithms similar to BM3D.\r\n\r\nMy idea how to implement this is the following:\r\n1. Implement `overlap_aggregate(x, func, depth)` which applies `func` on all regions that overlap in the original array and also writes the result to ``x``. Essentially accesses the boundaries of neighboring blocks akin to `overlap_internal`.\r\n2. Implement `overlap_update(x, depth)` to copy the new **x** to the overlapping areas. This is essentially `overlap` without the trimming and adding the overlap to each chunk.\r\n\r\nA complete stencil application would work like this\r\n```\r\nx_ov = overlap(x, depth, boundary)\r\n\r\nfor _ in range(niter):\r\n    x_ov = map_blocks(x_ov, func, **kwargs)\r\n    # this is specific to my use case and uneeded for simple stencil functions\r\n    x_ov_aggr = overlap_aggregate(x_ov, func, depth)\r\n    x_ov = overlap_update(x, depth)\r\n\r\n# final result\r\nx_res =  trim_overlap(x_ov, depth, boundary)\r\n```\r\nIf nobody is working on this issue and there are no objections I would get started.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/489872582/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/505419483",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-505419483",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 505419483,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTQxOTQ4Mw==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-25T12:20:10Z",
        "updated_at": "2019-06-25T12:20:10Z",
        "author_association": "MEMBER",
        "body": "@gbaier, very cool use case.\r\n\r\n@jni and I worked on something similar not too long ago for a connected components implementation, which might be a useful starting point for you. We [perform our `map_blocks` step]( https://github.com/dask/dask-image/blob/1a78285cd53a5988ee638937842246aa537bb576/dask_image/ndmeasure/__init__.py#L237 ), [find slices for overlapping regions]( https://github.com/dask/dask-image/blob/8ff0f16dba8a874c7d8d3adf4e5e8bac5f4ee1bf/dask_image/ndmeasure/_utils/_label.py#L157 ), [operate on those overlapping regions]( https://github.com/dask/dask-image/blob/8ff0f16dba8a874c7d8d3adf4e5e8bac5f4ee1bf/dask_image/ndmeasure/_utils/_label.py#L161 ), [aggregate the results]( https://github.com/dask/dask-image/blob/8ff0f16dba8a874c7d8d3adf4e5e8bac5f4ee1bf/dask_image/ndmeasure/_utils/_label.py#L163-L165 ), and [perform a global update]( https://github.com/dask/dask-image/blob/1a78285cd53a5988ee638937842246aa537bb576/dask_image/ndmeasure/__init__.py#L244-L246 ).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/505419483/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661274729",
        "html_url": "https://github.com/dask/dask/issues/2244#issuecomment-661274729",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2244",
        "id": 661274729,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTI3NDcyOQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-20T19:00:29Z",
        "updated_at": "2020-07-20T19:00:29Z",
        "author_association": "MEMBER",
        "body": "May also be worth engaging with [the devito project]( https://github.com/devitocodes/devito ), which uses Dask and is concerned with stencils.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661274729/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]