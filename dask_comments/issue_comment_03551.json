[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/394036043",
        "html_url": "https://github.com/dask/dask/issues/3551#issuecomment-394036043",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3551",
        "id": 394036043,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDAzNjA0Mw==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-01T23:38:50Z",
        "updated_at": "2018-06-01T23:38:50Z",
        "author_association": "MEMBER",
        "body": "Would the `dask.optimize` function work for you? This runs the default optimization for that collection and returns an equivalent collection. This coupled with [optimization customization](http://dask.pydata.org/en/latest/optimize.html#customizing-optimization) may yield what you want without requiring us to add additional api.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/394036043/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/395561914",
        "html_url": "https://github.com/dask/dask/issues/3551#issuecomment-395561914",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3551",
        "id": 395561914,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTU2MTkxNA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-07T20:55:35Z",
        "updated_at": "2018-06-07T20:55:35Z",
        "author_association": "MEMBER",
        "body": "@crusaderky any update here?  Does dask.optimize work?  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/395561914/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/395598348",
        "html_url": "https://github.com/dask/dask/issues/3551#issuecomment-395598348",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3551",
        "id": 395598348,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTU5ODM0OA==",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-07T23:33:55Z",
        "updated_at": "2018-06-07T23:33:55Z",
        "author_association": "MEMBER",
        "body": "Sorry, #3549 has been taking all of my time recently - I still have to figure this one out.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/395598348/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/396008005",
        "html_url": "https://github.com/dask/dask/issues/3551#issuecomment-396008005",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3551",
        "id": 396008005,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjAwODAwNQ==",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-10T00:07:37Z",
        "updated_at": "2018-06-10T01:22:34Z",
        "author_association": "MEMBER",
        "body": "So I assume you mean this:\r\n```\r\nwith dask.config.set(array_optimize=dask.optimization.cull):\r\n    b, = dask.optimize(a)\r\n```\r\nThis COULD work, and removes the need for changing the dask collection interface.\r\n\r\n# Problem 1\r\nOne major problem with writing the above all over the user code is that if there is a typo in ``array_optimize``, there won't be any crash but the user application will slow down. The slowdown will most likely be unnoticeable until you run everything with production-sized data, which is very likely not to happen until very late in a given development cycle (either because of laziness in setting up the CI tests, or because running a whole production dataset costs money).\r\n\r\nThis could be solved by having dask.optimize accept the kwargs ``array_optimize=None``, ``             dataframe_optimize=None``, ``delayed_optimize=None``:\r\n```\r\nb, = dask.optimize(a, array_optimize=dask.optimization.cull)\r\n```\r\nThis change by itself however would be useless as ``dask.array.optimization.optimize``, ``dask.dataframe.optimize.optimize``, and ``dask.bag.core.optimize`` silently discard any unexpected kwargs:\r\n```\r\nb, = dask.optimize(a, blah=1)  # this should crash but doesn't\r\n```\r\nI see the same unused argument ``**kwargs`` in all 3 functions; was it deliberate? What's the rationale behind it? Can it be removed?\r\n\r\n# Problem 2\r\nI'm writing an intermediate optimization function which only needs to tamper with the top level keys (``__dask_keys__()``). This function will need to be called tens of thousands of time across my application, so I wrote it as follows:\r\n```\r\ndef my_oz(dsk, keys, fast=True):\r\n    \"\"\"\r\n    Parameters\r\n    ----------\r\n    dsk : dict-like\r\n        Dask graph\r\n    keys: list\r\n        Keys of the graph that need to be preserved\r\n    fast: bool\r\n        If True and dsk is a :class:`~dask.sharedict.ShareDict`, do not inspect\r\n        dicts that are not expected to contain the keys. This is safe only\r\n        if all keys are top-level keys of dask collections and the ShareDict\r\n        was built in a standard way.\r\n\r\n    Returns\r\n    -------\r\n    If fast is True and dsk is a ShareDict, a new ShareDict where some of\r\n    the dicts have been replaced with new ones. Otherwise, a new dict.\r\n    In both cases, the original is unaltered.\r\n    \"\"\"\r\n    keys = set(flatten(keys))\r\n\r\n    def _my_actual_oz(this_dsk):\r\n        \"\"\"Actual optimization function. Acquires a dict and returns a new optimized dict.\r\n        \"\"\"\r\n        # snip\r\n\r\n    if not fast or not isinstance(dsk, ShareDict):\r\n        return _my_actual_oz(ensure_dict(dsk))\r\n\r\n    names = {k[0] if type(k) is tuple else k for k in keys}\r\n    out = ShareDict()\r\n    out.dicts = {\r\n        key_i: (_my_actual_oz(dsk_i) if key_i in names else dsk_i)\r\n        for key_i, dsk_i in dsk.dicts.items()\r\n    }\r\n    return out\r\n```\r\n\r\nThe issue is that ``dask.optimize`` does not seem to care and blindly invokes ``ensure_dict`` on the ShareDict I just returned, nullifying my effort. This would need to be fixed.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/396008005/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/396009303",
        "html_url": "https://github.com/dask/dask/issues/3551#issuecomment-396009303",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3551",
        "id": 396009303,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjAwOTMwMw==",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-10T00:35:25Z",
        "updated_at": "2018-06-14T13:51:33Z",
        "author_association": "MEMBER",
        "body": "Re. problem 1:\r\nI now understand that the dummy **kwargs are there to allow for _additional_ optimization functions using the ``optimizations`` param. A poor design IMHO.\r\n\r\nA proposed solution is to remove that **kwargs from the default optimization functions, and add logic to dask.optimize that will (1) pass kwargs only to the custom optimization functions and (2) if there's none, verify that kwargs is empty.\r\n\r\nAnother, and in my opinion much cleaner, approach, is to break the API and not to accept kwargs at all. If somebody needs them, they'll have to pass a ``partial`` object.\r\n\r\nAlso for the purpose of not using the typo-prone dask.config, dask.optimize could gain a default_optimizations=True kwarg:\r\n\r\n```\r\nb, = dask.optimize(a, optimizations=[myoz], default_optimizations=False)\r\n```\r\n\r\nRe. problem 2:\r\nThis is also for the same reason. Of course when you are going through a sequence of multiple optimization functions, you do want to invoke ensure_dict before you even start - IF you do not expect the optimization functions to be ShareDict-aware!\r\n\r\nThis could be solved by\r\n1. removing ensure_dict from the dask.optimize wrapper\r\n2. adding ensure_dict at the top of all functions in ``dask.optimization`` (it's a no-op when you run it on a dict)\r\n3. notifying the users that they need to do the same in their own custom optimization functions, or they'll suddendly receive a ShareDict and perform abysmally slow.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/396009303/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/396010414",
        "html_url": "https://github.com/dask/dask/issues/3551#issuecomment-396010414",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3551",
        "id": 396010414,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjAxMDQxNA==",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-10T00:58:20Z",
        "updated_at": "2018-06-14T13:54:05Z",
        "author_association": "MEMBER",
        "body": "To be clear: none of the above is necessary with a ``dask.collection.optimization`` variant of the ``dask.optimization`` functions:\r\n\r\n```\r\nfrom ... import optimization as oz\r\ndef cull(coll):\r\n    dsk = coll.__dask_graph__()\r\n    if dsk is None:\r\n        return coll, {}\r\n    dsk = ensure_dict(dsk)\r\n    dsk, _ = oz.cull(dsk, coll.__dask_keys__())\r\n    func, args = coll.__dask_postpersist__()\r\n    return func(dsk, *args)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/396010414/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]