{
    "url": "https://api.github.com/repos/dask/dask/issues/2670",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/2670/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/2670/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/2670/events",
    "html_url": "https://github.com/dask/dask/issues/2670",
    "id": 256336166,
    "node_id": "MDU6SXNzdWUyNTYzMzYxNjY=",
    "number": 2670,
    "title": "Irrelevant columns breaking dask groupby vars, but not means (and not in pandas)",
    "user": {
        "login": "Developer4190",
        "id": 27331480,
        "node_id": "MDQ6VXNlcjI3MzMxNDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/27331480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Developer4190",
        "html_url": "https://github.com/Developer4190",
        "followers_url": "https://api.github.com/users/Developer4190/followers",
        "following_url": "https://api.github.com/users/Developer4190/following{/other_user}",
        "gists_url": "https://api.github.com/users/Developer4190/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Developer4190/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Developer4190/subscriptions",
        "organizations_url": "https://api.github.com/users/Developer4190/orgs",
        "repos_url": "https://api.github.com/users/Developer4190/repos",
        "events_url": "https://api.github.com/users/Developer4190/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Developer4190/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2017-09-08T18:31:21Z",
    "updated_at": "2021-10-12T00:50:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This is from user Laszlo on Stackoverflow (https://stackoverflow.com/questions/46115779/irrelevant-columns-breaking-dask-groupby-vars-but-not-means-and-not-in-pandas)\r\n\r\nBelow is the MCVE of the behavior of an up-to-date dask instance on my system, and contrasts the dask error with pandas using the small CSV quoted at the end of this question.\r\n\r\nSetup:\r\n\r\n```\r\nimport numpy as np\r\nimport dask.dataframe as dd\r\ndf = dd.read_csv('hmda_lar_head_4var.csv',\r\n                 engine='c',\r\n                 usecols=['tract_to_msamd_income','as_of_year','agency_abbr','action_taken_name'],\r\n                 dtype={'tract_to_msamd_income': np.float64,\r\n                        'as_of_year':np.uint16,\r\n                        'agency_abbr':'category',\r\n                        'action_taken_name':'category'\r\n                       })\r\n```\r\nThe line that breaks: df.groupby('as_of_year').var().compute()\r\n\r\nThe error:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\n\r\nValueError                                Traceback (most recent call last)\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/utils.py in raise_on_meta_error(funcname)\r\n    136     try:\r\n--> 137         yield\r\n    138     except Exception as e:\r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/core.py in _emulate(func, *args, **kwargs)\r\n   3058     with raise_on_meta_error(funcname(func)):\r\n-> 3059         return func(*_extract_meta(args, True), **_extract_meta(kwargs, True))\r\n   3060 \r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/compatibility.py in apply(func, args, kwargs)\r\n     46         if kwargs:\r\n---> 47             return func(*args, **kwargs)\r\n     48         else:\r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/groupby.py in _var_agg(g, levels, ddof)\r\n    210     result /= div\r\n--> 211     result[(n - ddof) == 0] = np.nan\r\n    212     assert isinstance(result, pd.DataFrame)\r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/pandas/core/frame.py in __setitem__(self, key, value)\r\n   2425         elif isinstance(key, DataFrame):\r\n-> 2426             self._setitem_frame(key, value)\r\n   2427         else:\r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/pandas/core/frame.py in _setitem_frame(self, key, value)\r\n   2463         self._check_setitem_copy()\r\n-> 2464         self._where(-key, value, inplace=True)\r\n   2465 \r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/pandas/core/generic.py in _where(self, cond, other, inplace, axis, level, try_cast, raise_on_error)\r\n   4952                 if not is_bool_dtype(dt):\r\n-> 4953                     raise ValueError(msg.format(dtype=dt))\r\n   4954 \r\n\r\n\r\nValueError: Boolean array expected for the condition, not float64\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n\r\nValueError                                Traceback (most recent call last)\r\n\r\n<ipython-input-154-4d73414200e5> in <module>()\r\n----> 1 df.groupby('as_of_year').var().compute()\r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/groupby.py in var(self, ddof, split_every, split_out)\r\n    796                      combine_kwargs={'levels': levels},\r\n    797                      split_every=split_every, split_out=split_out,\r\n--> 798                      split_out_setup=split_out_on_index)\r\n    799 \r\n    800         if isinstance(self.obj, Series):\r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/core.py in apply_concat_apply(args, chunk, aggregate, combine, meta, token, chunk_kwargs, aggregate_kwargs, combine_kwargs, split_every, split_out, split_out_setup, split_out_setup_kwargs, **kwargs)\r\n   3010         meta_chunk = _emulate(apply, chunk, args, chunk_kwargs)\r\n   3011         meta = _emulate(apply, aggregate, [_concat([meta_chunk])],\r\n-> 3012                         aggregate_kwargs)\r\n   3013     meta = make_meta(meta)\r\n   3014 \r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/core.py in _emulate(func, *args, **kwargs)\r\n   3057     \"\"\"\r\n   3058     with raise_on_meta_error(funcname(func)):\r\n-> 3059         return func(*_extract_meta(args, True), **_extract_meta(kwargs, True))\r\n   3060 \r\n   3061 \r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/contextlib.py in __exit__(self, type, value, traceback)\r\n     75                 value = type()\r\n     76             try:\r\n---> 77                 self.gen.throw(type, value, traceback)\r\n     78                 raise RuntimeError(\"generator didn't stop after throw()\")\r\n     79             except StopIteration as exc:\r\n\r\n\r\n/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/utils.py in raise_on_meta_error(funcname)\r\n    148                ).format(\" in `{0}`\".format(funcname) if funcname else \"\",\r\n    149                         repr(e), tb)\r\n--> 150         raise ValueError(msg)\r\n    151 \r\n    152 \r\n\r\n\r\nValueError: Metadata inference failed in `apply`.\r\n\r\nOriginal error is below:\r\n------------------------\r\nValueError('Boolean array expected for the condition, not float64',)\r\n\r\nTraceback:\r\n---------\r\n  File \"/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/utils.py\", line 137, in raise_on_meta_error\r\n    yield\r\n  File \"/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/core.py\", line 3059, in _emulate\r\n    return func(*_extract_meta(args, True), **_extract_meta(kwargs, True))\r\n  File \"/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/compatibility.py\", line 47, in apply\r\n    return func(*args, **kwargs)\r\n  File \"/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/dask/dataframe/groupby.py\", line 211, in _var_agg\r\n    result[(n - ddof) == 0] = np.nan\r\n  File \"/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/pandas/core/frame.py\", line 2426, in __setitem__\r\n    self._setitem_frame(key, value)\r\n  File \"/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/pandas/core/frame.py\", line 2464, in _setitem_frame\r\n    self._where(-key, value, inplace=True)\r\n  File \"/Users/laszlo.sandor/miniconda3/envs/idp/lib/python3.5/site-packages/pandas/core/generic.py\", line 4953, in _where\r\n    raise ValueError(msg.format(dtype=dt))\r\nCompare this with the behavior of the line that produces correct results: df.groupby('as_of_year').mean().compute()\r\n\r\n```\r\nIf you set things up in supposedly similar pandas:\r\n\r\n```\r\nimport pandas as pd\r\ndf = pd.read_csv('hmda_lar_head_4var.csv',\r\n                 engine='c',\r\n                 usecols=['tract_to_msamd_income','as_of_year','agency_abbr','action_taken_name'],\r\n                 dtype={'tract_to_msamd_income': np.float64,\r\n                        'as_of_year':np.uint16,\r\n                        'agency_abbr':'category',\r\n                        'action_taken_name':'category'\r\n                       })\r\n```\r\nYou see that both df.groupby('as_of_year').var() and df.groupby('as_of_year').mean() produce the correct results.\r\n\r\nIf you load only two columns, one you are grouping by and another that is meaningful to report the variance for, dask has no problem reporting the variance:\r\n\r\n```\r\nimport numpy as np\r\nimport dask.dataframe as dd\r\ndf = dd.read_csv('hmda_lar_head_4var.csv',\r\n                 engine='c',\r\n                 usecols=['tract_to_msamd_income','as_of_year'],\r\n                 dtype={'tract_to_msamd_income': np.float64,\r\n                        'as_of_year':np.uint16\r\n                       })\r\n```\r\nThis is small comfort, as (I think) you cannot easily specify which columns to calculate groupby methods for, only select ones to report. I.e. some columns can break dask groupby var even if you ask to report only other columns.\r\n\r\nHere is the CSV for MCVE:\r\n\r\ntract_to_msamd_income,as_of_year,agency_abbr,action_taken_name \"85.02999877929688\",\"2007\",\"FRS\",\"Loan originated\" \"103.12000274658203\",\"2007\",\"FRS\",\"Application withdrawn by applicant\" \"127.87000274658203\",\"2007\",\"FRS\",\"Loan originated\" \"103.12000274658203\",\"2007\",\"FRS\",\"Application denied by financial institution\" \"131.14999389648438\",\"2007\",\"FRS\",\"Loan originated\" \"85.02999877929688\",\"2007\",\"FRS\",\"Application withdrawn by applicant\" \"103.12000274658203\",\"2007\",\"FRS\",\"Application withdrawn by applicant\" \"95.76000213623047\",\"2007\",\"FRS\",\"Loan originated\" \"103.12000274658203\",\"2007\",\"FRS\",\"Application withdrawn by applicant\"",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/2670/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/2670/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}