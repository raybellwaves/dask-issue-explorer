{
    "url": "https://api.github.com/repos/dask/dask/issues/9293",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9293/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9293/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9293/events",
    "html_url": "https://github.com/dask/dask/issues/9293",
    "id": 1310836213,
    "node_id": "I_kwDOAbcwm85OIcX1",
    "number": 9293,
    "title": "Dask arrays are replaced with different objects in a forked process worker",
    "user": {
        "login": "pp-mo",
        "id": 2089069,
        "node_id": "MDQ6VXNlcjIwODkwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2089069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pp-mo",
        "html_url": "https://github.com/pp-mo",
        "followers_url": "https://api.github.com/users/pp-mo/followers",
        "following_url": "https://api.github.com/users/pp-mo/following{/other_user}",
        "gists_url": "https://api.github.com/users/pp-mo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pp-mo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pp-mo/subscriptions",
        "organizations_url": "https://api.github.com/users/pp-mo/orgs",
        "repos_url": "https://api.github.com/users/pp-mo/repos",
        "events_url": "https://api.github.com/users/pp-mo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pp-mo/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 386719400,
            "node_id": "MDU6TGFiZWwzODY3MTk0MDA=",
            "url": "https://api.github.com/repos/dask/dask/labels/scheduler",
            "name": "scheduler",
            "color": "D10945",
            "default": false,
            "description": ""
        },
        {
            "id": 386719598,
            "node_id": "MDU6TGFiZWwzODY3MTk1OTg=",
            "url": "https://api.github.com/repos/dask/dask/labels/documentation",
            "name": "documentation",
            "color": "f9d0c4",
            "default": true,
            "description": "Improve or add to documentation"
        },
        {
            "id": 996497175,
            "node_id": "MDU6TGFiZWw5OTY0OTcxNzU=",
            "url": "https://api.github.com/repos/dask/dask/labels/good%20second%20issue",
            "name": "good second issue",
            "color": "5319e7",
            "default": false,
            "description": "Clearly described, educational, but less trivial than \"good first issue\"."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2022-07-20T10:44:36Z",
    "updated_at": "2022-07-29T15:19:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**What happened**:\r\nI create a dask (lazy) array, then schedule an operation in a dask worker, which refers it as a free or global variable (i.e. not as an argument).\r\nWithin the worker code execution, the resulting (lazy) array object does not match the original in the parent code  :\r\n  1. A lazy masked array, accessed by a free variable within a process worker, has the meta type of a \"normal\" numpy array instead of a masked one.\r\n  2. additional custom instance properties on  lazy array do not exist in the worker\r\n  3. the \"id\" of the array object is changed (which does not happen for \"ordinary\" Python objects).\r\n\r\n**What you expected to happen**:\r\nThe array object should appear the same in the worker as in the parent code,\r\n \\-- as it does, when using a \"threads\" or \"synchronous\" scheduler.\r\n\r\nIt's possible that this behaviour is essential, \r\ne.g. because a memory-copied object contains O.S. resources (like file handles) which cannot function in a forked process.\r\nIf so, however, that is really not obvious, and should probably be ***documented somewhere***.\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport dask\r\nimport dask.array as da\r\nimport dask.bag\r\nimport dask.config\r\nimport numpy as np\r\n\r\ntest_maskedarray = np.ma.masked_array(da.arange(3), [0, 0, 1])\r\nglobal_lazy_array = da.from_array(test_maskedarray)\r\nglobal_lazy_array.custom_property = 'exists'\r\n\r\ndef array_details(array):\r\n    result_string = (\r\n        f'  {array}'\r\n        f'\\n  id(x) = {id(array)}'\r\n        f'\\n  type(x._meta) = {type(array._meta)}'\r\n        f'\\n  .custom_property = {getattr(array, \"custom_property\", \"<NONE>\")}'\r\n    )\r\n    return result_string\r\n\r\n@dask.delayed\r\ndef trial_worker(*args):\r\n    result = array_details(global_lazy_array)\r\n    return result\r\n\r\ndef run_case(**compute_kwargs):\r\n    test_delayed_op = trial_worker(0)\r\n    with dask.config.set(**compute_kwargs):\r\n        result = test_delayed_op.compute()\r\n    return result\r\n\r\n\r\nprint(f'array properties IN PARENT:')\r\nprint(array_details(global_lazy_array))\r\n\r\nprint('')\r\nprint(f'array properties WITHIN WORKER (threads) :')\r\nprint(run_case(scheduler='threads'))\r\n\r\n\r\nprint('')\r\nprint(f'array properties WITHIN WORKER (processes) :')\r\nprint(run_case(**{\"scheduler\":'processes', 'multiprocessing.context':\"fork\"}))\r\n```\r\n\r\nSample result:\r\n```\r\narray properties IN PARENT:\r\n  dask.array<array, shape=(3,), dtype=int64, chunksize=(3,), chunktype=numpy.MaskedArray>\r\n  id(x) = 139657291024560\r\n  type(x._meta) = <class 'numpy.ma.core.MaskedArray'>\r\n  .custom_property = exists\r\n\r\narray properties WITHIN WORKER (threads) :\r\n  dask.array<array, shape=(3,), dtype=int64, chunksize=(3,), chunktype=numpy.MaskedArray>\r\n  id(x) = 139657291024560\r\n  type(x._meta) = <class 'numpy.ma.core.MaskedArray'>\r\n  .custom_property = exists\r\n\r\narray properties WITHIN WORKER (processes) :\r\n  dask.array<array, shape=(3,), dtype=int64, chunksize=(3,), chunktype=numpy.ndarray>\r\n  id(x) = 139657290681696\r\n  type(x._meta) = <class 'numpy.ndarray'>\r\n  .custom_property = <NONE>\r\n```\r\n\r\n**Anything else we need to know?**:\r\n  * The same thing happens whether the operation is actioned via a dask Bag or a Delayed computation.\r\n  * The problem is specific to a dask \"processes\" scheduler\r\n     -- results are as expected for a \"synchronous\" or \"threads\" schedulers.\r\n  * replacing dask Bag/Delayed parallelism with a `concurrent.futures.ProcessPoolExecutor` does not show the same behaviour\r\n\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2.9.2 or 2022.05.2\r\n- Python version: 3.8\r\n- Operating System: linux\r\n- Install method : conda\r\n\r\n\r\n</details>",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9293/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9293/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}