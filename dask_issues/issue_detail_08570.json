{
    "url": "https://api.github.com/repos/dask/dask/issues/8570",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/8570/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/8570/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/8570/events",
    "html_url": "https://github.com/dask/dask/issues/8570",
    "id": 1103969405,
    "node_id": "I_kwDOAbcwm85BzTx9",
    "number": 8570,
    "title": "Culling massive Blockwise graphs is very slow, not constant-time",
    "user": {
        "login": "gjoseph92",
        "id": 3309802,
        "node_id": "MDQ6VXNlcjMzMDk4MDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gjoseph92",
        "html_url": "https://github.com/gjoseph92",
        "followers_url": "https://api.github.com/users/gjoseph92/followers",
        "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
        "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
        "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
        "repos_url": "https://api.github.com/users/gjoseph92/repos",
        "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2156573524,
            "node_id": "MDU6TGFiZWwyMTU2NTczNTI0",
            "url": "https://api.github.com/repos/dask/dask/labels/highlevelgraph",
            "name": "highlevelgraph",
            "color": "8c24d6",
            "default": false,
            "description": "Issues relating to HighLevelGraphs."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2022-01-14T18:03:17Z",
    "updated_at": "2022-09-20T22:12:51Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**tl;dr: Could `get_all_external_keys` and `get_output_keys` be avoided in HLG culling?**\r\n\r\nIn some workflows, it can be desirable to create a dask Array/DataFrame structure representing some full-size, enormous dataset, then immediately use slicing to sub-select out only a tiny part of it, then work with that. Now that we can use Blockwise for IO (xref https://github.com/dask/dask/pull/7417), this is an especially appealing pattern, because it should be constant-time to construct the massive graph, since nothing has to be materialized.\r\n\r\nI had hoped it would also be linear-time to cull this massive graph, but it appears currently that it's not.\r\n\r\nHere's an example where I'm trying to create an xarray representing the [Landsat-8](https://planetarycomputer.microsoft.com/dataset/landsat-8-c2-l2) collection at full resolution over the entire continental US. This is a 10PB, 136-million-chunk array that involves 1.3 billion data loading tasks. Here I'm using https://github.com/gjoseph92/stackstac/pull/116 (so the data loading graph is fully blockwise) and https://github.com/dask/dask/pull/8560 (so we know `fuse_roots` isn't materializing the graph unnecessarily).\r\n\r\n![Screen Shot 2022-01-14 at 10 37 54 AM](https://user-images.githubusercontent.com/3309802/149560244-8b8bec05-f3e5-4427-a079-3714677e77a7.png)\r\n\r\nThen I'm sub-selecting a single chunk out of those 136 million. Based on what I know of the graph, this should cull down to 4 tasks.\r\n\r\n![Screen Shot 2022-01-14 at 10 37 59 AM](https://user-images.githubusercontent.com/3309802/149560279-e40a3d55-aedf-449b-b931-a9f2fd2a1645.png)\r\n\r\n<details><summary>Here's the HLG for reference</summary>\r\n\r\nYou can see the first layer is materialized with ~100,000 tasks, but the _big_, 100-million-task one is Blockwise. (https://github.com/dask/dask/issues/8497 sure would be nice here!)\r\n\r\n![Screen Shot 2022-01-14 at 10 30 55 AM](https://user-images.githubusercontent.com/3309802/149559272-8f5e0f13-863e-49ac-8482-5876cd2b9617.png)\r\n\r\n</details>\r\n\r\nBut when I try to optimize this graph, I see memory usage shoot up until it crashes the kernel on the 32GB machine. Interrupting the kernel after a few seconds makes it pretty clear what's going on: `HighLevelGraph.cull` is calling `get_all_external_keys`, which is forcing the generation of all 1.3 billion keys (or 136 million keys? not sure).\r\n\r\n![Screen Shot 2022-01-14 at 10 23 19 AM](https://user-images.githubusercontent.com/3309802/149558357-d981f103-cea9-44bb-b44e-ed7070003b77.png)\r\n\r\nEven if it didn't call `get_all_external_keys`, I see that `HighLevelGraph.cull` is still calling `get_output_keys` on every layer. For reference: https://github.com/dask/dask/blob/358a5e367eedc8f2963651071a72f43e0ac4f887/dask/highlevelgraph.py#L944-L970\r\n\r\nWhy is it necessary for HLG.cull to ask the layer for all its keys, intersect them itself, then pass that back into the layer? And why is it necessary for cull functions to take `all_hlg_keys`?\r\n\r\nI had thought the interface would be simply: HLG.cull tells each layer the necessary output keys; the layer figures out the rest on its own. If it needs to generate all its keys internally and do that intersection, fine, but for layers that don't need to do this, shouldn't the optimization be available?\r\n\r\n@rjzamora @madsbk why does culling work this way? Would it be possible to write Blockwise culling without this, in a way that's truly linear-time to only the number of final keys?\r\n\r\ncc @ian-r-rose @TomAugspurger ",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/8570/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/8570/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}