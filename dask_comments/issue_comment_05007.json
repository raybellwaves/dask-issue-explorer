[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506061668",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506061668",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506061668,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjA2MTY2OA==",
        "user": {
            "login": "pentschev",
            "id": 4398246,
            "node_id": "MDQ6VXNlcjQzOTgyNDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4398246?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pentschev",
            "html_url": "https://github.com/pentschev",
            "followers_url": "https://api.github.com/users/pentschev/followers",
            "following_url": "https://api.github.com/users/pentschev/following{/other_user}",
            "gists_url": "https://api.github.com/users/pentschev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pentschev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pentschev/subscriptions",
            "organizations_url": "https://api.github.com/users/pentschev/orgs",
            "repos_url": "https://api.github.com/users/pentschev/repos",
            "events_url": "https://api.github.com/users/pentschev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pentschev/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-26T22:02:17Z",
        "updated_at": "2019-06-26T22:02:17Z",
        "author_association": "MEMBER",
        "body": "> To determine the meta information, the function is now being called once for meta and once for actual usage from what I can tell.\r\n\r\nYou are correct.\r\n\r\n> is it possible to provide keyword arguments to `map_blocks` to say \"this is the array type that will be returned by this function\"\r\n\r\nYou're asking if it's possible to pass a `meta` argument so that `map_blocks` won't be called a second time, and instead use `meta` passed by the user. Is that correct?\r\n\r\n> could it be changed to default to the type of the input arrays?\r\n\r\nI don't think so, since that would prevent Dask from figuring out the correct array type, which is exactly what it tries to achieve.\r\n\r\n> Is there some way to skip this meta generation step?\r\n\r\nNo, it completely replaces `dtype`, so we can't skip it.\r\n\r\n> Would this interfere with the sparse/masked array support?\r\n\r\nI'm not sure what \"this\" refers to in this sentence, but assuming you're asking if the inclusion of meta in replacement to the old dtype mechanism should interfere with sparse/masked support, the short answer is no, but there may still exist issues that would need to be fixed once we are aware of them.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506061668/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506135104",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506135104",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506135104,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjEzNTEwNA==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T02:49:21Z",
        "updated_at": "2019-06-27T02:49:21Z",
        "author_association": "CONTRIBUTOR",
        "body": "I meant, would allowing developers to skip meta generation break support for sparse/masked array. Based on your other answers this is a yes.\r\n\r\n>> could it be changed to default to the type of the input arrays?\r\n>\r\n> I don't think so, since that would prevent Dask from figuring out the correct array type, which is exactly what it tries to achieve.\r\n\r\nWouldn't this only happen if the function given to map_blocks changed the array type of the inputs? Even if it does, how often does it change it to something that depends on the input array type? I'm sure I'm missing something, especially since I have zero experience with sparse arrays, but maybe you can help me with this example. If I do a `map_blocks` that does the equivalent of `a + b`; 2 inputs, 1 output. If I give this map_blocks function two numpy arrays I get a numpy array, if two masked arrays then a masked array.\r\n\r\nIf the output will be a different array type than the input(s) then how often would the output array type depend on the input array types? My function might take two numpy arrays and return a sparse array, if I give it two masked arrays it probably (?) still returns a sparse array. If the map blocks function's inputs are not all the same array type then I could see how you can't determine the output array type unless you call the function.\r\n\r\n## Possible Default Behavior\r\n\r\nWith input `a` and `b` producing output `c`:\r\n\r\n* type(a) == type(b) -> use same type\r\n* type(a) != type(b) -> call function with empty arrays\r\n* with keyword argument `output_type=np.ndarray` -> always np.ndarray\r\n* with keyword argument `output_type=True` (?) -> always call function with empty arrays to determine output array type\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506135104/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506241265",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506241265",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506241265,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjI0MTI2NQ==",
        "user": {
            "login": "pentschev",
            "id": 4398246,
            "node_id": "MDQ6VXNlcjQzOTgyNDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4398246?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pentschev",
            "html_url": "https://github.com/pentschev",
            "followers_url": "https://api.github.com/users/pentschev/followers",
            "following_url": "https://api.github.com/users/pentschev/following{/other_user}",
            "gists_url": "https://api.github.com/users/pentschev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pentschev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pentschev/subscriptions",
            "organizations_url": "https://api.github.com/users/pentschev/orgs",
            "repos_url": "https://api.github.com/users/pentschev/repos",
            "events_url": "https://api.github.com/users/pentschev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pentschev/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T08:10:02Z",
        "updated_at": "2019-06-27T08:10:02Z",
        "author_association": "MEMBER",
        "body": "> how often would the output array type depend on the input array types?\r\n\r\nThis is a difficult question to answer, since we can't really track how all libraries behave. Probably for the most common cases, such as NumPy or Sparse arrays, the answer is never, or almost never, but that doesn't exclude the possibility of other libraries having a completely different behavior.\r\n\r\n> type(a) == type(b) -> use same type\r\n\r\nThis generalization probably holds true for most cases, but what if it does not? Doing that prevents Dask array from computing the correct one for possible special cases.\r\n\r\n> type(a) != type(b) -> call function with empty arrays\r\n\r\nThe suggestion here for default behavior is actually the default behavior for everything. So if we can do this for both different types and equal types, why not do for them both?\r\n\r\n> with keyword argument output_type=np.ndarray -> always np.ndarray\r\n\r\nI can see how that's useful, also where the behavior on empty arrays may differ from the actual operation, I think this can be implemented fairly easily.\r\n\r\n> with keyword argument output_type=True (?) -> always call function with empty arrays to determine output array type\r\n\r\nI guess here you're suggesting that passing `False` would just default meta to something, what would that something be? Wouldn't the previous case (allowing to pass a default type to ignore the computation of meta) suffice?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506241265/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506341231",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506341231",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506341231,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjM0MTIzMQ==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T13:16:10Z",
        "updated_at": "2019-06-27T13:16:10Z",
        "author_association": "CONTRIBUTOR",
        "body": "> type(a) == type(b) -> use same type\r\n\r\nLike you said, this probably holds for most cases which is why I thought it would be a good default behavior. When it doesn't hold is when the `map_blocks` call would include `output_type` to define the behavior of the function. Overall this is all to avoid the \"magic\" behavior of calling the map_block'd function which could be incorrect for the empty array result (result in exceptions, etc) or have other side effects depending on what type of stuff someone is throwing in to these functions (resource allocation like threads or memory, etc). In the end though, I'm not sure how big a problem the \"magic\" meta discovery will be for most users. With the PEP20 idea of explicit over implicit, I was hoping the calling of the function with empty arrays would be a last resort (if array type couldn't be guessed by input array types or wasn't explicitly stated with a keyword argument to `map_blocks`).\r\n\r\n> with keyword argument output_type=True (?) -> always call function with empty arrays to determine output array type\r\n\r\nThis was really just a placeholder of some way to say \"this function can return any array type depending on certain factors, call it with test inputs to check for sure\" meaning explicitly \"don't check input array types to guess at the output array type, it won't be accurate\".",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506341231/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506367767",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506367767",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506367767,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjM2Nzc2Nw==",
        "user": {
            "login": "pentschev",
            "id": 4398246,
            "node_id": "MDQ6VXNlcjQzOTgyNDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4398246?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pentschev",
            "html_url": "https://github.com/pentschev",
            "followers_url": "https://api.github.com/users/pentschev/followers",
            "following_url": "https://api.github.com/users/pentschev/following{/other_user}",
            "gists_url": "https://api.github.com/users/pentschev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pentschev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pentschev/subscriptions",
            "organizations_url": "https://api.github.com/users/pentschev/orgs",
            "repos_url": "https://api.github.com/users/pentschev/repos",
            "events_url": "https://api.github.com/users/pentschev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pentschev/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T14:23:05Z",
        "updated_at": "2019-06-27T14:23:05Z",
        "author_association": "MEMBER",
        "body": "> Like you said, this probably holds for most cases which is why I thought it would be a good default behavior.\r\n\r\nMy main concern right now is over UDFs and other helper functions, such as:\r\n\r\n```python\r\nlambda sparse_a, sparse_b: (sparse_a + sparse_b).to_dense()\r\n```\r\n\r\nAlso, regardless of input, we're also inferring dimensionality and dtype when computing meta. On the following case, we couldn't infer neither of those correctly without calling the function:\r\n\r\n```\r\nnp.stack([np.empty((0, 0), dtype=np.float32), np.empty((0, 0), dtype=np.int32)])\r\n```\r\n\r\n> When it doesn't hold is when the map_blocks call would include output_type to define the behavior of the function.\r\n\r\nI completely agree with allowing passing a user-defined meta to avoid that computation.\r\n\r\n> Overall this is all to avoid the \"magic\" behavior of calling the map_block'd function which could be incorrect for the empty array result (result in exceptions, etc) or have other side effects depending on what type of stuff someone is throwing in to these functions (resource allocation like threads or memory, etc). In the end though, I'm not sure how big a problem the \"magic\" meta discovery will be for most users. In the end though, I'm not sure how big a problem the \"magic\" meta discovery will be for most users. With the PEP20 idea of explicit over implicit, I was hoping the calling of the function with empty arrays would be a last resort (if array type couldn't be guessed by input array types or wasn't explicitly stated with a keyword argument to map_blocks).\r\n\r\nWe definitely _want_ to compute meta correctly and we don't know yet the extent of possible issues due to incorrect meta calculation. Incorrect computation is one issue that mostly occurs when functions don't correctly handle 0-length dimensions. I know it goes against the \"explicit better than implicit\", but I think that meta is a fairly complex concept and a default behavior should also attempt to be user-friendly instead of forcing everyone to add a new parameter that may be difficult to infer when writing complex code supporting types that are not necessarily known beforehand. The current default behavior has also the advantage of allowing us to find out about issues such as you're reporting here, that could otherwise pass unnoticed.\r\n\r\nIMO, we should add an argument to allow passing a user-defined meta, but the current default behavior should be kept. Thoughts @mrocklin, @shoyer, @jakirkham?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506367767/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506371287",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506371287",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506371287,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjM3MTI4Nw==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T14:31:50Z",
        "updated_at": "2019-06-27T14:31:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "> instead of forcing everyone to add a new parameter that may be difficult to infer\r\n\r\nI've been looking at this `_meta` stuff as the \"new feature\" and `dtype` was the existing feature. Adding a keyword argument (or even `meta` keyword argument) for each piece of metadata (dimensions, array type, etc) to support sparse/masked arrays is what I thought the natural evolution of the `dtype` keyword argument would have been; especially when you consider the `drop_axis` and `new_axis` parameters as keyword arguments to control dimensionality.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506371287/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506412468",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506412468",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506412468,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjQxMjQ2OA==",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T16:12:59Z",
        "updated_at": "2019-06-27T16:46:32Z",
        "author_association": "MEMBER",
        "body": "> IMO, we should add an argument to allow passing a user-defined meta, but the current default behavior should be kept.\r\n\r\nWe should definitely have function arguments to allow explicitly providing `meta` in any location where it would be inferred from a  user-defined function. This is similar to the existing situation with `dtype`. Running user provided functions on bogus inputs to determine metadata should really be a last resort.\r\n\r\n@pentschev could you kindly remind why it's important to keep track of `_meta` at all on dask arrays? Which dask operations need to know the types of contained arrays?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506412468/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506423243",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506423243",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506423243,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjQyMzI0Mw==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T16:43:00Z",
        "updated_at": "2019-06-27T16:43:00Z",
        "author_association": "MEMBER",
        "body": "> could you kindly remind why it's important to keep track of _meta at all on dask arrays?\r\n\r\nOriginally this came up in issue ( https://github.com/dask/dask/issues/2977 ). Though there have been other discussions since.\r\n\r\nIt's worth noting we also do the same thing for dataframes.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506423243/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506429649",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506429649",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506429649,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjQyOTY0OQ==",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T17:01:28Z",
        "updated_at": "2019-06-27T17:01:28Z",
        "author_association": "MEMBER",
        "body": "> > could you kindly remind why it's important to keep track of _meta at all on dask arrays?\r\n> \r\n> Originally this came up in issue ( #2977 ). Though there have been other discussions since.\r\n\r\nRight, that issue looks familiar \ud83d\ude01\r\n\r\nSo this definitely is valuable if you're using array-type specific operations on non-NumPy arrays, e.g.,  something that only works on sparse or masked arrays. You want to get errors at graph construction time, not runtime.\r\n\r\nThat said, I'm sympathetic to wanting to preserve existing behavior on NumPy arrays, if possible.\r\n\r\nWithin `map_blocks`, if somebody did not specify `dtype` explicitly, it's fine to automatically compute `meta` since we're already automatically computing `dtype`. On the other hand, if they do provide `dtype`, then inferring `meta` is potentially problematic. Maybe it would make sense to default to either `meta=None` (unknown), `meta=same_as_inputs` or `meta=np.ndarray` rather than computing it in these case?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506429649/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506521922",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-506521922",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 506521922,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjUyMTkyMg==",
        "user": {
            "login": "pentschev",
            "id": 4398246,
            "node_id": "MDQ6VXNlcjQzOTgyNDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4398246?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pentschev",
            "html_url": "https://github.com/pentschev",
            "followers_url": "https://api.github.com/users/pentschev/followers",
            "following_url": "https://api.github.com/users/pentschev/following{/other_user}",
            "gists_url": "https://api.github.com/users/pentschev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pentschev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pentschev/subscriptions",
            "organizations_url": "https://api.github.com/users/pentschev/orgs",
            "repos_url": "https://api.github.com/users/pentschev/repos",
            "events_url": "https://api.github.com/users/pentschev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pentschev/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-27T21:40:06Z",
        "updated_at": "2019-06-27T21:40:06Z",
        "author_association": "MEMBER",
        "body": "@pentschev could you kindly remind why it's important to keep track of _meta at all on dask arrays? Which dask operations need to know the types of contained arrays?\r\n\r\nThe main reason for `_meta` is interoperability, after adoption of `__array_function__`. We want to make sure that internal arrays (e.g., temporary/output arrays) match those of input, both to leverage better performance and to ensure that arrays that can't be combined with other array types still work (e.g., when they specifically don't implement `__array__`, like CuPy).\r\n\r\n> So this definitely is valuable if you're using array-type specific operations on non-NumPy arrays, e.g., something that only works on sparse or masked arrays. You want to get errors at graph construction time, not runtime.\r\n\r\nThat's also another advantage of `_meta`, but for me personally, this wasn't the feature that I was looking for the most.\r\n\r\n> Within map_blocks, if somebody did not specify dtype explicitly, it's fine to automatically compute meta since we're already automatically computing dtype. On the other hand, if they do provide dtype, then inferring meta is potentially problematic. Maybe it would make sense to default to either meta=None (unknown), meta=same_as_inputs or meta=np.ndarray rather than computing it in these case?\r\n\r\nRight, but we don't just ignore `dtype`, we adjust `_meta` to that. Granted, this is not error-free, but perhaps better than enforce the user to specify `_meta`? TBH, at the moment, I'm not sure which is better, to allow some errors to eventually happen or not to allow them and force the user to take care of that. I think the latter could still be very complicated for somewhat complex codebases, specifically those that intend to support various different NumPy-like libraries.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506521922/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/940811826",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-940811826",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 940811826,
        "node_id": "IC_kwDOAbcwm844E6Yy",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-10-12T09:01:56Z",
        "updated_at": "2021-10-12T09:01:56Z",
        "author_association": "MEMBER",
        "body": "@djhoese did Peter and Stephan sufficiently answer your question? If so, perhaps this issue can be closed.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/940811826/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/941093283",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-941093283",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 941093283,
        "node_id": "IC_kwDOAbcwm844F_Gj",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-10-12T14:58:33Z",
        "updated_at": "2021-10-12T14:58:33Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hi @GenevieveBuckley, thanks for looking through old issues. I would say yes and no. I understand why meta exists, but the overall mechanism/workflow still feels clunky from a user point of view. However, this issue is so old and attempting to make anything easier to use would probably require deprecation of some keyword arguments (ex. `dtype`) or changes to the interface that people are apparently used to.\r\n\r\nI have an odd feeling about map_blocks, even over the last couple years when I've used it, that there are too many choices which cause a little too much confusion. Maybe `meta` should be the only option for functions like `map_blocks` and if you want to specify `dtype` then you need to create a whole `meta` array to be specific.\r\n\r\nI'm ok if someone wants to close this. I'm not sure the discussion is going to go anywhere unless others have had similar feelings.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/941093283/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/941249219",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-941249219",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 941249219,
        "node_id": "IC_kwDOAbcwm844GlLD",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-10-12T18:07:17Z",
        "updated_at": "2021-10-12T18:07:17Z",
        "author_association": "MEMBER",
        "body": "Suppose we could a warning if users specify a `dtype` instead of `meta` with `map_blocks`. Would that be helpful?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/941249219/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/941252148",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-941252148",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 941252148,
        "node_id": "IC_kwDOAbcwm844Gl40",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-10-12T18:10:43Z",
        "updated_at": "2021-10-12T18:10:43Z",
        "author_association": "CONTRIBUTOR",
        "body": "Based on the comments above I think `dtype`, if specified, can influence or overwrite the dtype of the generated `meta` array object.\r\n\r\nOn one hand I think `meta` should be a required parameter of `map_blocks`. On the other, it is nice that you could not worry about it and have dask figure it out. However, I can't remember a time in the last couple years when I've written a map_blocks'd function that can handle the empty array that dask provides without special handling inside my function.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/941252148/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/946800518",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-946800518",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 946800518,
        "node_id": "IC_kwDOAbcwm844bweG",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-10-19T14:47:22Z",
        "updated_at": "2021-10-19T14:47:22Z",
        "author_association": "MEMBER",
        "body": "I agree that `map_blocks` could use some better error handling and would probably benefit from being made more explicit. Personally, I often iterate over `.blocks` rather than using `map_blocks` because I find that easier to reason about. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/946800518/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/947124048",
        "html_url": "https://github.com/dask/dask/issues/5007#issuecomment-947124048",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5007",
        "id": 947124048,
        "node_id": "IC_kwDOAbcwm844c_dQ",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-10-19T21:35:01Z",
        "updated_at": "2021-10-19T21:35:01Z",
        "author_association": "MEMBER",
        "body": "Yeah I think that is the origin of `.blocks`. There are various use cases that benefit from grabbing individual chunks and working on them.\r\n\r\nThat said, with the addition of HLG, there is some benefit to rewriting things in terms of `map_blocks` instead.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/947124048/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]