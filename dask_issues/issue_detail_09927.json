{
    "url": "https://api.github.com/repos/dask/dask/issues/9927",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9927/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9927/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9927/events",
    "html_url": "https://github.com/dask/dask/pull/9927",
    "id": 1574913353,
    "node_id": "PR_kwDOAbcwm85JdmgW",
    "number": 9927,
    "title": "Add `from_frame` and `from_series` functions to Dask-DataFrame",
    "user": {
        "login": "rjzamora",
        "id": 20461013,
        "node_id": "MDQ6VXNlcjIwNDYxMDEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjzamora",
        "html_url": "https://github.com/rjzamora",
        "followers_url": "https://api.github.com/users/rjzamora/followers",
        "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
        "organizations_url": "https://api.github.com/users/rjzamora/orgs",
        "repos_url": "https://api.github.com/users/rjzamora/repos",
        "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjzamora/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 365513534,
            "node_id": "MDU6TGFiZWwzNjU1MTM1MzQ=",
            "url": "https://api.github.com/repos/dask/dask/labels/io",
            "name": "io",
            "color": "6f871c",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-02-07T19:34:11Z",
    "updated_at": "2023-02-07T19:59:59Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": true,
    "pull_request": {
        "url": "https://api.github.com/repos/dask/dask/pulls/9927",
        "html_url": "https://github.com/dask/dask/pull/9927",
        "diff_url": "https://github.com/dask/dask/pull/9927.diff",
        "patch_url": "https://github.com/dask/dask/pull/9927.patch",
        "merged_at": null
    },
    "body": "This PR proposes the introduction of new `from_frame` and `from_series` functions for dd.DataFrame and dd.Series construction, respectively. The proposed functions (which are defined in `dask.dataframe.io.io` and imported within the `dask.dataframe` namespace) are intended to wrap `dd.repartition` and `dd.from_pandas`, depending on the input data. \r\n\r\n### Motivation\r\n\r\nThe primary motivation for this PR is to improve user experience for the \"cudf\" backend of Dask-DataFrame. For example, direct users of the `dask_cudf` library have access to `dask_cudf.from_cudf` function to create a new cudf-backed DataFrame collection from a cudf DataFrame or Series, E.g:\r\n\r\n```python\r\nimport dask_cudf\r\nimport cudf\r\n\r\ndf = cudf.DataFrame({\"a\": range(10), \"b\": [1, 2]*5})\r\nprint(dask_cudf.from_cudf(df, npartitions=2))\r\n```\r\n```\r\n<dask_cudf.DataFrame | 2 tasks | 2 npartitions>\r\n```\r\n\r\nThose who want to use the `dask.dataframe` API with the \"cudf\" dataframe backend only have access to `dd.from_pandas`:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport cudf\r\n\r\ndf = cudf.DataFrame({\"a\": range(10), \"b\": [1, 2]*5})\r\nprint(dd.from_pandas(df, npartitions=2))\r\n```\r\n```\r\n<dask_cudf.DataFrame | 2 tasks | 2 npartitions>\r\n```\r\n\r\nAs you can see, `from_pandas` and `from_cudf` do (almost) the same thing. In fact, the `dask_cudf.from_cudf` implementation is just a `dd.from_pandas` wrapper. For this reason, it seems reasonable to adopt a backend-agnostic  name/API for the same functionality.  Since backend-agnostic behavior already exists for `dd.from_array`, this PR proposes that we follow that convention by supporting `from_frame` and `from_series` for frame-like and series-like data, respectively.\r\n\r\nE.g.\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport cudf\r\n\r\nser = cudf.Series(range(10))\r\ndd.from_series(ser, npartitions=2)  #  <dask_cudf.Series | 2 tasks | 2 npartitions>\r\n\r\ndf = cudf.DataFrame({\"a\": range(10), \"b\": [1, 2]*5})\r\ndd.from_frame(df, npartitions=2)  #  <dask_cudf.DataFrame | 2 tasks | 2 npartitions>\r\n```\r\n\r\n**Note: I am not proposing the deprecation of `from_pandas`.  Rather, I am proposing that we add some light-weight functions to the top-level `dask.dataframe` API (practically aliases) so that both Dask and RAPIDS examples/documentation can promote CPU/GPU compatible code.**\r\n\r\n\r\n- [ ] Closes #xxxx\r\n- [ ] Tests added / passed\r\n- [ ] Passes `pre-commit run --all-files`\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9927/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9927/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}