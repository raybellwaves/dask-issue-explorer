[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/667218450",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-667218450",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 667218450,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzIxODQ1MA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-31T16:37:49Z",
        "updated_at": "2020-07-31T16:37:49Z",
        "author_association": "MEMBER",
        "body": "cc @bmerry (in case you have thoughts on how to improve usage of `unify_chunks` here)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/667218450/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/667854922",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-667854922",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 667854922,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2Nzg1NDkyMg==",
        "user": {
            "login": "bmerry",
            "id": 1963944,
            "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmerry",
            "html_url": "https://github.com/bmerry",
            "followers_url": "https://api.github.com/users/bmerry/followers",
            "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
            "organizations_url": "https://api.github.com/users/bmerry/orgs",
            "repos_url": "https://api.github.com/users/bmerry/repos",
            "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmerry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-03T07:24:06Z",
        "updated_at": "2020-08-03T07:24:06Z",
        "author_association": "MEMBER",
        "body": "I'm afraid very rusty on dask internals and I've never looked at how map_overlap is implemented. I'm assuming you're wanting map_overlap so that you can test each x against each chunk of xp, ignoring those where it lies outside, then summing.\r\n\r\nThat's essentially an outer product operation, so you really want to be treating the single axis of x and the single axis of xp/fp as two different axes. With da.blockwise that would be easy (give them different labels), but map_overlap doesn't appear to have that functionality. However, you might be able to fake it with broadcasting i.e. call map_overlap with `x[np.newaxis, :], xp[:, np.newaxis], fp[:, np.newaxis]` and then strip off the dummy axes in the callback function. I'm not sure what `map_overlap` does with broadcasting though.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/667854922/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/675210233",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-675210233",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 675210233,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTIxMDIzMw==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-18T02:19:27Z",
        "updated_at": "2020-08-18T02:19:27Z",
        "author_association": "MEMBER",
        "body": "We'd like to use `map_overlap` to avoid edge effects at each of the chunk boundaries. \r\n\r\nSadly, it doesn't seem like that trick with the broadcasting works here. If I use the same example I have above, but this time try:\r\n```python\r\ndask_result = da.map_overlap(np.interp, dask_x2[np.newaxis, :], dask_x[:, np.newaxis], dask_y[:, np.newaxis], dtype=dask_y.dtype)\r\ndask_result.compute()\r\n```\r\n\r\nThen we get \"ValueError: object too deep for desired array\", because each of the chunks are no longer 1D, `np.interp` can no longer be applied to them. You can see the same error using the numpy-only arrays from our example if you try: \r\n```python\r\nout = np.interp(x2[np.newaxis, :], x[:, np.newaxis], y[:, np.newaxis])\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/675210233/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/675307589",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-675307589",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 675307589,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTMwNzU4OQ==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-18T07:27:27Z",
        "updated_at": "2020-08-18T07:27:27Z",
        "author_association": "MEMBER",
        "body": "Further digging reveals there is an `align_arrays=` keyword argument available in [dask array blockwise](https://docs.dask.org/en/latest/array-api.html?highlight=blockwise#dask.array.blockwise), and if you set it to False we can avoid `unify_chunks` altogether. Then I can do interpolation, so long as the *number* of chunks matches for input arrays, even if the number of elements contained in each chunk differs between `x` vs `xp` and `fp`. The chunks do need to have roughly the same spacing, you can certainly force it to produce very strange results if this is not the case.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/675307589/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/675316324",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-675316324",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 675316324,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTMxNjMyNA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-18T07:45:37Z",
        "updated_at": "2020-08-18T07:45:37Z",
        "author_association": "MEMBER",
        "body": "With dask array blockwise you can do this:\r\n\r\n```python\r\nimport numpy as np\r\nimport dask.array as da\r\nimport matplotlib.pyplot as plt\r\n\r\nx = da.from_array(np.linspace(0, 10, 20), chunks=5)\r\ny = da.from_array(np.sin(np.linspace(0, 10, 20)), chunks=5)\r\n# It's very important the chunk size is right here\r\nx_interp = da.from_array(np.linspace(0, 10, 60), chunks=5*3)\r\n\r\nresult = da.blockwise(np.interp, 'i', x_interp, 'i', x, 'i', y, 'i', align_arrays=False, dtype=y.dtype)\r\n\r\nplt.plot(x, y, 'bo')\r\nplt.plot(x_interp, result, 'r+')\r\nplt.show()\r\n```\r\n\r\n![graph](https://user-images.githubusercontent.com/30920819/90484490-97a9c700-e179-11ea-97d4-5ef920b07f88.png)\r\n\r\nNote: this graph is also an excellent example of why we need overlap between chunks in the computation - you can see at around 2.5 on the x-axis that there are edge effects causing a problem with the result values.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/675316324/reactions",
            "total_count": 3,
            "+1": 3,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/675358608",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-675358608",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 675358608,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTM1ODYwOA==",
        "user": {
            "login": "bmerry",
            "id": 1963944,
            "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmerry",
            "html_url": "https://github.com/bmerry",
            "followers_url": "https://api.github.com/users/bmerry/followers",
            "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
            "organizations_url": "https://api.github.com/users/bmerry/orgs",
            "repos_url": "https://api.github.com/users/bmerry/repos",
            "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmerry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-18T09:06:21Z",
        "updated_at": "2020-08-18T09:06:21Z",
        "author_association": "MEMBER",
        "body": "> Then we get \"ValueError: object too deep for desired array\", because each of the chunks are no longer 1D, np.interp can no longer be applied to them. You can see the same error using the numpy-only arrays from our example if you try:\r\n\r\nWhat if you write a wrapper function that removes the dummy dimensions before passing them to `np.interp`?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/675358608/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/675361120",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-675361120",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 675361120,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTM2MTEyMA==",
        "user": {
            "login": "bmerry",
            "id": 1963944,
            "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmerry",
            "html_url": "https://github.com/bmerry",
            "followers_url": "https://api.github.com/users/bmerry/followers",
            "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
            "organizations_url": "https://api.github.com/users/bmerry/orgs",
            "repos_url": "https://api.github.com/users/bmerry/repos",
            "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmerry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-18T09:11:11Z",
        "updated_at": "2020-08-18T09:11:11Z",
        "author_association": "MEMBER",
        "body": "> Note: this graph is also an excellent example of why we need overlap between chunks in the computation - you can see at around 2.5 on the x-axis that there are edge effects causing a problem with the result values.\r\n\r\nThat whole approach doesn't seem right: it only half-works because each chunk of `x_interp` lies mostly in the interval covered by the corresponding chunk of `x`. If for example you change the order of x_interp to\r\n```\r\nx_interp = da.from_array(np.linspace(10, 0, 60), chunks=5*3)\r\n```\r\nthen you get complete nonsense.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/675361120/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/679025625",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-679025625",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 679025625,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTAyNTYyNQ==",
        "user": {
            "login": "pums974",
            "id": 1005109,
            "node_id": "MDQ6VXNlcjEwMDUxMDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1005109?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pums974",
            "html_url": "https://github.com/pums974",
            "followers_url": "https://api.github.com/users/pums974/followers",
            "following_url": "https://api.github.com/users/pums974/following{/other_user}",
            "gists_url": "https://api.github.com/users/pums974/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pums974/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pums974/subscriptions",
            "organizations_url": "https://api.github.com/users/pums974/orgs",
            "repos_url": "https://api.github.com/users/pums974/repos",
            "events_url": "https://api.github.com/users/pums974/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pums974/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T09:44:19Z",
        "updated_at": "2020-08-24T11:11:06Z",
        "author_association": "NONE",
        "body": "Here is a working version:\r\n\r\n```python\r\nimport numpy as np\r\nimport dask.array as da\r\nimport matplotlib.pyplot as plt\r\n\r\nx = da.from_array(np.linspace(0, 10, 20), chunks=3)\r\ny = da.from_array(np.sin(np.linspace(0, 10, 20)), chunks=5)\r\n# It's very important the chunk size is right here\r\nx_interp = da.from_array(np.linspace(0, 10, 60), chunks=7)\r\n\r\nresult = da.blockwise(np.interp, 'i', x_interp, 'i', x, 'j', y, 'j', dtype=y.dtype, new_axes={\"i\": x_interp.chunks[0]}, concatenate=True)\r\nref = np.interp(x_interp.compute(), x.compute(), y.compute())\r\n\r\nprint(np.allclose(result, ref).compute())\r\n\r\nplt.plot(x, y, 'bo')\r\nplt.plot(x_interp, result, '-')\r\nplt.plot(x_interp, ref, '--')\r\nplt.show()\r\n```\r\nBut beware, the computation are done on the chunks of `x_interp` and the totality of `x` and `y` will be duplicated on each task\r\n\r\n![image](https://user-images.githubusercontent.com/1005109/91038551-3ebfb000-e60b-11ea-912f-52af3c185c92.png)\r\n\r\nAs you can see, there is no problem at the edges and it works even if `x_interp` is not in order.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/679025625/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/679162309",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-679162309",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 679162309,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTE2MjMwOQ==",
        "user": {
            "login": "dcherian",
            "id": 2448579,
            "node_id": "MDQ6VXNlcjI0NDg1Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2448579?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dcherian",
            "html_url": "https://github.com/dcherian",
            "followers_url": "https://api.github.com/users/dcherian/followers",
            "following_url": "https://api.github.com/users/dcherian/following{/other_user}",
            "gists_url": "https://api.github.com/users/dcherian/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dcherian/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dcherian/subscriptions",
            "organizations_url": "https://api.github.com/users/dcherian/orgs",
            "repos_url": "https://api.github.com/users/dcherian/repos",
            "events_url": "https://api.github.com/users/dcherian/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dcherian/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T14:30:51Z",
        "updated_at": "2020-08-24T14:30:51Z",
        "author_association": "MEMBER",
        "body": ":) @pums974 added this to xarray here: https://github.com/pydata/xarray/pull/4155",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/679162309/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/681177349",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-681177349",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 681177349,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTE3NzM0OQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-26T23:35:26Z",
        "updated_at": "2020-08-26T23:35:26Z",
        "author_association": "MEMBER",
        "body": "Thanks @pums974! \ud83d\ude04\r\n\r\nYeah it would be interesting to see if we are able to drop the `concatenate=True`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/681177349/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/682102372",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-682102372",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 682102372,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjEwMjM3Mg==",
        "user": {
            "login": "pums974",
            "id": 1005109,
            "node_id": "MDQ6VXNlcjEwMDUxMDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1005109?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pums974",
            "html_url": "https://github.com/pums974",
            "followers_url": "https://api.github.com/users/pums974/followers",
            "following_url": "https://api.github.com/users/pums974/following{/other_user}",
            "gists_url": "https://api.github.com/users/pums974/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pums974/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pums974/subscriptions",
            "organizations_url": "https://api.github.com/users/pums974/orgs",
            "repos_url": "https://api.github.com/users/pums974/repos",
            "events_url": "https://api.github.com/users/pums974/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pums974/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-27T17:57:46Z",
        "updated_at": "2020-08-27T17:57:46Z",
        "author_association": "NONE",
        "body": "I'm not sure that it would solve anything.\r\n\r\nAny solution to limit the duplication of x and y would involve something similar to `map_overlap` and would require something to take care about the order of the points in x, and the reconstruction of the result.\r\n\r\nI tried something similar with xarray before managing to use `blockwise`. It was a lot of quite dirty lines of codes. And I have no idea how to mix it with this `blockwise`.\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/682102372/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1235548295",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-1235548295",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 1235548295,
        "node_id": "IC_kwDOAbcwm85JpPiH",
        "user": {
            "login": "miguelcarcamov",
            "id": 5432126,
            "node_id": "MDQ6VXNlcjU0MzIxMjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5432126?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/miguelcarcamov",
            "html_url": "https://github.com/miguelcarcamov",
            "followers_url": "https://api.github.com/users/miguelcarcamov/followers",
            "following_url": "https://api.github.com/users/miguelcarcamov/following{/other_user}",
            "gists_url": "https://api.github.com/users/miguelcarcamov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/miguelcarcamov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/miguelcarcamov/subscriptions",
            "organizations_url": "https://api.github.com/users/miguelcarcamov/orgs",
            "repos_url": "https://api.github.com/users/miguelcarcamov/repos",
            "events_url": "https://api.github.com/users/miguelcarcamov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/miguelcarcamov/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-02T14:05:16Z",
        "updated_at": "2022-09-02T14:05:16Z",
        "author_association": "NONE",
        "body": "I know this may not have anything to do with this issue. However, I am curious about if anyone have been able to program a bilinear interpolation using dask? I'm currently programming my own bilinear interpolation using dask but the only problem is that I need to evaluate a 2D array using another array of x,y coordinates, therefore getting the error that dask does not support fancy indexing. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1235548295/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1235662554",
        "html_url": "https://github.com/dask/dask/issues/6474#issuecomment-1235662554",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6474",
        "id": 1235662554,
        "node_id": "IC_kwDOAbcwm85Jprba",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-02T15:55:11Z",
        "updated_at": "2022-09-02T15:55:11Z",
        "author_association": "MEMBER",
        "body": "@miguelcarcamov, would suggest opening a new issue and sharing a bit more detail about what is being done and what issue is being seen",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1235662554/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]