{
    "url": "https://api.github.com/repos/dask/dask/issues/11051",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/11051/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/11051/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/11051/events",
    "html_url": "https://github.com/dask/dask/issues/11051",
    "id": 2241875527,
    "node_id": "I_kwDOAbcwm86FoE5H",
    "number": 11051,
    "title": "db.to_dataframe, throws: TypeError: 'coroutine' object is not iterable",
    "user": {
        "login": "SGT911",
        "id": 61520057,
        "node_id": "MDQ6VXNlcjYxNTIwMDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/61520057?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SGT911",
        "html_url": "https://github.com/SGT911",
        "followers_url": "https://api.github.com/users/SGT911/followers",
        "following_url": "https://api.github.com/users/SGT911/following{/other_user}",
        "gists_url": "https://api.github.com/users/SGT911/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/SGT911/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SGT911/subscriptions",
        "organizations_url": "https://api.github.com/users/SGT911/orgs",
        "repos_url": "https://api.github.com/users/SGT911/repos",
        "events_url": "https://api.github.com/users/SGT911/events{/privacy}",
        "received_events_url": "https://api.github.com/users/SGT911/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-04-14T02:56:37Z",
    "updated_at": "2024-04-16T00:31:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the issue**:\r\nUsing dask bag to normalize the data into a dask dataframe throws: `TypeError: 'coroutine' object is not iterable`\r\n\r\n**Minimal Complete Verifiable Example**:\r\n```python\r\nfrom dask.distributed import Client\r\nimport dask.bag as db\r\nimport asyncio\r\n\r\nasync def create_dataframe():\r\n    # Data from sources stuff...\r\n    data = [{'_id': 1, 'name': 'Bob'}]\r\n    data_bag = db.from_sequence(data)\r\n    data_bag = data_bag.map(lambda x: {'id': x['_id'], 'name': x['name'].lower()})\r\n\r\n    return data_bag.to_dataframe()\r\n\r\nasync def main():\r\n    cli = await Client('localhost:8786', asynchronous=True)\r\n    df = await create_dataframe()\r\n    df = await cli.compute(df)\r\n    print(df)\r\n    await cli.close()\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main())\r\n```\r\n\r\n**Anything else we need to know?**:\r\nThe error was caused using a `dask.distributed` async client.\r\nI'm also tried using `.flatten()` method and `dd.from_delayed(data_bag.to_delayed())`\r\n\r\n**Environment**:\r\n\r\n- Dask version: `dask, version 2024.2.0`\r\n- Python version: `Python 3.11.6`\r\n- Operating System: `Docker - Debian GNU/Linux 12 (bookworm)`\r\n- Install method (conda, pip, source): `pip`\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/11051/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/11051/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}