{
    "url": "https://api.github.com/repos/dask/dask/issues/6324",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/6324/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/6324/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/6324/events",
    "html_url": "https://github.com/dask/dask/pull/6324",
    "id": 639022072,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDM0Njc4MTc5",
    "number": 6324,
    "title": "Define __tracebackhide__ in assert_eq",
    "user": {
        "login": "TomAugspurger",
        "id": 1312546,
        "node_id": "MDQ6VXNlcjEzMTI1NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TomAugspurger",
        "html_url": "https://github.com/TomAugspurger",
        "followers_url": "https://api.github.com/users/TomAugspurger/followers",
        "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
        "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
        "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
        "repos_url": "https://api.github.com/users/TomAugspurger/repos",
        "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-15T17:35:10Z",
    "updated_at": "2021-03-08T20:19:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
        "url": "https://api.github.com/repos/dask/dask/pulls/6324",
        "html_url": "https://github.com/dask/dask/pull/6324",
        "diff_url": "https://github.com/dask/dask/pull/6324.diff",
        "patch_url": "https://github.com/dask/dask/pull/6324.patch",
        "merged_at": null
    },
    "body": "Defines `__tracebackhide__` in assert_eq for nicer results.\r\nhttps://docs.pytest.org/en/latest/example/simple.html\r\n\r\nWith this, it's more important that the messages in the assert are more\r\nmeaningful, since the context is hidden. I've done just a bit, but there's\r\nroom for improvement.\r\n\r\nNew\r\n\r\n```pytb\r\n________________________________________________________________________ test_array ________________________________________________________________________\r\n\r\n    def test_array():\r\n        a = da.ones((4, 4), chunks=(2, 2))\r\n        b = np.zeros((5, 5))\r\n>       da.utils.assert_eq(a, b)\r\nE       AssertionError: ((4, 4), (5, 5))\r\n\r\ntest_foo.py:10: AssertionError\r\n________________________________________________________________________ test_frame ________________________________________________________________________\r\n\r\n    def test_frame():\r\n        a = dd.from_pandas(pd.DataFrame({\"A\": [1, 2, 2]}), 2)\r\n        b = pd.DataFrame({\"A\": [1, 2, 3]})\r\n>       dd.utils.assert_eq(a, b)\r\n\r\ntest_foo.py:16:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\npandas/_libs/testing.pyx:68: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\nE   AssertionError: DataFrame.iloc[:, 0] (column name=\"A\") are different\r\nE\r\nE   DataFrame.iloc[:, 0] (column name=\"A\") values are different (33.33333 %)\r\nE   [index]: [0, 1, 2]\r\nE   [left]:  [1, 2, 2]\r\nE   [right]: [1, 2, 3]\r\n\r\npandas/_libs/testing.pyx:183: AssertionError\r\n```\r\n\r\nold:\r\n\r\n```pytb\r\n________________________________________________________________________ test_array ________________________________________________________________________\r\n\r\n    def test_array():\r\n        a = da.ones((4, 4), chunks=(2, 2))\r\n        b = np.zeros((5, 5))\r\n>       da.utils.assert_eq(a, b)\r\n\r\ntest_foo.py:10:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\na = array([[1., 1., 1., 1.],\r\n       [1., 1., 1., 1.],\r\n       [1., 1., 1., 1.],\r\n       [1., 1., 1., 1.]])\r\nb = array([[0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.]])\r\ncheck_shape = True, check_graph = True, check_meta = True, kwargs = {}\r\na_original = dask.array<ones, shape=(4, 4), dtype=float64, chunksize=(2, 2), chunktype=numpy.ndarray>\r\nb_original = array([[0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.],\r\n       [0., 0., 0., 0., 0.]])\r\nadt = dtype('float64'), a_meta = array([], shape=(0, 0), dtype=float64)\r\na_computed = array([[1., 1., 1., 1.],\r\n       [1., 1., 1., 1.],\r\n       [1., 1., 1., 1.],\r\n       [1., 1., 1., 1.]]), bdt = dtype('float64'), b_meta = None\r\n\r\n    def assert_eq(a, b, check_shape=True, check_graph=True, check_meta=True, **kwargs):\r\n        a_original = a\r\n        b_original = b\r\n\r\n        a, adt, a_meta, a_computed = _get_dt_meta_computed(\r\n            a, check_shape=check_shape, check_graph=check_graph\r\n        )\r\n        b, bdt, b_meta, b_computed = _get_dt_meta_computed(\r\n            b, check_shape=check_shape, check_graph=check_graph\r\n        )\r\n\r\n        if str(adt) != str(bdt):\r\n            # Ignore check for matching length of flexible dtypes, since Array._meta\r\n            # can't encode that information\r\n            if adt.type == bdt.type and not (adt.type == np.bytes_ or adt.type == np.str_):\r\n                diff = difflib.ndiff(str(adt).splitlines(), str(bdt).splitlines())\r\n                raise AssertionError(\r\n                    \"string repr are different\" + os.linesep + os.linesep.join(diff)\r\n                )\r\n\r\n        try:\r\n>           assert a.shape == b.shape\r\nE           AssertionError\r\n\r\ndask/array/utils.py:246: AssertionError\r\n________________________________________________________________________ test_frame ________________________________________________________________________\r\n\r\n    def test_frame():\r\n        a = dd.from_pandas(pd.DataFrame({\"A\": [1, 2, 2]}), 2)\r\n        b = pd.DataFrame({\"A\": [1, 2, 3]})\r\n>       dd.utils.assert_eq(a, b)\r\n\r\ntest_foo.py:16:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ndask/dataframe/utils.py:813: in assert_eq\r\n    tm.assert_frame_equal(a, b, **kwargs)\r\npandas/_libs/testing.pyx:68: in pandas._libs.testing.assert_almost_equal\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   ???\r\nE   AssertionError: DataFrame.iloc[:, 0] (column name=\"A\") are different\r\nE\r\nE   DataFrame.iloc[:, 0] (column name=\"A\") values are different (33.33333 %)\r\nE   [index]: [0, 1, 2]\r\nE   [left]:  [1, 2, 2]\r\nE   [right]: [1, 2, 3]\r\n\r\npandas/_libs/testing.pyx:183: AssertionError\r\n```\r\n\r\n- [ ] Tests added / passed\r\n- [ ] Passes `black dask` / `flake8 dask`\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/6324/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/6324/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}