{
    "url": "https://api.github.com/repos/dask/dask/issues/5323",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/5323/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/5323/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/5323/events",
    "html_url": "https://github.com/dask/dask/issues/5323",
    "id": 485516825,
    "node_id": "MDU6SXNzdWU0ODU1MTY4MjU=",
    "number": 5323,
    "title": "Adding multiple columns inside the same call doesn't work properly, while it does on Pandas",
    "user": {
        "login": "AndreCNF",
        "id": 19359510,
        "node_id": "MDQ6VXNlcjE5MzU5NTEw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19359510?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AndreCNF",
        "html_url": "https://github.com/AndreCNF",
        "followers_url": "https://api.github.com/users/AndreCNF/followers",
        "following_url": "https://api.github.com/users/AndreCNF/following{/other_user}",
        "gists_url": "https://api.github.com/users/AndreCNF/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AndreCNF/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AndreCNF/subscriptions",
        "organizations_url": "https://api.github.com/users/AndreCNF/orgs",
        "repos_url": "https://api.github.com/users/AndreCNF/repos",
        "events_url": "https://api.github.com/users/AndreCNF/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AndreCNF/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-08-27T00:23:29Z",
    "updated_at": "2021-10-13T02:12:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I made a simple method that essentially turns categories from a categorical feature into new, separate features (similarly to a pivot_table operation) and adds them to the dataframe. Here's its definition:\r\n\r\n```python\r\ndef category_to_feature(df, categories_feature, values_feature):\r\n    '''Convert a categorical column and its corresponding values column into\r\n    new features, one for each category.\r\n\r\n    Parameters\r\n    ----------\r\n    df : pandas.DataFrame or dask.DataFrame\r\n        Dataframe on which to add the new features.\r\n    categories_feature : string\r\n        Name of the feature that contains the categories that will be converted\r\n        to individual features.\r\n    values_feature : string\r\n        Name of the feature that has each category's corresponding value, which\r\n        may or may not be a category on its own (e.g. it could be numeric values).\r\n\r\n    Returns\r\n    -------\r\n    data_df : pandas.DataFrame or dask.DataFrame\r\n        Dataframe with the newly created features.\r\n    '''\r\n    # Copy the dataframe to avoid potentially unwanted inplace changes\r\n    data_df = df.copy()\r\n    # Find the unique categories\r\n    categories = data_df[categories_feature].unique()\r\n    if 'dask' in str(type(df)):\r\n        categories = categories.compute()\r\n    # Create a feature for each category\r\n    for category in categories:\r\n        # Convert category to feature\r\n        data_df[category] = data_df.apply(lambda x: x[values_feature] if x[categories_feature] == category\r\n                                                    else np.nan, axis=1)\r\n    return data_df\r\n```\r\n\r\nIf we apply it on the following Pandas dataframe, it works as intended, creating a feature for each category:\r\n\r\n**Input dataframe:**\r\n\r\n```\r\n\tid\tts\tcategories\tvalues\r\n0\t103\t0\tcat_a\t        val_a1\r\n1\t103\t1\tcat_a\t        val_a2\r\n2\t103\t2\tcat_b\t        val_b1\r\n3\t104\t0\tcat_c\t        val_c1\r\n4\t105\t0\tcat_a\t        val_a3\r\n5\t106\t0\tcat_c\t        val_c2\r\n6\t107\t0\tcat_b\t        val_b1\r\n7\t108\t0\tcat_b\t        val_b2\r\n8\t108\t1\tcat_d\t        val_d1\r\n9\t108\t2\tcat_a\t        val_a1\r\n10\t108\t3\tcat_a\t        val_a3\r\n```\r\n\r\n**Resulting dataframe on Pandas:**\r\n\r\n```\r\n\tid\tts\tcategories\tvalues\tcat_a\tcat_b\tcat_c\tcat_d\r\n0\t103\t0\tcat_a\t        val_a1\tval_a1\tNaN\tNaN\tNaN\r\n1\t103\t1\tcat_a\t        val_a2\tval_a2\tNaN\tNaN\tNaN\r\n2\t103\t2\tcat_b\t        val_b1\tNaN\tval_b1\tNaN\tNaN\r\n3\t104\t0\tcat_c\t        val_c1\tNaN\tNaN\tval_c1\tNaN\r\n4\t105\t0\tcat_a\t        val_a3\tval_a3\tNaN\tNaN\tNaN\r\n5\t106\t0\tcat_c\t        val_c2\tNaN\tNaN\tval_c2\tNaN\r\n6\t107\t0\tcat_b\t        val_b1\tNaN\tval_b1\tNaN\tNaN\r\n7\t108\t0\tcat_b\t        val_b2\tNaN\tval_b2\tNaN\tNaN\r\n8\t108\t1\tcat_d\t        val_d1\tNaN\tNaN\tNaN\tval_d1\r\n9\t108\t2\tcat_a\t        val_a1\tval_a1\tNaN\tNaN\tNaN\r\n10\t108\t3\tcat_a\t        val_a3\tval_a3\tNaN\tNaN\tNaN\r\n```\r\n\r\nNow, if we use it as a dask dataframe, all the newly created features assume the values of the feature that was added last, which in this case is `cat_d`.\r\n\r\n**Resulting dataframe on Dask:**\r\n\r\n```\r\n\tid\tts\tcategories\tvalues\tcat_a\tcat_b\tcat_c\tcat_d\r\n0\t103\t0\tcat_a\t        val_a1\tNaN\tNaN\tNaN\tNaN\r\n1\t103\t1\tcat_a\t        val_a2\tNaN\tNaN\tNaN\tNaN\r\n2\t103\t2\tcat_b\t        val_b1\tNaN\tNaN\tNaN\tNaN\r\n3\t104\t0\tcat_c\t        val_c1\tNaN\tNaN\tNaN\tNaN\r\n4\t105\t0\tcat_a\t        val_a3\tNaN\tNaN\tNaN\tNaN\r\n5\t106\t0\tcat_c\t        val_c2\tNaN\tNaN\tNaN\tNaN\r\n6\t107\t0\tcat_b\t        val_b1\tNaN\tNaN\tNaN\tNaN\r\n7\t108\t0\tcat_b\t        val_b2\tNaN\tNaN\tNaN\tNaN\r\n8\t108\t1\tcat_d\t        val_d1\tval_d1\tval_d1\tval_d1\tval_d1\r\n9\t108\t2\tcat_a\t        val_a1\tNaN\tNaN\tNaN\tNaN\r\n10\t108\t3\tcat_a\t        val_a3\tNaN\tNaN\tNaN\tNaN\r\n```\r\n\r\nSince the method works fine on Pandas, I'm guessing this might be an issue on Dask' side.\r\n\r\nYou can check the full example code on this notebook/script: \r\n[category_to_feature_example.zip](https://github.com/dask/dask/files/3542307/category_to_feature_example.zip)",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/5323/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/5323/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}