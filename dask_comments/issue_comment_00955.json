[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/179892984",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-179892984",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 179892984,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTg5Mjk4NA==",
        "user": {
            "login": "jreback",
            "id": 953992,
            "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/953992?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jreback",
            "html_url": "https://github.com/jreback",
            "followers_url": "https://api.github.com/users/jreback/followers",
            "following_url": "https://api.github.com/users/jreback/following{/other_user}",
            "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
            "organizations_url": "https://api.github.com/users/jreback/orgs",
            "repos_url": "https://api.github.com/users/jreback/repos",
            "events_url": "https://api.github.com/users/jreback/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jreback/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-02-04T15:14:48Z",
        "updated_at": "2016-02-04T15:16:48Z",
        "author_association": "CONTRIBUTOR",
        "body": "Here is a sample function. Not this is currently NOT threadsafe & will die when using the default get\n\n```\nIn [8]: df = DataFrame({'A' : np.arange(12), 'B' : ['a']*3+['b']*3+['c']*3+['d']*3}).set_index('B')\n\nIn [9]: df\nOut[9]: \n    A\nB    \na   0\na   1\na   2\nb   3\nb   4\nb   5\nc   6\nc   7\nc   8\nd   9\nd  10\nd  11\n\nIn [10]: df.to_hdf('test.hdf','df',format='table')\n\nIn [11]: pd.read_hdf('test.hdf','df',where='index=\"b\"')\nOut[11]: \n   A\nB   \nb  3\nb  4\nb  5\n```\n\n```\nimport dask.dataframe as dd\nfrom dask.multiprocessing import get\n\npartitions = list('abcd')\ndef f(s):\n    return pd.read_hdf('test.hdf','df',mode='r',where=\"index='{0}'\".format(s)).reset_index()\ndsk = {('mydf', i):(f, s) for i, s in enumerate(partitions)}\ndf = dd.DataFrame(dsk, 'mydf', ['A','B'], partitions)\ndf\ndf.compute(get=get)\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/179892984/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/179894905",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-179894905",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 179894905,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTg5NDkwNQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-02-04T15:17:41Z",
        "updated_at": "2016-02-04T15:17:41Z",
        "author_association": "MEMBER",
        "body": "Hrm, I was thinking we would specify a column, `'b'` and dask.dataframe would automatically define partitions for that column, probably not using where, but rather by doing binary search to find transition locations within that column.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/179894905/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/179904854",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-179904854",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 179904854,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTkwNDg1NA==",
        "user": {
            "login": "jreback",
            "id": 953992,
            "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/953992?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jreback",
            "html_url": "https://github.com/jreback",
            "followers_url": "https://api.github.com/users/jreback/followers",
            "following_url": "https://api.github.com/users/jreback/following{/other_user}",
            "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
            "organizations_url": "https://api.github.com/users/jreback/orgs",
            "repos_url": "https://api.github.com/users/jreback/repos",
            "events_url": "https://api.github.com/users/jreback/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jreback/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-02-04T15:39:16Z",
        "updated_at": "2016-02-04T15:39:16Z",
        "author_association": "CONTRIBUTOR",
        "body": "yes could certainly do that as well, e.g. \n\nsomething like this will read a single column into memory, you can then call\n`pd.read_hdf('test.hdf','df',where=indexer)` to select using that indexer\n\n```\nIn [7]: store = pd.HDFStore('test.hdf')\n\nIn [8]: store.select_column('df','index')\nOut[8]: \n0     a\n1     a\n2     a\n3     b\n4     b\n5     b\n6     c\n7     c\n8     c\n9     d\n10    d\n11    d\nName: index, dtype: object\n\nIn [9]: store.close()\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/179904854/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/194544179",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-194544179",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 194544179,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDU0NDE3OQ==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-09T22:34:18Z",
        "updated_at": "2016-03-09T22:34:18Z",
        "author_association": "MEMBER",
        "body": "Hmm, would you want this to work for just the index, or any specified sorted column? If it's just the former, there may be a way to do this without doing a full index load by mucking a bit with the pytables internals. Also, should we trust the user that the column is sorted, or verify ourselves?\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/194544179/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/194555625",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-194555625",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 194555625,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDU1NTYyNQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-09T22:57:21Z",
        "updated_at": "2016-03-09T22:57:21Z",
        "author_association": "MEMBER",
        "body": "I can imagine wanting to do this on any array-like actually, including bcolz.  That's speculative though.  I do think that there is value to handling non-indexed columns.\n\nI would just trust the user rather than doing a full column read.  Or perhaps in the future make that an option.\n\nMy hope is that we can do something naive like `divisions = list(store[0::chunksize, column]) + [store[-1, column]]`\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/194555625/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/194557057",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-194557057",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 194557057,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDU1NzA1Nw==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-09T23:02:40Z",
        "updated_at": "2016-03-09T23:02:40Z",
        "author_association": "MEMBER",
        "body": "> My hope is that we can do something naive like `divisions = list(store[0::chunksize, column]) + [store[-1, column]]`\n\nThat only works if there aren't repeated values. Otherwise you could end up splitting in the middle of a run (e.g. `[1, 2, 3, 3, 3, 4, 5, ...] -> ([1, 2, 3, 3], [3, 4, 5, ...], ...)`)\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/194557057/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/194557273",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-194557273",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 194557273,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDU1NzI3Mw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-09T23:03:31Z",
        "updated_at": "2016-03-09T23:03:31Z",
        "author_association": "MEMBER",
        "body": "Naive always ends up being too good to be true.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/194557273/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/194568546",
        "html_url": "https://github.com/dask/dask/issues/955#issuecomment-194568546",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/955",
        "id": 194568546,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDU2ODU0Ng==",
        "user": {
            "login": "jreback",
            "id": 953992,
            "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/953992?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jreback",
            "html_url": "https://github.com/jreback",
            "followers_url": "https://api.github.com/users/jreback/followers",
            "following_url": "https://api.github.com/users/jreback/following{/other_user}",
            "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
            "organizations_url": "https://api.github.com/users/jreback/orgs",
            "repos_url": "https://api.github.com/users/jreback/repos",
            "events_url": "https://api.github.com/users/jreback/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jreback/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-09T23:38:20Z",
        "updated_at": "2016-03-09T23:38:20Z",
        "author_association": "CONTRIBUTOR",
        "body": "you might be able to get the indexers directly from pytables (I don't know)\n\nnot that in general only the physical ordering is clean - the others are just lightweight indexes\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/194568546/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]