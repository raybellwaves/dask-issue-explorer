[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1260804170",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1260804170",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1260804170,
        "node_id": "IC_kwDOAbcwm85LJlhK",
        "user": {
            "login": "GPUtester",
            "id": 38199262,
            "node_id": "MDQ6VXNlcjM4MTk5MjYy",
            "avatar_url": "https://avatars.githubusercontent.com/u/38199262?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GPUtester",
            "html_url": "https://github.com/GPUtester",
            "followers_url": "https://api.github.com/users/GPUtester/followers",
            "following_url": "https://api.github.com/users/GPUtester/following{/other_user}",
            "gists_url": "https://api.github.com/users/GPUtester/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GPUtester/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GPUtester/subscriptions",
            "organizations_url": "https://api.github.com/users/GPUtester/orgs",
            "repos_url": "https://api.github.com/users/GPUtester/repos",
            "events_url": "https://api.github.com/users/GPUtester/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GPUtester/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T12:04:15Z",
        "updated_at": "2022-09-28T12:04:15Z",
        "author_association": "COLLABORATOR",
        "body": "Can one of the admins verify this patch?\n\nAdmins can comment `ok to test` to allow this one PR to run or `add to allowlist` to allow all future PRs from the same author to run.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1260804170/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1260805557",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1260805557",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1260805557,
        "node_id": "IC_kwDOAbcwm85LJl21",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T12:05:23Z",
        "updated_at": "2022-09-28T12:05:23Z",
        "author_association": "MEMBER",
        "body": "I haven't ripped out the special-casing for `p2p` shuffle (I think it could be moved to just be registered from distributed with this scheme) in part because I do not understand all the cases when it can be used, and also want to see if this is an approach that in general meets with approval.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1260805557/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1260882945",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1260882945",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1260882945,
        "node_id": "IC_kwDOAbcwm85LJ4wB",
        "user": {
            "login": "quasiben",
            "id": 1403768,
            "node_id": "MDQ6VXNlcjE0MDM3Njg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quasiben",
            "html_url": "https://github.com/quasiben",
            "followers_url": "https://api.github.com/users/quasiben/followers",
            "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
            "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
            "organizations_url": "https://api.github.com/users/quasiben/orgs",
            "repos_url": "https://api.github.com/users/quasiben/repos",
            "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quasiben/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T13:05:09Z",
        "updated_at": "2022-09-28T13:05:09Z",
        "author_association": "MEMBER",
        "body": "add to allowlist",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1260882945/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1260978308",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1260978308",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1260978308,
        "node_id": "IC_kwDOAbcwm85LKQCE",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T14:12:55Z",
        "updated_at": "2022-09-28T14:16:04Z",
        "author_association": "MEMBER",
        "body": "> I also wonder if this is another case where entrypoints would be the easiest way to manage/register custom algorithms (in a way that could be extended to other pluggable algorithms - like groupby aggregations and worker-aware reductions). For example, an external library could register a new algorithm by putting something like this in its `setup.cfg`:\r\n\r\nI don't like this, because it's code in configuration files, so you don't get type-checking and so forth. Moreover, it is more magic: third party packages that _you didn't import_ would register their shuffle methods without you knowing. With the current scheme, that could allow them to be used (`shuffle=None`) without you knowing. Which I guess argues in favour of explicitly-named shuffle methods (and requiring a call to `rearrange_by_columns` to specify the method).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1260978308/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1260997080",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1260997080",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1260997080,
        "node_id": "IC_kwDOAbcwm85LKUnY",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T14:26:27Z",
        "updated_at": "2022-09-28T14:27:26Z",
        "author_association": "MEMBER",
        "body": ">it's code in configuration files, so you don't get type-checking and so forth\r\n\r\nThe `setup.cfg` just specifies *where* the endpoint code is. So, I don't think there is any less type-checking and so forth at all.\r\n\r\n> it is more magic: third party packages that you didn't import would register their shuffle methods without you knowing. With the current scheme, that could allow them to be used (shuffle=None) without you knowing. Which I guess argues in favour of explicitly-named shuffle methods (and requiring a call to rearrange_by_columns to specify the method).\r\n\r\nYes, with the current scheme in this PR it is indeed more *magic*. However, I'm not sure that I agree with the current scheme yet. In my mind, entrypoints would just be a simple way for external libraries to register custom algorithms. The user would never **use** the custom algorithm (or even search for its entrypoint!) if it wasn't specified in the `dask.config` or by a user-specified `shuffle` kwarg.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1260997080/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1261006071",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1261006071",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1261006071,
        "node_id": "IC_kwDOAbcwm85LKWz3",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T14:32:52Z",
        "updated_at": "2022-09-28T14:32:52Z",
        "author_association": "MEMBER",
        "body": "> > it's code in configuration files, so you don't get type-checking and so forth\r\n> \r\n> The `setup.cfg` just specifies _where_ the endpoint code is. So, I don't think there is any less type-checking and so forth at all.\r\n\r\nWith a registration-based approach you can require that your registered method satisfies an interface in the registration:\r\n\r\n```\r\ndef register(name: str, method: Callable[[int, int], bool]):\r\n   ...\r\n\r\nregister(\"foo\", lambda x: x) -> mypy complains\r\n```\r\n\r\nWith the config-based approach, the new method is \"disconnected\" statically from the registration mechanism.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1261006071/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1261009843",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1261009843",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1261009843,
        "node_id": "IC_kwDOAbcwm85LKXuz",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T14:35:26Z",
        "updated_at": "2022-09-28T14:35:26Z",
        "author_association": "MEMBER",
        "body": "> The user would never **use** the custom algorithm (or even search for its entrypoint!) if it wasn't specified in the `dask.config` or by a user-specified `shuffle` kwarg.\r\n\r\nI suppose that I was worrying about someone registering a catch-all method. This is morally runtime-based interface extension, so any new interfaces that are registered shouldn't be able to affect existing code. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1261009843/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1261019319",
        "html_url": "https://github.com/dask/dask/pull/9521#issuecomment-1261019319",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9521",
        "id": 1261019319,
        "node_id": "IC_kwDOAbcwm85LKaC3",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-28T14:42:22Z",
        "updated_at": "2022-09-28T14:49:02Z",
        "author_association": "MEMBER",
        "body": ">With a registration-based approach you can require that your registered method satisfies an interface in the registration\r\n\r\nThis is a fair point. The future plan is to move away from having users directly import `dask_cudf` in their code, but to use the `dask.config` and entrypoints to specify the desired backend (https://github.com/dask/design-docs/pull/1, https://github.com/dask/dask/pull/9475). I suppose the backend entrypoint for cudf would just need to be responsible for registering any cudf-specific algorithms.  I think the plan for `dask_cuda` is similar.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1261019319/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]