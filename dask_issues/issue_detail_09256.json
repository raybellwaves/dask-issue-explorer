{
    "url": "https://api.github.com/repos/dask/dask/issues/9256",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9256/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9256/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9256/events",
    "html_url": "https://github.com/dask/dask/pull/9256",
    "id": 1299727147,
    "node_id": "PR_kwDOAbcwm847JOXw",
    "number": 9256,
    "title": "Generic delayed",
    "user": {
        "login": "multimeric",
        "id": 5019367,
        "node_id": "MDQ6VXNlcjUwMTkzNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/multimeric",
        "html_url": "https://github.com/multimeric",
        "followers_url": "https://api.github.com/users/multimeric/followers",
        "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
        "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
        "organizations_url": "https://api.github.com/users/multimeric/orgs",
        "repos_url": "https://api.github.com/users/multimeric/repos",
        "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
        "received_events_url": "https://api.github.com/users/multimeric/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 365513534,
            "node_id": "MDU6TGFiZWwzNjU1MTM1MzQ=",
            "url": "https://api.github.com/repos/dask/dask/labels/io",
            "name": "io",
            "color": "6f871c",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-07-09T17:17:40Z",
    "updated_at": "2022-12-01T12:40:37Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": true,
    "pull_request": {
        "url": "https://api.github.com/repos/dask/dask/pulls/9256",
        "html_url": "https://github.com/dask/dask/pull/9256",
        "diff_url": "https://github.com/dask/dask/pull/9256.diff",
        "patch_url": "https://github.com/dask/dask/pull/9256.patch",
        "merged_at": null
    },
    "body": "- [x] Closes #7779\r\n- [x] Tests added / passed\r\n- [x] Passes `pre-commit run --all-files`\r\n\r\n## Notable Features\r\n\r\n* Added a generic `Delayed[T]`\r\n* Added type annotations for the `.visualize()` options\r\n* Added a `DaskGraph` newtype which helps distinguish a plain dict from a graph\r\n* Added type stubs for `tlz`\r\n\r\n## Discussion\r\nFeel free to enquire about some of the decisions I made in this process.\r\n\r\nI had to reduce the precision of many of the annotations because mypy (as opposed to say pyright) doesn't yet support a lot of the advanced type objects like `Self`, `Unpack`, `ParamSpec` etc. One specific example of this is the `DaskTask` tuples, which are of the form `(func, *args)`. I would love to define it as `tuple[Callable[T, U], *tuple]` so that we can propagate `U`, the function's return value, and also type check that a function is actually present. However this isn't currently possible.\r\n\r\n## Questions\r\n\r\n* I'm not familiar enough with the API here to be totally comfortable narrowing the types in some cases. For example, I really would like `pack_collections` to take a list of `DaskCollection`, and `persist()` to return a list of `DaskCollection`, but it seems like both functions are so flexible that I can't make that claim.\r\n* Equally, I would like `Delayed[T].compute()` to return a `T` but I'm not even sure if that's true?\r\n\r\n## Note\r\n\r\nI'm keeping this as a draft until #9237 is merged, since that fixes some of the mypy errors reported here.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9256/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9256/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}