[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371668217",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371668217",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371668217,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY2ODIxNw==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T00:05:58Z",
        "updated_at": "2018-03-09T00:05:58Z",
        "author_association": "MEMBER",
        "body": "Thanks for posting this here @davidh-ssec. Sorry for taking some time getting back to you.\r\n\r\nSo hopefully this clarifies the issue. Here's basically what happens with the code above.\r\n\r\n1. Open the file.\r\n2. Call `da.store` with data and delayed computation.\r\n3. `da.store` constructs a graph including the file handle and data.\r\n4. The file handle is closed (leaving context manager scope).\r\n5. Our function returns (leaving function scope).\r\n6. We call `compute`.\r\n\r\nBy the time we have called `compute`, we have a graph with references to a file handle that is now closed. So it is reasonable for the code to raise an exception.\r\n\r\nWhile that explains the behavior, that certainly doesn't solve the problem that you are after. So we need to think a bit about what we can do to adjust this. We have a few options. Assuming we are thinking of the single machine scheduler or threaded scheduler the three options below are all valid. If you are thinking of multiprocessing or running on many cluster jobs, only the last option is valid (unless file handles can be pickled in which case we probably need locking).\r\n\r\n1. Move the `compute` call to within the file open/context manager block.\r\n2. Move the  file open/context manager outside the function (and include `compute`).\r\n3. Wrap up the file object so this open/close occurs when reading/writing data to it.\r\n\r\nThe first option is probably not satisfactory given how the example is constructed so we can drop it. The second option probably works pretty well. In this case, the function takes a file handle instead of a filename for instance. The third option also works pretty well (I use this), but may result in more code changes that you don't want to include.\r\n\r\nMy recommendation would be to try option 2 and see how it goes.\r\n\r\nAlso if you have any suggestions on how we can make this clearer to users, please let us know.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371668217/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371670240",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371670240",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371670240,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY3MDI0MA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T00:16:56Z",
        "updated_at": "2018-03-09T00:16:56Z",
        "author_association": "MEMBER",
        "body": "> I then decided to try using `dask.delayed` around a function that opens the file, runs store, then closes the file. But then I realized that `delayed` will compute my dask array before passing it to my function, defeating the purpose of using `da.store` for storing chunks.\r\n\r\nAs a side note, it would be interesting to know a bit more about what you were doing with `delayed`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371670240/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371686797",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371686797",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371686797,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY4Njc5Nw==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T01:50:20Z",
        "updated_at": "2018-03-09T01:50:20Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks @jakirkham I'll see what I can come up with. Option 3 is probably the way I'm going to go, but it was a last resort. I'm going to spend a little time tomorrow thinking if it is possible to build a custom dask graph somehow where the last task closes the file. It can't be that hard right?\r\n\r\nOption 1 and 2 aren't really possible with what I have planned. The package all of this logic is going in is SatPy (https://github.com/pytroll/satpy), but currently lives only in the `develop` branch and other feature branches. The current `da.store` magic is being put in our other project trollimage (https://github.com/pytroll/trollimage). The idea with setting `compute=False` on `store` is to allow satpy (and users) to merge as many parts of multiple dask graphs as possible by passing all of the Delayed objects from multiple `da.store`s to the caller who can then do `delayed(*list_of_delayeds).compute()`. Let me know if this doesn't make sense and you want more information.\r\n\r\nMy attempt at using delayed for this file stuff was to do:\r\n\r\n```python\r\ndef _delayed(data, my_file):\r\n    # doesn't work unless I convert data back to dask array (from_array)\r\n    res = da.store(data, my_file)\r\n    my_file.close()\r\n    return res  # doesn't mean anything\r\n\r\ndelayed = dask.delayed(_delayed)(data, my_file)\r\nif compute:\r\n    return delayed.compute()\r\nelse:\r\n    return delayed\r\n```\r\n\r\nObviously converting it to delayed computes the entire dataset at once which isn't really desired. Right now we are only testing with threading scheduling, but you bring up a good point I had not thought of: serializing file objects. That would probably be an issue for us in the future.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371686797/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371688816",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371688816",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371688816,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY4ODgxNg==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T02:02:07Z",
        "updated_at": "2018-03-09T02:02:07Z",
        "author_association": "CONTRIBUTOR",
        "body": "Another thing we could do with this design is to return the data array and the target file-like object and then the user could compute it if desired. My only worry about this is that it might limit what the file creators can do. Returning a delayed object is generic, returning source data and a file is specific.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371688816/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371811666",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371811666",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371811666,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTgxMTY2Ng==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T13:28:01Z",
        "updated_at": "2018-03-09T13:28:01Z",
        "author_association": "MEMBER",
        "body": "XArray runs into this problem.  I think that they open-read-close the file in every task.  This has some performance costs but works decent enough.  There was talk a while ago of caching open files.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371811666/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371812160",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371812160",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371812160,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTgxMjE2MA==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T13:30:14Z",
        "updated_at": "2018-03-09T13:30:14Z",
        "author_association": "CONTRIBUTOR",
        "body": "Yeah I was hoping there was something like a \"task wrapper\" so I could put a \"file open\" graph task in front of a function, do the function, then put a \"file close\" task after that. All while somehow letting the chunks go in between. I guess at the end of the day that is the same as open-read-close the file for every chunk, just handled internally in the dask graph.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371812160/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371812679",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371812679",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371812679,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTgxMjY3OQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T13:32:25Z",
        "updated_at": "2018-03-09T13:32:25Z",
        "author_association": "MEMBER",
        "body": "Perhaps you want a context manager?  I think my initial reaction to this is \"python already has mechanisms for this, if possible we should just reuse them without designing things into dask\"",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371812679/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371813930",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371813930",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371813930,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTgxMzkzMA==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T13:37:17Z",
        "updated_at": "2018-03-09T13:37:17Z",
        "author_association": "CONTRIBUTOR",
        "body": "Yeah but it is a context manager inside the dask graph essentially. Open the file once, write all the chunks, close the file once, was the goal. I'm fine moving the open/close around the individual chunk stores, but it feels like there should be something fancier...but I don't know what that is.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371813930/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371815097",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371815097",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371815097,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTgxNTA5Nw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T13:42:06Z",
        "updated_at": "2018-03-09T13:42:06Z",
        "author_association": "MEMBER",
        "body": "Nothing fancier currently exists, but there are certainly people who would\nwant such a thing.  I recommend that we proceed with the inefficient thing\nfirst until it becomes a serious bottleneck.\n\nOn Fri, Mar 9, 2018 at 8:39 AM, David Hoese <notifications@github.com>\nwrote:\n\n> Yeah but it is a context manager inside the dask graph essentially. Open\n> the file once, write all the chunks, close the file once, was the goal. I'm\n> fine moving the open/close around the individual chunk stores, but it feels\n> like there should be something fancier...but I don't know what that is.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/3255#issuecomment-371813930>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszDLrOdQ7HuntUuGmidH6FBNdqn8Oks5tcoYEgaJpZM4SjBVR>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371815097/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371850807",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371850807",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371850807,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg1MDgwNw==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T15:48:06Z",
        "updated_at": "2018-03-09T15:48:06Z",
        "author_association": "CONTRIBUTOR",
        "body": "Well it has become a serious bottleneck. We're using rasterio which seems to do a lot of stuff when it opens and closes files. So in a simple test case with moving the opening/closing to `__setitem__` for a block size of 4096 on an array with shape (4, 6000, 10000) it takes 5 minutes to run through all the operations and save the data to disk. With a single file open/close and computing inside the with statement it takes 30s.\r\n\r\n@mrocklin @jakirkham Is it possible to take a delayed object and easily add another delayed function after it?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371850807/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371851855",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371851855",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371851855,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg1MTg1NQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T15:51:10Z",
        "updated_at": "2018-03-09T15:51:10Z",
        "author_association": "MEMBER",
        "body": "That might have more to do with a 4k blocksize than anything else.  Dask\nhas about 1ms of overhead.  You're going to want larger chunks.\n\nIt might be useful to try profiling to see what is taking up all of the\ntime.  I recommend the single-threaded scheduler and cProfile/snakeviz.\nhttp://dask.pydata.org/en/latest/understanding-performance.html\n\nOn Fri, Mar 9, 2018 at 10:48 AM, David Hoese <notifications@github.com>\nwrote:\n\n> Well it has become a serious bottleneck. We're using rasterio which seems\n> to do a lot of stuff when it opens and closes files. So in a simple test\n> case with moving the opening/closing to __setitem__ for a block size of\n> 4096 on an array with shape (4, 6000, 10000) it takes 5 minutes to run\n> through all the operations and save the data to disk. With a single file\n> open/close and computing inside the with statement it takes 30s.\n>\n> @mrocklin <https://github.com/mrocklin> @jakirkham\n> <https://github.com/jakirkham> Is it possible to take a delayed object\n> and easily add another delayed function after it?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/3255#issuecomment-371850807>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszIFMMRf3lNgmLbJIJQnDI0ERGolDks5tcqQ4gaJpZM4SjBVR>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371851855/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371852083",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371852083",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371852083,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg1MjA4Mw==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T15:51:58Z",
        "updated_at": "2018-03-09T15:58:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "A quick test and the following works:\r\n\r\n```\r\n            r_file = RIOFile(filename, 'r+', driver=driver,\r\n                         width=data.sizes['x'], height=data.sizes['y'],\r\n                         count=data.sizes['bands'],\r\n                         dtype=dtype,\r\n                         nodata=fill_value,\r\n                         crs=crs, transform=transform, **format_kw)\r\n            r_file.open()\r\n            r_file.colorinterp = color_interp(data)\r\n            r_file.rfile.update_tags(**new_tags)\r\n\r\n            res = da.store(data.data, r_file, compute=compute)\r\n\r\n            def _delayed(store_delay, r_file):\r\n                r_file.close()\r\n            return dask.delayed(_delayed)(res, r_file)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371852083/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371852571",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371852571",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371852571,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg1MjU3MQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T15:53:35Z",
        "updated_at": "2018-03-09T15:53:35Z",
        "author_association": "MEMBER",
        "body": "Yes, something like that would be ok.  You might run into problems if you\ntried using multiple processes or machines.\n\nOn Fri, Mar 9, 2018 at 10:51 AM, David Hoese <notifications@github.com>\nwrote:\n\n> A quick test and the following works:\n>\n>             r_file = RIOFile(filename, 'r+', driver=driver,\n>                          width=data.sizes['x'], height=data.sizes['y'],\n>                          count=data.sizes['bands'],\n>                          dtype=dtype,\n>                          nodata=fill_value,\n>                          crs=crs, transform=transform, **format_kw)\n>             r_file.colorinterp = color_interp(data)\n>             r_file.open()\n>             r_file.rfile.update_tags(**new_tags)\n>\n>             res = da.store(data.data, r_file, compute=compute)\n>\n>             def _delayed(store_delay, r_file):\n>                 r_file.close()\n>             return dask.delayed(_delayed)(res, r_file)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/3255#issuecomment-371852083>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszLshUwqcIi7g-Cb_sEtDzEB-M5GWks5tcqUfgaJpZM4SjBVR>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371852571/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371853068",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371853068",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371853068,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg1MzA2OA==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T15:55:01Z",
        "updated_at": "2018-03-09T15:57:21Z",
        "author_association": "CONTRIBUTOR",
        "body": "Is there anything I can add to our custom `RIOFile` that would allow dask to automatically serialize it? Like if it gets serialized it could close  the file and reopen it.\r\n\r\nNote: My unit tests don't pass, but I think I broke something else. I'll come back to this later today.\r\n\r\nEdit 2: Nevermind got it to work by switching to `'w'` opening mode.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371853068/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371854320",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371854320",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371854320,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg1NDMyMA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T15:59:06Z",
        "updated_at": "2018-03-09T15:59:06Z",
        "author_association": "MEMBER",
        "body": "We use standard python serialization protocols through pickle\nhttps://docs.python.org/3/library/pickle.html\n\nIn particular you might implement getstate and setstate.  However it's not\nclear how well this would work in your situation.  You want to call\nfile.close on *all* relevant workers after your tasks are done.  This isn't\na single task as is defined above, but something more complex.\n\nI still recommend trying the open/close within each task first and\nbenchmarking how expensive this is likely to be.  I think that you would\nneed to try larger chunk sizes to get a good grasp of the relevant costs\nhere.\n\nOn Fri, Mar 9, 2018 at 10:55 AM, David Hoese <notifications@github.com>\nwrote:\n\n> Is there anything I can add to our custom RIOFile that would allow dask\n> to automatically serialize it? Like if it gets serialized it could close\n> the file and reopen it.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/3255#issuecomment-371853068>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszDi0T_MLhYA-OTBWHO7NkGhdqxcvks5tcqXZgaJpZM4SjBVR>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371854320/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371881665",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371881665",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371881665,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTg4MTY2NQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T17:24:36Z",
        "updated_at": "2018-03-09T17:24:36Z",
        "author_association": "MEMBER",
        "body": "Yeah can see how a context manager would be useful. Have periodically thought about this problem for various reasons. That said, it opens us up to a lot of opportunities for things to not get closed properly when an exception is raised.\r\n\r\nAnother thing that I've been mulling over is having a function that takes all the Futures of a Dask Array. This is probably more tenable. It would take Futures as they complete and writes them out to disk. We might be able to do this on the scheduler machine if we use some sort of async implementation. Alternatively we could dispatch it as a job.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371881665/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371937735",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371937735",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371937735,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTkzNzczNQ==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T20:34:16Z",
        "updated_at": "2018-03-09T20:34:16Z",
        "author_association": "CONTRIBUTOR",
        "body": "So this has been fun /s\r\n\r\nHere are some timing results from playing with a few different things. Keep in mind the find resulting array that is being saved to a geotiff via rasterio is (4, 6000, 10000) of float64s. This is using the default threaded scheduler on my macbook pro (8 workers). Everything is being loaded from and saved to local disk and I'm not doing anything expensive on my system besides this. The image is made of 4 separate arrays of data so each one is pretty much saved separately, chunks of `(1, 4096, ...)`.\r\n\r\n1. (Original) Immediate compute/close with 4096 chunk size: ~30s\r\n2. Per chunk open/close with 4096 chunk size: ~5m\r\n3. Using delayed close hack above: ~45s\r\n4. Immediate compute/close with 8192 chunk size: ~34s\r\n5. Per chunk open/close with 8192 chunk size: 2m19s to 3m\r\n6. Using delayed close hack above: ~54s\r\n6. Per chunk open/close with 10000 chunk size (one chunk per RGBA channel): 2m17s\r\n7. Immediate compute/close with 10000 chunk size (one chunk per RGBA channel): 38.4s\r\n8. Per chunk open/close with 10000 original size but rechunk to full array shape before store: 55.2s\r\n\r\nI was not paying attention to any swapping that could have been going on so I can't comment on that. The biggest confusion for me is that adding the delayed hack seems to add a good amount of time. I didn't think so when I first tested it but I tried it multiple times and couldn't really explain it.\r\n\r\nI've been looking at other hacky options for this and started wondering if `__dask_postcompute__` could be used for closing the file in a custom Delayed object, but theoretically that should be the equivalent of the delayed close hack, right? It's equivalent in another way that the file closing would not be working properly on a distributed scheduler.\r\n\r\nI think if we really want the best performance we may need to change our interface so if the user/satpy asks for `compute=False` then they get the delayed object and the target file.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371937735/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371959241",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371959241",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371959241,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk1OTI0MQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T22:08:38Z",
        "updated_at": "2018-03-09T22:08:38Z",
        "author_association": "MEMBER",
        "body": "Can you say a bit about how you're choosing your chunk sizes?  I tend to choose chunk sizes that are in the 10MB-100MB range when I do computation.  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371959241/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371967263",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371967263",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371967263,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk2NzI2Mw==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T22:47:10Z",
        "updated_at": "2018-03-09T22:47:29Z",
        "author_association": "CONTRIBUTOR",
        "body": "@mrocklin Good question. We started by trying to guess what would be fastest so our thinking went to powers of 2 (which ignores the number of bytes in the data type of the array but let's ignore that now too ;) ). Then we did a couple tests to see what performed the best. As you can see from my timing 4096 seems to do better than 8192. So these are 2D arrays of 64-bit floats so if my calculations are correct that's 4096 rows x 4096 cols x 64-bit floats = ~134MB per starting dataset. iirc choosing 2048 did not perform as well as 4096 for our simple tests.\r\n\r\nFor satpy, which deals with raster data from meteorological satellites, it is very common to take a data array, the longitude for those pixels, and the latitude for those pixels and do some calculations like resampling to a uniform grid and saving the output to disk. Another common operation involves taking additional per-pixel data like solar or lunar zenith angle and doing some kind of adjustment/correction/normalization on the imagery data. Lastly, a very common operation to do with these data is to take the corrected imagery data arrays and combine them in to RGB or RGBA images.\r\n\r\nSo depending on how dask handles things like OR'ing multiple boolean arrays or any other operation that involves multiple datasets, we could end up with a couple in memory. Are you saying that our chunk size is too big or too small?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371967263/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371969250",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371969250",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371969250,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk2OTI1MA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T22:57:40Z",
        "updated_at": "2018-03-09T22:57:40Z",
        "author_association": "MEMBER",
        "body": "Ah, sorry, I interpreted your 4096 chunk size as being 4096 pixels, not 4096**2 pixels.  That makes sense to me.  \r\n\r\nDoes your file format support blocked storage?  When you write some block of data are you touching only one contiguous region on disk, or are you spreading over a lot of disk?  For example if your layout is C-ordered then it might make sense to rechunk your data to that ordering in order to avoid jumping around on disk a lot.  I don't know what geotiff supports here, my guess would be that it is just using naive c-ordering, in which case you probably want to pull out your data and push it back in without any chunking at all on the last axis.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371969250/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371970769",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371970769",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371970769,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk3MDc2OQ==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T23:05:49Z",
        "updated_at": "2018-03-09T23:05:49Z",
        "author_association": "CONTRIBUTOR",
        "body": "So there are a couple things that complicate how we do this.\r\n\r\n1. SatPy can write to multiple output formats. This issue is specifically using rasterio to save geotiffs because it was easier to save blocks instead of required the entire image to be loaded in to memory.\r\n2. By default and pretty commonly, geotiffs are in C order I believe with one channel being contiguous at a time (all of R, then all of G, etc).\r\n3. Geotiffs do allow tiling where a 2D region of the image is saved contiguously. This is not the default and some readers have difficulty with it...I think. We're still getting the rasterio stuff working so we haven't tackled doing this with dask blocks yet. One reason was that I assumed the best performance would be to save the blocks as is, but geotiff tiles have to be the same size (I forget how the edge tiles are handled).\r\n4. Geotiffs can be compressed and we use DEFLATE compression by default. I'm not sure how rasterio/gdal handles this when it comes to saving blocks one at a time. Is it compressing just that block? Is it building the entire image in memory then compressing to disk? I don't know. I do know that for most of our data cases doing tiling and compression can save you a ton of disk space compared to just not tiling with compression.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371970769/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371974762",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371974762",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371974762,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk3NDc2Mg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T23:29:52Z",
        "updated_at": "2018-03-09T23:29:52Z",
        "author_association": "MEMBER",
        "body": "Usually compressed formats are also chunked in some way.  My experience is\nthat if you want to get good performance storing data in chunks then you\n*need* to investigate how the underlying format is doing the chunking and\nmatch that.\n\nOn Fri, Mar 9, 2018 at 6:05 PM, David Hoese <notifications@github.com>\nwrote:\n\n> So there are a couple things that complicate how we do this.\n>\n>    1. SatPy can write to multiple output formats. This issue is\n>    specifically using rasterio to save geotiffs because it was easier to save\n>    blocks instead of required the entire image to be loaded in to memory.\n>    2. By default and pretty commonly, geotiffs are in C order I believe\n>    with one channel being contiguous at a time (all of R, then all of G, etc).\n>    3. Geotiffs do allow tiling where a 2D region of the image is saved\n>    contiguously. This is not the default and some readers have difficulty with\n>    it...I think. We're still getting the rasterio stuff working so we haven't\n>    tackled doing this with dask blocks yet. One reason was that I assumed the\n>    best performance would be to save the blocks as is, but geotiff tiles have\n>    to be the same size (I forget how the edge tiles are handled).\n>    4. Geotiffs can be compressed and we use DEFLATE compression by\n>    default. I'm not sure how rasterio/gdal handles this when it comes to\n>    saving blocks one at a time. Is it compressing just that block? Is it\n>    building the entire image in memory then compressing to disk? I don't know.\n>    I do know that for most of our data cases doing tiling and compression can\n>    save you a ton of disk space compared to just not tiling with compression.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/3255#issuecomment-371970769>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszMTCP-xut_0p1k-f5lwPXVTgIE_Uks5tcwrOgaJpZM4SjBVR>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371974762/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/371975661",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-371975661",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 371975661,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk3NTY2MQ==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-09T23:35:45Z",
        "updated_at": "2018-03-09T23:35:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "Yeah that makes complete sense and I agree, but I would also like it to work...last week. It can get pretty complicated when it comes to GDAL and GeoTIFF given all of the options and types of compression. Looks like GDAL has a \"number of threads\" option for compression too: http://www.gdal.org/frmt_gtiff.html\r\n\r\nWe will definitely explore the best way to do this, but for now I wanted the basic options to work well.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/371975661/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/372024426",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-372024426",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 372024426,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjAyNDQyNg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-10T11:58:09Z",
        "updated_at": "2018-03-10T11:58:09Z",
        "author_association": "MEMBER",
        "body": "I would set GDAL's number of threads for compression to 1, and rechunk your array to have no chunking along the last axes:\r\n\r\n    x.rechunk((x.chunks[0], (x.shape[1],), (x.shape[2],)))",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/372024426/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/374333594",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-374333594",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 374333594,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDMzMzU5NA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-19T19:13:26Z",
        "updated_at": "2018-03-19T19:13:26Z",
        "author_association": "MEMBER",
        "body": "Missed this part before. So responding to it now.\r\n\r\n> The idea with setting `compute=False` on `store` is to allow satpy (and users) to merge as many parts of multiple dask graphs as possible by passing all of the Delayed objects from multiple `da.store`s to the caller who can then do `delayed(*list_of_delayeds).compute()`. Let me know if this doesn't make sense and you want more information.\r\n\r\nTypically if one wants something like this, they call `da.store` with multiple arrays to store and multiple storage targets. This combines all the Dask graphs together and is decently smart at optimizing them too. If this is something that is possible for you to do, expect that it will simplify the amount of logic carried around in your code doing similar things.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/374333594/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/374583671",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-374583671",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 374583671,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDU4MzY3MQ==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-20T12:43:20Z",
        "updated_at": "2018-03-20T12:43:20Z",
        "author_association": "CONTRIBUTOR",
        "body": "@jakirkham The way our package is structured you can save data to multiple different \"writers\" so delaying everything to the last step is preferred to reduce the amount of repeated calculations. To give these writers the most flexibility I wanted them to be able to return a generic Delayed object (or any other dask/compute-compatible object). I've made it so these individual writers can either return a single Delayed object or a `(source, target)` pair to be passed to `da.store`. The source and targets are collected and passed to one `da.store` call and the caller is responsible for closing the targets.\r\n\r\nThis is still in a pretty early version of the software so we'll see how it works out as more writers are added and used by my people.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/374583671/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/374623103",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-374623103",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 374623103,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDYyMzEwMw==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-20T14:42:38Z",
        "updated_at": "2018-03-20T14:42:38Z",
        "author_association": "MEMBER",
        "body": "Have you looked at the [`return_stored`]( http://dask.pydata.org/en/latest/array-api.html#dask.array.store ) argument of `store`? Setting `compute=False, return_stored=True` would give you similar behavior except it would return a Dask Array instead. This would make it a bit easier to chain together repeated calls to `store`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/374623103/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/374801501",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-374801501",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 374801501,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDgwMTUwMQ==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-21T00:21:26Z",
        "updated_at": "2018-03-21T00:21:26Z",
        "author_association": "CONTRIBUTOR",
        "body": "@jakirkham But I would have the same problem of not having a pointer to the target file-like object, right?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/374801501/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/374808835",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-374808835",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 374808835,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDgwODgzNQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-21T01:11:36Z",
        "updated_at": "2018-03-21T01:11:36Z",
        "author_association": "MEMBER",
        "body": "Sure. The suggestion wasn't geared towards solving the file handle problem. It was geared towards solving the storing to multiple targets problem.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/374808835/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/374809093",
        "html_url": "https://github.com/dask/dask/issues/3255#issuecomment-374809093",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3255",
        "id": 374809093,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDgwOTA5Mw==",
        "user": {
            "login": "djhoese",
            "id": 1828519,
            "node_id": "MDQ6VXNlcjE4Mjg1MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1828519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/djhoese",
            "html_url": "https://github.com/djhoese",
            "followers_url": "https://api.github.com/users/djhoese/followers",
            "following_url": "https://api.github.com/users/djhoese/following{/other_user}",
            "gists_url": "https://api.github.com/users/djhoese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/djhoese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/djhoese/subscriptions",
            "organizations_url": "https://api.github.com/users/djhoese/orgs",
            "repos_url": "https://api.github.com/users/djhoese/repos",
            "events_url": "https://api.github.com/users/djhoese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/djhoese/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-21T01:13:21Z",
        "updated_at": "2018-03-21T01:13:21Z",
        "author_association": "CONTRIBUTOR",
        "body": "Ok, right. I had looked at it early on when looking in to the issue, but something about it didn't work with what I wanted. I had trouble understanding how saving to a file returned an array object.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/374809093/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]