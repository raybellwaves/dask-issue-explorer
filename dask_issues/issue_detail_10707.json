{
    "url": "https://api.github.com/repos/dask/dask/issues/10707",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/10707/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/10707/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/10707/events",
    "html_url": "https://github.com/dask/dask/issues/10707",
    "id": 2042282607,
    "node_id": "I_kwDOAbcwm855usJv",
    "number": 10707,
    "title": "Applying `functools.partial()` to a `@delayed`-decorated function changes the execution behavior",
    "user": {
        "login": "Andrew-S-Rosen",
        "id": 8674072,
        "node_id": "MDQ6VXNlcjg2NzQwNzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8674072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Andrew-S-Rosen",
        "html_url": "https://github.com/Andrew-S-Rosen",
        "followers_url": "https://api.github.com/users/Andrew-S-Rosen/followers",
        "following_url": "https://api.github.com/users/Andrew-S-Rosen/following{/other_user}",
        "gists_url": "https://api.github.com/users/Andrew-S-Rosen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Andrew-S-Rosen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Andrew-S-Rosen/subscriptions",
        "organizations_url": "https://api.github.com/users/Andrew-S-Rosen/orgs",
        "repos_url": "https://api.github.com/users/Andrew-S-Rosen/repos",
        "events_url": "https://api.github.com/users/Andrew-S-Rosen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Andrew-S-Rosen/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-12-14T18:50:29Z",
    "updated_at": "2024-02-24T19:30:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Describe the issue**:\r\n\r\nApplying `functools.partial()` to a `@dask.delayed`-decorated function can change a workflow's behavior in various circumstances, particularly when passing `@dask.delayed`-decorated functions as arguments to other `@dask.delayed`-decorated functions. I have been observing a lot of bizarre behavior, and I've provided one simple example below. One would expect `partial()` to not change the functionality. Everything works as-expected without `functools.partial`.\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\nNote: I know there are arguably \"better\" ways to accomplish the example below. It is simply a means of displaying a change in behavior.\r\n\r\n```python\r\nfrom functools import partial\r\nfrom dask.distributed import Client\r\nfrom dask import delayed\r\n\r\nclient = Client()\r\n\r\n@delayed\r\ndef increment(x, verbose=False):\r\n    if verbose:\r\n        print(\"I <3 Dask\")\r\n    return x + 1\r\n\r\n@delayed\r\ndef runner(x, op):\r\n    vals = [x] * 3\r\n    results = []\r\n    for val in vals:\r\n        result = op(val)\r\n        results.append(result)\r\n    return results\r\n\r\nrunner(1,increment).compute() # returns [2, 2, 2]\r\nrunner(1,partial(increment, verbose=True)).compute() # returns List[Delayed]\r\n```\r\n\r\nIn general, one would expect `functools.partial()` to only influence the args or kwargs to the underlying function, without changing the execution behavior or anything else about the workflow.\r\n\r\n**Anything else we need to know?**:\r\n\r\nI imagine this has to do, at least in part, with `isinstance()` checks on the `partial`, which isn't a `Delayed` object until the arguments have been supplied.\r\n\r\nThe following is a way to use `functools.partial` without changing behavior now that #10695 was merged since you're basically stripping off the original `@delayed` decorator to re-add it later, but this is clunky, and I'd argue the behavior of `functools.partial()` is still not as expected.\r\n\r\n```python\r\nrunner(1,delayed(partial(increment.__wrapped__, verbose=True))).compute()\r\n```\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2023.12.0\r\n- Python version: 3.11+\r\n- Operating System: Linux\r\n- Install method (conda, pip, source): Pip\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/10707/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/10707/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}