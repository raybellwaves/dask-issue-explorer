{
    "url": "https://api.github.com/repos/dask/dask/issues/10337",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/10337/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/10337/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/10337/events",
    "html_url": "https://github.com/dask/dask/issues/10337",
    "id": 1746653629,
    "node_id": "I_kwDOAbcwm85oG9G9",
    "number": 10337,
    "title": "dask.array.store behavior is inconsistent for `compute=True` and `compute=False`",
    "user": {
        "login": "jhamman",
        "id": 2443309,
        "node_id": "MDQ6VXNlcjI0NDMzMDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2443309?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jhamman",
        "html_url": "https://github.com/jhamman",
        "followers_url": "https://api.github.com/users/jhamman/followers",
        "following_url": "https://api.github.com/users/jhamman/following{/other_user}",
        "gists_url": "https://api.github.com/users/jhamman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jhamman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jhamman/subscriptions",
        "organizations_url": "https://api.github.com/users/jhamman/orgs",
        "repos_url": "https://api.github.com/users/jhamman/repos",
        "events_url": "https://api.github.com/users/jhamman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jhamman/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        },
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "crusaderky",
        "id": 6213168,
        "node_id": "MDQ6VXNlcjYyMTMxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crusaderky",
        "html_url": "https://github.com/crusaderky",
        "followers_url": "https://api.github.com/users/crusaderky/followers",
        "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
        "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
        "organizations_url": "https://api.github.com/users/crusaderky/orgs",
        "repos_url": "https://api.github.com/users/crusaderky/repos",
        "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
        "received_events_url": "https://api.github.com/users/crusaderky/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2023-06-07T20:46:31Z",
    "updated_at": "2023-07-17T02:10:05Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Describe the issue**:\r\n\r\nI've been working to diagnosis an issue where some embarrassingly parallel `dask+distributed+zarr` workloads accumulate memory until the point of failure. The example below communicates the basic workflow that is failing which hinges on whether `compute` is set to True or False in `dask.array.store`. When `compute=False` and the resulting object is computed, the workflow succeeds but when `compute=True`, memory on the workers steadily climbs.\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport dask\r\nimport dask.array as da\r\nfrom dask.distributed import Client\r\n\r\n# target zarr store\r\nstore = \"s3://test-bucket\"\r\n\r\n# Create Dask LocalCluster / Client\r\ndclient = Client()\r\n\r\n# Write random dask array to store\r\nstate = da.random.RandomState(1234)\r\narr = state.random((500, 17999, 36000), chunks=(5, 1799, 3600))\r\n\r\n# this works\r\ntsk = arr.to_zarr(store, component='compute_false', compute=False)\r\ndask.compute(tsk)\r\n\r\n# this eventually runs out of memory\r\narr.to_zarr(store, component='compute_true', compute=True)\r\n```\r\n\r\n**Anything else we need to know?**:\r\n\r\nLooking at at the source code for `dask.array.store` I've zeroed in on what may (or may not) be an important detail. when `compute=True`, a `HighLevelGraph` is created and computed on using `compute_as_if_collection`. When `compute=False`, an additional task is added to the `HighLevelGraph` and a `delayed` object is returned: \r\n\r\nhttps://github.com/dask/dask/blob/596d74dbc72db663efac606d42d5c93c5a917fb9/dask/array/core.py#L1235-L1245\r\n\r\nWhat I don't understand is why/how dask is able to better execute the graph formed in the later case? Why doesn't dask create the same graph in both cases, then (optionally) compute?\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2023.5.0 (same for distributed)\r\n- Python version: 3.10.11\r\n- Operating System: Linux / Ubuntu\r\n- Install method (conda, pip, source): conda\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/10337/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/10337/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}