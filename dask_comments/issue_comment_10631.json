[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1812586119",
        "html_url": "https://github.com/dask/dask/issues/10631#issuecomment-1812586119",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10631",
        "id": 1812586119,
        "node_id": "IC_kwDOAbcwm85sCd6H",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-15T13:59:35Z",
        "updated_at": "2023-11-15T13:59:35Z",
        "author_association": "MEMBER",
        "body": "I would like input from @jrbourbeau but IIUC the current implementation doesn't allow us to distinguish much here. \r\n\r\nIf this toggle is on, a `map_partitions` is scheduled that will cast the columns. For instance, even if the parquet reader would deal with other dtypes in a better way, a subsequent `map_partitions` would kill it again. I currently don't see an easy way out of this.\r\n\r\nSimilarly, regarding structs, lists, etc. we don't have a way to know without seeing the data and we rely on this casting when dealing with `meta` already. The cast itself could likely be made a little smarter but we'd have to deal with meta inconsistencies all over the place.\r\n\r\n@phofl is there anything in pandas we can push / wait for to make this experience nicer?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1812586119/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1812589189",
        "html_url": "https://github.com/dask/dask/issues/10631#issuecomment-1812589189",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10631",
        "id": 1812589189,
        "node_id": "IC_kwDOAbcwm85sCeqF",
        "user": {
            "login": "phofl",
            "id": 61934744,
            "node_id": "MDQ6VXNlcjYxOTM0NzQ0",
            "avatar_url": "https://avatars.githubusercontent.com/u/61934744?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phofl",
            "html_url": "https://github.com/phofl",
            "followers_url": "https://api.github.com/users/phofl/followers",
            "following_url": "https://api.github.com/users/phofl/following{/other_user}",
            "gists_url": "https://api.github.com/users/phofl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phofl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phofl/subscriptions",
            "organizations_url": "https://api.github.com/users/phofl/orgs",
            "repos_url": "https://api.github.com/users/phofl/repos",
            "events_url": "https://api.github.com/users/phofl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phofl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-15T14:01:24Z",
        "updated_at": "2023-11-15T14:01:24Z",
        "author_association": "MEMBER",
        "body": "https://pandas.pydata.org/docs/whatsnew/v2.1.0.html#avoid-numpy-object-dtype-for-strings-by-default\r\n\r\nThis is the best we can do, it converts the data through looking at them. It would cause meta and the actual data get out of sync, but that's the only downside I can see",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1812589189/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1812591619",
        "html_url": "https://github.com/dask/dask/issues/10631#issuecomment-1812591619",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10631",
        "id": 1812591619,
        "node_id": "IC_kwDOAbcwm85sCfQD",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-15T14:02:55Z",
        "updated_at": "2023-11-15T14:02:55Z",
        "author_association": "MEMBER",
        "body": "Just to be sure, what I'm saying is \"there are probably some ways to improve things, even if we don't entirely solve the problem\".  \r\n\r\nAs an example, I found that `date` types were converted to object and then to string[pyarrow].  By convering `date` instead to timestamp / datetime64 in the parquet reader they turned into a more reasonable data type and it seemed like they stayed that data type in subsequent operations (I doubt that the code from James converts a datetime64 to a string[pyarrow]).  \r\n\r\nIs my understanding above correct?  If so then great! let's spend a little bit of effort on type mappers in the parquet reader.  I'll bet that that helps reduce the pain here.  Maybe there are other low-hanging fruit like this?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1812591619/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1812599410",
        "html_url": "https://github.com/dask/dask/issues/10631#issuecomment-1812599410",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10631",
        "id": 1812599410,
        "node_id": "IC_kwDOAbcwm85sChJy",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-15T14:07:48Z",
        "updated_at": "2023-11-15T14:07:48Z",
        "author_association": "MEMBER",
        "body": "Yes, the `date` type should be better handled this way. I was thinking mostly about the lists and more complex things.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1812599410/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1812609074",
        "html_url": "https://github.com/dask/dask/issues/10631#issuecomment-1812609074",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10631",
        "id": 1812609074,
        "node_id": "IC_kwDOAbcwm85sCjgy",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-15T14:13:38Z",
        "updated_at": "2023-11-15T14:13:38Z",
        "author_association": "MEMBER",
        "body": "Cool.   What other low hanging fruit exist?  Decimal?  \r\n\r\nAdditionally, what about another approach?  Right now it looks like we do this in `Frame` so it's very global.  Maybe if we make all of the data ingestion functions better (parquet, csv, snowflake, ...) then we don't need to do as eager of a conversion and we let object dtype stay object dtypes?  I suspect that most of the benefit here is handled at the IO layer. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1812609074/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1854163441",
        "html_url": "https://github.com/dask/dask/issues/10631#issuecomment-1854163441",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10631",
        "id": 1854163441,
        "node_id": "IC_kwDOAbcwm85uhEnx",
        "user": {
            "login": "phofl",
            "id": 61934744,
            "node_id": "MDQ6VXNlcjYxOTM0NzQ0",
            "avatar_url": "https://avatars.githubusercontent.com/u/61934744?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phofl",
            "html_url": "https://github.com/phofl",
            "followers_url": "https://api.github.com/users/phofl/followers",
            "following_url": "https://api.github.com/users/phofl/following{/other_user}",
            "gists_url": "https://api.github.com/users/phofl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phofl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phofl/subscriptions",
            "organizations_url": "https://api.github.com/users/phofl/orgs",
            "repos_url": "https://api.github.com/users/phofl/repos",
            "events_url": "https://api.github.com/users/phofl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phofl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-12-13T15:38:37Z",
        "updated_at": "2023-12-13T15:38:37Z",
        "author_association": "MEMBER",
        "body": "So I looked a little into the types mapper, converting dates and decimals to numpy dtypes is not supported out of the box. We could theoretically cast them ourselves if we want to?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1854163441/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1915417729",
        "html_url": "https://github.com/dask/dask/issues/10631#issuecomment-1915417729",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10631",
        "id": 1915417729,
        "node_id": "IC_kwDOAbcwm85yKvSB",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-01-29T19:31:10Z",
        "updated_at": "2024-01-29T19:31:10Z",
        "author_association": "MEMBER",
        "body": "Just a note that we are running into this problem a lot in RAPIDS while working on the pandas 2+ support.\r\n\r\nSince cudf supports optimized `struct` and `list` dtypes, we have test coverage for the pandas-backed version of struct/list-column processing. For these kinds of workflows, it is obviously a bug to convert the column to `string[pyarrow]`, because the processing logic is not expecting a string.\r\n\r\nFor now, we are just setting the `\"dataframe.convert-string\"` config to `False` in a bunch of tests, because I do realize that this is difficult to \"fix\" (and encouraging pyarrow strings by default still seems like a good idea).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1915417729/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]