[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/849117555",
        "html_url": "https://github.com/dask/dask/issues/7708#issuecomment-849117555",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7708",
        "id": 849117555,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTExNzU1NQ==",
        "user": {
            "login": "quasiben",
            "id": 1403768,
            "node_id": "MDQ6VXNlcjE0MDM3Njg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quasiben",
            "html_url": "https://github.com/quasiben",
            "followers_url": "https://api.github.com/users/quasiben/followers",
            "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
            "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
            "organizations_url": "https://api.github.com/users/quasiben/orgs",
            "repos_url": "https://api.github.com/users/quasiben/repos",
            "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quasiben/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-26T21:06:32Z",
        "updated_at": "2021-05-26T21:06:32Z",
        "author_association": "MEMBER",
        "body": "Thanks for raising this @kdebrab .  `delayed` should be wrapped around the function not the class, still, with this correct the context manager does not seem to work correct.  Can I ask you to test if explicitly calling pure=True on the delayed function works as expected ?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/849117555/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/849435076",
        "html_url": "https://github.com/dask/dask/issues/7708#issuecomment-849435076",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7708",
        "id": 849435076,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTQzNTA3Ng==",
        "user": {
            "login": "kdebrab",
            "id": 1150402,
            "node_id": "MDQ6VXNlcjExNTA0MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1150402?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kdebrab",
            "html_url": "https://github.com/kdebrab",
            "followers_url": "https://api.github.com/users/kdebrab/followers",
            "following_url": "https://api.github.com/users/kdebrab/following{/other_user}",
            "gists_url": "https://api.github.com/users/kdebrab/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kdebrab/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kdebrab/subscriptions",
            "organizations_url": "https://api.github.com/users/kdebrab/orgs",
            "repos_url": "https://api.github.com/users/kdebrab/repos",
            "events_url": "https://api.github.com/users/kdebrab/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kdebrab/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-27T08:15:36Z",
        "updated_at": "2021-05-27T14:47:51Z",
        "author_association": "NONE",
        "body": "It also raises when calling pure=True on the delayed method.\r\n\r\nIn other words:\r\n```python\r\nassert a.addmethod(3, 4, pure=True).key == a.addmethod(3, 4, pure=True).key\r\n```\r\nraises for the first example (where the method is wrapped), but not for the second one (where the class is wrapped).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/849435076/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/851049047",
        "html_url": "https://github.com/dask/dask/issues/7708#issuecomment-851049047",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7708",
        "id": 851049047,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTA0OTA0Nw==",
        "user": {
            "login": "kdebrab",
            "id": 1150402,
            "node_id": "MDQ6VXNlcjExNTA0MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1150402?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kdebrab",
            "html_url": "https://github.com/kdebrab",
            "followers_url": "https://api.github.com/users/kdebrab/followers",
            "following_url": "https://api.github.com/users/kdebrab/following{/other_user}",
            "gists_url": "https://api.github.com/users/kdebrab/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kdebrab/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kdebrab/subscriptions",
            "organizations_url": "https://api.github.com/users/kdebrab/orgs",
            "repos_url": "https://api.github.com/users/kdebrab/repos",
            "events_url": "https://api.github.com/users/kdebrab/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kdebrab/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-30T19:29:02Z",
        "updated_at": "2021-05-31T13:43:37Z",
        "author_association": "NONE",
        "body": "To my understanding, the reason the delayed method does not become pure,  is because of the containing class instance, which is passed as the first argument `self` and which is considered to be a mutable object, even when passing 'pure=True'.  In the case where the whole class is delayed, the containing class is considered immutable when passing 'pure=True', and thus also the method becomes pure.  This is achieved by the `delayed` decorator through adding a `__dask_tokenize__` method.\r\n\r\nI don't know whether that's on purpose.\r\n\r\nAs I don't want to delay the whole class (as otherwise all its other methods also become delayed), I'm considering to use the following workaround where I add the `__dask_tokenize__` method to the class through a decorator:\r\n\r\n```python\r\ndef dask_tokenized(cls):\r\n    class Tokenized(cls):\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            self._args = args\r\n            self._kwargs = kwargs\r\n            super().__init__(*args, **kwargs)\r\n\r\n        def __dask_tokenize__(self):\r\n            return f\"{cls.__name__}-{dask.base.tokenize(cls, *self._args, **self._kwargs)}\"\r\n\r\n    return Tokenized\r\n```\r\n\r\nDecorating the class with this decorator:\r\n```python\r\n@dask_tokenized\r\nclass A:\r\n    BASE = 10\r\n\r\n    def __init__(self, base):\r\n        self.BASE = base\r\n\r\n    @dask.delayed\r\n    def addmethod(self, x, y):\r\n        return self.BASE + x + y\r\n```\r\nThen:\r\n```python\r\na = A(100)\r\n\r\nassert a.addmethod(3, 4, pure=True).key == a.addmethod(3, 4, pure=True).key\r\n```\r\ndoesn't raise an AssertionError anymore.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/851049047/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/851629133",
        "html_url": "https://github.com/dask/dask/issues/7708#issuecomment-851629133",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7708",
        "id": 851629133,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MTYyOTEzMw==",
        "user": {
            "login": "kdebrab",
            "id": 1150402,
            "node_id": "MDQ6VXNlcjExNTA0MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1150402?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kdebrab",
            "html_url": "https://github.com/kdebrab",
            "followers_url": "https://api.github.com/users/kdebrab/followers",
            "following_url": "https://api.github.com/users/kdebrab/following{/other_user}",
            "gists_url": "https://api.github.com/users/kdebrab/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kdebrab/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kdebrab/subscriptions",
            "organizations_url": "https://api.github.com/users/kdebrab/orgs",
            "repos_url": "https://api.github.com/users/kdebrab/repos",
            "events_url": "https://api.github.com/users/kdebrab/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kdebrab/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-31T18:31:11Z",
        "updated_at": "2021-05-31T18:48:08Z",
        "author_association": "NONE",
        "body": "An alternative workaround (from https://stackoverflow.com/questions/51110803/are-class-methods-pure-in-dask) is:\r\n\r\n```python\r\nclass A:\r\n    BASE = 10\r\n\r\n    def __init__(self, base):\r\n        self.BASE = base\r\n\r\n    def _addmethod(self, x, y):\r\n        return self.BASE + x + y\r\n\r\n    def addmethod(self, *args, **kwargs):\r\n        return dask.delayed(self._addmethod, pure=True)(*args, **kwargs)\r\n```\r\nThen:\r\n```python\r\na = A(100)\r\nb = A(100)\r\nc = A(101)\r\n\r\nassert a.addmethod(3, 4).key == a.addmethod(3, 4).key\r\nassert a.addmethod(3, 4).key == b.addmethod(3, 4).key\r\nassert a.addmethod(3, 4).key != c.addmethod(3, 4).key\r\n```\r\ndoesn't raise any AssertionError.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/851629133/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]