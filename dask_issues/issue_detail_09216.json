{
    "url": "https://api.github.com/repos/dask/dask/issues/9216",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9216/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9216/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9216/events",
    "html_url": "https://github.com/dask/dask/issues/9216",
    "id": 1284140078,
    "node_id": "I_kwDOAbcwm85Mimwu",
    "number": 9216,
    "title": "[Rough Idea] Remove HighLevelGraph/Layer.cull by simplifying Layer",
    "user": {
        "login": "rjzamora",
        "id": 20461013,
        "node_id": "MDQ6VXNlcjIwNDYxMDEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjzamora",
        "html_url": "https://github.com/rjzamora",
        "followers_url": "https://api.github.com/users/rjzamora/followers",
        "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
        "organizations_url": "https://api.github.com/users/rjzamora/orgs",
        "repos_url": "https://api.github.com/users/rjzamora/repos",
        "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjzamora/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 2156573524,
            "node_id": "MDU6TGFiZWwyMTU2NTczNTI0",
            "url": "https://api.github.com/repos/dask/dask/labels/highlevelgraph",
            "name": "highlevelgraph",
            "color": "8c24d6",
            "default": false,
            "description": "Issues relating to HighLevelGraphs."
        },
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-06-24T20:05:38Z",
    "updated_at": "2022-07-25T02:13:36Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "After beginning to push on #9117 (and #9159) for a bit, I decided it might be worthwhile to investigate ways to improve the existing `HighLevelGraph`/`Layer` design. In addition to the serialization pains that will hopefully be resolved by [dask/distributed#6028](https://github.com/dask/distributed/pull/6028), my impression is that a key problem with HLGs is that it is unnecessarily difficult to implement a new `Layer`. Others my disagree with my perspective on this, but I suspect that this has a lot to do with (1) `Layer` inheriting from `Mapping`, and (2) the requirement to implement a `cull` method that avoids materialization.\r\n\r\nI propose that we consider moving away from `Layer(Mapping)`, and make the `Layer` design a bit simpler. For example, it may make sense to boil the base `Layer` class down to three primary methods: `get_output_keys`, `subgraph`, and `subgraph_dependencies` (where subclasses would only be required to implement `get_output_keys` and `subgraph`):\r\n\r\n```python\r\nclass Layer:\r\n    \"\"\"Base Layer Class\"\"\"\r\n\r\n    def get_output_keys(self) -> Set:\r\n        \"\"\"Return all possible output keys\"\"\"\r\n        raise NotImplementedError\r\n\r\n    # NEW\r\n    def subgraph(self, keys: Set) -> Mapping:\r\n        \"\"\"Return the local subgraph required to produce ``keys``\"\"\"\r\n        raise NotImplementedError\r\n\r\n    # NEW\r\n    def subgraph_dependencies(\r\n        self,\r\n        output_keys: Set,\r\n        subgraph: Mapping,\r\n        layer_dependencies: Mapping[str, Layer],\r\n    ) -> Mapping[str, Set]:\r\n        \"\"\"Return external key dependencies for this layer\"\"\"\r\n        from dask.core import keys_in_tasks\r\n        \r\n        # Default implementation ignores `output_keys`, but\r\n        # custom Layers may know the dependency keys from\r\n        # the output keys alone\r\n        return {\r\n            dep: keys_in_tasks(\r\n                set(dep_layer.get_output_keys()),\r\n                [subgraph],\r\n            ) for dep, dep_layer in layer_dependencies.items()\r\n        }\r\n```\r\n\r\nUsing this design, HLG-to-`dict` \u201cmaterialization\u201d can easily capture culling automatically. I started experimenting with this in [rjzamora:avoid-cull](https://github.com/rjzamora/dask/tree/avoid-cull) (although that branch still uses `Layer(Mapping)` for now), and I found that [`ensure_dict` can be revised](https://github.com/rjzamora/dask/blob/11534cb588b3d4bfacb1e72ff4ae0d0a88c83e21/dask/utils.py#L1185) so that culling is applied without any `HighLevelGraph.cull` optimization.  Also, if I understand correctly, overriding `subgraph_dependencies` for `Blockwise` would effectively resolve #8570 (the linear scaling of the current culling approach).\r\n\r\nTo summarize, I propose that we consider moving away from `Layer(Mapping)` and `HighLevelGraph/Layer.cull`, and adopt a simpler `Layer` API. The boiled down API I have in mind would require (1) a method to materialize the subgraph for a specific set of output keys, and (2) a method to return all possible output keys for that layer. I expect the primary benefits to be simplified Layer development, and improved culling performance. However, simplifying the Layer API may also make it more tractable to introduce the necessary collection information and/or metadata we ultimately need for general HLG optimizations.\r\n\r\n**NOTE**: Please feel free to poke holes in this idea as aggressively as you want :)",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9216/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9216/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}