[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632886372",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632886372",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632886372,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg4NjM3Mg==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T19:48:51Z",
        "updated_at": "2020-05-22T19:48:51Z",
        "author_association": "MEMBER",
        "body": "Thanks for the report. I can reproduce on master and am taking a look now. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632886372/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632895419",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632895419",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632895419,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg5NTQxOQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T20:20:52Z",
        "updated_at": "2020-05-22T20:20:52Z",
        "author_association": "MEMBER",
        "body": "Hmm. So if you do the `set_index` before you create the dask dataframe things work as expected:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\nimport numpy\r\ntimes = [1545362463409128000, 1545362504369352000, 1545362545326966000, 1545363118769636000, 1545363159726490000, 1545363200687178000, 1545363241648824000, 1573318190393973000, 1573318231353350000, 1573318272313774000, 1573318313275299000, 1573318354233962000, 1573318395195456000, 1573318436154609000, 1580687544437145000, 1580687585394881000, 1580687667316809000, 1580687708275414000, 1580687790195742000, 1580687831154951000, 1580687872115363000, 1580687954035133000, 1559127673402811000]\r\ndata = numpy.ones(len(times))\r\ndf = pd.DataFrame({'Time': times, 'Counts': data})\r\ndf['Time'] = pd.to_datetime(df['Time'],utc=True)\r\ndf = df.set_index(\"Time\")\r\nprint(df.resample('1Y').count())\r\nprint(dd.from_pandas(df, npartitions=2).resample('1Y').count().compute())\r\n```\r\n\r\nSo I think the issue is in the dask `set_index`",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632895419/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632907688",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632907688",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632907688,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkwNzY4OA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T21:02:17Z",
        "updated_at": "2020-05-22T21:02:17Z",
        "author_association": "MEMBER",
        "body": "A teensy bit more information. It seems like the agg function used on the resampler also doesn't matter. For instance you can see the same bug when inspecting the size of the items in the resampler\r\n\r\n```python\r\ndd.from_pandas(df, npartitions=2).set_index('Time').resample('1Y').size()\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632907688/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632908101",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632908101",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632908101,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkwODEwMQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T21:03:44Z",
        "updated_at": "2020-05-22T21:03:44Z",
        "author_association": "MEMBER",
        "body": "cc @TomAugspurger in case you have any pointers. Otherwise I'll be digging into the `resample` and `set_index` code. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632908101/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632911234",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632911234",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632911234,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkxMTIzNA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T21:14:49Z",
        "updated_at": "2020-05-22T21:14:49Z",
        "author_association": "MEMBER",
        "body": "No pointers really, just perhaps guiding questions:\r\n\r\n1. Are we only ever incorrect on the final partition?\r\n2. Does the issue only arise when the values fall exactly on a resample boundary?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632911234/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632917356",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632917356",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632917356,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkxNzM1Ng==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T21:34:19Z",
        "updated_at": "2020-05-22T21:34:19Z",
        "author_association": "MEMBER",
        "body": "Ok thanks\r\n1. Still trying to validate that this only happens on the final partition. \r\n2. This doesn't seem to be the case. \r\n\r\nOne thing I've noticed is that `dask.dataframe.set_index` does a sort, whereas pandas doesn't. Do you think that's intentional?\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\n\r\ntimes = [1545362463409128000, 1545362504369352000, 1545362545326966000, 1545363118769636000, 1545363159726490000, 1545363200687178000, 1545363241648824000, 1573318190393973000, 1573318231353350000, 1573318272313774000, 1573318313275299000, 1573318354233962000, 1573318395195456000, 1573318436154609000, 1580687544437145000, 1580687585394881000, 1580687667316809000, 1580687708275414000, 1580687790195742000, 1580687831154951000, 1580687872115363000, 1580687954035133000, 1559127673402811000]\r\ndf = pd.DataFrame({'Time': pd.to_datetime(times, utc=True)})\r\n\r\nprint(df.set_index('Time').index[-1])\r\nprint(dd.from_pandas(df, npartitions=6).set_index('Time').compute().index[-1])\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632917356/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632917801",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632917801",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632917801,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkxNzgwMQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T21:35:43Z",
        "updated_at": "2020-05-22T21:35:43Z",
        "author_association": "MEMBER",
        "body": "I'll keep digging on Tuesday.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632917801/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632920805",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632920805",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632920805,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkyMDgwNQ==",
        "user": {
            "login": "tevi",
            "id": 1986831,
            "node_id": "MDQ6VXNlcjE5ODY4MzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1986831?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tevi",
            "html_url": "https://github.com/tevi",
            "followers_url": "https://api.github.com/users/tevi/followers",
            "following_url": "https://api.github.com/users/tevi/following{/other_user}",
            "gists_url": "https://api.github.com/users/tevi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tevi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tevi/subscriptions",
            "organizations_url": "https://api.github.com/users/tevi/orgs",
            "repos_url": "https://api.github.com/users/tevi/repos",
            "events_url": "https://api.github.com/users/tevi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tevi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T21:46:18Z",
        "updated_at": "2020-05-22T21:47:26Z",
        "author_association": "NONE",
        "body": "1. I don't think it only affects the final partition. The larger sample test case I ran 8,045 timestamps over 474 partitions had multiple partitions skipped although all that data fell into the first bin of the resampled dataframe as oppose to the last bin for this example which down samples the 8,045 keeping roughly the same order and diversity.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632920805/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632925041",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632925041",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632925041,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkyNTA0MQ==",
        "user": {
            "login": "tevi",
            "id": 1986831,
            "node_id": "MDQ6VXNlcjE5ODY4MzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1986831?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tevi",
            "html_url": "https://github.com/tevi",
            "followers_url": "https://api.github.com/users/tevi/followers",
            "following_url": "https://api.github.com/users/tevi/following{/other_user}",
            "gists_url": "https://api.github.com/users/tevi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tevi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tevi/subscriptions",
            "organizations_url": "https://api.github.com/users/tevi/orgs",
            "repos_url": "https://api.github.com/users/tevi/repos",
            "events_url": "https://api.github.com/users/tevi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tevi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T22:00:04Z",
        "updated_at": "2020-05-22T22:00:04Z",
        "author_association": "NONE",
        "body": "I will freely admit I don't fully understand the internals but this #2288 seems relevant, especially https://github.com/dask/dask/issues/2288#issuecomment-298911635. This could be an edge case where the heuristic for being \"sorted enough\" fails.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632925041/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632937295",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-632937295",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 632937295,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjkzNzI5NQ==",
        "user": {
            "login": "tevi",
            "id": 1986831,
            "node_id": "MDQ6VXNlcjE5ODY4MzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1986831?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tevi",
            "html_url": "https://github.com/tevi",
            "followers_url": "https://api.github.com/users/tevi/followers",
            "following_url": "https://api.github.com/users/tevi/following{/other_user}",
            "gists_url": "https://api.github.com/users/tevi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tevi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tevi/subscriptions",
            "organizations_url": "https://api.github.com/users/tevi/orgs",
            "repos_url": "https://api.github.com/users/tevi/repos",
            "events_url": "https://api.github.com/users/tevi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tevi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T22:56:55Z",
        "updated_at": "2020-05-22T22:58:01Z",
        "author_association": "NONE",
        "body": "> ```python\r\n> df['Time'] = pd.to_datetime(df['Time'],utc=True)\r\n> df = df.set_index(\"Time\")\r\n> print(df.resample('1Y').count())\r\n> print(dd.from_pandas(df, npartitions=2).resample('1Y').count().compute())\r\n> ```\r\n> So I think the issue is in the dask set_index\r\n\r\n I'm no longer sure it's only in `set_index`. Resampling for 6M instead of 1Y breaks the code more even when pandas performs `set_index`. \r\n\r\nThe following:\r\n```\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\nimport numpy\r\ntimes = [1545362463409128000, 1545362504369352000, 1545362545326966000, 1545363118769636000, 1545363159726490000, 1545363200687178000, 1545363241648824000, 1573318190393973000, 1573318231353350000, 1573318272313774000, 1573318313275299000, 1573318354233962000, 1573318395195456000, 1573318436154609000, 1580687544437145000, 1580687585394881000, 1580687667316809000, 1580687708275414000, 1580687790195742000, 1580687831154951000, 1580687872115363000, 1580687954035133000, 1559127673402811000]\r\ndata = numpy.ones(len(times))\r\ndf = pd.DataFrame({'Time': times, 'Counts': data})\r\ndf['Time'] = pd.to_datetime(df['Time'],utc=True)\r\ndf = df.set_index('Time')\r\nprint(df.resample('6M').count())\r\nprint(dd.from_pandas(df, npartitions=23).resample('6M').count().compute())\r\n```\r\n\r\nGives for the pandas\r\n```\r\n                           Counts\r\nTime                             \r\n2018-12-31 00:00:00+00:00       7\r\n2019-06-30 00:00:00+00:00       1\r\n2019-12-31 00:00:00+00:00       7\r\n2020-06-30 00:00:00+00:00       8\r\n```\r\n\r\nBut dask gives:\r\n```\r\n                           Counts\r\nTime                             \r\n2018-12-31 00:00:00+00:00       7\r\n2019-06-30 00:00:00+00:00       0\r\n2019-12-31 00:00:00+00:00       0\r\n2020-06-30 00:00:00+00:00       0\r\n```\r\nAnd with the extreme `npartitions=23` should definitively answer both of @TomAugspurger  questions. \r\n1. Multiple partitions are incorrectly counted \r\n2. Issue can occur over multiple resample boundaries\r\n\r\nAlso, interestingly, the output of `npartitions=23` != `npartitions=[2:22]` != `npartitions=1`",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632937295/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634041971",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634041971",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634041971,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDA0MTk3MQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-26T13:57:31Z",
        "updated_at": "2020-05-26T13:57:31Z",
        "author_association": "MEMBER",
        "body": "Ok that example helps. I agree that it isn't the `set_index` that matters. Although the sorting might matter. I think the issue is coming from this bit:\r\n\r\nhttps://github.com/dask/dask/blob/37591327aa23025d5b01249f9f448e36acb43aa2/dask/dataframe/tseries/resample.py#L31-L33\r\n\r\nThe index of `out` has ends of the months rather than the ends of the 6M interval. The counts are correct other than that. You'll notice that if you do: \r\n\r\n```python\r\nimport pandas as pd\r\nimport numpy\r\ntimes = [1573318190393973000, 1573318231353350000, 1573318272313774000, 1573318313275299000, 1573318354233962000, 1573318395195456000]\r\ndata = numpy.ones(len(times))\r\ndf = pd.DataFrame({'Time': times, 'Counts': data})\r\ndf['Time'] = pd.to_datetime(df['Time'],utc=True)\r\ndf = df.set_index('Time')\r\nprint(df.resample('6M').count())\r\n```\r\nYou get `2019-11-30` as the index. I am doing some more inspection, but I think that if the partitions are sufficiently small that each partition contains only one date, then the resample fails to choose the same start and stop date for the resample. And then we reindex onto the correct sampling interval and that's how we end up with 0s. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634041971/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634067313",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634067313",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634067313,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDA2NzMxMw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-26T14:39:13Z",
        "updated_at": "2020-05-26T14:39:13Z",
        "author_association": "MEMBER",
        "body": "As a comparison try using the `Q` rule instead since that has unambiguous starts and ends",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634067313/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634216907",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634216907",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634216907,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDIxNjkwNw==",
        "user": {
            "login": "tevi",
            "id": 1986831,
            "node_id": "MDQ6VXNlcjE5ODY4MzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1986831?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tevi",
            "html_url": "https://github.com/tevi",
            "followers_url": "https://api.github.com/users/tevi/followers",
            "following_url": "https://api.github.com/users/tevi/following{/other_user}",
            "gists_url": "https://api.github.com/users/tevi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tevi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tevi/subscriptions",
            "organizations_url": "https://api.github.com/users/tevi/orgs",
            "repos_url": "https://api.github.com/users/tevi/repos",
            "events_url": "https://api.github.com/users/tevi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tevi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-26T19:03:21Z",
        "updated_at": "2020-05-26T19:03:50Z",
        "author_association": "NONE",
        "body": "So using the `Q` rule I get inconsistent values from dask based on number of partitions. \r\n```\r\n                           Counts\r\nTime                             \r\n2018-12-31 00:00:00+00:00     7.0\r\n2019-03-31 00:00:00+00:00     0.0\r\n2019-06-30 00:00:00+00:00     1.0\r\n2019-09-30 00:00:00+00:00     NaN\r\n2019-12-31 00:00:00+00:00     7.0\r\n2020-03-31 00:00:00+00:00     8.0\r\n```\r\n\r\nNote the NaN present which disappears for `npartitions=1` and the `2019-03-31 0` also becomes a NaN for `npartitions=23`. This calculation should be deterministic if you ignore the funkiness caused by the resample giving a wrong new time index. So something's likely causing a possible unintended NaN.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634216907/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634252834",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634252834",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634252834,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDI1MjgzNA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-26T20:10:52Z",
        "updated_at": "2020-05-26T20:11:06Z",
        "author_association": "MEMBER",
        "body": "I think the issue of the `NaN`s is unrelated. There are some more aggregation functions that should have `fill_value=0`. Here is a PR for that piece: #6245",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634252834/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634716378",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634716378",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634716378,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDcxNjM3OA==",
        "user": {
            "login": "tevi",
            "id": 1986831,
            "node_id": "MDQ6VXNlcjE5ODY4MzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1986831?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tevi",
            "html_url": "https://github.com/tevi",
            "followers_url": "https://api.github.com/users/tevi/followers",
            "following_url": "https://api.github.com/users/tevi/following{/other_user}",
            "gists_url": "https://api.github.com/users/tevi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tevi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tevi/subscriptions",
            "organizations_url": "https://api.github.com/users/tevi/orgs",
            "repos_url": "https://api.github.com/users/tevi/repos",
            "events_url": "https://api.github.com/users/tevi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tevi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-27T14:54:17Z",
        "updated_at": "2020-05-27T14:58:48Z",
        "author_association": "NONE",
        "body": "Not sure how much effort or if it'll even work, but could the issue be avoided if instead of just passing the frequency to resample you pass an entire new time index? Something more akin to the flexibility offered by matlab's `retime` function? Although that's probably more of a new feature request instead of maintenance/bug.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634716378/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634724248",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634724248",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634724248,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDcyNDI0OA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-27T15:04:56Z",
        "updated_at": "2020-05-27T15:04:56Z",
        "author_association": "MEMBER",
        "body": "Ok, I am mostly writing this down in case anyone else is able to offer some insight. I think there are two bugs that we are seeing here:\r\n\r\n1. The index of a resampled dataframe is determined by the start date of that dataframe. So when we sort and split data before resampling it, we can end up with a different index than if we were to do a resample on the entire dataset. To correct for this, we reindex the output from each resample onto the expected index. This only works if the output of resample is a subset of the expected index values. Totest this out try using a '6M' freq as described in https://github.com/dask/dask/issues/6230#issuecomment-632937295. Note that the relevant code is at: https://github.com/dask/dask/blob/37591327aa23025d5b01249f9f448e36acb43aa2/dask/dataframe/tseries/resample.py#L31-L46\r\n\r\n2. Separate from issue 1. The last item in the new resampled dataframe can be off by 1. I noticed this when am still looking into why this might be happening but it only happens when `set_index` is called after the dask dataframe is created. As mentioned above, this probably has more to do with sorting than with `set_index` itself. To test this out, look at the last value in these two cases:\r\n\r\n```python \r\nprint(dd.from_pandas(df.set_index('Time'), npartitions=6).resample('1Q').size().compute())\r\nprint(dd.from_pandas(df, npartitions=6).set_index('Time').resample('1Q').size().compute())",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634724248/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634726924",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634726924",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634726924,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDcyNjkyNA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-27T15:08:37Z",
        "updated_at": "2020-05-27T15:08:37Z",
        "author_association": "MEMBER",
        "body": ">  but could the issue be avoided if instead of just passing the frequency to resample you pass an entire new time index?\r\n\r\nI was looking through the pandas docs for something like that and couldn't see how that would be implemented. If you can find a way to that, I think that'd be a good approach.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634726924/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634787618",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634787618",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634787618,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDc4NzYxOA==",
        "user": {
            "login": "tevi",
            "id": 1986831,
            "node_id": "MDQ6VXNlcjE5ODY4MzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1986831?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tevi",
            "html_url": "https://github.com/tevi",
            "followers_url": "https://api.github.com/users/tevi/followers",
            "following_url": "https://api.github.com/users/tevi/following{/other_user}",
            "gists_url": "https://api.github.com/users/tevi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tevi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tevi/subscriptions",
            "organizations_url": "https://api.github.com/users/tevi/orgs",
            "repos_url": "https://api.github.com/users/tevi/repos",
            "events_url": "https://api.github.com/users/tevi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tevi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-27T16:36:51Z",
        "updated_at": "2020-05-27T16:39:14Z",
        "author_association": "NONE",
        "body": "> > but could the issue be avoided if instead of just passing the frequency to resample you pass an entire new time index?\r\n> \r\n> I was looking through the pandas docs for something like that and couldn't see how that would be implemented. If you can find a way to that, I think that'd be a good approach.\r\n\r\nI'm not aware pandas has the functionality, I've used it in matlab for their dataframe like data structure. Would likely require a new feature request for pandas. I was mostly just thinking out loud.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634787618/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/634906520",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-634906520",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 634906520,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDkwNjUyMA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-27T19:56:07Z",
        "updated_at": "2020-05-27T19:56:07Z",
        "author_association": "MEMBER",
        "body": "For the second issue it looks like the bounds that are set in `divisions` are too close to the real value. This I think is what @TomAugspurger was hinting at in https://github.com/dask/dask/issues/6230#issuecomment-632911234. \r\n\r\nTo see this we can do:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\nimport numpy\r\ntimes = [1545362463409128000, 1545362504369352000, 1545362545326966000, 1545363118769636000, 1545363159726490000, 1545363200687178000, 1545363241648824000, 1573318190393973000, 1573318231353350000, 1573318272313774000, 1573318313275299000, 1573318354233962000, 1573318395195456000, 1573318436154609000, 1580687544437145000, 1580687585394881000, 1580687667316809000, 1580687708275414000, 1580687790195742000, 1580687831154951000, 1580687872115363000, 1580687954035133000, 1559127673402811000]\r\ndata = numpy.ones(len(times))\r\ndf = pd.DataFrame({'Time': times, 'Counts': data})\r\ndf['Time'] = pd.to_datetime(df['Time'],utc=True)\r\n\r\nddf = dd.from_pandas(df, npartitions=2).set_index('Time')\r\nprint(ddf.resample('1Q').size().compute())\r\n\r\nddf.divisions = (ddf.divisions[0], ddf.divisions[1], ddf.divisions[2] + pd.Timedelta(days=1))\r\nprint(ddf.resample('1Q').size().compute())\r\n```\r\n\r\nClearly this is a crazy thing to do :) but we could do some similar padding elsewhere in the code. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/634906520/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/636132902",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-636132902",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 636132902,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjEzMjkwMg==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-29T18:54:50Z",
        "updated_at": "2020-05-29T18:54:50Z",
        "author_association": "MEMBER",
        "body": "In case no one gets to this for a while, I wanted to write up where this is at.\r\n\r\nThe last remaining piece of this issue is to get it so that the `\"6M\"` example works as expected. In master now it'll throw an error if the per-division resampled index isn't a subset of the target index.  And the last partition won't be off by one, but it'd be nice if we could resample and use the known index as the step. As mentioned in the comments above though, this might require a change in pandas. \r\n\r\nThis is the snippet to test with:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\nimport numpy\r\ntimes = [1545362463409128000, 1545362504369352000, 1545362545326966000, 1545363118769636000, 1545363159726490000, 1545363200687178000, 1545363241648824000, 1573318190393973000, 1573318231353350000, 1573318272313774000, 1573318313275299000, 1573318354233962000, 1573318395195456000, 1573318436154609000, 1580687544437145000, 1580687585394881000, 1580687667316809000, 1580687708275414000, 1580687790195742000, 1580687831154951000, 1580687872115363000, 1580687954035133000, 1559127673402811000]\r\ndata = numpy.ones(len(times))\r\ndf = pd.DataFrame({'Time': times, 'Counts': data})\r\ndf['Time'] = pd.to_datetime(df['Time'],utc=True)\r\ndf = df.set_index('Time')\r\nprint(df.resample('6M').count())\r\nprint(dd.from_pandas(df, npartitions=23).resample('6M').count().compute())\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/636132902/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/637670986",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-637670986",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 637670986,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzY3MDk4Ng==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-02T16:38:52Z",
        "updated_at": "2020-06-02T16:38:52Z",
        "author_association": "MEMBER",
        "body": "A possible solution?\r\n\r\n1. Determine the authoritaive groups ahead of time based on the divisions:\r\n\r\n```python\r\nIn [131]: ddf = dd.from_pandas(df2, npartitions=23)\r\n\r\nIn [132]: resampler = pd.Series(1, index=ddf.divisions).resample(\"6M\")\r\n\r\nIn [133]: _ = resampler.groups  # populate grouper\r\n\r\nIn [134]: bingrouper = resampler.grouper\r\n\r\nIn [135]: bingrouper\r\nOut[135]: <pandas.core.groupby.ops.BinGrouper at 0x119eaf910>\r\n```\r\n\r\n2. In `dd.dataframe.tseries.resample._resample_series`, maybe elsewhere, change the `series.resample(rule, **resample_kwargs)` to `series.groupby(bingrouper)`. Pandas recognizes these Grouper objects and knows what to do with them.\r\n\r\nLMK if you run into any issues @jsignell.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/637670986/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/637790825",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-637790825",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 637790825,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzc5MDgyNQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-02T20:34:11Z",
        "updated_at": "2020-06-02T20:39:01Z",
        "author_association": "MEMBER",
        "body": "Actually I don't think that works. It looks like the grouper has some notion of which items in the series go in which groups and that makes it not work to apply it to a different set of data.\r\n\r\n```python\r\nddf = dd.from_pandas(df, npartitions=2).set_index('Time')\r\nresampler = pd.Series(1, index=ddf.divisions).resample(\"6M\")\r\n_ = resampler.groups  # populate grouper\r\nbingrouper = resampler.grouper\r\ndf.groupby(bingrouper).size()\r\n```\r\n\r\nBut I am now reading about `pd.cut` it seems like that might provide just the functionality that I am looking for. UPDATE: nah - it's only for 1D arrays...\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/637790825/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/637810649",
        "html_url": "https://github.com/dask/dask/issues/6230#issuecomment-637810649",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6230",
        "id": 637810649,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzgxMDY0OQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-02T21:15:10Z",
        "updated_at": "2020-06-02T21:15:38Z",
        "author_association": "MEMBER",
        "body": "> It looks like the grouper has some notion of which items in the series go in which groups and that makes it not work to apply it to a different set of data.\r\n\r\nAh that's unfortunate. I should have time to look again on Friday.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/637810649/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]