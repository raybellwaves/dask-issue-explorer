[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1190379682",
        "html_url": "https://github.com/dask/dask/issues/9294#issuecomment-1190379682",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9294",
        "id": 1190379682,
        "node_id": "IC_kwDOAbcwm85G88Ci",
        "user": {
            "login": "pavithraes",
            "id": 33131404,
            "node_id": "MDQ6VXNlcjMzMTMxNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/33131404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pavithraes",
            "html_url": "https://github.com/pavithraes",
            "followers_url": "https://api.github.com/users/pavithraes/followers",
            "following_url": "https://api.github.com/users/pavithraes/following{/other_user}",
            "gists_url": "https://api.github.com/users/pavithraes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pavithraes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pavithraes/subscriptions",
            "organizations_url": "https://api.github.com/users/pavithraes/orgs",
            "repos_url": "https://api.github.com/users/pavithraes/repos",
            "events_url": "https://api.github.com/users/pavithraes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pavithraes/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-20T14:45:46Z",
        "updated_at": "2022-07-20T14:45:46Z",
        "author_association": "MEMBER",
        "body": "@billiejoe-bw Thanks for reporting!\r\n\r\nWhen we call `compute()`, Dask DataFrame results in the same thing as pandas.\r\n\r\nYou're right that the metadata inference is what's wrong here. So, the error is valid (pandas raises the same), we need to raise this before `compute` though such that `merged_df['string_key_A']` fails.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1190379682/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1214319763",
        "html_url": "https://github.com/dask/dask/issues/9294#issuecomment-1214319763",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9294",
        "id": 1214319763,
        "node_id": "IC_kwDOAbcwm85IYQyT",
        "user": {
            "login": "kutal10",
            "id": 36085864,
            "node_id": "MDQ6VXNlcjM2MDg1ODY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/36085864?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kutal10",
            "html_url": "https://github.com/kutal10",
            "followers_url": "https://api.github.com/users/kutal10/followers",
            "following_url": "https://api.github.com/users/kutal10/following{/other_user}",
            "gists_url": "https://api.github.com/users/kutal10/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kutal10/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kutal10/subscriptions",
            "organizations_url": "https://api.github.com/users/kutal10/orgs",
            "repos_url": "https://api.github.com/users/kutal10/repos",
            "events_url": "https://api.github.com/users/kutal10/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kutal10/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-14T09:26:05Z",
        "updated_at": "2022-08-14T09:26:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "@pavithraes @jsignell Hey both - i've been working on this issue for the past few days\r\n\r\n### **Approach**\r\n\r\nAt the minute, i'm looking at comparing the Dask Dataframe metadata to the Pandas equivalent using `compute()` all within the `__getitem__` method. I don't know if this approach is necessarily optimal, but it passes the test cases i've written for it. \r\n\r\nI do acknowledge that maybe:\r\n\r\n1. I need to not touch `__getitem__` and I just need to look at adjusting how `_meta` is adjusted by  `reset_index()`\r\n2. Or I need to look at an alternate solution within `__getitem__`\r\n\r\n### **Tests**\r\n\r\nI've already written out two tests that check when the merged indices are different and when the merged indices are the same, as per @billiejoe-bw examples above.\r\n\r\n### **Problem**\r\n\r\nThe problem with my solution at the minute, is that, no tests fail except one re materialization which keeps failing:\r\n\r\n```python\r\ndef test_repr_materialize():\r\n    # DataFrame/Series repr should not materialize\r\n    # any layers in timeseries->shuffle->getitem\r\n    s = timeseries(end=\"2000-01-03\").shuffle(\"id\", shuffle=\"tasks\")[\"id\"]\r\n    assert all([not l.is_materialized() for l in s.dask.layers.values()])\r\n    s.__repr__()\r\n    s.to_frame().__repr__()\r\n    assert all([not l.is_materialized() for l in s.dask.layers.values()])\r\n```\r\n\r\nI believe, this is because `compute()` always materializes. Even making a deepcopy of the Dask Dataframe within `__getitem__` does not solve this.\r\n\r\nIs this the right approach?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1214319763/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1224342275",
        "html_url": "https://github.com/dask/dask/issues/9294#issuecomment-1224342275",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9294",
        "id": 1224342275,
        "node_id": "IC_kwDOAbcwm85I-fsD",
        "user": {
            "login": "pavithraes",
            "id": 33131404,
            "node_id": "MDQ6VXNlcjMzMTMxNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/33131404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pavithraes",
            "html_url": "https://github.com/pavithraes",
            "followers_url": "https://api.github.com/users/pavithraes/followers",
            "following_url": "https://api.github.com/users/pavithraes/following{/other_user}",
            "gists_url": "https://api.github.com/users/pavithraes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pavithraes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pavithraes/subscriptions",
            "organizations_url": "https://api.github.com/users/pavithraes/orgs",
            "repos_url": "https://api.github.com/users/pavithraes/repos",
            "events_url": "https://api.github.com/users/pavithraes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pavithraes/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-23T16:53:42Z",
        "updated_at": "2022-08-23T16:53:42Z",
        "author_association": "MEMBER",
        "body": "@kutal10 Thanks for working on this! I think you may want to look into how `meta` is created by `merge()` when `left_index=True, right_index=True`. Dask is using `'string_key_A'` as the index column name instead of `'index'`, while creating the meta.\r\n\r\nNote that Dask creates the right `meta` here:\r\n\r\n```python\r\nmerged_df = dd.merge(A_df, B_df, left_on='string_key_A', right_on='string_key_B').reset_index()\r\nprint(merged_df)\r\n# Output:\r\n# Dask DataFrame Structure:\r\n#                index value1 value2\r\n# npartitions=1                     \r\n#                int64  int64  int64\r\n#                  ...    ...    ...\r\n# Dask Name: reset_index, 13 tasks\r\n```\r\n\r\nSo, I might also look at the code path this operation takes. :)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1224342275/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1231447785",
        "html_url": "https://github.com/dask/dask/issues/9294#issuecomment-1231447785",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9294",
        "id": 1231447785,
        "node_id": "IC_kwDOAbcwm85JZmbp",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-30T10:03:09Z",
        "updated_at": "2022-08-30T10:04:01Z",
        "author_association": "CONTRIBUTOR",
        "body": "Beware, because what is happening here is:\r\n\r\n1. When you join on 2 indexes with different names, Pandas sets the result index name to `None`, but not to `'index'`. It's `reset_index()` the one that switches from `None` to `'index'` when `drop=False`.\r\n2. Dask is doing it wrong with `meta`, because it's assuming `index.name` should be `'string_key_A'`, but it should be `None` instead. And then `'string_key_A'` wouldn't exist anymore (neither as index nor as column, so the `KeyError` would be raised before any `compute()`.\r\n3. This doesn't happen when both indexes are named the same, because in that case both Pandas and Dask keep `index.name` untouched. And when one does `reset_index(drop=False)` later on, that name is preserved as the column name.\r\n\r\nSo 2) must be corrected, but, aside from that I personally think that Dask should NOT allow doing `reset_index(drop=False)` when `index.name is None`. Introducing a column named `'index'` is a poor approach, because 1) the fact that the index is anonymous should indicate that it was NEVER a column of the original data, but just an auxiliary thing, 2) there may be another column called `'index'` already. This is related to my [recent PR](https://github.com/dask/dask/pull/9422) (which would make point2 fail), and to the discussion going on about [this issue](https://github.com/dask/dask/issues/9380) (which covers point 1).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1231447785/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]