[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/679182778",
        "html_url": "https://github.com/dask/dask/issues/6543#issuecomment-679182778",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6543",
        "id": 679182778,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTE4Mjc3OA==",
        "user": {
            "login": "quasiben",
            "id": 1403768,
            "node_id": "MDQ6VXNlcjE0MDM3Njg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quasiben",
            "html_url": "https://github.com/quasiben",
            "followers_url": "https://api.github.com/users/quasiben/followers",
            "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
            "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
            "organizations_url": "https://api.github.com/users/quasiben/orgs",
            "repos_url": "https://api.github.com/users/quasiben/repos",
            "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quasiben/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T15:04:48Z",
        "updated_at": "2020-08-24T15:04:48Z",
        "author_association": "MEMBER",
        "body": "Thanks @stuarteberg this is coming up in the how dask will will pick divisions.  What ultimately is happening is that dask will calculate new divisions like the following:\r\n\r\nhttps://github.com/dask/dask/blob/d96fed990279fcd272cc5ada005d07c85b104ce5/dask/dataframe/core.py#L5952-L5955\r\n\r\nWhich in this case will result in something like:\r\n> [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 12.75, 13.5, 14.25, 15.0]\r\n\r\nThe above is converted from float to int and now we have doubled up a value and an error is raised.  I think we want to keep the logic in the reparitions/division calculation as is. Instead, what you can do is set the divisions directly:\r\n\r\n> df.repartition(divisions=list(range(16)))\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/679182778/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/679201763",
        "html_url": "https://github.com/dask/dask/issues/6543#issuecomment-679201763",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6543",
        "id": 679201763,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTIwMTc2Mw==",
        "user": {
            "login": "stuarteberg",
            "id": 1655821,
            "node_id": "MDQ6VXNlcjE2NTU4MjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1655821?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuarteberg",
            "html_url": "https://github.com/stuarteberg",
            "followers_url": "https://api.github.com/users/stuarteberg/followers",
            "following_url": "https://api.github.com/users/stuarteberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuarteberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuarteberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuarteberg/subscriptions",
            "organizations_url": "https://api.github.com/users/stuarteberg/orgs",
            "repos_url": "https://api.github.com/users/stuarteberg/repos",
            "events_url": "https://api.github.com/users/stuarteberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuarteberg/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T15:36:17Z",
        "updated_at": "2020-08-24T17:13:12Z",
        "author_association": "MEMBER",
        "body": "Thanks for looking at this.  One problem with that approach is that the index is not necessarily contiguous, so `range(16)` isn't necessarily correct.  But I suppose it's impossible to know how to choose good divisions in that case unless you know the index values.\r\n\r\nI know there's an option for `partition_size`, but that's based on RAM usage.  Unfortunately, that's not a convenient way to specify \"one row per partition\", especially in my real use-case, where one of the columns has `dtype=object`.\r\n\r\nI'm not exactly sure how to use `repartition()` when I don't know the exact index set.  Is there a way to just force it to compute the index so I can learn the divisions and then choose them myself?\r\n\r\nJust to illustrate some of the problem:\r\n\r\nSuppose I have a dataframe with a non-contiguous index:\r\n\r\n```python\r\ndata = pd.DataFrame({'a': np.arange(16)}, index=np.arange(0, 160, 10))\r\ndf = ddf.from_pandas(data, chunksize=4)\r\n```\r\n\r\n(That's a simple case, but suppose I don't happen to know exactly what the non-contiguous index values are.)\r\n\r\nIf I happen to know the total length of the dataframe, I might try this:\r\n\r\n```python\r\nIn [146]: df2 = df.repartition(npartitions=16)\r\n     ...: df2.divisions\r\nOut[146]: (0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 127, 135, 142, 150)\r\n```\r\n\r\nNo error in that case, but it already results in something weird. I would have expected this:\r\n\r\n```\r\n(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 150)\r\n```\r\n\r\nOf course even that would still be non-ideal if the true index didn't happen to be evenly spaced.\r\n\r\nIf I happen to know the divisions, I can at least attempt an even spacing.  Even better would be to learn the complete index.  What's the correct way to do that?  Run `map_partitions()` and return just the index?  Even if I try that, I'm still running into an [assertion when the old divisions are not yet known][1], since `None != 0`.\r\n\r\n[1]: https://github.com/dask/dask/blob/d96fed990279fcd272cc5ada005d07c85b104ce5/dask/dataframe/core.py#L5772\r\n\r\nPS -- Apologies, I will be afk for a bit.  Thanks again for your response.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/679201763/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/679222096",
        "html_url": "https://github.com/dask/dask/issues/6543#issuecomment-679222096",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6543",
        "id": 679222096,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTIyMjA5Ng==",
        "user": {
            "login": "quasiben",
            "id": 1403768,
            "node_id": "MDQ6VXNlcjE0MDM3Njg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quasiben",
            "html_url": "https://github.com/quasiben",
            "followers_url": "https://api.github.com/users/quasiben/followers",
            "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
            "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
            "organizations_url": "https://api.github.com/users/quasiben/orgs",
            "repos_url": "https://api.github.com/users/quasiben/repos",
            "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quasiben/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T16:09:39Z",
        "updated_at": "2020-08-24T16:09:39Z",
        "author_association": "MEMBER",
        "body": "Can you also describe the use case you have here?  Why do you need a partition for each row ?  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/679222096/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/679253150",
        "html_url": "https://github.com/dask/dask/issues/6543#issuecomment-679253150",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6543",
        "id": 679253150,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTI1MzE1MA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-24T17:09:18Z",
        "updated_at": "2020-08-24T17:09:18Z",
        "author_association": "MEMBER",
        "body": "Thank you for the bug report @stuarteberg and the excellent minimal example.  I think tha regardless of the circumstance this demonstrates a bug in the repartitioning code that we should resolve rather than find a work-around.\r\n\r\nTwo options come to mind:\r\n\r\n1.  We don't convert to int, but keep as a float\r\n2.  We do a pass through the divisions and make sure that they are appropriately unique (except for the last element).  This probably means that we drop the repeated elements, and just have fewer partitions than was asked for.  This also came up recently in #6541 cc @nils-braun \r\n\r\nI'm in favor of implementing fix 2",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/679253150/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/683124022",
        "html_url": "https://github.com/dask/dask/issues/6543#issuecomment-683124022",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6543",
        "id": 683124022,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzEyNDAyMg==",
        "user": {
            "login": "dgerlanc",
            "id": 892459,
            "node_id": "MDQ6VXNlcjg5MjQ1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/892459?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dgerlanc",
            "html_url": "https://github.com/dgerlanc",
            "followers_url": "https://api.github.com/users/dgerlanc/followers",
            "following_url": "https://api.github.com/users/dgerlanc/following{/other_user}",
            "gists_url": "https://api.github.com/users/dgerlanc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dgerlanc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dgerlanc/subscriptions",
            "organizations_url": "https://api.github.com/users/dgerlanc/orgs",
            "repos_url": "https://api.github.com/users/dgerlanc/repos",
            "events_url": "https://api.github.com/users/dgerlanc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dgerlanc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-28T20:04:58Z",
        "updated_at": "2020-08-28T20:05:23Z",
        "author_association": "NONE",
        "body": "Any thoughts on how the test `test_dataframe.test_repartition_npartitions` should behave in relate to this change? This will break the assertion that the number of resulting partitions is `== n_partitions` for `<= n_partitions`. @mrocklin",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/683124022/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]