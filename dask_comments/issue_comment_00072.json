[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/559709426",
        "html_url": "https://github.com/dask/dask/issues/72#issuecomment-559709426",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/72",
        "id": 559709426,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcwOTQyNg==",
        "user": {
            "login": "JSKenyon",
            "id": 6582745,
            "node_id": "MDQ6VXNlcjY1ODI3NDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6582745?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JSKenyon",
            "html_url": "https://github.com/JSKenyon",
            "followers_url": "https://api.github.com/users/JSKenyon/followers",
            "following_url": "https://api.github.com/users/JSKenyon/following{/other_user}",
            "gists_url": "https://api.github.com/users/JSKenyon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JSKenyon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JSKenyon/subscriptions",
            "organizations_url": "https://api.github.com/users/JSKenyon/orgs",
            "repos_url": "https://api.github.com/users/JSKenyon/repos",
            "events_url": "https://api.github.com/users/JSKenyon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JSKenyon/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-29T08:47:50Z",
        "updated_at": "2019-11-29T08:47:50Z",
        "author_association": "MEMBER",
        "body": "A little bit of necromancy here - was this ever resolved? This sort of behaviour would be incredibly useful in a number of situations. Consider the following (failing) example in which we want the unique elements per chunk and the inverse mapping:\r\n\r\n```python\r\nimport dask.array as da\r\nimport numpy as np\r\n\r\na = da.random.randint(0, 10, 100, chunks=10)\r\n\r\nuni, inv = a.map_blocks(np.unique, return_inverse=True)\r\n```\r\nThis fails as the output of the map_blocks call is a tuple of arrays, which is not understood. We can fool it by instead doing the following:\r\n\r\n```python\r\nuni_tuple = a.map_blocks(np.unique, return_inverse=True, dtype=np.object)\r\n```\r\nThis is not very helpful on its own as calling compute on `uni_tuple` will fail. Again, we can circumvent this by doing:\r\n\r\n```python\r\nfrom operator import getitem\r\n\r\nuni_tuple = a.map_blocks(np.unique, return_inverse=True, dtype=np.object)\r\n\r\nuni = uni_tuple.map_blocks(getitem, 0, dtype=np.int64)\r\ninv = uni_tuple.map_blocks(getitem, 1, dtype=np.int64)\r\n```\r\n\r\nNow we can freely call compute on `uni` and `inv` as well as use them as inputs to other calls. However, this is for the very simple case of just two return arrays and in my opinion it is already a bit messy. In practice, we may want to run a custom function that returns an arbitrary number of array and scalar outputs per block. The same is true of blockwise - we may want to produce several outputs. Unless there is an alternative approach which I am unaware of (highly likely - I am an enthusiastic amateur at this point) I would be incredibly grateful for this functionality in both blockwise and map_blocks. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/559709426/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/559813983",
        "html_url": "https://github.com/dask/dask/issues/72#issuecomment-559813983",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/72",
        "id": 559813983,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTgxMzk4Mw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-29T14:52:21Z",
        "updated_at": "2019-11-29T14:52:21Z",
        "author_association": "MEMBER",
        "body": "I would also be grateful if someone could cleanly add this functionality to blockwise and map_blocks.\r\n\r\nin the meantime, you might take a look at gufuncs.  https://docs.dask.org/en/latest/array-gufunc.html",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/559813983/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]