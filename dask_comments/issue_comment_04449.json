[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/459788973",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-459788973",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 459788973,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc4ODk3Mw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-01T16:51:34Z",
        "updated_at": "2019-02-01T16:51:34Z",
        "author_association": "MEMBER",
        "body": "Looking at the stack trace it looks like this might be reproducible by just\ncalling sys.getsizeof on a geopandas dataframe.  Can you see if this is the\ncase and, if so, raise upstream at geopandas?\n\nOn Fri, Feb 1, 2019 at 7:32 AM arredond <notifications@github.com> wrote:\n\n> Almost definitely related to #3972\n> <https://github.com/dask/dask/issues/3972> and #3976\n> <https://github.com/dask/dask/issues/3976>, but I'm not too sure since\n> the technical details there are above me.\n>\n> I found this bug when passing a GeoDataFrame as a keyword argument to\n> dataframe.map_partitions. Interestingly enough, this only happened *after\n> I updated to Dask 1.1 from Dask 0.17*. I suspect this is related to the\n> changes in #3998 <https://github.com/dask/dask/pull/3998>\n>\n> Weirdly enough, Dask seems to manage Dataframes containing shapely objects\n> just fine, but once a GeoDataFrame is passed, Dask is unable to determine\n> its sizeof and fails.\n>\n> Here's a reproducible example with two cases:\n>\n>    - Case 1: Make a Pandas DF with a Shapely geometry column, convert to\n>    Dask DF and pass to *map_partitions* to buffer geometries. Specify\n>    geometry as str in the meta.\n>    - Case 2: Same, but use *map_partitions* with a different function\n>    that takes a polygon GeoDataFrame and keeps only the point inside the\n>    polygon.\n>\n> df = pd.DataFrame({\n>     'id': [0, 1],\n>     'geometry': [Point(0,0), Point(2,2)]\n> })\n> ddf = dd.from_pandas(df, npartitions=2).copy()\n> # CASE 1## This works finedef buffer_points(d):\n>     gdf = gpd.GeoDataFrame(d)\n>     gdf['geometry'] = gdf.buffer(0.1)\n>     return gdf\n>\n> ddf.map_partitions(\n>     buffer_points,\n>     meta=[('id', str), ('geometry', str)]\n> ).compute()\n> # CASE 2def intersect_points(d, other_gdf):\n>     gdf = gpd.GeoDataFrame(d)\n>     sjoin = gpd.sjoin(gdf, other_gdf, op='within')\n>     sjoin.rename(index=str, columns={'id_left': 'id'}, inplace=True)\n>\n>     return sjoin[['id', 'geometry']]\n>\n> p1_buffered = gpd.GeoDataFrame({\n>     'id': [0],\n>     'geometry': [Point(0,0).buffer(0.1)]\n> })\n> # Only Pandas works fineprint(intersect_points(df, p1_buffered))\n> # Using Dask fails\n> ddf.map_partitions(\n>     intersect_points,\n>     other_gdf=p1_buffered,\n>     meta=[('id', str), ('geometry', str)]\n> )\n> # Error is `ValueError: 'values' must be a NumPy array.`\n>\n> This issue is easy to work around (just pass a Pandas' (not GeoPandas') as\n> kwarg and convert to GeoPandas inside the *map_partitions* function), but\n> it may help to solve #3972 <https://github.com/dask/dask/issues/3972> and\n> #3976 <https://github.com/dask/dask/issues/3976> or other users.\n>\n> The full stack trace is:\n>\n> ---------------------------------------------------------------------------\n> ValueError                                Traceback (most recent call last)\n> <ipython-input-79-a27b715cad40> in <module>\n>       2     intersect_points,\n>       3     other_gdf=p1_buffered,\n> ----> 4     meta=[('id', str), ('geometry', str)]\n>       5 )\n>\n> /usr/local/lib/python3.6/site-packages/dask/dataframe/core.py in map_partitions(self, func, *args, **kwargs)\n>     558         >>> ddf.map_partitions(func).clear_divisions()  # doctest: +SKIP\n>     559         \"\"\"\n> --> 560         return map_partitions(func, self, *args, **kwargs)\n>     561\n>     562     @insert_meta_param_description(pad=12)\n>\n> /usr/local/lib/python3.6/site-packages/dask/dataframe/core.py in map_partitions(func, *args, **kwargs)\n>    3705\n>    3706     # Normalize keyword arguments\n> -> 3707     kwargs2 = {k: normalize_arg(v) for k, v in kwargs.items()}\n>    3708\n>    3709     assert callable(func)\n>\n> /usr/local/lib/python3.6/site-packages/dask/dataframe/core.py in <dictcomp>(.0)\n>    3705\n>    3706     # Normalize keyword arguments\n> -> 3707     kwargs2 = {k: normalize_arg(v) for k, v in kwargs.items()}\n>    3708\n>    3709     assert callable(func)\n>\n> /usr/local/lib/python3.6/site-packages/dask/array/core.py in normalize_arg(x)\n>     301     elif isinstance(x, str) and re.match(r'_\\d+', x):\n>     302         return delayed(x)\n> --> 303     elif sizeof(x) > 1e6:\n>     304         return delayed(x)\n>     305     else:\n>\n> /usr/local/lib/python3.6/site-packages/dask/utils.py in __call__(self, arg, *args, **kwargs)\n>     411         \"\"\"\n>     412         meth = self.dispatch(type(arg))\n> --> 413         return meth(arg, *args, **kwargs)\n>     414\n>     415     @property\n>\n> /usr/local/lib/python3.6/site-packages/dask/sizeof.py in sizeof_default(o)\n>      18 @sizeof.register(object)\n>      19 def sizeof_default(o):\n> ---> 20     return getsizeof(o)\n>      21\n>      22\n>\n> /usr/local/lib/python3.6/site-packages/pandas/core/base.py in __sizeof__(self)\n>     115         \"\"\"\n>     116         if hasattr(self, 'memory_usage'):\n> --> 117             mem = self.memory_usage(deep=True)\n>     118             if not is_scalar(mem):\n>     119                 mem = mem.sum()\n>\n> /usr/local/lib/python3.6/site-packages/pandas/core/frame.py in memory_usage(self, index, deep)\n>    2584         \"\"\"\n>    2585         result = Series([c.memory_usage(index=False, deep=deep)\n> -> 2586                          for col, c in self.iteritems()], index=self.columns)\n>    2587         if index:\n>    2588             result = Series(self.index.memory_usage(deep=deep),\n>\n> /usr/local/lib/python3.6/site-packages/pandas/core/frame.py in <listcomp>(.0)\n>    2584         \"\"\"\n>    2585         result = Series([c.memory_usage(index=False, deep=deep)\n> -> 2586                          for col, c in self.iteritems()], index=self.columns)\n>    2587         if index:\n>    2588             result = Series(self.index.memory_usage(deep=deep),\n>\n> /usr/local/lib/python3.6/site-packages/pandas/core/series.py in memory_usage(self, index, deep)\n>    3911         212\n>    3912         \"\"\"\n> -> 3913         v = super(Series, self).memory_usage(deep=deep)\n>    3914         if index:\n>    3915             v += self.index.memory_usage(deep=deep)\n>\n> /usr/local/lib/python3.6/site-packages/pandas/core/base.py in memory_usage(self, deep)\n>    1408         v = self.array.nbytes\n>    1409         if deep and is_object_dtype(self) and not PYPY:\n> -> 1410             v += lib.memory_usage_of_objects(self.array)\n>    1411         return v\n>    1412\n>\n> pandas/_libs/lib.pyx in pandas._libs.lib.memory_usage_of_objects()\n>\n> /usr/local/lib/python3.6/site-packages/pandas/core/arrays/numpy_.py in __getitem__(self, item)\n>     224         result = self._ndarray[item]\n>     225         if not lib.is_scalar(result):\n> --> 226             result = type(self)(result)\n>     227         return result\n>     228\n>\n> /usr/local/lib/python3.6/site-packages/pandas/core/arrays/numpy_.py in __init__(self, values, copy)\n>     129             values = values._ndarray\n>     130         if not isinstance(values, np.ndarray):\n> --> 131             raise ValueError(\"'values' must be a NumPy array.\")\n>     132\n>     133         if values.ndim != 1:\n>\n> ValueError: 'values' must be a NumPy array.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/4449>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszM3a1-S6Owri0JCE6MukxOXRVmtIks5vJF30gaJpZM4aeiPQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/459788973/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/459793792",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-459793792",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 459793792,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc5Mzc5Mg==",
        "user": {
            "login": "arredond",
            "id": 19406854,
            "node_id": "MDQ6VXNlcjE5NDA2ODU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/19406854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arredond",
            "html_url": "https://github.com/arredond",
            "followers_url": "https://api.github.com/users/arredond/followers",
            "following_url": "https://api.github.com/users/arredond/following{/other_user}",
            "gists_url": "https://api.github.com/users/arredond/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arredond/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arredond/subscriptions",
            "organizations_url": "https://api.github.com/users/arredond/orgs",
            "repos_url": "https://api.github.com/users/arredond/repos",
            "events_url": "https://api.github.com/users/arredond/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arredond/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-01T17:06:07Z",
        "updated_at": "2019-02-01T17:08:27Z",
        "author_association": "NONE",
        "body": "Thanks for the swift response @mrocklin \r\n\r\nI tried that, and am not sure it's a GeoPandas' issue, actually. Any DF/GDF with complex data types seem to fail:\r\n\r\n```python\r\n# Both of these work\r\ndf = pd.DataFrame({'id': [0,1,2]})\r\ngdf = gpd.GeoDataFrame({'id': [0,1,2]})\r\n\r\ngetsizeof(df) # 128\r\ngetsizeof(gdf) # 128\r\n\r\n# Scalars seem to be alright\r\ndf = pd.DataFrame({'id': [0], 'a_string': ['hola']})\r\ngdf = gpd.GeoDataFrame({'id': [0], 'a_string': ['que_tal']})\r\n\r\ngetsizeof(df)\r\ngetsizeof(gdf)\r\n\r\n# Both of these fail\r\ndf = pd.DataFrame({'id': [0], 'geometry': [Point(0,0)]})\r\ngdf = gpd.GeoDataFrame({'id': [0], 'geometry': [Point(0,0)]})\r\n\r\ngetsizeof(df)\r\ngetsizeof(gdf)\r\n\r\n# Also fail\r\ndf = pd.DataFrame({'id': [0], 'inner_list': [[1,2,3,4]]})\r\ngdf = gpd.GeoDataFrame({'id': [0], 'inner_list': [[1,2,3,4]]})\r\n\r\ngetsizeof(df)\r\ngetsizeof(gdf)\r\n```\r\n\r\nAny idea what's to blame here? I was under the impression that [Dask implemented it's own `sizeof` ](https://github.com/dask/dask/blob/master/dask/sizeof.py) wrappers to take care of stuff like this",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/459793792/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/459794769",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-459794769",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 459794769,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc5NDc2OQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-01T17:09:20Z",
        "updated_at": "2019-02-01T17:09:20Z",
        "author_association": "MEMBER",
        "body": "Regardless, I suspect that the right place to address this is upstream.  Might want to raise in Pandas given that you can reproduce it with only Pandas and Shapely.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/459794769/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/459805208",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-459805208",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 459805208,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTgwNTIwOA==",
        "user": {
            "login": "arredond",
            "id": 19406854,
            "node_id": "MDQ6VXNlcjE5NDA2ODU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/19406854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arredond",
            "html_url": "https://github.com/arredond",
            "followers_url": "https://api.github.com/users/arredond/followers",
            "following_url": "https://api.github.com/users/arredond/following{/other_user}",
            "gists_url": "https://api.github.com/users/arredond/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arredond/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arredond/subscriptions",
            "organizations_url": "https://api.github.com/users/arredond/orgs",
            "repos_url": "https://api.github.com/users/arredond/repos",
            "events_url": "https://api.github.com/users/arredond/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arredond/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-01T17:42:04Z",
        "updated_at": "2019-02-01T18:09:42Z",
        "author_association": "NONE",
        "body": "Sorry for insisting on this, but while I agree that Pandas' seems to be responsible for not having implemented `sys.getsizeof` for cases when the DF contains non-Numpy types, it's clear that Dask itself is working around this with the custom `sizeof` module.\r\n\r\nThis fix on Dask's behalf is working for both Pandas' DataFrames and GeoPandas' GeoDataFrames, so something else is going on in the specific `.map_partitions` case.\r\n\r\n```python\r\n# Using Dask's `sizeof` function, not `sys.getsizeof`\r\ndf = pd.DataFrame({'id': [0], 'geometry': [Point(0,0)]})\r\ngdf = gpd.GeoDataFrame({'id': [0], 'geometry': [Point(0,0)]})\r\n\r\nsizeof(df) # 2152\r\nsizeof(gdf) # 2152\r\n\r\ndf = pd.DataFrame({'id': [0], 'inner_list': [[1,2,3,4]]})\r\ngdf = gpd.GeoDataFrame({'id': [0], 'inner_list': [[1,2,3,4]]})\r\n\r\nsizeof(df) # 2304\r\nsizeof(gdf) # 2304\r\n```\r\n\r\nIt's clear that Dask's `sizeof` is working well here, but for some reason was failing on my use case when called in  `.map_partitions`. I'll keep on investigating why.\r\n\r\nTo make that reproducible example I had to grab some Dask methods/classes/functions from `dask/utils.py` and `dask/sizeof.py`:\r\n\r\n<details>\r\n```python\r\nfrom __future__ import print_function, division, absolute_import\r\n\r\nimport inspect\r\nimport sys\r\n\r\ntry:  # PyPy does not support sys.getsizeof\r\n    sys.getsizeof(1)\r\n    getsizeof = sys.getsizeof\r\nexcept (AttributeError, TypeError):  # Monkey patch\r\n    def getsizeof(x):\r\n        return 100\r\n\r\nclass Dispatch(object):\r\n    \"\"\"Simple single dispatch.\"\"\"\r\n    def __init__(self, name=None):\r\n        self._lookup = {}\r\n        self._lazy = {}\r\n        if name:\r\n            self.__name__ = name\r\n\r\n    def register(self, type, func=None):\r\n        \"\"\"Register dispatch of `func` on arguments of type `type`\"\"\"\r\n        def wrapper(func):\r\n            if isinstance(type, tuple):\r\n                for t in type:\r\n                    self.register(t, func)\r\n            else:\r\n                self._lookup[type] = func\r\n            return func\r\n\r\n        return wrapper(func) if func is not None else wrapper\r\n\r\n    def register_lazy(self, toplevel, func=None):\r\n        \"\"\"\r\n        Register a registration function which will be called if the\r\n        *toplevel* module (e.g. 'pandas') is ever loaded.\r\n        \"\"\"\r\n        def wrapper(func):\r\n            self._lazy[toplevel] = func\r\n            return func\r\n\r\n        return wrapper(func) if func is not None else wrapper\r\n\r\n    def dispatch(self, cls):\r\n        \"\"\"Return the function implementation for the given ``cls``\"\"\"\r\n        # Fast path with direct lookup on cls\r\n        lk = self._lookup\r\n        try:\r\n            impl = lk[cls]\r\n        except KeyError:\r\n            pass\r\n        else:\r\n            return impl\r\n        # Is a lazy registration function present?\r\n        toplevel, _, _ = cls.__module__.partition('.')\r\n        try:\r\n            register = self._lazy.pop(toplevel)\r\n        except KeyError:\r\n            pass\r\n        else:\r\n            register()\r\n            return self.dispatch(cls) # recurse\r\n        # Walk the MRO and cache the lookup result\r\n        for cls2 in inspect.getmro(cls)[1:]:\r\n            if cls2 in lk:\r\n                lk[cls] = lk[cls2]\r\n                return lk[cls2]\r\n        raise TypeError(\"No dispatch for {0}\".format(cls))\r\n\r\n    def __call__(self, arg, *args, **kwargs):\r\n        \"\"\"\r\n        Call the corresponding method based on type of argument.\r\n        \"\"\"\r\n        meth = self.dispatch(type(arg))\r\n        return meth(arg, *args, **kwargs)\r\n\r\n    @property\r\n    def __doc__(self):\r\n        try:\r\n            func = self.dispatch(object)\r\n            return func.__doc__\r\n        except TypeError:\r\n            return \"Single Dispatch for %s\" % self.__name__\r\n\r\nsizeof = Dispatch(name='sizeof')\r\n\r\n\r\n@sizeof.register(object)\r\ndef sizeof_default(o):\r\n    return getsizeof(o)\r\n\r\n\r\n@sizeof.register(list)\r\n@sizeof.register(tuple)\r\n@sizeof.register(set)\r\n@sizeof.register(frozenset)\r\ndef sizeof_python_collection(seq):\r\n    return getsizeof(seq) + sum(map(sizeof, seq))\r\n\r\n\r\n@sizeof.register_lazy(\"numpy\")\r\ndef register_numpy():\r\n    import numpy as np\r\n\r\n    @sizeof.register(np.ndarray)\r\n    def sizeof_numpy_ndarray(x):\r\n        return int(x.nbytes)\r\n\r\n\r\n@sizeof.register_lazy(\"pandas\")\r\ndef register_pandas():\r\n    import pandas as pd\r\n    import numpy as np\r\n\r\n    def object_size(x):\r\n        if not len(x):\r\n            return 0\r\n        sample = np.random.choice(x, size=20, replace=True)\r\n        sample = list(map(sizeof, sample))\r\n        return sum(sample) / 20 * len(x)\r\n\r\n    @sizeof.register(pd.DataFrame)\r\n    def sizeof_pandas_dataframe(df):\r\n        p = sizeof(df.index)\r\n        for name, col in df.iteritems():\r\n            p += col.memory_usage(index=False)\r\n            if col.dtype == object:\r\n                p += object_size(col._values)\r\n        return int(p) + 1000\r\n\r\n    @sizeof.register(pd.Series)\r\n    def sizeof_pandas_series(s):\r\n        p = int(s.memory_usage(index=True))\r\n        if s.dtype == object:\r\n            p += object_size(s._values)\r\n        if s.index.dtype == object:\r\n            p += object_size(s.index)\r\n        return int(p) + 1000\r\n\r\n    @sizeof.register(pd.Index)\r\n    def sizeof_pandas_index(i):\r\n        p = int(i.memory_usage())\r\n        if i.dtype == object:\r\n            p += object_size(i)\r\n        return int(p) + 1000\r\n\r\n\r\n@sizeof.register_lazy(\"scipy\")\r\ndef register_spmatrix():\r\n    from scipy import sparse\r\n\r\n    @sizeof.register(sparse.dok_matrix)\r\n    def sizeof_spmatrix_dok(s):\r\n        return s.__sizeof__()\r\n\r\n    @sizeof.register(sparse.spmatrix)\r\n    def sizeof_spmatrix(s):\r\n        return sum(\r\n            sizeof(v) for v in s.__dict__.values()\r\n        )\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/459805208/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/459828857",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-459828857",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 459828857,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTgyODg1Nw==",
        "user": {
            "login": "arredond",
            "id": 19406854,
            "node_id": "MDQ6VXNlcjE5NDA2ODU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/19406854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arredond",
            "html_url": "https://github.com/arredond",
            "followers_url": "https://api.github.com/users/arredond/followers",
            "following_url": "https://api.github.com/users/arredond/following{/other_user}",
            "gists_url": "https://api.github.com/users/arredond/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arredond/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arredond/subscriptions",
            "organizations_url": "https://api.github.com/users/arredond/orgs",
            "repos_url": "https://api.github.com/users/arredond/repos",
            "events_url": "https://api.github.com/users/arredond/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arredond/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-01T18:54:15Z",
        "updated_at": "2019-02-01T18:56:04Z",
        "author_association": "NONE",
        "body": "Looking further into how the `Dispatch` class and its `lazy_register` method works, it seems that an object can only be registered as, for example, a Pandas DataFrame object, if `pandas` has been loaded as a top-level module.\r\n\r\nIn the case of GeoPandas', when `pandas` is loaded Dask's `sizeof` correctly calculates both a Pandas' DF size and a GeoPandas' GDF size (see above).\r\n\r\nHowever, if `pandas` is **not** loaded as a top-level module, the lazy registration is never called and the GeoDataFrame/GeoSeries object is evaluated with the default `object` register, which invokes plain `sys.getsizeof` and fails (you can check this by just following the above example but _not_ importing `pandas`, only `geopandas`).\r\n\r\nIf this is the case, simply adding the equivalent decorator for `geopandas` (`@sizeof.register_lazy(\"geopandas\")`) to the `register_pandas` function should fix this issue:\r\n\r\n```python\r\n@sizeof.register_lazy(\"pandas\")\r\n@sizeof.register_lazy(\"geopandas\")\r\ndef register_pandas():\r\n    import pandas as pd\r\n    import numpy as np\r\n\r\n    def object_size(x):\r\n        if not len(x):\r\n            return 0\r\n        sample = np.random.choice(x, size=20, replace=True)\r\n        sample = list(map(sizeof, sample))\r\n        return sum(sample) / 20 * len(x)\r\n\r\n    @sizeof.register(pd.DataFrame)\r\n    def sizeof_pandas_dataframe(df):\r\n        p = sizeof(df.index)\r\n        for name, col in df.iteritems():\r\n            p += col.memory_usage(index=False)\r\n            if col.dtype == object:\r\n                p += object_size(col._values)\r\nreturn int(p) + 1000\r\n```\r\n\r\nDoes this make sense to you, @mrocklin ? I'd be happy to provide to test and provide a PR for this (seems simple enough) if necessary.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/459828857/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/459838509",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-459838509",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 459838509,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTgzODUwOQ==",
        "user": {
            "login": "arredond",
            "id": 19406854,
            "node_id": "MDQ6VXNlcjE5NDA2ODU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/19406854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arredond",
            "html_url": "https://github.com/arredond",
            "followers_url": "https://api.github.com/users/arredond/followers",
            "following_url": "https://api.github.com/users/arredond/following{/other_user}",
            "gists_url": "https://api.github.com/users/arredond/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arredond/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arredond/subscriptions",
            "organizations_url": "https://api.github.com/users/arredond/orgs",
            "repos_url": "https://api.github.com/users/arredond/repos",
            "events_url": "https://api.github.com/users/arredond/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arredond/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-01T19:24:37Z",
        "updated_at": "2019-02-01T19:24:37Z",
        "author_association": "NONE",
        "body": "More info: `sys.getsizeof` is only failing for Pandas DataFrames in the latest version (`v0.24.0`). I've opened [an issue there addressing this](https://github.com/pandas-dev/pandas/issues/25081).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/459838509/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/459843252",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-459843252",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 459843252,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTg0MzI1Mg==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-01T19:40:36Z",
        "updated_at": "2019-02-01T19:40:36Z",
        "author_association": "MEMBER",
        "body": "Can you reproduce the failure with pandas master?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/459843252/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/460323662",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-460323662",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 460323662,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDMyMzY2Mg==",
        "user": {
            "login": "arredond",
            "id": 19406854,
            "node_id": "MDQ6VXNlcjE5NDA2ODU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/19406854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/arredond",
            "html_url": "https://github.com/arredond",
            "followers_url": "https://api.github.com/users/arredond/followers",
            "following_url": "https://api.github.com/users/arredond/following{/other_user}",
            "gists_url": "https://api.github.com/users/arredond/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/arredond/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/arredond/subscriptions",
            "organizations_url": "https://api.github.com/users/arredond/orgs",
            "repos_url": "https://api.github.com/users/arredond/repos",
            "events_url": "https://api.github.com/users/arredond/events{/privacy}",
            "received_events_url": "https://api.github.com/users/arredond/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-04T16:53:15Z",
        "updated_at": "2019-02-04T16:53:15Z",
        "author_association": "NONE",
        "body": "@TomAugspurger just tried that and it worked fine, thanks :)\r\n\r\nHowever, (and my understanding here might be poor, sorry in advance) I still think that if Dask is going to override Pandas' `__sizeof__` it should do so consistently for GeoPandas. Does that make any sense?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/460323662/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/464949506",
        "html_url": "https://github.com/dask/dask/issues/4449#issuecomment-464949506",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4449",
        "id": 464949506,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDk0OTUwNg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-02-19T02:04:46Z",
        "updated_at": "2019-02-19T02:04:46Z",
        "author_association": "MEMBER",
        "body": "@TomAugspurger any response to the comment above?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/464949506/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]