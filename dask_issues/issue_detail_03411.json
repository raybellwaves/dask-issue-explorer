{
    "url": "https://api.github.com/repos/dask/dask/issues/3411",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/3411/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/3411/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/3411/events",
    "html_url": "https://github.com/dask/dask/issues/3411",
    "id": 314794657,
    "node_id": "MDU6SXNzdWUzMTQ3OTQ2NTc=",
    "number": 3411,
    "title": "Dataframe loc slicing can break divisions",
    "user": {
        "login": "gorlins",
        "id": 139286,
        "node_id": "MDQ6VXNlcjEzOTI4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/139286?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gorlins",
        "html_url": "https://github.com/gorlins",
        "followers_url": "https://api.github.com/users/gorlins/followers",
        "following_url": "https://api.github.com/users/gorlins/following{/other_user}",
        "gists_url": "https://api.github.com/users/gorlins/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gorlins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gorlins/subscriptions",
        "organizations_url": "https://api.github.com/users/gorlins/orgs",
        "repos_url": "https://api.github.com/users/gorlins/repos",
        "events_url": "https://api.github.com/users/gorlins/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gorlins/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-04-16T19:54:01Z",
    "updated_at": "2018-06-18T13:35:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I think there are a number of edge cases where slicing a dataframe on the index with known divisions is not handled correctly:\r\n\r\n```python\r\nfrom dask import dataframe as dask_df\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame({'a':range(10, 15)}).set_index('a')\r\ntwo_parts = dask_df.from_pandas(df, npartitions=2)\r\nprint(two_parts.divisions)  # (10, 13, 14)\r\n\r\n# Slicing seems to treat divisions accurately\r\nprint(two_parts[11:13].divisions)  # (11, 13, 13)\r\nprint(two_parts[0:20].divisions)  # (10, 13, 14)\r\n\r\none_part = dask_df.from_pandas(df, npartitions=1)\r\nprint(one_part.divisions)  # (10, 14)\r\nprint(one_part[11:12].divisions)  # (11, 12)\r\nprint(one_part[:12].divisions)  # (10, 12)\r\n\r\n# Except when slicing 1 partition, beyond range of index on that side\r\nprint(one_part[0:20].divisions)  # (0, 20) Should be (10, 14)\r\nprint(two_parts[0:12].divisions)  # (0, 12) Should be (10, 12)\r\nprint(two_parts[12:20].divisions)  # (12, 13, 14) works\r\nprint(two_parts[13:20].divisions)  # (13, 20) whoops!\r\n\r\n# Out of index range stuff gives weird divisions, ideally should have 0 partitions\r\nprint(two_parts[20:].divisions)  # (20, 14)\r\n\r\n```\r\n\r\nThe case where the slice bounds are used for the final devisions when there is only one partition impacted by the slice appears to be the fault of `_LocIndexer._loc_slice` with some hard to read logic that distinguishes between slice bounds of `None` and whether there is more than one partition impacted (`if stop == start`), etc.  I would think it should always take `max(slice.start, first_division)` and `min(slice.end, last_division)` when `known_divisions==True`.\r\n\r\nFor a slice where no partitions should be returned, I'm not sure what the desired result should be.  As is it will 'work' but be suboptimal because it needs to compute an entire partition unnecessarily, while all that is needed is an empty dataframe corresponding to meta (if that's desired at all, ie it could be elided on a concatenation).",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/3411/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/3411/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}