[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164577705",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164577705",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164577705,
        "node_id": "IC_kwDOAbcwm85Fagup",
        "user": {
            "login": "martinedgefocus",
            "id": 96071256,
            "node_id": "U_kgDOBbnuWA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96071256?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martinedgefocus",
            "html_url": "https://github.com/martinedgefocus",
            "followers_url": "https://api.github.com/users/martinedgefocus/followers",
            "following_url": "https://api.github.com/users/martinedgefocus/following{/other_user}",
            "gists_url": "https://api.github.com/users/martinedgefocus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martinedgefocus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martinedgefocus/subscriptions",
            "organizations_url": "https://api.github.com/users/martinedgefocus/orgs",
            "repos_url": "https://api.github.com/users/martinedgefocus/repos",
            "events_url": "https://api.github.com/users/martinedgefocus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martinedgefocus/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T15:45:02Z",
        "updated_at": "2022-06-23T17:33:11Z",
        "author_association": "NONE",
        "body": "I think it's this change, but have not proved it:\r\n\r\ncommit 73c985c2bed5d61be6d05d67f7f381435fe8d1e2\r\nAuthor: Jim Crist-Harif <jcristharif@gmail.com>\r\nDate:   Fri May 27 09:42:01 2022 -0500\r\n\r\npassing `schema=None` prevents the issue\r\n\r\nSeems undesirable that functionality has been sacrificed for speed here ... would it be feasible to do \r\n```\r\ntry:\r\n    infer assuming objects are all strings\r\nexcept:\r\n    infer more slowly making the old-style comparison \r\n```\r\n    \r\n I'm unclear what the downside of schema=None (at least as a fallback) is here?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164577705/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164675158",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164675158",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164675158,
        "node_id": "IC_kwDOAbcwm85Fa4hW",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T17:21:16Z",
        "updated_at": "2022-06-23T17:21:16Z",
        "author_association": "MEMBER",
        "body": ">passing schema=None prevents the issue\r\n\r\nRight - Prior to #9131, the default behavior was for a separate schema to be extracted for each partition at write time (same as `schema=None`). For your single-partition reproducer, this would always work. However, empty/nullable partitions can lead to problems when the schemas are extracted independently. The new default is to use `_meta_nonempty` to \"infer\" the schema for all partitions up front, and to require the user to specify the `schema` argument explicitly if/when the data in `_meta_nonempty` does not properly reflect the \"real\" data.\r\n\r\nI can understand your frustration here. It seems to me like the only \"complete\" solution may need to be at the `_meta`/`meta_nonempty` level. However, @ian-r-rose may have other ideas",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164675158/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164685483",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164685483",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164685483,
        "node_id": "IC_kwDOAbcwm85Fa7Cr",
        "user": {
            "login": "martinedgefocus",
            "id": 96071256,
            "node_id": "U_kgDOBbnuWA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96071256?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martinedgefocus",
            "html_url": "https://github.com/martinedgefocus",
            "followers_url": "https://api.github.com/users/martinedgefocus/followers",
            "following_url": "https://api.github.com/users/martinedgefocus/following{/other_user}",
            "gists_url": "https://api.github.com/users/martinedgefocus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martinedgefocus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martinedgefocus/subscriptions",
            "organizations_url": "https://api.github.com/users/martinedgefocus/orgs",
            "repos_url": "https://api.github.com/users/martinedgefocus/repos",
            "events_url": "https://api.github.com/users/martinedgefocus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martinedgefocus/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T17:32:38Z",
        "updated_at": "2022-06-23T17:32:38Z",
        "author_association": "NONE",
        "body": "I think I can understand the motivation ... it does make it substantially harder to use for what should be a very simple operation though. Forcing everyone to explicitly specify schemas everywhere seems undesirable from a usability POV.\r\n\r\nI presume the problem case is if someone mixed say datetime.date and str within a column and different partitions could see all date, or all str, and get a conflict? In this case the whole column is just dates, seems a little surprising we can't infer from at least one row or something, rather than always assuming every object is a string?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164685483/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164692898",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164692898",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164692898,
        "node_id": "IC_kwDOAbcwm85Fa82i",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T17:40:57Z",
        "updated_at": "2022-06-23T17:40:57Z",
        "author_association": "MEMBER",
        "body": "> I presume the problem case is if someone mixed say datetime.date and str within a column and different partitions could see all date, or all str, and get a conflict?\r\n\r\nThis is correct -- in general it's really hard to infer what the correct output type is for an `object` dtype. Since most of the time `object`s are string dtypes (at least for the time being), the choice was made to *assume* that `object` meant string dtypes rather than crawl all the partitions and ensure it. This is a more scalable solution, at the cost of some users needing to provide schema information for other `object` types.\r\n\r\nBut! I think the right solution in your case might be to ensure that your column is a pandas timestamp dtype, rather than messing around with schemas or `meta`:\r\n\r\n```python\r\nIn [4]: import dask.dataframe as dd\r\n   ...: import pandas as pd\r\n   ...: from datetime import date\r\n   ...: ddf = dd.from_pandas(pd.DataFrame({'a':pd.to_datetime([date.today(), date(2022,6,13)])}), npartitions=1)\r\n   ...: ddf.to_parquet(\"/tmp/p\")\r\n```\r\n\r\nwould that solve your problem?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164692898/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164702036",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164702036",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164702036,
        "node_id": "IC_kwDOAbcwm85Fa_FU",
        "user": {
            "login": "martinedgefocus",
            "id": 96071256,
            "node_id": "U_kgDOBbnuWA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96071256?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martinedgefocus",
            "html_url": "https://github.com/martinedgefocus",
            "followers_url": "https://api.github.com/users/martinedgefocus/followers",
            "following_url": "https://api.github.com/users/martinedgefocus/following{/other_user}",
            "gists_url": "https://api.github.com/users/martinedgefocus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martinedgefocus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martinedgefocus/subscriptions",
            "organizations_url": "https://api.github.com/users/martinedgefocus/orgs",
            "repos_url": "https://api.github.com/users/martinedgefocus/repos",
            "events_url": "https://api.github.com/users/martinedgefocus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martinedgefocus/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T17:50:31Z",
        "updated_at": "2022-06-23T17:50:31Z",
        "author_association": "NONE",
        "body": "Can't do that unfortunately, it's very explicitly a date, not a datetime, else you run into nightmares with timezones, etc.\r\n\r\nI totally understand the desire to avoid crawling all partitions, but a sample size of 1 row would seem cheap, and an infinitely better guess than \"assume every object is always a string\"? If people put mixed types in there it'd still fail, but that seems like a much less common case than any non-string object\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164702036/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164710002",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164710002",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164710002,
        "node_id": "IC_kwDOAbcwm85FbBBy",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T17:59:24Z",
        "updated_at": "2022-06-23T17:59:24Z",
        "author_association": "MEMBER",
        "body": "Understood, thanks.\r\n\r\nTo your earlier question: the downside of `schema=None` is that there is no checking that the schemas are at all consistent. So you can run into issues with things like nullable dtypes, as @rjzamora notes above. Even sampling a single row would not necessarily solve that problem. If you are certain that your dataframes wouldn't run into that, then you can feel free to pass `schema=None`.\r\n\r\nAn alternative would be to provide an explicit schema for your problematic column (which I would probably prefer):\r\n\r\n```python\r\nIn [13]: import dask.dataframe as dd\r\n    ...: import pandas as pd\r\n    ...: import pyarrow as pa\r\n    ...: from datetime import date\r\n    ...: ddf = dd.from_pandas(pd.DataFrame({'a':[date.today(), date(2022,6,13)]}), npartitions=1)\r\n    ...: ddf.to_parquet(\"/tmp/p\", schema={\"a\": pa.date32()})\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164710002/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164725529",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164725529",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164725529,
        "node_id": "IC_kwDOAbcwm85FbE0Z",
        "user": {
            "login": "martinedgefocus",
            "id": 96071256,
            "node_id": "U_kgDOBbnuWA",
            "avatar_url": "https://avatars.githubusercontent.com/u/96071256?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martinedgefocus",
            "html_url": "https://github.com/martinedgefocus",
            "followers_url": "https://api.github.com/users/martinedgefocus/followers",
            "following_url": "https://api.github.com/users/martinedgefocus/following{/other_user}",
            "gists_url": "https://api.github.com/users/martinedgefocus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martinedgefocus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martinedgefocus/subscriptions",
            "organizations_url": "https://api.github.com/users/martinedgefocus/orgs",
            "repos_url": "https://api.github.com/users/martinedgefocus/repos",
            "events_url": "https://api.github.com/users/martinedgefocus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martinedgefocus/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T18:16:28Z",
        "updated_at": "2022-06-23T18:16:28Z",
        "author_association": "NONE",
        "body": "Agree that sampling a single row wouldn't necessarily solve the problem, but it does seem like a much better default to me that'd work for most cases without user intervention ?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164725529/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1164729627",
        "html_url": "https://github.com/dask/dask/issues/9211#issuecomment-1164729627",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9211",
        "id": 1164729627,
        "node_id": "IC_kwDOAbcwm85FbF0b",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-23T18:20:26Z",
        "updated_at": "2022-06-23T18:20:26Z",
        "author_association": "MEMBER",
        "body": "It's not necessarily as simple as sampling a single row, since that row might be downstream of a lot of computations. If your `to_parquet` call is at the end of a long set of transformations, in order to sample a row, we actually have to do those computations eagerly. Even trying to delay schema inference would force a synchronization point deep in the task graph which causes its own  problems. So we viewed the best compromise as being \"any non-pandas-native dtype will probably need to specify the schema\".",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1164729627/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]