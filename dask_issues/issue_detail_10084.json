{
    "url": "https://api.github.com/repos/dask/dask/issues/10084",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/10084/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/10084/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/10084/events",
    "html_url": "https://github.com/dask/dask/issues/10084",
    "id": 1629612679,
    "node_id": "I_kwDOAbcwm85hIeqH",
    "number": 10084,
    "title": "Fine performance metrics: decorate dask/dask",
    "user": {
        "login": "crusaderky",
        "id": 6213168,
        "node_id": "MDQ6VXNlcjYyMTMxNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crusaderky",
        "html_url": "https://github.com/crusaderky",
        "followers_url": "https://api.github.com/users/crusaderky/followers",
        "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
        "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
        "organizations_url": "https://api.github.com/users/crusaderky/orgs",
        "repos_url": "https://api.github.com/users/crusaderky/repos",
        "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
        "received_events_url": "https://api.github.com/users/crusaderky/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 365513534,
            "node_id": "MDU6TGFiZWwzNjU1MTM1MzQ=",
            "url": "https://api.github.com/repos/dask/dask/labels/io",
            "name": "io",
            "color": "6f871c",
            "default": false,
            "description": ""
        },
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        },
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-03-17T16:37:09Z",
    "updated_at": "2024-02-19T01:45:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "- Part of dask/distributed#7665\r\n\r\nIn the demo of dask/distributed#7586, you can spot \"I/O\" time in the collected metrics. This was possible by decorating I/O heavy dask/dask functions:\r\n\r\n```patch\r\n--- a/dask/dataframe/io/parquet/core.py\r\n+++ b/dask/dataframe/io/parquet/core.py\r\n@@ -27,6 +27,8 @@ from dask.highlevelgraph import HighLevelGraph\r\n from dask.layers import DataFrameIOLayer\r\n from dask.utils import apply, import_required, natural_sort_key, parse_bytes\r\n \r\n+from distributed.metrics import context_meter\r\n+\r\n __all__ = (\"read_parquet\", \"to_parquet\")\r\n \r\n NONE_LABEL = \"__null_dask_index__\"\r\n@@ -158,6 +160,7 @@ class ToParquetFunctionWrapper:\r\n             self.kwargs_pass,\r\n         )\r\n \r\n+    @context_meter.meter(\"thread-I/O\")\r\n     def __call__(self, df, block_index: tuple[int]):\r\n         # Get partition index from block index tuple\r\n         part_i = block_index[0]\r\n@@ -643,6 +646,7 @@ def check_multi_support(engine):\r\n     return hasattr(engine, \"multi_support\") and engine.multi_support()\r\n \r\n \r\n+@context_meter.meter(\"thread-I/O\")\r\n def read_parquet_part(\r\n     fs, engine, meta, part, columns, index, use_nullable_dtypes, kwargs\r\n ):\r\n```\r\nwithout the above, I/O heavy tasks would be broadly classified as \"thread-noncpu\", which also includes GIL contention, higher load than there are physical CPUs, and context switch overhead.\r\nWe should decorate all functions in dask/dask that perform I/O as in the above example, with a trivial dummy contextmanager in case distributed is not installed.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/10084/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/10084/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}