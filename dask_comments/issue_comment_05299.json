[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/526690073",
        "html_url": "https://github.com/dask/dask/issues/5299#issuecomment-526690073",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5299",
        "id": 526690073,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjY5MDA3Mw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-30T17:48:25Z",
        "updated_at": "2019-08-30T17:48:25Z",
        "author_association": "MEMBER",
        "body": "That sounds unpleasant.  Do you have thoughts on how we can address this?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/526690073/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/526705851",
        "html_url": "https://github.com/dask/dask/issues/5299#issuecomment-526705851",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5299",
        "id": 526705851,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjcwNTg1MQ==",
        "user": {
            "login": "mpeaton",
            "id": 823569,
            "node_id": "MDQ6VXNlcjgyMzU2OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/823569?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpeaton",
            "html_url": "https://github.com/mpeaton",
            "followers_url": "https://api.github.com/users/mpeaton/followers",
            "following_url": "https://api.github.com/users/mpeaton/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpeaton/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpeaton/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpeaton/subscriptions",
            "organizations_url": "https://api.github.com/users/mpeaton/orgs",
            "repos_url": "https://api.github.com/users/mpeaton/repos",
            "events_url": "https://api.github.com/users/mpeaton/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpeaton/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-30T18:37:50Z",
        "updated_at": "2019-08-30T18:39:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "I suspect that the somehow the get_deps() and subs() may be improved with a more general class of algorithms for graph traversal and substitution.   It almost seems as if dask/core.py:303 may be redundant in this case, but I can't quite think of a counterexample.\r\n\r\n I am certainly interested in soliciting hints, sagely advise, and references to prior art.  Maybe most importantly warnings of pending doom and tomfoolery are appreciated.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/526705851/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/532300902",
        "html_url": "https://github.com/dask/dask/issues/5299#issuecomment-532300902",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5299",
        "id": 532300902,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjMwMDkwMg==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-09-17T16:38:04Z",
        "updated_at": "2019-09-17T16:38:04Z",
        "author_association": "MEMBER",
        "body": "Thinking about this issue more, I'm not sure we can avoid the N^2 behavior in the general case. Mainly because we allow tasks as argument for other tasks. For example, considering this task graph:\r\n\r\n```python\r\ndsk = {'a': 1,\r\n       'b': 2,\r\n       'c': (sum, [(sum, ['a', 'b']), (sum, ['a', 'b'])]),\r\n      }\r\n```\r\n\r\ninlining `'c'` requires substitutions of `'a'` and `'b'` in each `(sum, ['a', 'b'])` task. I think this is where the N^2 behavior is coming from.\r\n\r\nThis is unfortunate when we're inlining relatively straightforward task graphs like\r\n\r\n```python\r\ndsk = {'a': 1,\r\n       'b': 2,\r\n       'c': (sum, ['a', 'b']),\r\n      }\r\n```\r\n\r\nbut I'm not sure how the existing logic can be modified to improve inlining performance in the simple case, while still supporting the general case.\r\n\r\nPerhaps @jcrist has some thoughts on if my understanding here is correct. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/532300902/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]