[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/848603913",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-848603913",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 848603913,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODYwMzkxMw==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-26T09:07:25Z",
        "updated_at": "2021-05-26T09:07:25Z",
        "author_association": "MEMBER",
        "body": "It's not super clear what I should do next: work on \"bubbling\" the high level graph layer up? Find a specific use case to benchmark?\r\n\r\nCases like https://github.com/dask/dask/issues/5918#issuecomment-768085570 are unaffected by the changes here - should I try to target something like this?\r\n\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/848603913/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/855760046",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-855760046",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 855760046,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTc2MDA0Ng==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-07T09:16:15Z",
        "updated_at": "2021-06-07T09:16:15Z",
        "author_association": "MEMBER",
        "body": "For some context, I've added these methods:\r\n\r\n- [x] `_keys_to_parts`\r\n- [x] `_cull_dependencies`\r\n- [x] `cull`\r\n- [ ] `_cull` - last one left, this private method is the one that should return a new instance of the layer (except with only the bits that are absolutely necessary for the computation).\r\n\r\nI can't really test things well without all four methods in place, so once I've got `_cull` in we can see what is or isn't working quite right.\r\n\r\nAlso note: finding the length and/or html representation of the dask computation will materialize the full graph. I haven't changed this part yet. The good news is, it should be a lot simpler to calculate the length without materializing the task dictionary than it is for our overlapping array work.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/855760046/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/856543898",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-856543898",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 856543898,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjU0Mzg5OA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-08T07:51:58Z",
        "updated_at": "2021-06-08T07:51:58Z",
        "author_association": "MEMBER",
        "body": "I have a mistake in my implementation, that means any unsliced region of the array causes an error on `.compute()`. I'd like to talk about how best to fix this when we talk next.\r\n\r\nEg: with this PR branch, I can do this:\r\n```python\r\nimport dask.array as da\r\n\r\narr = da.ones((6,6), chunks=(3,3))\r\nresult = arr[:6, :6]\r\nresult.compute()\r\n```\r\n\r\nbut this gives me an error\r\n```python\r\nimport dask.array as da\r\n\r\narr = da.ones((6,6), chunks=(3,3))\r\nresult = arr[:5, :5]  # only some of the whole array is sliced\r\nresult.compute()  # KeyError: ('ones-9321b8a9f4b4fe7e5d4e0edb7273ca60', (0, 1))\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/856543898/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/861338972",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-861338972",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 861338972,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2MTMzODk3Mg==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-15T09:23:29Z",
        "updated_at": "2021-06-15T09:23:29Z",
        "author_association": "MEMBER",
        "body": "Update:\r\n1. Unpacking parts from its tuple has helped get rid of some errors\r\n2. Now the errors happen inside `_execute_task`. I find debugging from here tricky to do.\r\n\r\nHere's a little experiment I did, putting a breakpoint in before this line in `_execute_task`:\r\nhttps://github.com/dask/dask/blob/afb180f59485972481e16decf49db03a7419b7c9/dask/core.py#L121\r\n\r\n### Dataframe shuffle example - working\r\nThis is the dataframe shuffle example - it works fine:\r\n```python\r\nfrom dask.datasets import timeseries\r\nddf = timeseries().shuffle(\"id\", shuffle=\"tasks\")\r\nddf.compute()\r\n```\r\nHere are all the relevant values in the `_execute_task` function at this point:\r\n```\r\n(Pdb) func\r\nsubgraph_callable-eff735a4-d0d1-46bd-8447-428f69188257\r\n\r\n(Pdb) cache\r\n{}\r\n\r\n(Pdb) args\r\narg = (subgraph_callable-eff735a4-d0d1-46bd-8447-428f69188257, ([Timestamp('2000-01-07 00:00:00', freq='D'), Timestamp('2000-01-08 00:00:00', freq='D')], 757507710))\r\n(Pdb) cache = {}\r\ndsk = None\r\n\r\n(Pdb) for i, a in enumerate(args): print(f\"{i}. {a}\")\r\n(Pdb) 0. ([Timestamp('2000-01-04 00:00:00', freq='D'), Timestamp('2000-01-05 00:00:00', freq='D')], 1156703389)\r\n```\r\n\r\n### Array slicing example - broken\r\nThis is the array slicing example - it's broken, I need to figure out what went wrong\r\n```python\r\nimport dask.array as da\r\nx = da.ones((9, 9), chunks=(3, 3))\r\ny = x[5:, 5:]\r\ny.compute()\r\n```\r\n\r\nHere are all the relevant values in the `_execute_task` function at this point:\r\n```\r\n(Pdb) func\r\n<built-in function getitem>\r\n\r\n(Pdb) cache\r\n{}\r\n\r\n(Pdb) args\r\narg = (<built-in function getitem>, ('ones-ddadc429cabbff50070648bf5d89b3ac', 1, 1), (slice(2, 3, 1), slice(2, 3, 1)))\r\ncache = {}\r\ndsk = None\r\n\r\n(Pdb) for a in args: print(a)\r\n('ones-ddadc429cabbff50070648bf5d89b3ac', 1, 1)\r\n(slice(2, 3, 1), slice(2, 3, 1))\r\n\r\n(Pdb) for i, a in enumerate(args): print(f\"{i}. {a}\")\r\n0. ('ones-ddadc429cabbff50070648bf5d89b3ac', 1, 1)\r\n1. (slice(2, 3, 1), slice(2, 3, 1))\r\n```\r\n\r\n### Possible leads\r\nIt seems pretty fishy that there is one item in args for the working dataframe example, but there are two items in args for the array example. Perhaps that has something to do with why it's broken.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/861338972/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/861949360",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-861949360",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 861949360,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2MTk0OTM2MA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-16T01:53:44Z",
        "updated_at": "2021-06-16T01:53:58Z",
        "author_association": "MEMBER",
        "body": "The getitem syntax we need to achieve is:\r\n```python\r\nfrom operator import getitem\r\nimport dask.array as da\r\n\r\narr = da.ones((6,6), chunks=(3,3))\r\ngetitem(arr, (slice(5, None, None), slice(5, None, None))).compute()\r\n# array([[1.]])\r\n```\r\n\r\nWhich is equivalent to:\r\n```python\r\nimport dask.array as da\r\n\r\narr = da.ones((6,6), chunks=(3,3))\r\narr[5:, 5:].compute()\r\n# array([[1.]])\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/861949360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/862133164",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-862133164",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 862133164,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjEzMzE2NA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-16T07:45:24Z",
        "updated_at": "2021-06-16T07:45:24Z",
        "author_association": "MEMBER",
        "body": "## Another debugging experiment: comparing the dask `main` branch to the `slicing-HLG` branch.\r\n\r\n### Setup\r\nI used an array example this time.\r\n```python\r\nimport numpy as np\r\nimport dask.array as da\r\n\r\nx = da.from_array(np.arange(16).reshape((4,4)), chunks=(2,2))\r\ny = x[3:, 3:]\r\ny.compute()\r\n```\r\n### What happened?\r\n* On the `main` branch, there is no error when y is computed\r\n* On the `slicing-HLG` branch, we get a TypeError at line 121 of `dask/core.py`, in the `_execute_task` function.\r\n    https://github.com/dask/dask/blob/339fad50ff6300c4d9d87eb9828a7534070c7742/dask/core.py#L121\r\n    ```python\r\n    TypeError: tuple indices must be integers or slices, not tuple\r\n    ```\r\n### What else is different?\r\nI put a breakpoint in before line 121 of `dask/core.py` and compared what was going on for the two different branches\r\n1. The materialized task graph dictionary for the high level graph layer looks exactly the same for the `main` and `slicing-hlg` branches. I looked at this using:\r\n    ```python\r\n    from pprint import pprint\r\n    hlg = y.dask\r\n    pprint(hlg.to_dict())\r\n    ```\r\n    \r\n<details>\r\n<summary>Click here to see code output:</summary>\r\n\r\n```\r\n{('array-d52eb27cbf828b7e8f8f94b1a6890e54', 0, 0): array([[0, 1],\r\n       [4, 5]]),\r\n ('array-d52eb27cbf828b7e8f8f94b1a6890e54', 0, 1): array([[2, 3],\r\n       [6, 7]]),\r\n ('array-d52eb27cbf828b7e8f8f94b1a6890e54', 1, 0): array([[ 8,  9],\r\n       [12, 13]]),\r\n ('array-d52eb27cbf828b7e8f8f94b1a6890e54', 1, 1): array([[10, 11],\r\n       [14, 15]]),\r\n ('getitem-bfd48e62fd5701fbd00c89a4c4b68984', 0, 0): (<built-in function getitem>,\r\n                                                      ('array-d52eb27cbf828b7e8f8f94b1a6890e54',\r\n                                                       1,\r\n                                                       1),\r\n                                                      (slice(1, 2, 1),\r\n                                                       slice(1, 2, 1)))}\r\n\r\n```\r\n\r\n</details>\r\n\r\nI had really expected to see something different with the brackets, particularly around the slices. The main branch code execution passes through the same line of code that creates an error on the slicing branch, so it's not like the code flow is different.\r\n\r\n2. The task dictionaries appear to be stored in different places:\r\n    * In the `__dict__['mapping']` attribute of the layer, for the `main` branch (layer type is `MaterializedLayer`)\r\n    * In the `_cached_dict` attribute of the layer, for the `slicing-HLG` branch (layer type is `SlicingLayer`)\r\n3. The cache dictionary was an empty dictionary for the `slicing-HLG` branch, but had values in it on the `main` branch:\r\n    ```\r\n    (Pdb) cache\r\n    {('array-d52eb27cbf828b7e8f8f94b1a6890e54', 1, 1): np.array([[10, 11], [14, 15]])}\r\n    ```\r\n    I didn't expect this since the cache is also an empty dictionary for our working dataframe shuffle example. But maybe it's *not* supposed to be empty, this could be a big clue.\r\n\r\n\r\n### Fixes I tried\r\nI tried manually editing `_execute_task` to make the `cache` dictionary variable contain the same thing as it does in the main branch at this point. To do this, I added this line before line 121 in `_execute_task`:\r\n```python\r\n        cache = {('array-d52eb27cbf828b7e8f8f94b1a6890e54', 1, 1): np.array([[10, 11], [14, 15]])}\r\n\r\n```\r\n\r\nNote: Obviously this change will break every *other* dask computation, but if that meant I could run this array example then I'd have a solid lead on what we need to fix.\r\n\r\nWhat happened was kind of odd. Calling `y.compute()` no longer hit an error, but the output wasn't `array[[15.]]` like we expected, but instead the output was `'e0bcbf08d16c97f629562504a0d04198'`. It's a string, with what looks like a token in it. It's not the token belonging to any earlier part of the dask computation, this one is new.\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/862133164/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/862139054",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-862139054",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 862139054,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjEzOTA1NA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-16T07:54:14Z",
        "updated_at": "2021-06-16T07:58:23Z",
        "author_association": "MEMBER",
        "body": "The high level graph layer dependencies are the same for both (but that doesn't rule out me making a mistake when I'm trying to use them to generate the fully materialized task graph)\r\n```python\r\n>>> hlg.dependencies\r\n\r\n{'array-d52eb27cbf828b7e8f8f94b1a6890e54': set(),\r\n 'getitem-bfd48e62fd5701fbd00c89a4c4b68984': {'array-d52eb27cbf828b7e8f8f94b1a6890e54'}}\r\n```\r\n\r\nAlso, the reported dependencies on the layers looks correct (and is the same for both the `main` and the `slicing-HLG` branches)\r\n```python\r\n\r\nhlg.keys()\r\n>>> hlg.keys()\r\n\r\ndict_keys([('array-d52eb27cbf828b7e8f8f94b1a6890e54', 0, 0), ('array-d52eb27cbf828b7e8f8f94b1a6890e54', 0, 1), ('array-d52eb27cbf828b7e8f8f94b1a6890e54', 1, 0), ('array-d52eb27cbf828b7e8f8f94b1a6890e54', 1, 1), ('getitem-bfd48e62fd5701fbd00c89a4c4b68984', 0, 0)])\r\n\r\n>>> key = ('getitem-bfd48e62fd5701fbd00c89a4c4b68984', 0, 0)\r\n>>> layer1.get_dependencies(key, hlg.keys())\r\n\r\n{('array-d52eb27cbf828b7e8f8f94b1a6890e54', 1, 1)}\r\n```\r\n\r\nI'm a bit stumped, and would appreciate any suggestions for things to try next.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/862139054/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/863860650",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-863860650",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 863860650,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2Mzg2MDY1MA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-18T08:28:54Z",
        "updated_at": "2021-06-18T08:28:54Z",
        "author_association": "MEMBER",
        "body": "Progress update:\r\n\r\nI have change the cull dependencies parts so we have a `parts_in` and `parts_out`. That means this simple example works now:\r\n```python\r\nimport numpy as np\r\nimport dask.array as da\r\n\r\nx = da.from_array(np.arange(16).reshape((4,4)), chunks=(2,2))\r\ny = x[3:, 3:]\r\ny.compute()\r\n```\r\n\r\nTODO next:\r\n1. I still need to make a `keys` method that does not materialize the whole task graph\r\n2. There are a bunch of failing tests, mostly for slightly more complicated types of slicing. I think that means I'll also need to revisit how we \"bubble up\" the information from the slicing layer to fancier kinds of slicing operations. (I think we said that as a first step we'd just try to materialize the whole task graph in these cases, then work on improving that later if needed)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/863860650/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/864724500",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-864724500",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 864724500,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDcyNDUwMA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-21T04:49:56Z",
        "updated_at": "2021-06-21T04:49:56Z",
        "author_association": "MEMBER",
        "body": "@ian-r-rose & @gjoseph92 I think this is the wrong approach. Here's why I think this:\r\n\r\n* Slicing is slow, this is the problem we want solved\r\n* We thought a HLG might speed things up by not generating unnecessary tasks in the first place\r\n* But the `_slice_1d` function is already skipping over the chunks we don't need for the slices (so there's not much we're gaining anyway)\r\n* And to calculate the keys and output parts properly, we really need the itertools product list comprehensions (so we're not delaying much computation either)\r\n\r\nI think the problem we want to solve is in a different place. I'm going to test something out & then write a short summary on that.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/864724500/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/864848767",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-864848767",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 864848767,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDg0ODc2Nw==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-21T08:41:51Z",
        "updated_at": "2021-06-21T08:41:51Z",
        "author_association": "MEMBER",
        "body": "I ran the test, unfortunately I don't have anything good to report here. We'll talk about it at our meeting tomorrow (or today, by the time you read this :slightly_smiling_face:  )",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/864848767/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/868305452",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-868305452",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 868305452,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODMwNTQ1Mg==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-25T08:04:14Z",
        "updated_at": "2021-06-25T08:04:14Z",
        "author_association": "MEMBER",
        "body": "So python sets/dicts do not preserve order. Oops. Mucking that up is a large part of why I've twisted myself up into knots and wasted a lot of time.\r\n\r\nNow I can focus on the optimization. Currently there is one failing test, which I think is testing whether a nested slice of slices has the task graph optimized correctly. Obviously, that's the bit I need to do next.\r\n```\r\npytest dask/array/tests/test_array_core.py::test_to_delayed_optimize_graph\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/868305452/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/869663823",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-869663823",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 869663823,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTY2MzgyMw==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-28T13:01:30Z",
        "updated_at": "2021-06-28T13:01:30Z",
        "author_association": "MEMBER",
        "body": "BTW, I played around a little with how to combine multiple nested slices into a single slice operation. (Note: there's still an error here you'll see if you stride forward and backwards with the slicing, I'll need to take into account the array length and remainder to get this part correct).\r\n\r\nhttps://gist.github.com/GenevieveBuckley/f913cef861a918c2e1c94862e7bdbc60",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/869663823/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/870121950",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-870121950",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 870121950,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDEyMTk1MA==",
        "user": {
            "login": "dhirschfeld",
            "id": 881019,
            "node_id": "MDQ6VXNlcjg4MTAxOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/881019?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhirschfeld",
            "html_url": "https://github.com/dhirschfeld",
            "followers_url": "https://api.github.com/users/dhirschfeld/followers",
            "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
            "repos_url": "https://api.github.com/users/dhirschfeld/repos",
            "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-28T23:50:30Z",
        "updated_at": "2021-06-28T23:50:30Z",
        "author_association": "NONE",
        "body": "> *So python sets/dicts do not preserve order*\r\n\r\nSets don't but dictionaries do - it's mandated by the language spec since py37 (and was an implementation detail in py36)\r\n\r\n![image](https://user-images.githubusercontent.com/881019/123717045-5ddc3d80-d8bf-11eb-8df4-ce328911cfb5.png)\r\n\r\nhttps://docs.python.org/3.7/library/stdtypes.html#dict.values",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/870121950/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/870171366",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-870171366",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 870171366,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDE3MTM2Ng==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-29T02:08:42Z",
        "updated_at": "2021-06-29T02:08:42Z",
        "author_association": "MEMBER",
        "body": "Thanks @dhirschfeld. I remember assuming ordered dictionaries while working on a project with python 3.6, and hadn't realized it had changed since then. That's good to hear!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/870171366/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/870177360",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-870177360",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 870177360,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MDE3NzM2MA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-29T02:25:28Z",
        "updated_at": "2021-06-29T02:25:28Z",
        "author_association": "MEMBER",
        "body": "I'm not seeing any kind of speed improvement, and I would imagine I would be seeing some kind of change by now if what we're doing here an effective approach.\r\n\r\n![slicing-HLG-benchmarking](https://user-images.githubusercontent.com/30920819/123726452-5888ee00-d8d3-11eb-8f1a-8ec919efd18b.png)\r\n\r\n```python\r\nimport dask.array as da\r\n\r\na = da.ones(1_000, chunks=1)\r\n%timeit a[10:20].compute()\r\n\r\na = da.ones(10_000, chunks=1)\r\n%timeit a[10:20].compute()\r\n\r\na = da.ones(100_000, chunks=1)\r\n%timeit a[10:20].compute()\r\n\r\n# and so on...\r\n```\r\n\r\nLast time we spoke @ian-r-rose and @gjoseph92 suggested this work might eventually be useful for a nested \"slice into a slice\" situation. There'd need to be a bit more work done for that to happen, see https://github.com/dask/dask/pull/7655/#issuecomment-869663823.\r\n\r\nBut the reason I started this was because we wanted to make `map_overlap` faster and profiling showed there was a lot of time spent in slicing (not a nested slice of slices situation). Given that this PR doesn't seem to support that goal, I'm leaning towards scrapping/abandoning this. Comments are welcome, please weigh in.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/870177360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/871776464",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-871776464",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 871776464,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTc3NjQ2NA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-30T22:51:10Z",
        "updated_at": "2021-06-30T22:51:10Z",
        "author_association": "MEMBER",
        "body": "Quick comment, probably wrong.  I'm not tracking this PR well enough to speak with any sort of authority, but this caught my eye:\r\n\r\n> this work might eventually be useful for a nested \"slice into a slice\" situation\r\n\r\nJust so people are aware, implementing all of the corner cases for numpy-style indexing is very complex.  I would recommend that people here not start walking in this direction.  Instead there is a big pile of code in slicing.py which, although inscrutable, appears to be pretty much correct.  I would love for us to find a way to reuse or wrap this code without having to reimplement it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/871776464/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/871797224",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-871797224",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 871797224,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MTc5NzIyNA==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-30T23:45:57Z",
        "updated_at": "2021-06-30T23:45:57Z",
        "author_association": "MEMBER",
        "body": "> I'm not seeing any kind of speed improvement\r\n\r\nParticularly since this is implemented in the \"reuse or wrap this code without having to reimplement it\" fashion, I'm not really surprised that end-to-end performance is the same. However, I would hope that\r\n```python\r\n%timeit a[10:20]\r\n```\r\nis slightly faster than on main. And I'd expect the `compute()` part to be commensurately slower. Basically, I'd expect the time saved in constructing the slice to be moved into `collections_to_dsk`, which is called within `compute` to materialize the graph. And that savings is meaningful. Particularly if `a[:-2]` is faster, and if it (someday) saves us having to send an entire slicing graph over the wire to the scheduler.\r\n\r\n> I'm leaning towards scrapping/abandoning this\r\n\r\nEven if we don't see immediate performance improvements, I think there's value in a high-level Slicing layer. I don't see how we can one day turn off low-level optimizations for Array without moving slicing into HighLevelGraph layers. In particular, we'll need `optimize_slices` to work without materializing the graph. (This is the \"slice into a slice\" case we're talking about I assume.) I imagine that having a Slice layer would be necessary to make that optimization possible on a HLG. Indeed, there's a chance it might actually be easier to implement that way than the current introspection of the low-level tasks.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/871797224/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/872094671",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-872094671",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 872094671,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjA5NDY3MQ==",
        "user": {
            "login": "bmerry",
            "id": 1963944,
            "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmerry",
            "html_url": "https://github.com/bmerry",
            "followers_url": "https://api.github.com/users/bmerry/followers",
            "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
            "organizations_url": "https://api.github.com/users/bmerry/orgs",
            "repos_url": "https://api.github.com/users/bmerry/repos",
            "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmerry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-01T09:43:38Z",
        "updated_at": "2021-07-01T09:43:38Z",
        "author_association": "MEMBER",
        "body": "> And I'd expect the compute() part to be commensurately slower. Basically, I'd expect the time saved in constructing the slice to be moved into collections_to_dsk, which is called within compute to materialize the graph.\r\n\r\nI haven't been following the details of this PR, but just wanted to chip in to say that this would be pretty valuable for us (as well as doing slice-of-slice optimisations at the high level). We currently rely on some hacks like cached properties that construct slices lazily so that we can avoid paying the construction cost if a sliced array never actually gets used.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/872094671/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/872693846",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-872693846",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 872693846,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjY5Mzg0Ng==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-02T03:57:56Z",
        "updated_at": "2021-07-02T03:57:56Z",
        "author_association": "MEMBER",
        "body": "> I'm not really surprised that end-to-end performance is the same. However, I would hope that\r\n> \r\n> ```python\r\n> %timeit a[10:20]\r\n> ```\r\n> \r\n> is slightly faster than on main. And I'd expect the `compute()` part to be commensurately slower.\r\n\r\nAh, of course - that was a silly thing for me to do, thanks for pointing it out.\r\n\r\nHere we go, looking at just the graph construction stage. (Just to double check my understanding, this is graph construction, but *not* optimization or computation, do I have that right?)\r\n```python\r\n% timeit a[10:20]\r\n```\r\n![slicing-benchmark-1](https://user-images.githubusercontent.com/30920819/124217773-4a89d600-db3c-11eb-8788-156a75f3bc14.png)\r\n\r\n\r\nAnd even though we haven't specifically done anything special for slices of slices in this PR, I thought it might be fun to look at those times too.\r\n```python\r\n%timeit a[100:200][10:20]\r\n```\r\n\r\n![slicing-benchmark-2](https://user-images.githubusercontent.com/30920819/124217992-b2d8b780-db3c-11eb-91fe-a40b5fd9c98a.png)\r\n\r\n... and a slice of a slice of a slice...\r\n```python\r\n%timeit a[100:200][0:50][10:20]\r\n```\r\n\r\n![slicing-benchmark-3](https://user-images.githubusercontent.com/30920819/124218054-cd129580-db3c-11eb-8efe-f75de9e57c0e.png)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/872693846/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/872694503",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-872694503",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 872694503,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3MjY5NDUwMw==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-02T04:00:28Z",
        "updated_at": "2021-07-02T04:00:28Z",
        "author_association": "MEMBER",
        "body": "@bmerry is there a specific example you'd like us to look at/benchmark, just to keep your use case in mind while I work on this?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/872694503/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/872741068",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-872741068",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 872741068,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3Mjc0MTA2OA==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-02T06:05:12Z",
        "updated_at": "2021-07-02T06:05:12Z",
        "author_association": "MEMBER",
        "body": "Also, I've just been playing with Emil's benchmark script [from here](https://github.com/dask/dask/discussions/7404#discussion-3275944).\r\n\r\nComparing the `slicing-HLG` branch from this PR to the Dask main branch, there is a slight speed improvement generating the initial task graph.\r\n\r\nIt's a difference of 24.7 milliseconds, which is approximately 5.7% faster.\r\n\r\n### main branch\r\n```\r\nsrc.shape = (2048, 2048, 2048)\r\nsrc.chunks = (64, 64, 64)\r\nsrc.nbytes / (2**30) = 8.0\r\ncreate dask array 'a' from zarr array 'src': 0.037327215 seconds\r\nlen(a.__dask_graph__()) = 32769\r\nmap_blocks dask array 'a' to dask array 'b': 0.000756337999 seconds\r\nlen(b.__dask_graph__()) = 65537\r\nmap_overlap dask array 'a' to dask array 'c': 0.433811585 seconds\r\nlen(c.__dask_graph__()) = 994425\r\n```\r\n### slicing-HLG branch\r\n```\r\nsrc.shape = (2048, 2048, 2048)\r\nsrc.chunks = (64, 64, 64)\r\nsrc.nbytes / (2**30) = 8.0\r\ncreate dask array 'a' from zarr array 'src': 0.037867653 seconds\r\nlen(a.__dask_graph__()) = 32769\r\nmap_blocks dask array 'a' to dask array 'b': 0.000736053 seconds\r\nlen(b.__dask_graph__()) = 65537\r\nmap_overlap dask array 'a' to dask array 'c': 0.40901264 seconds\r\nlen(c.__dask_graph__()) = 994425\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/872741068/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/872772916",
        "html_url": "https://github.com/dask/dask/pull/7655#issuecomment-872772916",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7655",
        "id": 872772916,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg3Mjc3MjkxNg==",
        "user": {
            "login": "bmerry",
            "id": 1963944,
            "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmerry",
            "html_url": "https://github.com/bmerry",
            "followers_url": "https://api.github.com/users/bmerry/followers",
            "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
            "organizations_url": "https://api.github.com/users/bmerry/orgs",
            "repos_url": "https://api.github.com/users/bmerry/repos",
            "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmerry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-02T07:08:53Z",
        "updated_at": "2021-07-02T07:08:53Z",
        "author_association": "MEMBER",
        "body": "> @bmerry is there a specific example you'd like us to look at/benchmark, just to keep your use case in mind while I work on this?\r\n\r\nI'm not sure there is really anything specific - I don't have a standalone benchmark. I guess one aspect of our use case is that we have a multi-dimensional array, and if the graph construction can be made to take O(sum(num_chunks)) rather than O(product(num_chunks)) then I'd expect it to be a game-changer. While any performance improvement is appreciated, 5-10% improvements aren't going to remove our need to delay slicing until it's needed.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/872772916/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]