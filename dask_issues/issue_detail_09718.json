{
    "url": "https://api.github.com/repos/dask/dask/issues/9718",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9718/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9718/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9718/events",
    "html_url": "https://github.com/dask/dask/issues/9718",
    "id": 1477110894,
    "node_id": "I_kwDOAbcwm85YCuxu",
    "number": 9718,
    "title": "DOC: add example showing dask.delayed on a range, with usage of `nout`",
    "user": {
        "login": "NickleDave",
        "id": 11934090,
        "node_id": "MDQ6VXNlcjExOTM0MDkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/11934090?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NickleDave",
        "html_url": "https://github.com/NickleDave",
        "followers_url": "https://api.github.com/users/NickleDave/followers",
        "following_url": "https://api.github.com/users/NickleDave/following{/other_user}",
        "gists_url": "https://api.github.com/users/NickleDave/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/NickleDave/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/NickleDave/subscriptions",
        "organizations_url": "https://api.github.com/users/NickleDave/orgs",
        "repos_url": "https://api.github.com/users/NickleDave/repos",
        "events_url": "https://api.github.com/users/NickleDave/events{/privacy}",
        "received_events_url": "https://api.github.com/users/NickleDave/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 386719598,
            "node_id": "MDU6TGFiZWwzODY3MTk1OTg=",
            "url": "https://api.github.com/repos/dask/dask/labels/documentation",
            "name": "documentation",
            "color": "f9d0c4",
            "default": true,
            "description": "Improve or add to documentation"
        },
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        },
        {
            "id": 3798602129,
            "node_id": "LA_kwDOAbcwm87iahGR",
            "url": "https://api.github.com/repos/dask/dask/labels/enhancement",
            "name": "enhancement",
            "color": "C2E0C6",
            "default": true,
            "description": "Improve existing functionality or make things work better"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2022-12-05T18:02:16Z",
    "updated_at": "2024-04-22T01:46:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi devs and thank you for `dask`. I very much appreciate how easy it makes parallelizing things.\r\n\r\nThat said, I'd like to suggest adding an example to the docs that I think is a simple yet common use case that took me a while to figure out, something like the following:\r\n```\r\nresults = []\r\nfor _ in range(n_times):\r\n   results = do_task(**task_kwargs)\r\n```\r\n\r\nThis would be common to e.g. run $n$ repeats of a simulation where results across runs are not dependent. \r\n\r\nOriginally I thought I should do this somehow with a `dask.bag`.  \r\nAs I understand it now, the right way to do this is with `dask.delayed`.\r\nThe current docs and examples for `dask.delayed` focus on how it is collection agnostic (not an array, bag, or dataframe), but AFAICT it does not address this case that seems like it would be the first thing many people might think of.\r\n\r\nThe closest is I can find is this snippet, that doesn't show making a graph + calling compute on it:\r\nhttps://docs.dask.org/en/stable/delayed-best-practices.html?highlight=range#avoid-too-many-tasks\r\n\r\nHere's is an SO post suggesting I might not be the only one confused by this, with the answer that made me realize I should be using `dask.delayed`, and not trying to somehow combine the delayed wrapper with a bag.\r\nhttps://stackoverflow.com/questions/61215533/how-to-parallelize-a-loop-with-dask\r\n\r\nI fought with this though, and especially kept running into the error:\r\n> Delayed objects of unspecified length are not iterable\r\n\r\nFinally I found this explanation in an issue:\r\nhttps://github.com/dask/dask/issues/6060#issuecomment-611539087\r\n\r\nPutting it all together, the example I am suggesting adding would be like the following (maybe on 'https://docs.dask.org/en/stable/delayed.html' since 'examples.dask' seems to be very focused on distributed?):\r\n\r\n```python\r\nimport dask\r\n\r\ndef my_expensive_function(**kwargs):\r\n   ... \r\n   return result, stats, history\r\n\r\nexpensive_function_delayed = dask.delayed(my_expensive_function, nout=3)\r\n\r\ndef run_repeats_of_expensive_function(func_kwargs, n_repeats=100):\r\n    delayed = []\r\n    for _ in range(n_repeats):\r\n        delayed.append(my_expensive_function_delayed(**func_kwargs))\r\n    graph = dask.delayed()(delayed)\r\n    return graph.compute()\r\n```\r\nwith a brief `admonition` in the text letting someone know `nout` exists, in case they are so unsure of how to solve the problem correctly that they don't stop to carefully read all the docstrings",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9718/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9718/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}