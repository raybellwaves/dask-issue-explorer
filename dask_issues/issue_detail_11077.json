{
    "url": "https://api.github.com/repos/dask/dask/issues/11077",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/11077/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/11077/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/11077/events",
    "html_url": "https://github.com/dask/dask/issues/11077",
    "id": 2266560844,
    "node_id": "I_kwDOAbcwm86HGPlM",
    "number": 11077,
    "title": "Add a `dask.array.sample` functionality mirroring `dask.dataframe.sample` with an optional `ignore_nan` argument",
    "user": {
        "login": "rhugonnet",
        "id": 28896516,
        "node_id": "MDQ6VXNlcjI4ODk2NTE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/28896516?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rhugonnet",
        "html_url": "https://github.com/rhugonnet",
        "followers_url": "https://api.github.com/users/rhugonnet/followers",
        "following_url": "https://api.github.com/users/rhugonnet/following{/other_user}",
        "gists_url": "https://api.github.com/users/rhugonnet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rhugonnet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rhugonnet/subscriptions",
        "organizations_url": "https://api.github.com/users/rhugonnet/orgs",
        "repos_url": "https://api.github.com/users/rhugonnet/repos",
        "events_url": "https://api.github.com/users/rhugonnet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rhugonnet/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-04-26T22:05:22Z",
    "updated_at": "2024-04-27T01:51:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi all,\r\n\r\nWith @ameliefroessl, we recently spent quite a bit of time trying to understand how to efficiently randomly sample an N-D array in Dask. Somehow it is easy to find this for dataframes in the documentation (https://docs.dask.org/en/latest/generated/dask.dataframe.DataFrame.sample.html) but not mentioned much for arrays.\r\n\r\nWe finally noticed that combining `vindex[]` with a random subset defined separately by the user works well, and allows flexibility. However, we still had one more problem: we only wanted to sample finite values, and this seemed fairly hard, as it impossible to know where those will be in advance.\r\n\r\nWe converged towards an implementation here: https://github.com/rhugonnet/geoutils/blob/add_delayed_raster_functions/geoutils/raster/delayed.py#L18 (being implemented here: https://github.com/GlacioHack/geoutils/pull/537), which is inspired by the  `delayed` ragged output blogpost of @GenevieveBuckley (https://blog.dask.org/2021/07/02/ragged-output). It does things in 3 steps: 1/ Compute the number of valid values per chunk, 2/ Create a flattened index for a random subsample among the valid values, 3/ Load the chunks again to sample those specific valid values passing only the 1D indexes belonging to that chunk and a little `block_id` that mirrors that of `dask.array.map_blocks`.\r\n\r\nThe implementation seems quite efficient memory-wise (as we don't need to extract all indices of all valid values, for instance), the only issue is that the sample does not only depend on the `random_state` but also the `chunksizes` of the input array...\r\n\r\nDo you think this feature would be interesting to further develop and have directly in Dask? The \"finite values\" aspect is a bit of a specific case for users dealing a lot with NaNs, but more generically having a `dask.array.sample()` function that does the randomization work for the user could already be useful?",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/11077/reactions",
        "total_count": 1,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/11077/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}