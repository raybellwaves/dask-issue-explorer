{
    "url": "https://api.github.com/repos/dask/dask/issues/8084",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/8084/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/8084/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/8084/events",
    "html_url": "https://github.com/dask/dask/pull/8084",
    "id": 978683491,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NzE5MjMxODU2",
    "number": 8084,
    "title": "First proof-of-concept pass at an expression system (#7933)",
    "user": {
        "login": "asmeurer",
        "id": 71486,
        "node_id": "MDQ6VXNlcjcxNDg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/asmeurer",
        "html_url": "https://github.com/asmeurer",
        "followers_url": "https://api.github.com/users/asmeurer/followers",
        "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
        "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
        "organizations_url": "https://api.github.com/users/asmeurer/orgs",
        "repos_url": "https://api.github.com/users/asmeurer/repos",
        "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/asmeurer/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 365513534,
            "node_id": "MDU6TGFiZWwzNjU1MTM1MzQ=",
            "url": "https://api.github.com/repos/dask/dask/labels/io",
            "name": "io",
            "color": "6f871c",
            "default": false,
            "description": ""
        },
        {
            "id": 3028194444,
            "node_id": "MDU6TGFiZWwzMDI4MTk0NDQ0",
            "url": "https://api.github.com/repos/dask/dask/labels/dispatch",
            "name": "dispatch",
            "color": "fc03db",
            "default": false,
            "description": "Related to `Dispatch` extension objects"
        },
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2021-08-25T04:01:37Z",
    "updated_at": "2021-10-25T01:48:25Z",
    "closed_at": null,
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
        "url": "https://api.github.com/repos/dask/dask/pulls/8084",
        "html_url": "https://github.com/dask/dask/pull/8084",
        "diff_url": "https://github.com/dask/dask/pull/8084.diff",
        "patch_url": "https://github.com/dask/dask/pull/8084.patch",
        "merged_at": null
    },
    "body": "This is just a very simple proof-of-concept showing how an expression system\r\nmight look on the dataframe objects. It is only implemented on the dataframe\r\nclasses and elemwise() so far. You should probably ignore any test failures\r\nunless they are indicative of a fundamental structural problem with the design.\r\n\r\nExample:\r\n\r\n```py\r\n>>> import dask\r\n>>> df = dask.datasets.timeseries()\r\n>>> a = df + df\r\n>>> a.expr\r\nElemwiseFrameExpr('add-351c22ecb90bf820bea3cd561bc5a9b5', <meta object>,\r\n                  <divisions tuple>, 'add',\r\n                  FrameLeafExpr('make-timeseries-74d9e57f1bea216a4831f24dcb99fc19', <meta object>, <divisions list>),\r\n                  FrameLeafExpr('make-timeseries-74d9e57f1bea216a4831f24dcb99fc19', <meta object>, <divisions list>))\r\n```\r\n\r\n(stuff in <> is elided because currently it just prints the entire thing)\r\n\r\nSome comments:\r\n\r\n- We are currently storing name, meta, and divisions on the expression, but\r\n  not the graph. This seems the most reasonable to me, but may need to be\r\n  rethought.\r\n\r\n- I have maintained backwards compatibility for everything except for the\r\n  class constructors for DataFrame, etc. However, it isn't necessarily clear\r\n  to me that people don't use those constructors directly. For example,\r\n  dask.datasets.timeseries() constructed a DataFrame directly. We might want\r\n  to rethink how to do this while maintaining maximal backwards compatibility.\r\n\r\n- Relatedly, it's not clear to me just where the adapter for putting the\r\n  expression on the leaf node should go. For now, I have changed the\r\n  constructor of _Frame, and modified the get_parallel_type dispatcher\r\n  functions used by new_dd_object() function. But it's not obvious to me that\r\n  that is correct. Also, we need a new type of function that constructs an\r\n  object with subexpressions, which should be used by any function that\r\n  constructs an object from other objects (i.e., the expression wouldn't be a\r\n  leaf node in the expression tree). Maybe having a new function is best\r\n  because that makes backwards compatibility easier, but it also means\r\n  changing everything.\r\n\r\n- Right now I have name, meta, and divisions as the args on the expression.\r\n  I'm not sure if that's the best way to do it. It's definitely the simplest,\r\n  because it means everything is just in args. Although I do think we might\r\n  want to wrap those three objects themselves in special wrapper expression\r\n  classes, if just to make the expression tree printing sane.\r\n\r\n- [ ] Closes #xxxx\r\n- [ ] Tests added / passed\r\n- [ ] Passes `black dask` / `flake8 dask` / `isort dask`\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/8084/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/8084/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}