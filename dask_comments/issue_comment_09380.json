[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1213862646",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1213862646",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1213862646,
        "node_id": "IC_kwDOAbcwm85IWhL2",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-13T06:55:45Z",
        "updated_at": "2022-08-13T06:55:58Z",
        "author_association": "CONTRIBUTOR",
        "body": "Okay so on further inspection I think this issue relates to the fact that the fact that dask isn't aware that a column has been converted into an index, which can be seen by looking at the meta. In the above example, if we `print(x._meta)`, we get:\r\n```\r\nEmpty DataFrame\r\nColumns: [uniprot, index]\r\nIndex: []\r\n```\r\n\r\nSo even though we've explicitly `set_index(\"index\")`, dask still thinks that \"index\" is a column, and that the actual index has no name, which is not correct.\r\n\r\n***\r\n\r\nAnother example which I believe demonstrates this same behaviour is here:\r\n\r\n```python\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\nfrom dask.dataframe.utils import make_meta\r\nfrom dask.dataframe.multi import hash_join\r\n\r\ndf = dd.from_pandas(pd.DataFrame({\r\n    \"a\": range(10),\r\n    \"b\": range(10),\r\n}), npartitions=2)\r\n\r\ndf2 = df.map_partitions(lambda df: df.set_index(\"a\"), meta={\"b\": int})\r\nprint(df2._meta)\r\nhash_join(df2, df2.index, df, df.index).compute()\r\n```\r\n```\r\nEmpty DataFrame\r\nColumns: [b]\r\nIndex: []\r\n\r\nValueError: The columns in the computed data do not match the columns in the provided metadata\r\n  Extra:   ['a']\r\n  Missing: [0]\r\n```\r\n\r\nWe set the index of `df2` to `a` implicitly, and we can see that `dask` is not aware of this. Then when we try to hash join (which again, is a simplification of a real life operation like a normal join), dask has issues with the mislabelled index.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1213862646/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1213961299",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1213961299",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1213961299,
        "node_id": "IC_kwDOAbcwm85IW5RT",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-13T08:01:44Z",
        "updated_at": "2022-08-13T08:01:44Z",
        "author_association": "CONTRIBUTOR",
        "body": "And here's another example that doesn't use `map` at all:\r\n```python\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\nfrom dask.dataframe.multi import hash_join\r\n\r\ndf = dd.from_pandas(pd.DataFrame({\r\n    \"a\": range(10),\r\n    \"b\": range(10),\r\n}), npartitions=2)\r\ndfa = df.set_index(\"a\")\r\ndfb = df.set_index(\"b\")\r\nx = hash_join(dfa, dfa.index, dfb, dfb.index)\r\ny = hash_join(x, x.index, dfa, dfa.index).compute()\r\n```\r\n```\r\nValueError: The columns in the computed data do not match the columns in the provided metadata\r\n  Extra:   [0]\r\n  Missing: ['a']\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1213961299/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1215083710",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1215083710",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1215083710,
        "node_id": "IC_kwDOAbcwm85IbLS-",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-15T14:34:07Z",
        "updated_at": "2022-08-15T14:34:07Z",
        "author_association": "MEMBER",
        "body": "I think there are a couple different things going on here. In the first example, Dask is trying to be a bit too clever. It sees that the name that the column that you are trying to assign to index matches `ddf.index` and so the `set_index` bails early.  If you don't rename the column, and just set index with it as it is originally named things work fine:\r\n\r\n```python\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\n\r\ndf = pd.DataFrame(\r\n    {\"uniprot\": [\"P42684\", \"P42684\", \"P42684\"]},\r\n    index=pd.Series(\r\n        [\"1:179108338:G>C\", \"1:179109432:C>T\", \"1:179126409:G>C\"], name=\"index\"\r\n    ),\r\n)\r\nddf = dd.from_pandas(df, npartitions=2)\r\n\r\nuniprots = ddf.uniprot.unique()\r\nx = uniprots.to_frame().set_index(\"uniprot\")\r\nx.shuffle(x.index).compute()\r\n```\r\n\r\nSo that is one little bug. \r\n\r\nThe rest of the examples that you provide have the intended behavior. In Dask when you are doing custom functionality you often need to set the meta to show what the output will look like.  So for the second example, you should use a pandas object that has the right index name and dtype. Something like:\r\n\r\n```python\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\nfrom dask.dataframe.utils import make_meta\r\nfrom dask.dataframe.multi import hash_join\r\n\r\ndf = dd.from_pandas(pd.DataFrame({\r\n    \"a\": range(10),\r\n    \"b\": range(10),\r\n}), npartitions=2)\r\n\r\ndf2 = df.map_partitions(lambda df: df.set_index(\"a\"), meta=df.head().set_index(\"a\"))\r\nprint(df2._meta)\r\nhash_join(df2, df2.index, df, df.index).compute()\r\n```\r\n\r\nFor the third case I agree that it looks like there is maybe a little bug in hash join where Dask doesn't have the right expectation of the index name. \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1215083710/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1215121308",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1215121308",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1215121308,
        "node_id": "IC_kwDOAbcwm85IbUec",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-15T14:59:38Z",
        "updated_at": "2022-08-15T14:59:38Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for the response. I agree that issue 2 is user error, I forget why I included it exactly. Possibly I was trying to make a point about dask needing a correctly named index which means it's not trivial to rename the index in point 1, because it will throw off all the downstream metadata unless you change it all.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1215121308/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1218025750",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1218025750",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1218025750,
        "node_id": "IC_kwDOAbcwm85ImZkW",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-17T13:40:39Z",
        "updated_at": "2022-08-17T13:40:39Z",
        "author_association": "MEMBER",
        "body": "For the first issue. We recently added a warning, but maybe that was the wrong approach. Maybe we should stop bailing early in that case or maybe we should raise an error. I think there is a little thought left to do there. \r\n\r\nFor the hash_join though it's probably a straightforward fix, so you are welcome to open a pull request if you feel so inclined.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1218025750/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1218037823",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1218037823",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1218037823,
        "node_id": "IC_kwDOAbcwm85Imcg_",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-17T13:50:12Z",
        "updated_at": "2022-08-17T13:50:53Z",
        "author_association": "CONTRIBUTOR",
        "body": "Yes so I've noticed this warning (`UserWarning: New index has same name as existing, this is a no-op.`), but I didn't interpret correctly. I guess if you keep it, I would rather it be more clear, ie `New index has same name as existing, index assignment will be skipped`. But also, it must still be doing *something*, right? Or the metadata error wouldn't happen at all. Is it changing the metadata but not the index itself, perhaps?\r\n\r\nAnyway, imo I would rather it not bail early, and just do the operation even if it may seem redundant. I guess the warning could work the other way around, such as \"the index has the same name, this may be redundant, proceeding anyway\".",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1218037823/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1218051799",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1218051799",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1218051799,
        "node_id": "IC_kwDOAbcwm85Imf7X",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-17T14:01:12Z",
        "updated_at": "2022-08-17T14:01:12Z",
        "author_association": "MEMBER",
        "body": ">  But also, it must still be doing _something_, right? Or the metadata error wouldn't happen at all. \r\n\r\nThat's a good point, but it's not. You get the same metadata error even without the `set_index` in the first example. If you change the last line to `x.shuffle(x[\"index\"]).compute()` it works though. I just took a little look and gross as it is _I think_ this matches pandas behavior. See if you do `x.compute().index` you get a `RangeIndex` and if you do `x.compute()[\"index\"]` you get the column named index. \r\n\r\n> Anyway, imo I would rather it not bail early, and just do the operation even if it may seem redundant. \r\n\r\nI tend to agree. Probably better to have a fixed cost rather than try to be clever if we don't have enough information to go on. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1218051799/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1218104145",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1218104145",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1218104145,
        "node_id": "IC_kwDOAbcwm85ImstR",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-17T14:41:11Z",
        "updated_at": "2022-08-17T14:41:11Z",
        "author_association": "CONTRIBUTOR",
        "body": "Okay so in my example I create a column named index, then call `set_index()` which does nothing, then try to shuffle it using the old index. Why does this then fail?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1218104145/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1218145241",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1218145241",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1218145241,
        "node_id": "IC_kwDOAbcwm85Im2vZ",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-17T15:13:19Z",
        "updated_at": "2022-08-17T15:13:19Z",
        "author_association": "MEMBER",
        "body": "Hmm. There must be something wrong with the meta in shuffle for the case where a dd.Index object is passed. \r\n\r\n```python\r\n\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\n\r\ndf = pd.DataFrame(\r\n    {\"uniprot\": [\"P42684\", \"P42684\", \"P42684\"]},\r\n    index=pd.Series(\r\n        [\"1:179108338:G>C\", \"1:179109432:C>T\", \"1:179126409:G>C\"], name=\"index\"\r\n    ),\r\n)\r\nddf = dd.from_pandas(df, npartitions=2)\r\n\r\nuniprots = ddf.uniprot.unique()\r\nx = uniprots.to_frame()\r\nx.shuffle(\"index\").compute()  # this works\r\nx.shuffle(x.index).compute()  # this does not\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1218145241/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1225583869",
        "html_url": "https://github.com/dask/dask/issues/9380#issuecomment-1225583869",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9380",
        "id": 1225583869,
        "node_id": "IC_kwDOAbcwm85JDOz9",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-24T11:20:27Z",
        "updated_at": "2022-08-24T11:30:32Z",
        "author_association": "CONTRIBUTOR",
        "body": "I mentioned this discussion in the above PR. My general view on this is the following:\r\n\r\n- **A named index in a Pandas dataframe is actually a column in the original data** which, for convenience, is acting TEMPORARILY as the index.\r\n- For this reason, Pandas by default uses an UNNAMED range index. **It is the fact that it is unnamed that makes clear this index is NOT a column of your data**, but only a convenient way to index by row number (i.e., `[0, ..., len(df)-1]`).\r\n- Dask should follow this same convention: **a named index can at any moment be reset to be again a column (preserving its name), while an unnamed index is just accessory and should be disposed when reset**.\r\n\r\nSo, given that the above PR should prevent you from having any Dask dataframe with 2 columns with the same name, the potentially conflicting cases are the following ones:\r\n\r\n- `ddf.reset_index()` when `ddf.index = None`: this should NOT create a column called `'index'` (because that was never a column in the original data!), so it should be dropped. Explicitly calling `ddf.reset_index(drop=False)` should raise an error.\r\n- `ddf.set_index(series)`: with the above PR it is still possible to do things like `ddf.set_index(ddf['x'])`, which is convenient in some particular cases, such as when joining by index (so columns need to be first set as indexes). However, note that chaining `ddf.set_index(ddf['x']).reset_index(drop=False)` will fail, because that would make you have 2 columns named `'x'`.\r\n\r\nIn summary, once the PR is accepted, you have this situation:\r\n\r\n1. **Your original data CANNOT have any columns named equally**. In the particular case of a Pandas dataframe (i.e., you build your Dask dataframe `ddf` with `from_pandas`), this ALSO includes the index; **the index of the Pandas frame CANNOT have the same name as any column**, to begin with.\r\n2. Once you have `ddf`, you are indeed allowed to index by a column (or by a series derived from a column which preserves its name, such as `ddf['x'] + 1`), but this is something that you are doing explicitly, who knows why...\r\n3. Whatever your reasons are, this index CANNOT be reset to a column unless you rename it previously. It makes sense to be so strict: \r\n- if you indexed with a column via `ddf.set_index(ddf['x'])` instead of `ddf.set_index('x')`, `'x'` is still a column, so there's no point in calling `reset_index(drop=False)`.\r\n- if you indexed with something derived from a column (e.g., `ddf.set_index(ddf['x']+1)`, and you want that to become a column, it forces you to name that new column with a suitable name, either directly via `ddf.index = 'xPlus1'`, or indirectly via `ddf.set_index((ddf['x']+1).rename('xPlus1'))`.\r\n\r\nHope you find this sensible!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1225583869/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]