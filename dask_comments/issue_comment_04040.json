[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427880451",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427880451",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427880451,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg4MDQ1MQ==",
        "user": {
            "login": "seibert",
            "id": 425352,
            "node_id": "MDQ6VXNlcjQyNTM1Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/425352?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seibert",
            "html_url": "https://github.com/seibert",
            "followers_url": "https://api.github.com/users/seibert/followers",
            "following_url": "https://api.github.com/users/seibert/following{/other_user}",
            "gists_url": "https://api.github.com/users/seibert/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seibert/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seibert/subscriptions",
            "organizations_url": "https://api.github.com/users/seibert/orgs",
            "repos_url": "https://api.github.com/users/seibert/repos",
            "events_url": "https://api.github.com/users/seibert/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seibert/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T15:34:25Z",
        "updated_at": "2018-10-08T15:34:25Z",
        "author_association": "NONE",
        "body": "Concurrency and CUDA is a little tricky, due to the layering of new capabilities over the years:\r\n\r\nhttps://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-concurrent-execution\r\n\r\nShort version is:\r\n* CUDA uses a \"stream\" concept to manage concurrency.  Operations in the same stream are executed sequentially, and operations in different streams are executed concurrently.\r\n* CUDA hardware varies in its ability to run multiple compute kernels at once, and to overlap memory transfer with computation, but Tesla cards support both.\r\n* Overlapping operations is a great way to hide host<->device transfer time as well as increase GPU utilization when individual compute kernels won't saturate the GPU.\r\n* Unless a CUDA stream is explicitly selected, all operations are enqueued into a default stream. (Stream 0)\r\n* Device<->host memory transfers on stream 0 block all streams (to preserve old CUDA behavior).\r\n* All host threads share the same default stream unless the CUDA application has been compiled with an option that enables the default stream to be per-host-thread rather than global to the process.\r\n* There are a lot of ways to do things here, but I'm not sure which choices CuPy makes internally.\r\n\r\nYou could manually enable concurrency by running code in each thread inside a [`cupy.cuda.Stream`](http://docs-cupy.chainer.org/en/stable/reference/generated/cupy.cuda.Stream.html#cupy.cuda.Stream) context manager.  That will both create a stream and cause all operations inside the block to be submitted to that stream, which should allow concurrency between host threads.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427880451/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427882612",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427882612",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427882612,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg4MjYxMg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T15:40:53Z",
        "updated_at": "2018-10-08T15:40:53Z",
        "author_association": "MEMBER",
        "body": "I was reading through docs this weekend and also came upon streams.  My inclination for Dask is to run all tasks on separate streams, round-robining through them.  Given that I know that operations don't mutate data across tasks, this seems safe.  This might be overly simplistic though, am I missing things here?\r\n\r\nFor example, perhaps data is local to a stream, so if I had the following:\r\n\r\n```python\r\nx = cupy.random.random(1000000)\r\ny = dask.delayed(add)(x, 1)\r\nz = dask.delayed(add)(x, 2)\r\ndask.compute(y, z)\r\n```\r\n\r\nDo I want to run y and z on two separate streams, or do I want to wait and run them sequentially?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427882612/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427883140",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427883140",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427883140,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg4MzE0MA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T15:42:30Z",
        "updated_at": "2018-10-08T15:42:30Z",
        "author_association": "MEMBER",
        "body": "Will `cupy.cuda.Stream` also work for non-cupy projects?  For example if I called a numba gpu-compiled function within that block would it also be scheduled onto a different stream?  If not then is there a way to achieve this generally?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427883140/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427885622",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427885622",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427885622,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg4NTYyMg==",
        "user": {
            "login": "seibert",
            "id": 425352,
            "node_id": "MDQ6VXNlcjQyNTM1Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/425352?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seibert",
            "html_url": "https://github.com/seibert",
            "followers_url": "https://api.github.com/users/seibert/followers",
            "following_url": "https://api.github.com/users/seibert/following{/other_user}",
            "gists_url": "https://api.github.com/users/seibert/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seibert/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seibert/subscriptions",
            "organizations_url": "https://api.github.com/users/seibert/orgs",
            "repos_url": "https://api.github.com/users/seibert/repos",
            "events_url": "https://api.github.com/users/seibert/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seibert/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T15:49:50Z",
        "updated_at": "2018-10-08T15:49:50Z",
        "author_association": "NONE",
        "body": "GPU data pointers can be shared across streams in the same process (i.e, they only control concurrency, not visibility).  If there is potential for race conditions between streams, then there are various synchronization primitives (like events) that can be used to ensure one stream has reached a certain point before allowing another stream to proceed.\r\n\r\nUnfortunately, there is no universal Python wrapping of primitive CUDA entities, like streams, so this level of interop is not easy to achieve between Python projects.  (Numba, for example, has its own CUDA stream wrapper.)  At a low level, the stream handle has to be passed to ever CUDA operation, so until Numba is aware of CuPy's stream context manager, it will not be able to use the same streams.  (This is not a bad suggested feature for Numba.)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427885622/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427887040",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427887040",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427887040,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg4NzA0MA==",
        "user": {
            "login": "seibert",
            "id": 425352,
            "node_id": "MDQ6VXNlcjQyNTM1Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/425352?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seibert",
            "html_url": "https://github.com/seibert",
            "followers_url": "https://api.github.com/users/seibert/followers",
            "following_url": "https://api.github.com/users/seibert/following{/other_user}",
            "gists_url": "https://api.github.com/users/seibert/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seibert/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seibert/subscriptions",
            "organizations_url": "https://api.github.com/users/seibert/orgs",
            "repos_url": "https://api.github.com/users/seibert/repos",
            "events_url": "https://api.github.com/users/seibert/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seibert/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T15:53:53Z",
        "updated_at": "2018-10-08T15:53:53Z",
        "author_association": "NONE",
        "body": "Also, with CUDA 10, they have introduced a much more flexible GPU scheduling concept, called \"CUDA Graphs\" (which have nothing to do with nvGRAPH, a graph analytics library).  Basically, it lets you describe a task graph of CUDA kernel launches, memory copies, and CPU functions that will be executed concurrently by the CUDA driver.\r\n\r\nThere's no Python interface to CUDA Graphs yet (and they are only supported in CUDA 10, which has been out less than a month), but it is very interesting to imagine transforming part of a Dask graph with CUDA operations in it into a CUDA graph:\r\n\r\nhttps://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-graphs\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427887040/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427888627",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427888627",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427888627,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzg4ODYyNw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T15:58:34Z",
        "updated_at": "2018-10-08T15:58:34Z",
        "author_association": "MEMBER",
        "body": "> GPU data pointers can be shared across streams in the same process (i.e, they only control concurrency, not visibility).\r\n\r\nIf Dask is willing to run two tasks concurrently then we generally assume that this is a safe thing to do.\r\n\r\n> This is not a bad suggested feature for Numba\r\n\r\nThere are presumably more GPU libraries out there that would have to coordinate around something like this.  Any thoughts on how to achieve this culturally?  Perhaps NVidia would have to lead things here?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427888627/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427948479",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427948479",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427948479,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzk0ODQ3OQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T19:14:46Z",
        "updated_at": "2018-10-08T19:14:46Z",
        "author_association": "MEMBER",
        "body": "I think that I'm a bit confused about how to use cupy streams.  Here is a notebook using streams in seaprate threads to no effect\r\n\r\nhttps://gist.github.com/d3b70cea6a555ae2387556e4f0808ac1\r\n\r\nHere is an example from the cupy docs that shows using streams sequentially (which makes some sense given that the parallelism is happening on the device).  https://github.com/cupy/cupy/blob/master/examples/stream/map_reduce.py but my attempts to call streams sequentially in blocks like this results in sequential execution.\r\n\r\nAny suggestions on how to use these well?  Do I have to configure something on my end?\r\n\r\nI would also be happy to take these questions to cupy directly if preferred.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427948479/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/427951516",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-427951516",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 427951516,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzk1MTUxNg==",
        "user": {
            "login": "seibert",
            "id": 425352,
            "node_id": "MDQ6VXNlcjQyNTM1Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/425352?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seibert",
            "html_url": "https://github.com/seibert",
            "followers_url": "https://api.github.com/users/seibert/followers",
            "following_url": "https://api.github.com/users/seibert/following{/other_user}",
            "gists_url": "https://api.github.com/users/seibert/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seibert/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seibert/subscriptions",
            "organizations_url": "https://api.github.com/users/seibert/orgs",
            "repos_url": "https://api.github.com/users/seibert/repos",
            "events_url": "https://api.github.com/users/seibert/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seibert/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-08T19:26:39Z",
        "updated_at": "2018-10-08T19:26:39Z",
        "author_association": "NONE",
        "body": "The CuPy developers might know more about what is going on here, and whether they have any additional thread locking inside their code.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/427951516/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/428366339",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-428366339",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 428366339,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyODM2NjMzOQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-09T21:54:19Z",
        "updated_at": "2018-10-09T21:54:19Z",
        "author_association": "MEMBER",
        "body": "Published upstream here: https://github.com/cupy/cupy/issues/1695",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/428366339/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1074807693",
        "html_url": "https://github.com/dask/dask/issues/4040#issuecomment-1074807693",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4040",
        "id": 1074807693,
        "node_id": "IC_kwDOAbcwm85AEEON",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-22T07:04:53Z",
        "updated_at": "2022-03-22T07:05:27Z",
        "author_association": "MEMBER",
        "body": "Admittedly this is an old issue and lots has changed over the years. Though one simple thing users who encounter this issue could do is use PTDS (per-thread default stream). Basically this means each thread has its own default stream that it uses. Operations in a thread would be sequential while operations in different thread could run concurrently.\r\n\r\nCuPy includes an environment variable for setting this, `CUPY_CUDA_PER_THREAD_DEFAULT_STREAM`, which was added in CuPy 9.0.0 with PR ( https://github.com/cupy/cupy/pull/4322 ). More details in [this doc]( https://docs.cupy.dev/en/stable/user_guide/cuda_api.html?highlight=CUPY_CUDA_PER_THREAD_DEFAULT_STREAM#streams-and-events ).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1074807693/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]