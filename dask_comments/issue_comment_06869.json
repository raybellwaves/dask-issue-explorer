[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/731284923",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-731284923",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 731284923,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMTI4NDkyMw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-20T16:57:36Z",
        "updated_at": "2020-11-20T16:57:36Z",
        "author_association": "MEMBER",
        "body": "Also cc @jrbourbeau and @quasiben so that you're aware",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/731284923/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/731287083",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-731287083",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 731287083,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMTI4NzA4Mw==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-20T17:01:50Z",
        "updated_at": "2020-11-20T17:01:50Z",
        "author_association": "MEMBER",
        "body": "Thanks a lot for the tag Matt. We are really excited about this. I'm going to tag @jbusecke from our group, who may have some good use cases to contribute.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/731287083/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/731288585",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-731288585",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 731288585,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMTI4ODU4NQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-20T17:04:35Z",
        "updated_at": "2020-11-20T17:04:35Z",
        "author_association": "MEMBER",
        "body": "If I were to create a wishlist it would be ...\r\n\r\n1.  Something that we can run on a laptop without any data, that is something like 10-20 lines of code.  Ideally it would include a few different kinds of operations with some knobs (like seasonal averaging where we could change the amount of total time, monthly vs quarterly, etc..) \r\n2.  The same thing, but hopefully with sufficient knobs that it would make sense to run on ~100 workers on a distributed cluster\r\n3.  The same thing, but pointing to actual data with Zarr on S3 or something ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/731288585/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/731304571",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-731304571",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 731304571,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMTMwNDU3MQ==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-20T17:35:36Z",
        "updated_at": "2020-11-20T17:35:36Z",
        "author_association": "MEMBER",
        "body": "I'll kick things off with a very simple example.\r\n\r\n```python\r\nimport dask.array as dsa\r\nimport numpy as np\r\n\r\na = dsa.random.random((10000, 1000000), chunks=(1, 1000000))\r\nb = a**2 + np.exp(a[:, ::-1])\r\nb.mean(axis=0).compute()\r\n```\r\n\r\nHere we create a pretty big array (vary the shape to make it bigger / harder), and then do some computations with it. To me this example exposes two things:\r\n- How long it takes the graph to transfer to the scheduler, despite the simplicity of the operation. For me, this takes 20-30 seconds to start on a laptop at current size.\r\n- A [missed?] opportunity for fusion. I can compute the same thing with way fewer tasks using `map_blocks`. \r\n     ```python\r\n     b_alt = a.map_blocks(lambda a: a**2 + np.exp(a[:, ::-1]))\r\n     ```\r\n  Many xarray users don't have the sophistication to use `map_blocks`, and so it would be nice if dask would do it automatically.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/731304571/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/731307232",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-731307232",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 731307232,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMTMwNzIzMg==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-20T17:41:10Z",
        "updated_at": "2020-11-20T17:41:10Z",
        "author_association": "MEMBER",
        "body": "Here is a slightly more complex one that represents a very common operation in climate science: calculating an anomaly from a seasonal climatology.\r\n\r\n```python\r\nimport xarray as xr\r\nimport numpy as np\r\nimport dask.array as dsa\r\n\r\ndata = dsa.random.random((10000, 1000000), chunks=(1, 1000000))\r\nda = xr.DataArray(data, dims=['time', 'x'],\r\n                  coords={'day': ('time', np.arange(10000) % 100)})\r\nclim = da.groupby('day').mean(dim='time')\r\nanom = da.groupby('day') - clim\r\nanom_mean = anom.mean(dim='time')\r\nanom_mean.compute()\r\n```\r\n\r\nThis nearly always runs out of memory. I feel like it's related to the \"memory backpressure\" issue I have raised elsewhere (e.g. https://github.com/dask/distributed/issues/2602).\r\n\r\nI developed a workaround with rechunking and map_blocks here: https://gist.github.com/rabernat/30e7b747f0e3583b5b776e4093266114\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/731307232/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/735951500",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-735951500",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 735951500,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczNTk1MTUwMA==",
        "user": {
            "login": "quasiben",
            "id": 1403768,
            "node_id": "MDQ6VXNlcjE0MDM3Njg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quasiben",
            "html_url": "https://github.com/quasiben",
            "followers_url": "https://api.github.com/users/quasiben/followers",
            "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
            "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
            "organizations_url": "https://api.github.com/users/quasiben/orgs",
            "repos_url": "https://api.github.com/users/quasiben/repos",
            "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quasiben/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-30T18:10:02Z",
        "updated_at": "2020-11-30T18:10:02Z",
        "author_association": "MEMBER",
        "body": "I added this code to the nightly scheduler benchmark: https://github.com/quasiben/dask-scheduler-performance/pull/31 .  This currently takes ~105 seconds on a DGX with 10 workers and 1 thread per worker",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/735951500/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/736124977",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-736124977",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 736124977,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczNjEyNDk3Nw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-30T23:52:53Z",
        "updated_at": "2020-11-30T23:52:53Z",
        "author_association": "MEMBER",
        "body": "Thank you for the examples @rabernat .  @ian-r-rose took a look at these and found a significant performance increase locally (I'll let him share details) but still a painful delay when communicating the graph over a wire.  This was due to the large size of the `da.random.random` layer, which is still not abstract.\r\n\r\nThis points us to a current failing on the dask.array side, none of the data generation/reading operations have been moved over to high-level graphs.  Aside from random (which is mostly just useful for us in testing) this also includes `da.from_array`, which I suspect is what is used within most of the Xarray IO code (@rabernat please correct me if I'm wrong).  \r\n\r\nFor `da.from_array` I think that we want to turn the following `getem` function into a high level graph (also a better name for getem would be welcome, I suspect that that name comes from the first week of Dask's life).  \r\n\r\nhttps://github.com/dask/dask/blob/d0ae3aab6c1bbf2969781ec30c3112c71332a91a/dask/array/core.py#L225-L264\r\n\r\nRandom looks a bit more complex.  It's here I think:\r\n\r\nhttps://github.com/dask/dask/blob/d0ae3aab6c1bbf2969781ec30c3112c71332a91a/dask/array/random.py#L78-L197\r\n\r\nones/zeroes/empty might be a bit easier.  They're here:\r\n\r\nhttps://github.com/dask/dask/blob/d0ae3aab6c1bbf2969781ec30c3112c71332a91a/dask/array/wrap.py#L50-L78\r\n\r\ncc also @rjzamora who did this work on the dask dataframe side, and may have thoughts for the design of super-classes for data generation.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/736124977/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 2,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/736133765",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-736133765",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 736133765,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczNjEzMzc2NQ==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-12-01T00:19:33Z",
        "updated_at": "2020-12-01T00:20:52Z",
        "author_association": "MEMBER",
        "body": "#6791 includes `from_array` (`getem`) on the list of operations to move to `BlockwiseIO` to enable fusion at the HLG level.  A naive translation to the blockwise approach doesn't really improve IO-subgraph construction, so we will probably want to define the IO within a simple `Mapping` (to avoid constructing the full subgraph).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/736133765/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/736925871",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-736925871",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 736925871,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczNjkyNTg3MQ==",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-12-02T01:23:56Z",
        "updated_at": "2020-12-02T01:23:56Z",
        "author_association": "MEMBER",
        "body": "Taking a look at the graph transfer step from @rabernat's (:wave:) minimal example:\r\n\r\n> ```python\r\n> import dask.array as dsa\r\n> import numpy as np\r\n> \r\n> a = dsa.random.random((10000, 1000000), chunks=(1, 1000000))\r\n> b = a**2 + np.exp(a[:, ::-1])\r\n> c = b.mean(axis=0).compute()\r\n> ```\r\nI'm triggering the optimization and shipping of the task graph (and non-blocking computation) using `c.persist()` as a proxy for transfer time. By flipping [`optimization.fuse.active`](https://github.com/dask/dask/blob/c58b031c6f979d93e67d66e982693dbea9daea71/dask/array/optimization.py#L50-L51), we can delay the materialization of the low level graph until it is loaded on the scheduler.\r\n\r\n```python\r\n# Takes about 40s on my machine\r\nwith dask.config.set({\"optimization.fuse.active\": True}):\r\n    c.persist()\r\n```\r\n\r\n```python\r\n# Takes about 1s on my machine\r\nwith dask.config.set({\"optimization.fuse.active\": False}):\r\n    c.persist()\r\n```\r\n\r\nSo, at the very least, shipping the HLG is a big savings in terms of network traffic, as @mrocklin notes above.\r\n\r\nTo get a bit more into (my still nascent understanding of) the graph optimization process -- the example fails to fuse the blockwise operations that you identified @rabernat because array slicing is still not implemented as a HLG layer (pow, exp, and add all are, though). So using `b_alt` comes in with a somewhat intermediate timing between the above two extremes, cutting down on the depth of the graph, but not really the width.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/736925871/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/736946716",
        "html_url": "https://github.com/dask/dask/issues/6869#issuecomment-736946716",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6869",
        "id": 736946716,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczNjk0NjcxNg==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-12-02T02:27:28Z",
        "updated_at": "2020-12-02T02:27:28Z",
        "author_association": "MEMBER",
        "body": "This all sounds quite promising. Thanks for the work everyone!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/736946716/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]