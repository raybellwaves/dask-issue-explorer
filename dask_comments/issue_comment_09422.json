[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1225547690",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1225547690",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1225547690,
        "node_id": "IC_kwDOAbcwm85JDF-q",
        "user": {
            "login": "GPUtester",
            "id": 38199262,
            "node_id": "MDQ6VXNlcjM4MTk5MjYy",
            "avatar_url": "https://avatars.githubusercontent.com/u/38199262?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GPUtester",
            "html_url": "https://github.com/GPUtester",
            "followers_url": "https://api.github.com/users/GPUtester/followers",
            "following_url": "https://api.github.com/users/GPUtester/following{/other_user}",
            "gists_url": "https://api.github.com/users/GPUtester/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GPUtester/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GPUtester/subscriptions",
            "organizations_url": "https://api.github.com/users/GPUtester/orgs",
            "repos_url": "https://api.github.com/users/GPUtester/repos",
            "events_url": "https://api.github.com/users/GPUtester/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GPUtester/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-24T10:44:44Z",
        "updated_at": "2022-08-24T10:44:44Z",
        "author_association": "COLLABORATOR",
        "body": "Can one of the admins verify this patch?\n\nAdmins can comment `ok to test` to allow this one PR to run or `add to allowlist` to allow all future PRs from the same author to run.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1225547690/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1225576877",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1225576877",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1225576877,
        "node_id": "IC_kwDOAbcwm85JDNGt",
        "user": {
            "login": "pavithraes",
            "id": 33131404,
            "node_id": "MDQ6VXNlcjMzMTMxNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/33131404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pavithraes",
            "html_url": "https://github.com/pavithraes",
            "followers_url": "https://api.github.com/users/pavithraes/followers",
            "following_url": "https://api.github.com/users/pavithraes/following{/other_user}",
            "gists_url": "https://api.github.com/users/pavithraes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pavithraes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pavithraes/subscriptions",
            "organizations_url": "https://api.github.com/users/pavithraes/orgs",
            "repos_url": "https://api.github.com/users/pavithraes/repos",
            "events_url": "https://api.github.com/users/pavithraes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pavithraes/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-24T11:12:44Z",
        "updated_at": "2022-08-24T11:12:44Z",
        "author_association": "MEMBER",
        "body": "ok to test",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1225576877/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1241079374",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1241079374",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1241079374,
        "node_id": "IC_kwDOAbcwm85J-V5O",
        "user": {
            "login": "hayesgb",
            "id": 12595382,
            "node_id": "MDQ6VXNlcjEyNTk1Mzgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/12595382?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hayesgb",
            "html_url": "https://github.com/hayesgb",
            "followers_url": "https://api.github.com/users/hayesgb/followers",
            "following_url": "https://api.github.com/users/hayesgb/following{/other_user}",
            "gists_url": "https://api.github.com/users/hayesgb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hayesgb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hayesgb/subscriptions",
            "organizations_url": "https://api.github.com/users/hayesgb/orgs",
            "repos_url": "https://api.github.com/users/hayesgb/repos",
            "events_url": "https://api.github.com/users/hayesgb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hayesgb/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-08T18:29:48Z",
        "updated_at": "2022-09-08T18:29:48Z",
        "author_association": "MEMBER",
        "body": "LGTM",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1241079374/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1241082472",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1241082472",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1241082472,
        "node_id": "IC_kwDOAbcwm85J-Wpo",
        "user": {
            "login": "hayesgb",
            "id": 12595382,
            "node_id": "MDQ6VXNlcjEyNTk1Mzgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/12595382?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hayesgb",
            "html_url": "https://github.com/hayesgb",
            "followers_url": "https://api.github.com/users/hayesgb/followers",
            "following_url": "https://api.github.com/users/hayesgb/following{/other_user}",
            "gists_url": "https://api.github.com/users/hayesgb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hayesgb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hayesgb/subscriptions",
            "organizations_url": "https://api.github.com/users/hayesgb/orgs",
            "repos_url": "https://api.github.com/users/hayesgb/repos",
            "events_url": "https://api.github.com/users/hayesgb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hayesgb/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-08T18:32:52Z",
        "updated_at": "2022-09-08T18:32:52Z",
        "author_association": "MEMBER",
        "body": "cc: @jrbourbeau ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1241082472/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274618189",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1274618189",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1274618189,
        "node_id": "IC_kwDOAbcwm85L-SFN",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T12:35:21Z",
        "updated_at": "2022-10-11T12:39:14Z",
        "author_association": "CONTRIBUTOR",
        "body": "> So question, do we actually want to remove this capability, reduce our API compliance with pandas? Can the problems with it not be fixed?\r\n\r\nIMHO yes, it's a feature of Pandas that only complicates things unnecessarily in Dask, and is very rarely used in practice. Even in Pandas, I'm not sure at all of what does something like `df.set_index('x')` mean if there are 2 columns whose name is `'x'`, so I'd go further in saying that Pandas shouldn't support that either...\r\n\r\n> Also, do we want to include all the unrelated type and layout changes in this PR?\r\n\r\nThis is arguable, I admit. If you wish, I can remove all annotations, except from those methods that have been really changed by this MR. But at some point all methods should be annotated, so this can save some work later.\r\n\r\n> Same goes for the sorting with nulls.\r\n\r\nThis was part of a previous MR #8963 . Should we reopen it?\r\n\r\n> Finally, I would definitely remove all the xfails, rather than keep them around forever.\r\n\r\nIf we agree with point 1 of removing totally this capability, yes.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274618189/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274669584",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1274669584",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1274669584,
        "node_id": "IC_kwDOAbcwm85L-eoQ",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T13:14:34Z",
        "updated_at": "2022-10-11T13:14:34Z",
        "author_association": "MEMBER",
        "body": "> I'm not sure at all of what does something like df.set_index('x') mean if there are 2 columns whose name is 'x'\r\n\r\nIt selects two columns (i.e., a 2xN subset of the dataframe), which cannot be made into an index, yielding exception\r\n```\r\nValueError: Index data must be 1-dimensional\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274669584/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274689275",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1274689275",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1274689275,
        "node_id": "IC_kwDOAbcwm85L-jb7",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T13:29:30Z",
        "updated_at": "2022-10-11T13:29:30Z",
        "author_association": "CONTRIBUTOR",
        "body": "Yes, in that particular case I know it does that because `df['x']` gives a 2-column dataframe, but that in turn contradicts the general assumption that `df[col]` is a `Series` and `df[[col]]` is a `DataFrame`. And what about things like `df.groupby('x')`? My general point is that Pandas sort-of-supports columns with duplicate names, but needs custom code to deal with cases where that duplicity shouldn't be allowed. \r\n\r\nAnd I honestly doubt that duplicity should be allowed at all, because when columns are data features, feature names should be unique (as those are different measurements of your row samples).\r\n\r\nIn any case, Pandas kinda-supports that because dataframes can be transposed, so at any moment I can do `df = df.T`, and then index becomes columns, and columns become index. Since in the index it does make sense that there may be duplicates, columns need to support that as well.\r\n\r\nHowever in Dask things are very different. The index is used for partitioning and shuffling, so frames aren't directly transposable, nor are columns interchangeable with index values. In other words, Dask dataframes are always used in the context of \"rows are samples, columns are features\".  And I'd say that's the strongest reason for not allowing duplicity in column names: actually most columnar I/O formats don't support that (e.g., Parquet), so I don't see why we should allow for it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274689275/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274782529",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1274782529",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1274782529,
        "node_id": "IC_kwDOAbcwm85L-6NB",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T14:26:59Z",
        "updated_at": "2022-10-11T14:26:59Z",
        "author_association": "MEMBER",
        "body": "Can we tag someone at pandas to give an opinion on how supported or recommended duplicate column names is?\r\n\r\nTo nitpick: the most common tabular data format, csv, does support duplicate names, as does JSON (not recommended) and excel, probably others. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274782529/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274840416",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1274840416",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1274840416,
        "node_id": "IC_kwDOAbcwm85L_IVg",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T15:01:05Z",
        "updated_at": "2022-10-11T15:02:21Z",
        "author_association": "MEMBER",
        "body": "I would strongly recommend working on this upstream in libraries like pandas / cudf, rather than creating new APIs here.\r\n\r\nIn particular, the `disallow_duplicate_labels` flag (https://pandas.pydata.org/docs/user_guide/duplicates.html, https://pandas.pydata.org/docs/user_guide/duplicates.html#disallowing-duplicate-labels) at least partially does what we need.\r\n\r\nThe tricky parts with Dask are that:\r\n\r\n1. Minor: I don't know if dask.dataframe has the `set_flags` API / `__finalize__` logic that pandas uses to propagate this. But hopefully operations on `_metadata` will be sufficient.\r\n2. Major(ish): In pandas, `disallow_duplicate_labels=True` disallows duplicates on both the row and column labels. In Dask, it would only be possible to disallow duplicates on the columns (*maybe* we could do something with sorted index and divisions, but that sounds somewhat complicated.) In pandas we talked about expanding the API to allow targeting just rows or columns, but punted on that for simplicity. I don't know what the latest is.\r\n\r\n---\r\n\r\n> IMHO yes, it's a feature of Pandas that only complicates things unnecessarily in Dask, and is very rarely used in practice.\r\n\r\nOne (common, in my experience) use-case is cleaning messy data. It's sometimes helpful to have a dataframe structure to do the preprocessing you need to deduplicate the columns. So while I agree that datasets \"should\" have unique columns, datasets in the wild occasionally don't, and pandas (or dask for large datasets) is the tool to clean them.\r\n\r\nIf there are specific features of dask.dataframe that don't work well with duplicate columns then that's fine. We can either work to fix those issues (if it's an implementation issue rather than something fundamental) or we can raise with a nice error message saying that this operation isn't supported with duplicates.\r\n\r\n---\r\n\r\nxref https://github.com/pandas-dev/pandas/issues/30965 for the specific issue of `pandas.DataFrame.set_index` with a duplicate column.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274840416/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274936407",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1274936407",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1274936407,
        "node_id": "IC_kwDOAbcwm85L_fxX",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T16:05:46Z",
        "updated_at": "2022-10-11T16:11:27Z",
        "author_association": "CONTRIBUTOR",
        "body": "> One (common, in my experience) use-case is cleaning messy data. It's sometimes helpful to have a dataframe structure to do the preprocessing you need to deduplicate the columns. So while I agree that datasets \"should\" have unique columns, datasets in the wild occasionally don't, and pandas (or dask for large datasets) is the tool to clean them.\r\n\r\nAgree on the cleaning and wild and messy part, but not on the duplicate naming part. Let's imagine a very simple scenario: a dataframe `df` with 2 columns named `'x'` (let's call these informally `'x1'` and `'x2'`), for which you want to do **different** cleaning operations.\r\n\r\nHow would you actually do that (in Pandas or in Dask)? You cannot do `df['x'].operation1()` because you only want `operation1` on the first \"occurrence\" of `'x'` (which should have been called `'x1'`). Analogously, you cannot do `df['x'].operation2()`. Worse still, you can't reassign the result of the cleaning to `'x'` (that is, `df['x'] = <clean_df>` ) unless you have the result of both operations on the right-hand-side.\r\n\r\nI can think of something very awkward like `df['x'].iloc[:, 0].operation1()` or `df['x'].iloc[:, 1].operation2()`, but do Pandas/Dask guarantee order? How do I know that 0 gives me `'x1'` and 1 gives me `'x2'` (or vice-versa?).\r\n\r\nMoreover, I/O formats that allow for duplicities in columns (namely, `CSV` and `XLS`) do have an API argument `names` in `read_csv` and `read_xls` that allows for solving that duplicity beforehand. In `JSON` duplicity is strongly discouraged (and many `JSON` packages probably don't support it as they build in the end Python `dicts`, which cannot have duplicate keys), in Parquet it's not possible, in SQL databases it's not possible either... \r\n\r\nSo I don't think it's such a strong requirement that frame constructors reject data with column duplicities.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274936407/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274957374",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1274957374",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1274957374,
        "node_id": "IC_kwDOAbcwm85L_k4-",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T16:22:46Z",
        "updated_at": "2022-10-11T16:22:46Z",
        "author_association": "MEMBER",
        "body": "> I can think of something very awkward like df['x'].iloc[:, 0].operation1() or df['x'].iloc[:, 1].operation2(), but do Pandas/Dask guarantee order?\r\n\r\nYes, pandas does, do I assume dask does too",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274957374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1275305851",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1275305851",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1275305851,
        "node_id": "IC_kwDOAbcwm85MA597",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T21:42:07Z",
        "updated_at": "2022-10-11T21:42:07Z",
        "author_association": "MEMBER",
        "body": "But regardless, let's not get lost in the weeds of the merits of duplicate columns :)\r\n\r\nFocusing on this PR / feature, I think we should follow pandas' lead and implement [`set_flags`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.set_flags.html?highlight=set_flags)\r\n\r\nThen I *suspect* that we'll get much of the (column) duplicate label detection for free. We'll need to be careful when creating new `_metadata` objects, but the majority of (dask) operations that call the pandas operation on `_metadata` will work without modification (hopefully).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1275305851/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1277287040",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1277287040",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1277287040,
        "node_id": "IC_kwDOAbcwm85MIdqA",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-13T09:09:52Z",
        "updated_at": "2022-10-13T09:19:19Z",
        "author_association": "CONTRIBUTOR",
        "body": "I'm sorry, but I must insist on my point of view.\r\n\r\nI understand that in Pandas duplicity should be supported via `set_flags` and related methods, because of the fact that **in Pandas data don't need to be arranged in the format `rows = samples, columns = features`**. However, I strongly think that default behavior should be forbidding duplicates; note that default Pandas index is a `RangeIndex` with no duplicates, and regarding columns we already discussed that most input formats directly don't support that, or strongly discourage that practice (and in some particular cases such as CSVs with no headers, another `RangeIndex` is used by default). \r\n\r\nIt's inconsistent to build range indices by default, while at the same time assuming `allows_duplicate_labels=True`. The user should not be allowed to have duplicates, unless that person is conscious of what they're doing via explicitly invoking `allows_duplicate_labels=True` (in other words, default should be `allows_duplicate_labels=False`). This would answer your question in [pandas-dev/pandas#30965](https://github.com/pandas-dev/pandas/issues/30965): if the dataframe allows duplicate columns because the user explicitly wanted that (which is unusual), `set_index` with a duplicate column should build a `MultiIndex`. Same goes for `groupby(as_index=True)` and other related methods.\r\n\r\n**As for Dask, data do need to be arranged in the format `rows = samples, columns = features`, since data are actually partitioned by index and multi-indices aren't implemented**, so it's even more unnatural than in Pandas to have column duplicities, because it's impossible to index or group by a duplicate one. There are 2 options at this point:\r\n* Implementing something similar to `set_flags`, but only for columns, let's say `allows_duplicate_columns`. But then we'd have similar scenarios to that Pandas issue in some cases. For example, should `dd.set_index()` raise a `NotImplementedError(\"multi-indices are not supported\")` when `allows_duplicate_columns=True` and the column requested to be the index is a duplicate? (In any case, even if we choose this option, for me the default should be clearly `allows_duplicate_columns=False`).\r\n* Forbidding directly having duplicate columns. This should be done at construction time as is done in this PR, to guarantee that calls such as `rename()` don't ruin things later on. What I agree that could be refined is on internals of when duplicity actually needs to be checked, and how the user is informed that this is forbidden:\r\n   * If he tries to build a synthetic frame from scratch (e.g., via `from_pandas`), informing about column duplicity being forbidden.\r\n   * If he tries to build a frame from an input file in a format that allows column duplicity (e.g., CSV, XLS), informing about that being forbidden, and addressing him to using a proper `names=` specification to break duplicities.\r\n   * If he tries to build it from an input file in a format that doesn't allow it (e.g. Parquet or database), nothing needs to be checked.\r\n\r\ncc @jsignell \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1277287040/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1278159189",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1278159189",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1278159189,
        "node_id": "IC_kwDOAbcwm85MLylV",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-13T20:43:47Z",
        "updated_at": "2022-10-13T20:43:47Z",
        "author_association": "MEMBER",
        "body": "One of Dask's strengths has been not inventing new things when they already exist elsewhere. I'll continue to argue that we should follow pandas here.\r\n\r\n> to guarantee that calls such as rename() don't ruin things later on.\r\n\r\nWhether or not the instance allows duplicates propagates through operations:\r\n\r\n```python\r\nIn [2]: pd.DataFrame(columns=['a', 'b']).set_flags(allows_duplicate_labels=False).rename(columns=lambda x: 'a')\r\n---------------------------------------------------------------------------\r\nDuplicateLabelError                       Traceback (most recent call last)\r\nCell In [2], line 1\r\n----> 1 pd.DataFrame(columns=['a', 'b']).set_flags(allows_duplicate_labels=False).rename(columns=lambda x: 'a')\r\n\r\nFile ~/mambaforge/envs/py39/lib/python3.9/site-packages/pandas/core/frame.py:5565, in DataFrame.rename(self, mapper, index, columns, axis, copy, inplace, level, errors)\r\n   5446 def rename(\r\n   5447     self,\r\n   5448     mapper: Renamer | None = None,\r\n   (...)\r\n   5456     errors: IgnoreRaise = \"ignore\",\r\n   5457 ) -> DataFrame | None:\r\n   5458     \"\"\"\r\n   5459     Alter axes labels.\r\n   5460\r\n   (...)\r\n   5563     4  3  6\r\n   5564     \"\"\"\r\n-> 5565     return super()._rename(\r\n   5566         mapper=mapper,\r\n   5567         index=index,\r\n   5568         columns=columns,\r\n   5569         axis=axis,\r\n   5570         copy=copy,\r\n   5571         inplace=inplace,\r\n   5572         level=level,\r\n   5573         errors=errors,\r\n   5574     )\r\n\r\nFile ~/mambaforge/envs/py39/lib/python3.9/site-packages/pandas/core/generic.py:1111, in NDFrame._rename(self, mapper, index, columns, axis, copy, inplace, level, errors)\r\n   1109     return None\r\n   1110 else:\r\n-> 1111     return result.__finalize__(self, method=\"rename\")\r\n\r\nFile ~/mambaforge/envs/py39/lib/python3.9/site-packages/pandas/core/generic.py:5873, in NDFrame.__finalize__(self, other, method, **kwargs)\r\n   5870 for name in other.attrs:\r\n   5871     self.attrs[name] = other.attrs[name]\r\n-> 5873 self.flags.allows_duplicate_labels = other.flags.allows_duplicate_labels\r\n   5874 # For subclasses using _metadata.\r\n   5875 for name in set(self._metadata) & set(other._metadata):\r\n\r\nFile ~/mambaforge/envs/py39/lib/python3.9/site-packages/pandas/core/flags.py:94, in Flags.allows_duplicate_labels(self, value)\r\n     92 if not value:\r\n     93     for ax in obj.axes:\r\n---> 94         ax._maybe_check_unique()\r\n     96 self._allows_duplicate_labels = value\r\n\r\nFile ~/mambaforge/envs/py39/lib/python3.9/site-packages/pandas/core/indexes/base.py:753, in Index._maybe_check_unique(self)\r\n    750 duplicates = self._format_duplicate_message()\r\n    751 msg += f\"\\n{duplicates}\"\r\n--> 753 raise DuplicateLabelError(msg)\r\n\r\nDuplicateLabelError: Index has duplicates.\r\n      positions\r\nlabel\r\na        [0, 1]\r\n```\r\n\r\nIf you were to do it through an argument to the constructor, then users would need to do it everywhere. We shouldn't break API by changing the behavior here without warning, and warnings in the `__init__` tend to be noisy (we could limit this to cases where we detect duplicates though)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1278159189/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1285608512",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1285608512",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1285608512,
        "node_id": "IC_kwDOAbcwm85MoNRA",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-20T14:05:29Z",
        "updated_at": "2022-10-20T14:05:29Z",
        "author_association": "MEMBER",
        "body": "I wasn't aware of the `set_flags` options on pandas. Implementing the flag `allow_duplicate_labels` seems like a good solution that way people can opt in to.\r\n\r\nIt seems like the general sentiment expressed by Tom and Martin is that duplicate column names should be allowed even if all operations do not work perfectly. The main motivations for allowing them are to maintain similarity with pandas and to give people easy options for inspecting messy data. \r\n\r\nGiven that, I am wondering if one solution could be to add a decorator or something that can easily be added to methods that aren't expected to work with duplicate column names. That way we can just do a quick check and raise an informative error probably even at graph creation time. If we also implement `flags` then we could skip the check if `allow_duplicate_labels is False`. My only worry with that approach is that it might have performance implications.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1285608512/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1285645393",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1285645393",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1285645393,
        "node_id": "IC_kwDOAbcwm85MoWRR",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-20T14:27:35Z",
        "updated_at": "2022-10-20T14:29:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Yes, pandas does, do I assume dask does too\r\n\r\nFine, but does anyone actually do this? It doesn't make much sense to add support to a really marginal use case. The use case you're defending is this one:\r\n\r\n1. An input dataset with at least 2 columns named in exactly the same way.\r\n2. For which we want Dask to do some data operations (same ops or different ops).\r\n3. And for which we still want to keep their identical names after they've been processed.\r\n4. And finally for which we want to write (or compute) results back.\r\n\r\nKnown issues in each step:\r\n1. Only a few input formats do actually support duplicate names (most notably, CSV and XLS).\r\n2. There are some operations Dask could not support anyway with identical columns (especially the ones implying an index, such as `set_index`, possibly also `groupby`, anything else? \ud83e\udd14 ), even if Pandas does.\r\n3. and 4. Such a dataframe, even if step 2 has been completed, cannot be written in another duplicates-not-allowed format (for example, results cannot be written in Parquet). \r\n\r\nSo in the end it's fairly likely that a user that reads/loads duplicate columns would rename them with the API before going on with steps 2, 3 and 4. So why not disallowing the feature from step 1, and pointing the user to use non-duplicate names to begin with, via `names=<unique_list>` (or by calling `rename` previously, if building it with `from_pandas`)?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1285645393/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1285663233",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1285663233",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1285663233,
        "node_id": "IC_kwDOAbcwm85MoaoB",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-20T14:38:41Z",
        "updated_at": "2022-10-20T14:38:41Z",
        "author_association": "MEMBER",
        "body": "> There are some operations Dask could not support anyway with identical columns\r\n\r\nIs this purely down to lack of MultiIndex support in Dask or are there other reasons? IMO there's no fundamental issue preventing dask.dataframe from implementing support for a MultiIndex. It'll just require some careful thinking at a lot of effort. I'd prefer not to add an API designed around / motivated by lack of MultiIndex, especially if that might be solved in the next few years.\r\n\r\nAside from that, your arguments apply (I think) to any dataframe library, so you might consider discussing it there to get more feedback. But we've thought a lot about this topic in pandas and the dataframe-apis standard (https://github.com/data-apis/dataframe-api/search?q=duplicate&type=issues) so there might be existing topics to discuss the general idea of duplicates.\r\n\r\nBut setting that general discussion of duplicates aside: what are your thoughts on implementing this feature (disallowing duplicate columns) using pandas' established API? I think you touched on this a bit in https://github.com/dask/dask/pull/9422#issuecomment-1277287040, but why not just follow pandas here? If it's only down to the issue with not being able to check duplicates in the index, then I'd encourage you to push on pandas upstream to update `allow_duplicates` to take a boolean True / False or things like \"index\" and \"columns\".",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1285663233/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1285690969",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1285690969",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1285690969,
        "node_id": "IC_kwDOAbcwm85MohZZ",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-20T14:57:19Z",
        "updated_at": "2022-10-20T15:01:38Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Is this purely down to lack of MultiIndex support in Dask or are there other reasons?\r\n\r\nThere must be some other reasons, because some users have pointed to some functions not involved with indices, which anyway fail because of duplicate names, but don't fail in Pandas (see #9122 for `cumsum`).\r\n\r\nMy suspicion is that quite a lot of methods in the API may fail because of this, but it's anyway such an unusual thing to do that it hasn't been reported till very recently.\r\n\r\n>IMO there's no fundamental issue preventing dask.dataframe from implementing support for a MultiIndex. It'll just require some careful thinking at a lot of effort. \r\n\r\nI did once a very na\u00efve approach that builds a single-indexed frame, but whose index elements are tuples with the values of the columns you want to be part of this \"fake `MultiIndex`\".  Since tuples are element-wise compared by Python and are hashable, this works without much effort, but it's not very efficient.\r\n\r\n> What are your thoughts on implementing this feature (disallowing duplicate columns) using pandas' established API?\r\n\r\nIMO Pandas should be changed first so that `allow_duplicates` may be one of `index`, `columns` , `both` and `neither`, instead of a boolean value. Because of current Pandas defaults, instead of `True` it would be `both`, right?\r\n\r\nEither this, or splitting in 2 boolean flags: `allow_row_duplicates` and `allow_column_duplicates`. I don't know which one would be better.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1285690969/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1285780058",
        "html_url": "https://github.com/dask/dask/pull/9422#issuecomment-1285780058",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9422",
        "id": 1285780058,
        "node_id": "IC_kwDOAbcwm85Mo3Ja",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-20T15:44:06Z",
        "updated_at": "2022-10-20T15:44:06Z",
        "author_association": "MEMBER",
        "body": "> IMO Pandas should be changed first so that allow_duplicates may be one of index, columns , both and neither, instead of a boolean value. Because of current Pandas defaults, instead of True it would be both, right?\r\n\r\nIt would, but IMO that's not a blocker here. That's one place where I'm comfortable deviating from pandas' semantics, as long as we document that `True` means only disallowing duplicates on the columns and not the index (this matches with other places where dask differs from pandas because of its data model).\r\n\r\n> Either this, or splitting in 2 boolean flags: allow_row_duplicates and allow_column_duplicates. I don't know which one would be better.\r\n\r\nBest to discuss that over in pandas.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1285780058/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]