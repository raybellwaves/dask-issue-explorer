[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1471598899",
        "html_url": "https://github.com/dask/dask/issues/10074#issuecomment-1471598899",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10074",
        "id": 1471598899,
        "node_id": "IC_kwDOAbcwm85XttEz",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-16T09:31:54Z",
        "updated_at": "2023-03-16T09:31:54Z",
        "author_association": "MEMBER",
        "body": "@jakirkham I noticed you were the last one to contribute significant changes to this function. This is currently blocking us on the P2P rechunking front and I'm having a hard time wrapping my head around all of it. We don't need this to be blockwise for P2P but we do need to preserve annotations.\r\n\r\nIs this something you can take care of?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1471598899/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1521647918",
        "html_url": "https://github.com/dask/dask/issues/10074#issuecomment-1521647918",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10074",
        "id": 1521647918,
        "node_id": "IC_kwDOAbcwm85asoEu",
        "user": {
            "login": "d-v-b",
            "id": 3805136,
            "node_id": "MDQ6VXNlcjM4MDUxMzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3805136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/d-v-b",
            "html_url": "https://github.com/d-v-b",
            "followers_url": "https://api.github.com/users/d-v-b/followers",
            "following_url": "https://api.github.com/users/d-v-b/following{/other_user}",
            "gists_url": "https://api.github.com/users/d-v-b/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/d-v-b/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/d-v-b/subscriptions",
            "organizations_url": "https://api.github.com/users/d-v-b/orgs",
            "repos_url": "https://api.github.com/users/d-v-b/repos",
            "events_url": "https://api.github.com/users/d-v-b/events{/privacy}",
            "received_events_url": "https://api.github.com/users/d-v-b/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-25T11:43:53Z",
        "updated_at": "2023-04-25T11:43:53Z",
        "author_association": "MEMBER",
        "body": "@fjetter has there been any update on this? I would love to use p2p reshuffling but my use case involves storing data as the output. Since the underlying computation being mapped in `da.store` is fairly simple, could you describe or sketch a solution that would preserve annotations (which I know nothing about), so that I could implement this myself?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1521647918/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1521656787",
        "html_url": "https://github.com/dask/dask/issues/10074#issuecomment-1521656787",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10074",
        "id": 1521656787,
        "node_id": "IC_kwDOAbcwm85asqPT",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-25T11:51:31Z",
        "updated_at": "2023-04-25T11:51:31Z",
        "author_association": "MEMBER",
        "body": "@quasiben I don't suppose you or your team have any bandwidth to help out here?\r\n\r\n@d-v-b the challenge here is that `da.store` acts very differently from most other Dask IO functions.  It grabs the raw graph, manipulates it, and generally doesn't handle annotations (which shuffling uses).  This should probably be cleaned up, ideally by someone who understands dask.array well, and dask.array.store in particular.  Historically @jakirkham understood this code best, but I believe he's spending most of his time elsewhere currently.  If you or others around you have any interest in helping out here that would be very welcome.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1521656787/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1522200459",
        "html_url": "https://github.com/dask/dask/issues/10074#issuecomment-1522200459",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10074",
        "id": 1522200459,
        "node_id": "IC_kwDOAbcwm85auu-L",
        "user": {
            "login": "d-v-b",
            "id": 3805136,
            "node_id": "MDQ6VXNlcjM4MDUxMzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3805136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/d-v-b",
            "html_url": "https://github.com/d-v-b",
            "followers_url": "https://api.github.com/users/d-v-b/followers",
            "following_url": "https://api.github.com/users/d-v-b/following{/other_user}",
            "gists_url": "https://api.github.com/users/d-v-b/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/d-v-b/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/d-v-b/subscriptions",
            "organizations_url": "https://api.github.com/users/d-v-b/orgs",
            "repos_url": "https://api.github.com/users/d-v-b/repos",
            "events_url": "https://api.github.com/users/d-v-b/events{/privacy}",
            "received_events_url": "https://api.github.com/users/d-v-b/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-25T18:04:24Z",
        "updated_at": "2023-04-25T18:04:24Z",
        "author_association": "MEMBER",
        "body": "> the challenge here is that da.store acts very differently from most other Dask IO functions.\r\n\r\ncould you refer me to an idiomatic dask IO function to use as a template?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1522200459/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]