[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/905163467",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-905163467",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 905163467,
        "node_id": "IC_kwDOAbcwm84187LL",
        "user": {
            "login": "GPUtester",
            "id": 38199262,
            "node_id": "MDQ6VXNlcjM4MTk5MjYy",
            "avatar_url": "https://avatars.githubusercontent.com/u/38199262?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GPUtester",
            "html_url": "https://github.com/GPUtester",
            "followers_url": "https://api.github.com/users/GPUtester/followers",
            "following_url": "https://api.github.com/users/GPUtester/following{/other_user}",
            "gists_url": "https://api.github.com/users/GPUtester/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GPUtester/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GPUtester/subscriptions",
            "organizations_url": "https://api.github.com/users/GPUtester/orgs",
            "repos_url": "https://api.github.com/users/GPUtester/repos",
            "events_url": "https://api.github.com/users/GPUtester/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GPUtester/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-25T04:01:38Z",
        "updated_at": "2021-08-25T04:01:38Z",
        "author_association": "COLLABORATOR",
        "body": "Can one of the admins verify this patch?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/905163467/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/905512367",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-905512367",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 905512367,
        "node_id": "IC_kwDOAbcwm841-QWv",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-25T13:41:54Z",
        "updated_at": "2021-08-25T13:41:54Z",
        "author_association": "MEMBER",
        "body": "Thank you for starting this out @asmeurer .  Some responses to your thoughts/questions:\r\n\r\n> We are currently storing name, meta, and divisions on the expression, but\r\nnot the graph. This seems the most reasonable to me, but may need to be\r\nrethought.\r\n\r\nAs we optimize/reconstruct the expression we're going to want to recreate the graph.  Creating the graph can take non-trivial time for large datasets, and so we would prefer to only create this graph at the end when we're done optimizing.  Because of this, I think it makes more sense to have the graph be lazily created by the expression class.  Thoughts?\r\n\r\n> I have maintained backwards compatibility for everything except for the\r\nclass constructors for DataFrame, etc. However, it isn't necessarily clear\r\nto me that people don't use those constructors directly. For example,\r\ndask.datasets.timeseries() constructed a DataFrame directly. We might want\r\nto rethink how to do this while maintaining maximal backwards compatibility.\r\n\r\nI think that it is fine to not support these constructors as a first pass.  We can ask folks in downstream projects to switch to the `new_dd_object` function now (they should be doing it anyway) (also, cc @rjzamora and @jsignell for a couple of representative downstream projects).  If at the end of this process we choose to walk back this somewhat harsh stance then I would be fine with that.  It seems like a clean assumption to me though, at least while developing.\r\n\r\n> Relatedly, it's not clear to me just where the adapter for putting the\r\nexpression on the leaf node should go. For now, I have changed the\r\nconstructor of _Frame, and modified the get_parallel_type dispatcher\r\nfunctions used by new_dd_object() function. But it's not obvious to me that\r\nthat is correct.\r\n\r\nMy assumption was that we would change the new_dd_object function.  Modifying the get_parallel_type dispatchers seems to be effective, it also seems slightly unclean to me though.  \r\n\r\nMy original thought was the following\r\n\r\n```python\r\ndef new_dd_object(dsk=None, name=None, meta=None, divisions=None, expr=None):\r\n    if expr is None:\r\n        expr = LeafFrame(dsk, name, meta, divisions)\r\n    return get_parallel_type(expr._meta)(expr)\r\n```\r\n\r\n> Also, we need a new type of function that constructs an\r\nobject with subexpressions, which should be used by any function that\r\nconstructs an object from other objects (i.e., the expression wouldn't be a\r\nleaf node in the expression tree).\r\n\r\nIf we put everything, including the graph, on the expression then maybe this becomes easier?  The API class (DataFrame, Series, Index) just holds an expression and provides a user API.  Everything else gets deferred to the expression, and so maybe expressions can make themselves and then new_dd_object can wrap around the appropriate API class?\r\n\r\n> Right now I have name, meta, and divisions as the args on the expression.\r\nI'm not sure if that's the best way to do it. It's definitely the simplest,\r\nbecause it means everything is just in args. Although I do think we might\r\nwant to wrap those three objects themselves in special wrapper expression\r\nclasses, if just to make the expression tree printing sane.\r\n\r\nI think that this makes sense for leaf expressions but it doesn't make sense for any derived expression.  Args should, I think, represent user input. meta/divisions/graph/name are more the deterministic results of those inputs I think.  In the case of LeafExpr they are the inputs though, which is maybe what makes this feel natural as we start.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/905512367/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/905864579",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-905864579",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 905864579,
        "node_id": "IC_kwDOAbcwm841_mWD",
        "user": {
            "login": "asmeurer",
            "id": 71486,
            "node_id": "MDQ6VXNlcjcxNDg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asmeurer",
            "html_url": "https://github.com/asmeurer",
            "followers_url": "https://api.github.com/users/asmeurer/followers",
            "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
            "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
            "organizations_url": "https://api.github.com/users/asmeurer/orgs",
            "repos_url": "https://api.github.com/users/asmeurer/repos",
            "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asmeurer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-25T20:51:13Z",
        "updated_at": "2021-08-25T20:51:13Z",
        "author_association": "NONE",
        "body": "> As we optimize/reconstruct the expression we're going to want to recreate the graph. Creating the graph can take non-trivial time for large datasets, and so we would prefer to only create this graph at the end when we're done optimizing. Because of this, I think it makes more sense to have the graph be lazily created by the expression class. Thoughts?\r\n\r\nYes, it also seems clear to me that we are going to want to make the graph not recompute all the time. There might be other things that shouldn't get recomputed all the time either. I don't know if this necessarily means that the expression is responsible for computing it, or if the collection object should.\r\n\r\n> I think that it is fine to not support these constructors as a first pass. We can ask folks in downstream projects to switch to the new_dd_object function now (they should be doing it anyway) (also, cc @rjzamora and @jsignell for a couple of representative downstream projects). If at the end of this process we choose to walk back this somewhat harsh stance then I would be fine with that. It seems like a clean assumption to me though, at least while developing.\r\n\r\nOK. It's not really clear to me what counts as \"public API\" for dask. For instance, new_dd_object isn't exported in `__init__.py` and isn't mentioned anywhere in the docs. From what I can tell, the main difference between new_dd_object and the direct object constructors is that new_dd_object passes through dispatching. So it's no surprise that something like dask.dataframes.timeseries() was using the DataFrame constructor directly, since it already knows that is exactly the class it wants, so there's no need to use dispatching. \r\n\r\n> My original thought was the following\r\n\r\nYeah I also considered that. Maybe I should switch to it. It complicates the signature a bit, but should be completely backwards compatible. \r\n\r\n> I think that this makes sense for leaf expressions but it doesn't make sense for any derived expression. Args should, I think, represent user input. meta/divisions/graph/name are more the deterministic results of those inputs I think. In the case of LeafExpr they are the inputs though, which is maybe what makes this feel natural as we start.\r\n\r\nAh I gotcha. So actually, all of these are things that we might want to \"compute lazily\" on the expression object. I'm not sure if this needs to be the first thing to think about, though, as it should be easy to change the evaluation to lazy later (the only semantic difference would be performance). ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/905864579/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/905889163",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-905889163",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 905889163,
        "node_id": "IC_kwDOAbcwm841_sWL",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-25T21:29:22Z",
        "updated_at": "2021-08-25T21:29:22Z",
        "author_association": "MEMBER",
        "body": "> I don't know if this necessarily means that the expression is responsible for computing it, or if the collection object should.\r\n\r\nAside from the expr, the collection object is pretty dumb.  It doesn't know much about what it is.  I think that it'll be hard for it to compute non-trivial things without the expr's help.\r\n\r\n> OK. It's not really clear to me what counts as \"public API\" for dask. For instance, new_dd_object isn't exported in __init__.py and isn't mentioned anywhere in the docs\r\n\r\nYeah, this is a fair complaint.  The problem is, I think, that there are downstream projects, like RAPIDS, which were co-developed with Dask and so treat a lot of internal details as public API.  We should have a more clear contract here, but we don't unfortunately.\r\n\r\n> Ah I gotcha. So actually, all of these are things that we might want to \"compute lazily\" on the expression object. I'm not sure if this needs to be the first thing to think about, though, as it should be easy to change the evaluation to lazy later (the only semantic difference would be performance).\r\n\r\nCorrect, but at least for meta and *maybe* for divisions I expect them to be required almost all the time by future expr calls.  For example, any time we want to get the column names we're going to access meta.  Actually, we'll access it when figuring out what the API type should be\r\n\r\n```python\r\nif is_dataframe_like(expr._meta):\r\n    return DataFrame(expr)\r\nif is_series_like(expr._meta):\r\n    return Series(expr)\r\n...\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/905889163/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/906821124",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-906821124",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 906821124,
        "node_id": "IC_kwDOAbcwm842DP4E",
        "user": {
            "login": "asmeurer",
            "id": 71486,
            "node_id": "MDQ6VXNlcjcxNDg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asmeurer",
            "html_url": "https://github.com/asmeurer",
            "followers_url": "https://api.github.com/users/asmeurer/followers",
            "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
            "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
            "organizations_url": "https://api.github.com/users/asmeurer/orgs",
            "repos_url": "https://api.github.com/users/asmeurer/repos",
            "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asmeurer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-27T00:01:47Z",
        "updated_at": "2021-08-27T00:01:47Z",
        "author_association": "NONE",
        "body": "Some updates here:\r\n\r\n- `new_dd_object` now looks more like Matt's suggestion. That is, I've changed the signature from \r\n\r\n```py\r\nnew_dd_object(dsk, name, meta, divisions)\r\n```\r\n\r\nto\r\n\r\n```py\r\nnew_dd_object(dsk=None, name=None, meta=None, divisions=None, expr=None)\r\n```\r\n\r\nCalling it in the old way still works and just creates a leaf expression. Otherwise the new way to call it is with `new_dd_object(expr=expr)`, which grabs the other objects from `expr`. There's also now no changes to the dispatch functions.\r\n\r\n- The expressions now store the graph in addition to the name, meta, and divisions.\r\n\r\n- I've changed Expr so that it stores both `args` and `kwargs`.\r\n\r\n- The expressions now store exactly the user input to their respective functions in their args (currently just `elemwise` and the dataframe collection classes, but I plan to implement a couple others so that we can have some meaningful toy examples to play with).\r\n\r\n```py\r\n>>> import dask\r\n>>> df = dask.datasets.timeseries()\r\n>>> a = df + df\r\n>>> a.expr\r\nelemwise(<built-in function add>, DataFrame(<graph>, 'make-timeseries-b64a83e8740478ad9ff0aa68e4ae66d5', <meta>, <divisions>), DataFrame(<graph>, 'make-timeseries-b64a83e8740478ad9ff0aa68e4ae66d5', <meta>, <divisions>), meta=__no_default__, transform_divisions=True, out=None)\r\n```\r\n\r\nNote that the printing here shows the input function that created the expression, but these are distinct classes\r\n\r\n```py\r\n>>> type(a.expr)\r\n<class 'dask.dataframe.core.ElemwiseFrameExpr'>\r\n>>> a.expr.args[1]\r\nDataFrame(<graph>, 'make-timeseries-b64a83e8740478ad9ff0aa68e4ae66d5', <meta>, <divisions>)\r\n>>> type(a.expr.args[1])\r\n<class 'dask.dataframe.core.FrameLeafExpr'>\r\n```\r\n\r\n- This means that the non-leaf expressions (just `ElemwiseFrameExpr` for now) all compute graph, name, meta, and divisions in their constructor. Basically, this means the majority of the `elemwise` function body is now in the `ElemwiseFrameExpr` constructor. I anticipate this sort of thing will be commonplace with this design, although we might be able to simplify the actual code itself a bit with some decorators or something. \r\n\r\n- As I noted, everything is computed in the constructor, but eventually we will want things to be computed lazily, the graph in particular. However, this should just be a question of moving the code from the constructor to a property method, so I don't expect it to really affect the overall design much.\r\n\r\nLet me know how you feel about this latest iteration of the design. The next plan, based on my discussion with Matt, is to implement enough so that we can have a toy model to play with column projection. This means `read_parquet` + `__getitem__`. Matt mentioned I should also do `apply_concat_apply` (I'm not sure if that is needed for column projection or if the idea there is just to get another function like elemwise that covers a wide subset of the API).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/906821124/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/907462641",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-907462641",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 907462641,
        "node_id": "IC_kwDOAbcwm842Fsfx",
        "user": {
            "login": "asmeurer",
            "id": 71486,
            "node_id": "MDQ6VXNlcjcxNDg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asmeurer",
            "html_url": "https://github.com/asmeurer",
            "followers_url": "https://api.github.com/users/asmeurer/followers",
            "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
            "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
            "organizations_url": "https://api.github.com/users/asmeurer/orgs",
            "repos_url": "https://api.github.com/users/asmeurer/repos",
            "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asmeurer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-27T20:36:48Z",
        "updated_at": "2021-08-27T20:36:48Z",
        "author_association": "NONE",
        "body": "I just realized the expressions also need to know how to create the collections they correspond to. This is because without this, it will be impossible to build an expression except by calling the user-level functions with recursive collections (because, for instance, the graph requires the collection for its dependencies). But we need to be able to construct expressions directly to do expression rewriting. \r\n\r\nThis will mean that most functions will end up as even thinner wrappers than I thought. For example, currently I have\r\n\r\n```py\r\ndef elemwise(op, *args, **kwargs):\r\n    expr = ElemwiseFrameExpr(op, *args, **kwargs)\r\n    result = new_dd_object(expr=expr)\r\n    out = expr.kwargs['out']\r\n    return handle_out(out, result)\r\n```\r\n\r\nBut I think it actually should be even more basic than that. It should literally be \r\n\r\n```py\r\ndef elemwise(op, *args, **kwargs):\r\n    expr = ElemwiseFrameExpr(op, *args, **kwargs)\r\n    return expr.collection()\r\n```\r\n\r\nwhere `ElemwiseFrameExpr.collection` is what calls `new_dd_object`. And the same will be true for basically every single function that has an expression. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/907462641/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/907464964",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-907464964",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 907464964,
        "node_id": "IC_kwDOAbcwm842FtEE",
        "user": {
            "login": "asmeurer",
            "id": 71486,
            "node_id": "MDQ6VXNlcjcxNDg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asmeurer",
            "html_url": "https://github.com/asmeurer",
            "followers_url": "https://api.github.com/users/asmeurer/followers",
            "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
            "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
            "organizations_url": "https://api.github.com/users/asmeurer/orgs",
            "repos_url": "https://api.github.com/users/asmeurer/repos",
            "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asmeurer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-27T20:42:01Z",
        "updated_at": "2021-08-27T20:42:01Z",
        "author_association": "NONE",
        "body": "I'm a little uneasy about this aspect of the design\r\n\r\n```py\r\nclass ElemwiseFrameExpr(FrameExpr):\r\n    def __init__(self, op, *args, meta=no_default, transform_divisions=True,\r\n                 out=None, **kwargs):\r\n        self.args = (op, *[getattr(i, 'expr', i) for i in args])\r\n```\r\n\r\n(https://github.com/dask/dask/pull/8084/files#diff-50db4961ecd27b18654b1ed8450ac8e2ca4d4dfcfb4179b106c72225a3daff2aR5264-R5267)\r\n\r\nRight now the expression object stores the exact function input in its args, except the collection parts of the inputs are replaced with their expressions. But this feels like it's rather type confused, and we should be making a clearer separation of the two. I'm not exactly sure yet how to best do that. It almost feels like I'm converging on Matt's original idea of making the expression objects themselves collections. So maybe I need to take a step back and think about whether that really is necessary, or if we need to rethink the design. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/907464964/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/908358610",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-908358610",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 908358610,
        "node_id": "IC_kwDOAbcwm842JHPS",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-30T13:49:01Z",
        "updated_at": "2021-08-30T13:49:01Z",
        "author_association": "MEMBER",
        "body": "> Matt mentioned I should also do apply_concat_apply (I'm not sure if that is needed for column projection or if the idea there is just to get another function like elemwise that covers a wide subset of the API).\r\n\r\nNot needed for column projection.  It's the second thing.   apply_concat_apply would just get us another large bunch of API points like reductions (sum, count, len) groupby-aggregations (groupby.mean, ...).  With elemwise, apply_concat_apply, and some data generation API we've covered a large fraction of the dask.dataframe API.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/908358610/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/908359542",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-908359542",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 908359542,
        "node_id": "IC_kwDOAbcwm842JHd2",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-30T13:50:18Z",
        "updated_at": "2021-08-30T13:50:18Z",
        "author_association": "MEMBER",
        "body": "```python\r\ndef elemwise(op, *args, **kwargs):\r\n    expr = ElemwiseFrameExpr(op, *args, **kwargs)\r\n    return expr.collection()\r\n```\r\n\r\nThis seems fine to me!\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/908359542/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/908360025",
        "html_url": "https://github.com/dask/dask/pull/8084#issuecomment-908360025",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8084",
        "id": 908360025,
        "node_id": "IC_kwDOAbcwm842JHlZ",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-30T13:50:54Z",
        "updated_at": "2021-08-30T13:50:54Z",
        "author_association": "MEMBER",
        "body": "> Right now the expression object stores the exact function input in its args, except the collection parts of the inputs are replaced with their expressions. But this feels like it's rather type confused, and we should be making a clearer separation of the two. I'm not exactly sure yet how to best do that. It almost feels like I'm converging on Matt's original idea of making the expression objects themselves collections. So maybe I need to take a step back and think about whether that really is necessary, or if we need to rethink the design.\r\n\r\nThank you for thinking about this.  I don't have any immediate thoughts.  I think that we'll probably want @jcrist to weigh in here eventually.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/908360025/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]