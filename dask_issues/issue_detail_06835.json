{
    "url": "https://api.github.com/repos/dask/dask/issues/6835",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/6835/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/6835/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/6835/events",
    "html_url": "https://github.com/dask/dask/issues/6835",
    "id": 742439529,
    "node_id": "MDU6SXNzdWU3NDI0Mzk1Mjk=",
    "number": 6835,
    "title": "Improve randomized SVD support",
    "user": {
        "login": "eric-czech",
        "id": 6130352,
        "node_id": "MDQ6VXNlcjYxMzAzNTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6130352?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/eric-czech",
        "html_url": "https://github.com/eric-czech",
        "followers_url": "https://api.github.com/users/eric-czech/followers",
        "following_url": "https://api.github.com/users/eric-czech/following{/other_user}",
        "gists_url": "https://api.github.com/users/eric-czech/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/eric-czech/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/eric-czech/subscriptions",
        "organizations_url": "https://api.github.com/users/eric-czech/orgs",
        "repos_url": "https://api.github.com/users/eric-czech/repos",
        "events_url": "https://api.github.com/users/eric-czech/events{/privacy}",
        "received_events_url": "https://api.github.com/users/eric-czech/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-11-13T13:11:58Z",
    "updated_at": "2021-10-14T05:29:00Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "The current randomized SVD implementation is based on [Halko 2011](https://arxiv.org/abs/0909.4061) (algorithm 4.3).\r\n\r\nMany randomized SVD algorithms have been developed or described well since then, and the improvements in accuracy and/or efficiency from them may be worth trying to implement.\r\n\r\nHere is a list of candidate algorithms that could be worth considering, primarily from @RogerMoens and a list @hammer started:\r\n\r\n- Algorithm 4.4 of Halko 2011 \r\n  - This extends 4.3 to use QR decomp in the power iteration, which can decrease round-off error\r\n- [Algorithm 971: An Implementation of a Randomized Algorithm for Principal Component Analysis](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5625842/) (Li and Tygert et al. 2017)\r\n    - This discusses using LU rather than QR decomp in the iteration, which is more efficient\r\n    - @RogerMoens may already be working on this as outlined in https://github.com/dask/dask/issues/6757#issuecomment-721818125\r\n- [Randomized algorithms for distributed computation of principal component analysis and singular value decomposition](https://arxiv.org/pdf/1612.08709.pdf) (Li and Tygert et al. 2018)\r\n    - This paper focuses on Spark implementations, which could make for a useful contrast\r\n    - It concludes that \"Carefully honed algorithms yield results that are uniformly superior to those of the stock, deterministic implementations in Spark\", though it's not clear to me how much \"honing\" is necessary\r\n    - It suggests replacing standard gaussian projection matrices with chained DFT matrices (to make them orthogonal presumably?)\r\n    - It builds SVD for arbitrary matrices based on algorithms for tall-skinny matrices (like the current dask implementations)\r\n    - It mentions that Spark's default TSQR is not numerically stable for rank-deficient matrices -- I wonder if dask.linalg.tsqr is?\r\n    - It also mentions that Spark will \"without warning return left singular vectors that are far from numerically orthonormal\" but \"a significantly burnished randomized implementation generates left singular vectors that are numerically orthonormal to nearly the machine precision\", which may have implications for our tests like https://github.com/dask/dask/blob/aeb78158cedd30c640ecb26581b073db53222628/dask/array/tests/test_linalg.py#L478\r\n- [Computing rank-revealing factorizations of matrices stored out-of-core](https://arxiv.org/pdf/2002.06960.pdf) (Heavner and Martinsson 2020) \r\n    - As @hammer points out, this is new work from Per-Gunnar Martinsson, who advised on Nathan Halko's PhD \r\n    - There are two methods described here:\r\n        - > The first is a blocked version of column pivoted Householder QR, organized as a \u201cleft-looking\u201d method to minimize the number of write operations (which are more expensive than read operations on a spinning disk drive)\r\n        - > The second method results in a so called UTV factorization which expresses a matrix A as A = UT V \u2217 where U and V are unitary, and T is triangular. \r\n    - Unlike the 2018 Tygert paper, this defines algorithms that do not build on tall-skinny QR decompositions\r\n- [A Survey of Singular Value Decomposition Methods for Distributed Tall/Skinny Data](https://arxiv.org/pdf/2009.00761.pdf) (Schmidt 2020)\r\n    - Mentioned by @RogerMoens at https://github.com/dask/dask/issues/6757#issuecomment-726667241\r\n    - Compares MPI algorithms for tall skinny SVD\r\n    - Discusses high level differences between MapReduce (via Spark) and MPI implementations\r\n\r\nThis should be a good place to track anything we find relating to benchmarking, approximation error, characterizing input matrix constraints, algorithm limitations/improvements, etc.  ",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/6835/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/6835/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}