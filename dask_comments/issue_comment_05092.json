[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/511423333",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-511423333",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 511423333,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTQyMzMzMw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-15T14:22:35Z",
        "updated_at": "2019-07-15T14:22:35Z",
        "author_association": "MEMBER",
        "body": "Can you provide a minimal example? http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\r\n\r\nI'm not sure I fully understand, but add ing SeriesGroupBy / DataFrameGroupBy.quantile method is well within scope for dask.dataframe.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/511423333/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/511541248",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-511541248",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 511541248,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTU0MTI0OA==",
        "user": {
            "login": "nbmorgan",
            "id": 1404206,
            "node_id": "MDQ6VXNlcjE0MDQyMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1404206?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nbmorgan",
            "html_url": "https://github.com/nbmorgan",
            "followers_url": "https://api.github.com/users/nbmorgan/followers",
            "following_url": "https://api.github.com/users/nbmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/nbmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nbmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nbmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/nbmorgan/orgs",
            "repos_url": "https://api.github.com/users/nbmorgan/repos",
            "events_url": "https://api.github.com/users/nbmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nbmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-15T19:41:16Z",
        "updated_at": "2019-07-15T19:41:16Z",
        "author_association": "NONE",
        "body": "I am not sure I could condense the above code further without ending up at the min/max example in the docs.  It seems like there are a few open questions on how to do this kind of thing so I wanted to try my hand at a custom agg function. The only thing that should have a hard \"must be a numeric\" requirement is the finalize and it does. \r\n\r\nThe error I get is the following:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/utils.py in raise_on_meta_error(funcname, udf)\r\n    168     try:\r\n--> 169         yield\r\n    170     except Exception as e:\r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/core.py in _emulate(func, *args, **kwargs)\r\n   4710     with raise_on_meta_error(funcname(func), udf=kwargs.pop(\"udf\", False)):\r\n-> 4711         return func(*_extract_meta(args, True), **_extract_meta(kwargs, True))\r\n   4712 \r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/groupby.py in _groupby_apply_funcs(df, *index, **kwargs)\r\n    838     for result_column, func, func_kwargs in funcs:\r\n--> 839         r = func(grouped, **func_kwargs)\r\n    840 \r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/groupby.py in _apply_func_to_column(df_like, column, func)\r\n    875 \r\n--> 876     return func(df_like[column])\r\n    877 \r\n\r\n<ipython-input-131-0d0e0460796b> in percentile_chunck(grouped)\r\n     22             t = TDigest()\r\n---> 23             g_res.append(t.update(items))\r\n     24         return(g_res)\r\n\r\ncrick/tdigest.pyx in crick.tdigest.TDigest.update()\r\n\r\nTypeError: x must be numeric\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-131-0d0e0460796b> in <module>\r\n     52     percentile(0.50),\r\n     53     percentile(0.75),\r\n---> 54     percentile(0.95)\r\n     55 ])\r\n     56 display(Spike_day.head(10)) # prove the aggs work\r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/groupby.py in agg(self, arg, split_every, split_out)\r\n   1619     @derived_from(pd.core.groupby.SeriesGroupBy)\r\n   1620     def agg(self, arg, split_every=None, split_out=1):\r\n-> 1621         return self.aggregate(arg, split_every=split_every, split_out=split_out)\r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/groupby.py in aggregate(self, arg, split_every, split_out)\r\n   1607     def aggregate(self, arg, split_every=None, split_out=1):\r\n   1608         result = super(SeriesGroupBy, self).aggregate(\r\n-> 1609             arg, split_every=split_every, split_out=split_out\r\n   1610         )\r\n   1611         if self._slice:\r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/groupby.py in aggregate(self, arg, split_every, split_out)\r\n   1378             split_every=split_every,\r\n   1379             split_out=split_out,\r\n-> 1380             split_out_setup=split_out_on_index,\r\n   1381         )\r\n   1382 \r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/core.py in apply_concat_apply(args, chunk, aggregate, combine, meta, token, chunk_kwargs, aggregate_kwargs, combine_kwargs, split_every, split_out, split_out_setup, split_out_setup_kwargs, **kwargs)\r\n   4664 \r\n   4665     if meta is no_default:\r\n-> 4666         meta_chunk = _emulate(chunk, *args, udf=True, **chunk_kwargs)\r\n   4667         meta = _emulate(aggregate, _concat([meta_chunk]), udf=True, **aggregate_kwargs)\r\n   4668     meta = make_meta(\r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/core.py in _emulate(func, *args, **kwargs)\r\n   4709     \"\"\"\r\n   4710     with raise_on_meta_error(funcname(func), udf=kwargs.pop(\"udf\", False)):\r\n-> 4711         return func(*_extract_meta(args, True), **_extract_meta(kwargs, True))\r\n   4712 \r\n   4713 \r\n\r\n/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py in __exit__(self, type, value, traceback)\r\n    128                 value = type()\r\n    129             try:\r\n--> 130                 self.gen.throw(type, value, traceback)\r\n    131             except StopIteration as exc:\r\n    132                 # Suppress StopIteration *unless* it's the same exception that\r\n\r\n~/develop/ConnectTheDots/.venv/lib/python3.7/site-packages/dask/dataframe/utils.py in raise_on_meta_error(funcname, udf)\r\n    188         )\r\n    189         msg = msg.format(\" in `{0}`\".format(funcname) if funcname else \"\", repr(e), tb)\r\n--> 190         raise ValueError(msg)\r\n    191 \r\n    192 \r\n\r\nValueError: Metadata inference failed in `_groupby_apply_funcs`.\r\n\r\nYou have supplied a custom function and Dask is unable to \r\ndetermine the type of output that that function returns. \r\n\r\nTo resolve this please provide a meta= keyword.\r\nThe docstring of the Dask function you ran should have more information.\r\n\r\nOriginal error is below:\r\n------------------------\r\nTypeError('x must be numeric')\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/511541248/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/511559036",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-511559036",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 511559036,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTU1OTAzNg==",
        "user": {
            "login": "nbmorgan",
            "id": 1404206,
            "node_id": "MDQ6VXNlcjE0MDQyMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1404206?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nbmorgan",
            "html_url": "https://github.com/nbmorgan",
            "followers_url": "https://api.github.com/users/nbmorgan/followers",
            "following_url": "https://api.github.com/users/nbmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/nbmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nbmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nbmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/nbmorgan/orgs",
            "repos_url": "https://api.github.com/users/nbmorgan/repos",
            "events_url": "https://api.github.com/users/nbmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nbmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-15T20:33:53Z",
        "updated_at": "2019-07-15T20:33:53Z",
        "author_association": "NONE",
        "body": "Ok in an attempt to simplify did the following:\r\n``` python\r\ndef percentile(n):\r\n    from crick import TDigest\r\n    # doc https://github.com/jcrist/crick/blob/master/crick/tdigest.pyx\r\n    # doc https://docs.dask.org/en/stable/dataframe-api.html#dask.dataframe.groupby.Aggregation\r\n    \r\n    \r\n    def percentile_chunck(grouped):\r\n        g_res = []\r\n        for items in grouped:\r\n            g_res.append(0.0)\r\n        return(g_res) \r\n    \r\n    def percentile_agg(chunk_TDigests):\r\n        return 0.0\r\n   \r\n    def percentile_finalize(tagg):\r\n        return float('0.0')\r\n    \r\n    return dd.Aggregation(\r\n        name    = 'percentile_{:2.0f}'.format(n*100),\r\n        chunk   = percentile_chunck,\r\n        agg     = percentile_agg,\r\n        finalize=percentile_finalize,\r\n    )\r\n```\r\nThat worked as a aggragation and produces 0.0 as expected.\r\n\r\nI think made the following change:\r\n```python\r\n    def percentile_chunck(grouped):\r\n        g_res = []\r\n        for items in grouped:\r\n            t = TDigest()\r\n            g_res.append(t.update(items))\r\n        return(g_res) \r\n```\r\n\r\nThat produces the error.  The documentation says that ``` chunk(grouped): ``` can return tuples and but does not say that each value must be numeric.  My understanding is that these results are going to be passed into the agg function later.  In the case of percintile, we are keeping a line segment in memory and modifying it with each run.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/511559036/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/536811489",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-536811489",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 536811489,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUzNjgxMTQ4OQ==",
        "user": {
            "login": "jhulten",
            "id": 40279,
            "node_id": "MDQ6VXNlcjQwMjc5",
            "avatar_url": "https://avatars.githubusercontent.com/u/40279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jhulten",
            "html_url": "https://github.com/jhulten",
            "followers_url": "https://api.github.com/users/jhulten/followers",
            "following_url": "https://api.github.com/users/jhulten/following{/other_user}",
            "gists_url": "https://api.github.com/users/jhulten/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jhulten/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jhulten/subscriptions",
            "organizations_url": "https://api.github.com/users/jhulten/orgs",
            "repos_url": "https://api.github.com/users/jhulten/repos",
            "events_url": "https://api.github.com/users/jhulten/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jhulten/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-01T00:54:21Z",
        "updated_at": "2019-10-01T00:54:21Z",
        "author_association": "NONE",
        "body": "For another example:\r\n\r\n```\r\nfrom hurry.filesize import size as filesize\r\nhuman_sum = dd.Aggregation('human_sum', lambda s: s.sum(), lambda s0: s0.sum(), lambda s1: filesize(s1))\r\n```\r\n\r\nThe input is `int64`. The output is `object`. Or should be.\r\n\r\nThis is intended to provide a human readable size of a sum of files in my dataset.\r\n\r\nPinging original dev for Aggregation: @chmp",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/536811489/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/540000241",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-540000241",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 540000241,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDAwMDI0MQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-09T13:27:08Z",
        "updated_at": "2019-10-09T13:27:08Z",
        "author_association": "MEMBER",
        "body": "@jhulten @nbmorgan do we have a runnable example here? I glanced through and didn't see anywhere a DataFrame was defined (apologies if I missed it). ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/540000241/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/540164388",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-540164388",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 540164388,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDE2NDM4OA==",
        "user": {
            "login": "nbmorgan",
            "id": 1404206,
            "node_id": "MDQ6VXNlcjE0MDQyMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1404206?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nbmorgan",
            "html_url": "https://github.com/nbmorgan",
            "followers_url": "https://api.github.com/users/nbmorgan/followers",
            "following_url": "https://api.github.com/users/nbmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/nbmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nbmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nbmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/nbmorgan/orgs",
            "repos_url": "https://api.github.com/users/nbmorgan/repos",
            "events_url": "https://api.github.com/users/nbmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nbmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-09T19:56:49Z",
        "updated_at": "2019-10-09T19:56:49Z",
        "author_association": "NONE",
        "body": "Here is a runnable version slightly diffent error.  I am still trying to follow the custom agg rules.\r\n\r\n```\r\nimport os\r\nimport io\r\nimport sys\r\nimport time\r\nimport datetime\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport zlib\r\n\r\nimport requests\r\nimport json\r\nimport pprint\r\n\r\nimport dask\r\nimport dask.dataframe as dd\r\nfrom dask.distributed import Client, LocalCluster\r\n\r\nclient = Client(\r\n    n_workers=6, \r\n    threads_per_worker=4,\r\n    memory_limit='8GB',\r\n    host='localhost',\r\n    processes=True, \r\n)\r\nclient\r\n\r\n\r\n# In[3]:\r\n\r\n\r\nddf = dask.datasets.timeseries()\r\nddf\r\n\r\n\r\n# In[4]:\r\n\r\n\r\nprint(len(ddf))\r\ndisplay(ddf.head())\r\ndisplay(ddf.tail())\r\n\r\n\r\n# In[10]:\r\n\r\n\r\ndef AddDerivedTimeFeature(src_df):\r\n    #res_df = res_df = dd.from_pandas(src_df, 30)\r\n    res_df = src_df\r\n    res_df = res_df.reset_index() #Convert index col back to a normal col so we can manipulate it\r\n    res_df['hour'] = res_df['timestamp'].apply(lambda x: x.hour)\r\n    res_df['minute'] = res_df['timestamp'].apply(lambda x: x.minute)\r\n    res_df['monthday'] = res_df['timestamp'].apply(lambda x: x.day)\r\n    res_df['weekday'] = res_df['timestamp'].apply(lambda x: x.weekday)\r\n\r\n    secperhour = 60 * 60\r\n    secperday  = secperhour * 24\r\n    secperweek = secperday * 7\r\n    secperqtr  = int(secperweek * 13.0446428571)\r\n    \r\n    res_df['tzepochtime'] =  res_df['timestamp'].apply(lambda a: int(time.mktime(a.timetuple())))\r\n    res_df['modulus_day'] = res_df['tzepochtime'].apply(lambda a: a % secperday)\r\n      \r\n    res_df = res_df.set_index('timestamp')\r\n\r\n    return  res_df\r\n\r\n# In[11]:\r\n\r\nddf2 = AddDerivedTimeFeature(ddf.compute())\r\n\r\n# In[12]:\r\n\r\ndef percentile(n):\r\n    from crick import TDigest\r\n    # doc https://github.com/jcrist/crick/blob/master/crick/tdigest.pyx\r\n    # doc https://docs.dask.org/en/stable/dataframe-api.html#dask.dataframe.groupby.Aggregation\r\n    \r\n    \r\n    def percentile_chunck(grouped):\r\n        g_res = []\r\n        for items in grouped:\r\n            t = TDigest()\r\n            g_res.append(t.update(items))\r\n        return(g_res) \r\n    \r\n    def percentile_agg(chunk_TDigests):\r\n        tagg = TDigest()\r\n        for t in chunk_TDigests:\r\n            tagg.merge(t)\r\n        return tagg\r\n   \r\n    def percentile_finalize(tagg):\r\n        return tagg.quantile(n)\r\n    \r\n    return dd.Aggregation(\r\n        name    = 'percentile_{:2.0f}'.format(n*100),\r\n        chunk   = percentile_chunck,\r\n        agg     = percentile_agg,\r\n        finalize=percentile_finalize,\r\n    )\r\n\r\n# In[15]:\r\n\r\nSpike_day = ddf2.groupby('modulus_day')['x'].agg([\r\n    np.sum, \r\n    np.mean, \r\n    np.std, \r\n    np.var,\r\n    np.min,\r\n    np.max,\r\n    percentile(0.05),\r\n    percentile(0.25),\r\n    percentile(0.50),\r\n    percentile(0.75),\r\n    percentile(0.95)\r\n])\r\ndisplay(Spike_day.head(10)) # prove the aggs work\r\n\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/540164388/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/540572532",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-540572532",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 540572532,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDU3MjUzMg==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-10T13:12:46Z",
        "updated_at": "2019-10-10T13:12:46Z",
        "author_association": "MEMBER",
        "body": "@nbmorgan is `ddf2` supposed to be a dask or pandas dataframe?\r\n\r\nAlso can you\r\n\r\n1. remove unused imports? Are requests, zlib, etc used?\r\n2. Simplify things: Do you need 5 calls to `percentile` or does 1 do? Do you need the other aggfuncs?\r\n3. Minimize things: `timeseries()` makes a large dask DataFrame by default. Does it reproduce with a smaller one? `freq=D`?\r\n4. Is `AddDerivedTimeFeature` necessary? Do we need to group by that, or does grouping by `id` already in the `df` work?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/540572532/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1114750113",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-1114750113",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 1114750113,
        "node_id": "IC_kwDOAbcwm85Ccbyh",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-02T11:34:50Z",
        "updated_at": "2022-05-02T11:34:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "The feature request here is just to add the `meta` parameter to `aggregate()`. I'm not sure it matters exactly why OP's code is failing. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1114750113/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1115145184",
        "html_url": "https://github.com/dask/dask/issues/5092#issuecomment-1115145184",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5092",
        "id": 1115145184,
        "node_id": "IC_kwDOAbcwm85Cd8Pg",
        "user": {
            "login": "chmp",
            "id": 949987,
            "node_id": "MDQ6VXNlcjk0OTk4Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/949987?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chmp",
            "html_url": "https://github.com/chmp",
            "followers_url": "https://api.github.com/users/chmp/followers",
            "following_url": "https://api.github.com/users/chmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/chmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chmp/subscriptions",
            "organizations_url": "https://api.github.com/users/chmp/orgs",
            "repos_url": "https://api.github.com/users/chmp/repos",
            "events_url": "https://api.github.com/users/chmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-02T17:21:50Z",
        "updated_at": "2022-05-02T17:23:08Z",
        "author_association": "CONTRIBUTOR",
        "body": "Completely forgot about this issue, as there never was a reply by OP. As future reference for myself: the error here is that crick is called with a `Tuple[str, pd.Series]`. The call would fail even outside dask. As it stands the issue has nothing to do with the meta data inference.  \r\n\r\nRe extending daks: since this is a question for the maintainers, I have no opionion. However, I guess an example would be helpful to see whether getting the meta inference working is not already possible with the current implementation.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1115145184/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]