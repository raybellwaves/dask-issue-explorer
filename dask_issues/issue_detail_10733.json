{
    "url": "https://api.github.com/repos/dask/dask/issues/10733",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/10733/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/10733/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/10733/events",
    "html_url": "https://github.com/dask/dask/issues/10733",
    "id": 2051094768,
    "node_id": "I_kwDOAbcwm856QTjw",
    "number": 10733,
    "title": "Breaking of concurrency when calling `dask.delayed` inside a `@dask.delayed`-decorated function",
    "user": {
        "login": "Andrew-S-Rosen",
        "id": 8674072,
        "node_id": "MDQ6VXNlcjg2NzQwNzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8674072?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Andrew-S-Rosen",
        "html_url": "https://github.com/Andrew-S-Rosen",
        "followers_url": "https://api.github.com/users/Andrew-S-Rosen/followers",
        "following_url": "https://api.github.com/users/Andrew-S-Rosen/following{/other_user}",
        "gists_url": "https://api.github.com/users/Andrew-S-Rosen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Andrew-S-Rosen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Andrew-S-Rosen/subscriptions",
        "organizations_url": "https://api.github.com/users/Andrew-S-Rosen/orgs",
        "repos_url": "https://api.github.com/users/Andrew-S-Rosen/repos",
        "events_url": "https://api.github.com/users/Andrew-S-Rosen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Andrew-S-Rosen/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2023-12-20T18:45:24Z",
    "updated_at": "2024-01-10T16:12:24Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Describe the issue**:\r\n\r\nWhile not always advised, there are valid cases where `@dask.delayed` functions can have a call to `dask.delayed` inside of it. I am happy to elaborate on such scenarios (see brief justification below), but if we take that at face value for the moment, there is some undesirable behavior in Dask in terms of breaking concurrency when this scenario does arise.\r\n\r\nAs a minimal example, the following breaks concurrency between the `add` tasks:\r\n\r\n```python\r\nimport time\r\nimport dask\r\nfrom dask.distributed import Client\r\n\r\nclient = Client()\r\n\r\n@dask.delayed\r\ndef add(x, y):\r\n    print(\"Sleeping...\")\r\n    time.sleep(2)\r\n    return x + y\r\n\r\n@dask.delayed\r\ndef do_math(x, y, op):\r\n    results = []\r\n    for _ in range(4):\r\n        results.append(op(x, y))\r\n    return results\r\n\r\ndask.compute(do_math(1, 2, add))\r\n```\r\n\r\nI would argue that the behavior of Dask here is at the very least undesirable. Ideally, Dask should recognize that the inner `add` operations are delayed and should not be carried out sequentially.\r\n\r\n**Alternate Approaches**:\r\n\r\nOne could rewrite the above several ways, one of which is as follows:\r\n\r\n```python\r\nimport time\r\nimport dask\r\n\r\ndef add(x, y):\r\n    print(\"Sleeping...\")\r\n    time.sleep(2)\r\n    return x + y\r\n\r\n@dask.delayed\r\ndef do_math(x, y, op):\r\n    results = []\r\n    for _ in range(4):\r\n        results.append(dask.delayed(op)(x, y))\r\n    return results\r\r\n```\r\n\r\nThis does not break concurrency, but it does imply the aforementioned scenario is a bug. The workaround also has several issues that makes it undesirable to rely on:\r\n1. It is clearly much more complicated from a syntax standpoint. The output is also harder to parse.\r\n2. It starts introducing Dask-specific logic within the functions, which is generally undesirable from a philosophical standpoint at least.\r\n3. The high-compute task `add` is no longer decorated, such that this function can't be imported in some other module and be used as a standalone, delayed task (without redecorating).\r\n\r\n**Anything else we need to know?**:\r\n\r\nThis stems from my slightly more complex example described on the [Dask discourse page](https://dask.discourse.group/t/passing-delayed-functions-to-other-delayed-functions/2400/1).\r\n\r\nYou might be asking \"why would you want to do this in the first place?\" There are many ways to answer that. In short, if `add` is a high-compute task, it needs to be delayed. Additionally, while in this example there is no strict need for `do_math` to be delayed, in a real-world scenario where the logic flow (e.g. the number of iterations in the `for` loop) is not known until runtime, then that function also needs to be delayed. See the [Discourse post](https://dask.discourse.group/t/passing-delayed-functions-to-other-delayed-functions/2400) for an example of that.\r\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2023.12.1\r\n- Python version: 3.9-3.12\r\n- Operating System: Linux\r\n- Install method (conda, pip, source): pip",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/10733/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/10733/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}