[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1530822606",
        "html_url": "https://github.com/dask/dask/issues/10239#issuecomment-1530822606",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10239",
        "id": 1530822606,
        "node_id": "IC_kwDOAbcwm85bPn_O",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-02T03:35:55Z",
        "updated_at": "2023-05-02T03:35:55Z",
        "author_association": "MEMBER",
        "body": "Hey @trivialfis -- thanks for the issue. Good to hear from you. \r\n\r\n> I'm curious whether there are some protocals recommended by Dask for reporting memory usage for both CPU and GPU.\r\n\r\nWe have a `sizeof` dispatcher that we register for specific objects. The goal is for `sizeof` to return the amount of memory an object takes up (falling back to `sys.getsizeof` for unknown objects). Here's an example of our `sizeof` registration for `numpy` arrays:\r\n\r\nhttps://github.com/dask/dask/blob/702398472ca0d07899269847f398015eeb95a41a/dask/sizeof.py#L122-L131\r\n\r\nWe do something similar for `cupy`. \r\n\r\n> I think this is caused by XGBoost's data structures that don't report their memory usage to the Python interpretor nor Dask.\r\n> Adding a simple __sizeof__ with basic estimation to some of the large structures doesn't seem to help change the warning.\r\n\r\nThat's right. Dask defines \"managed\" memory to be the total `sizeof` sum of all task results it's keeping track of. Everything else, including memory temporarily used by running tasks ([and other sources](https://distributed.dask.org/en/stable/worker-memory.html?highlight=unmanaged#using-the-dashboard-to-monitor-memory-usage)), is called \"unmanaged\". So if training tasks have lots of allocations that aren't part of the result returned by the training task, then it'll show up as unmanaged memory. \r\n\r\nThat said, while the log message is correct, I do think there's probably room for improvement. cc @crusaderky \r\n\r\nStepping back a bit, I'm curious why such large allocations are needed during training. I'm wondering if, in addition to making improvements to that logging message, if there are improvements that could be made on the `xgboost` side to reduce the memory load of training task. I know @crusaderky went through `xgboost/dask.py` a month or two ago and was also wondering the same thing. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1530822606/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1531416267",
        "html_url": "https://github.com/dask/dask/issues/10239#issuecomment-1531416267",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10239",
        "id": 1531416267,
        "node_id": "IC_kwDOAbcwm85bR47L",
        "user": {
            "login": "trivialfis",
            "id": 16746409,
            "node_id": "MDQ6VXNlcjE2NzQ2NDA5",
            "avatar_url": "https://avatars.githubusercontent.com/u/16746409?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/trivialfis",
            "html_url": "https://github.com/trivialfis",
            "followers_url": "https://api.github.com/users/trivialfis/followers",
            "following_url": "https://api.github.com/users/trivialfis/following{/other_user}",
            "gists_url": "https://api.github.com/users/trivialfis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/trivialfis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/trivialfis/subscriptions",
            "organizations_url": "https://api.github.com/users/trivialfis/orgs",
            "repos_url": "https://api.github.com/users/trivialfis/repos",
            "events_url": "https://api.github.com/users/trivialfis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/trivialfis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-02T12:46:12Z",
        "updated_at": "2023-05-02T13:16:04Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Stepping back a bit, I'm curious why such large allocations are needed during training.\r\n\r\nXGBoost uses its custom representation of the input data (compressed index for data), which is necessary for efficient model training.\r\n\r\nThe data structure is created as part of the training task: https://github.com/dmlc/xgboost/blob/08ce495b5de973033160e7c7b650abf59346a984/python-package/xgboost/dask.py#L713 . Here is the basic workflow inside xgboost:\r\n```\r\nfor each worker:\r\n    submit a dask task that does the following:\r\n    - fetch local data partitions that belong to this worker.\r\n    - create an internal data presentation local to the worker.\r\n    - train on the data in an MPI (collective) style.\r\n    - return the model as the task result.\r\n```\r\nOther than the model returned in the end, things that happen inside the task are not managed by dask, I'm not sure how to expose them to dask while keeping everything local to the current worker.\r\n\r\n\r\nMaybe inside the training task, we can create another dask task using `client.submit` for creating the local data representation, and restrict the worker to the current one? However, these data structures are not meant to be serialized (which would be slow and memory inefficient, especially on GPU) in Python and are designed to be short-live within a training session. As a result, we don't want dask to move the data between processes.\r\n\r\nAnother question, what if a data structure consumes both CPU and GPU memory? How do I tell dask such information?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1531416267/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1540385881",
        "html_url": "https://github.com/dask/dask/issues/10239#issuecomment-1540385881",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10239",
        "id": 1540385881,
        "node_id": "IC_kwDOAbcwm85b0GxZ",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-09T15:26:06Z",
        "updated_at": "2023-05-09T15:26:21Z",
        "author_association": "MEMBER",
        "body": "The high unmanaged memory usage of xgboost during training is all heap memory.\r\nThe heap used by xgboost is directly proportional to the *total* number of chunks of the training data present on a worker. In the typical, ideal use case where all chunks have been equally distributed across the cluster,\r\n\r\nunmanaged memory per worker ~ total size of training matrix / number of workers\r\n\r\nThis is very different from most (all?) other dask workflows, where the heap size is proportional to the size in memory of the individual chunks. This is because XGBoost is an MPI application shoehorned on top of dask.\r\n\r\nIf you're running out of memory, your only two options that I'm aware of is to train using less data or spin up more workers. If you're on AWS, you could also consider switching from general purpose instances (e.g. m6i) to memory-optimized (e.g. r6i).\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1540385881/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1540393228",
        "html_url": "https://github.com/dask/dask/issues/10239#issuecomment-1540393228",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10239",
        "id": 1540393228,
        "node_id": "IC_kwDOAbcwm85b0IkM",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-09T15:28:50Z",
        "updated_at": "2023-05-09T15:29:08Z",
        "author_association": "MEMBER",
        "body": "> Another question, what if a data structure consumes both CPU and GPU memory? How do I tell dask such information?\r\n\r\nToday, there is no way to track device memory in dask. From my understanding [dask-cuda](https://github.com/rapidsai/dask-cuda) treats device memory as generic managed memory, undistinguished from host memory.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1540393228/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1540532278",
        "html_url": "https://github.com/dask/dask/issues/10239#issuecomment-1540532278",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10239",
        "id": 1540532278,
        "node_id": "IC_kwDOAbcwm85b0qg2",
        "user": {
            "login": "trivialfis",
            "id": 16746409,
            "node_id": "MDQ6VXNlcjE2NzQ2NDA5",
            "avatar_url": "https://avatars.githubusercontent.com/u/16746409?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/trivialfis",
            "html_url": "https://github.com/trivialfis",
            "followers_url": "https://api.github.com/users/trivialfis/followers",
            "following_url": "https://api.github.com/users/trivialfis/following{/other_user}",
            "gists_url": "https://api.github.com/users/trivialfis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/trivialfis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/trivialfis/subscriptions",
            "organizations_url": "https://api.github.com/users/trivialfis/orgs",
            "repos_url": "https://api.github.com/users/trivialfis/repos",
            "events_url": "https://api.github.com/users/trivialfis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/trivialfis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-09T16:54:03Z",
        "updated_at": "2023-05-09T16:55:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you for the reply @crusaderky . You are correct on all points.\r\n\r\n> This is very different from most (all?) other dask workflows\r\n\r\nIndeed, however, I would like to argue that MPI style algorithm is ubiquitous, and it's not uncommon for applications/libraries to have their own data representation that's not numpy/pandas. Would be great if we can start a thread on enhanced handling for these types of applications.\r\n\r\n> Today, there is no way to track device memory in dask. From my understanding [dask-cuda](https://github.com/rapidsai/dask-cuda) treats device memory as generic managed memory, undistinguished from host memory.\r\n\r\nIs there any long-term plan for changing this situation?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1540532278/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1542645817",
        "html_url": "https://github.com/dask/dask/issues/10239#issuecomment-1542645817",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10239",
        "id": 1542645817,
        "node_id": "IC_kwDOAbcwm85b8ug5",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-10T18:42:36Z",
        "updated_at": "2023-05-10T18:42:36Z",
        "author_association": "MEMBER",
        "body": "The problem is not non-numpy/pandas data types; dask deals with them fine (but read https://docs.dask.org/en/stable/how-to/extend-sizeof.html). The problem is that xgboost reads all chunks available on the worker at once in a single task.\r\n\r\n>> Today, there is no way to track device memory in dask. From my understanding [dask-cuda](https://github.com/rapidsai/dask-cuda) treats device memory as generic managed memory, undistinguished from host memory.\r\n\r\n> Is there any long-term plan for changing this situation?\r\n\r\nNo, but contributions are welcome. I'd strongly advise to open an issue where you collect a consensus on a high-level design and UX before you jump into implementation.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1542645817/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1543417258",
        "html_url": "https://github.com/dask/dask/issues/10239#issuecomment-1543417258",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10239",
        "id": 1543417258,
        "node_id": "IC_kwDOAbcwm85b_q2q",
        "user": {
            "login": "trivialfis",
            "id": 16746409,
            "node_id": "MDQ6VXNlcjE2NzQ2NDA5",
            "avatar_url": "https://avatars.githubusercontent.com/u/16746409?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/trivialfis",
            "html_url": "https://github.com/trivialfis",
            "followers_url": "https://api.github.com/users/trivialfis/followers",
            "following_url": "https://api.github.com/users/trivialfis/following{/other_user}",
            "gists_url": "https://api.github.com/users/trivialfis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/trivialfis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/trivialfis/subscriptions",
            "organizations_url": "https://api.github.com/users/trivialfis/orgs",
            "repos_url": "https://api.github.com/users/trivialfis/repos",
            "events_url": "https://api.github.com/users/trivialfis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/trivialfis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-11T06:36:23Z",
        "updated_at": "2023-05-11T06:36:23Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you for the suggestions! I will try to learn more about the GPU memory management with dask-cuda. In the meanwhile, is there any suggestion for MPI-style application?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1543417258/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]