[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/683312603",
        "html_url": "https://github.com/dask/dask/issues/6574#issuecomment-683312603",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6574",
        "id": 683312603,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzMxMjYwMw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-29T16:31:36Z",
        "updated_at": "2020-08-29T16:31:36Z",
        "author_association": "MEMBER",
        "body": "Hi @mcguipat , can you provide a small minimal example?  I suspect that this will help people understand what you are running into.  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/683312603/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/683413316",
        "html_url": "https://github.com/dask/dask/issues/6574#issuecomment-683413316",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6574",
        "id": 683413316,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQxMzMxNg==",
        "user": {
            "login": "mcguipat",
            "id": 29676113,
            "node_id": "MDQ6VXNlcjI5Njc2MTEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/29676113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mcguipat",
            "html_url": "https://github.com/mcguipat",
            "followers_url": "https://api.github.com/users/mcguipat/followers",
            "following_url": "https://api.github.com/users/mcguipat/following{/other_user}",
            "gists_url": "https://api.github.com/users/mcguipat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mcguipat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mcguipat/subscriptions",
            "organizations_url": "https://api.github.com/users/mcguipat/orgs",
            "repos_url": "https://api.github.com/users/mcguipat/repos",
            "events_url": "https://api.github.com/users/mcguipat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mcguipat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-30T12:15:06Z",
        "updated_at": "2020-08-30T12:15:06Z",
        "author_association": "NONE",
        "body": "When constructing a `dask.delayed`, the serialization behavior differs from that of simply calling `client.submit`. Specifically, `unpack_collections` gets called on the arguments and the result is what gets pickled as opposed to the arguments themselves.  If, as in the example below, there is an unpickleable field on a dataclass that is serialized via override of `__reduce__`, the transformed arguments are unpickleable whereas the original arguments were pickleable.\r\n\r\n\r\n```\r\nfrom dask.delayed import unpack_collections\r\nfrom distributed.protocol.pickle import dumps\r\nfrom dataclasses import dataclass\r\n\r\nclass UnpickleableObj:\r\n\r\n    def __init__(self, value: str) -> None:\r\n        super().__init__()\r\n        self.value = value\r\n\r\n    def __reduce__(self):\r\n        raise RuntimeError(\"Unpickleable\")\r\n\r\n@dataclass\r\nclass Foo:\r\n    a: int\r\n    b: UnpickleableObj\r\n\r\n    def to_json(self):\r\n        return {\"a\": self.a, \"b\": self.b.value}\r\n\r\n    @classmethod\r\n    def from_json(cls, serialized):\r\n        return cls(serialized[\"a\"], UnpickleableObj(serialized[\"b\"]))\r\n\r\n    def __reduce__(self):\r\n        return self.from_json, (self.to_json(),)\r\n\r\n\r\ndef attempt_pickle():\r\n    b = [Foo(1, UnpickleableObj(\"bar\"))]\r\n    c = unpack_collections(b)\r\n    dumps(c)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/683413316/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/943411814",
        "html_url": "https://github.com/dask/dask/issues/6574#issuecomment-943411814",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6574",
        "id": 943411814,
        "node_id": "IC_kwDOAbcwm844O1Jm",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-10-14T14:26:38Z",
        "updated_at": "2021-10-14T14:26:38Z",
        "author_association": "MEMBER",
        "body": "This is because we traverse dataclasses by default in `unpack_collections`. In retrospect, I think this is probably not something we want to do - dataclasses should probably be treated as opaque collections and not traversed automatically like builtin collections are. I'm not sure if we can easily change this behavior now though.\r\n\r\nTraversal of objects is mostly there to find dask objects in a larger non-dask object (e.g. lists of `dask.delayed` objects). You can avoid this happening by explicitly converting your custom arguments to delayed objects beforehand and passing in the `traverse=False` kwarg:\r\n\r\n```python\r\nobj = your_dataclass(...)\r\n# This is now a delayed object and won't be traversed\r\nd_obj = dask.delayed(obj, traverse=False)\r\n# You can pass your object as an arg without additional traversal by using the already delayed version\r\nsome_delayed_function(d_obj, 1, 2)\r\n```\r\n\r\nIn summary, we have some TODOS:\r\n\r\n- [ ] Do we drop the traversal of dataclasses, and if so how do we smoothly remove this behavior? I think this behavior is a mistake, but also may be hard to remove.\r\n- [ ] If not, is there a way we can better document what's going on here to better help future users.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/943411814/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]