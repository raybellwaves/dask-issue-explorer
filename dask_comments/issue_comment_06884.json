[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/732815326",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-732815326",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 732815326,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMjgxNTMyNg==",
        "user": {
            "login": "icfly2",
            "id": 7895513,
            "node_id": "MDQ6VXNlcjc4OTU1MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7895513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfly2",
            "html_url": "https://github.com/icfly2",
            "followers_url": "https://api.github.com/users/icfly2/followers",
            "following_url": "https://api.github.com/users/icfly2/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfly2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfly2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfly2/subscriptions",
            "organizations_url": "https://api.github.com/users/icfly2/orgs",
            "repos_url": "https://api.github.com/users/icfly2/repos",
            "events_url": "https://api.github.com/users/icfly2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfly2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-24T10:43:09Z",
        "updated_at": "2020-11-24T10:43:09Z",
        "author_association": "NONE",
        "body": "Picture proof of distribution issue:\r\n![image](https://user-images.githubusercontent.com/7895513/100083725-1a61b280-2e4a-11eb-85ba-e5b210ea161c.png)\r\n![image](https://user-images.githubusercontent.com/7895513/100083804-35342700-2e4a-11eb-8167-2321b1dd5411.png)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/732815326/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/732950359",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-732950359",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 732950359,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMjk1MDM1OQ==",
        "user": {
            "login": "icfly2",
            "id": 7895513,
            "node_id": "MDQ6VXNlcjc4OTU1MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7895513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfly2",
            "html_url": "https://github.com/icfly2",
            "followers_url": "https://api.github.com/users/icfly2/followers",
            "following_url": "https://api.github.com/users/icfly2/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfly2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfly2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfly2/subscriptions",
            "organizations_url": "https://api.github.com/users/icfly2/orgs",
            "repos_url": "https://api.github.com/users/icfly2/repos",
            "events_url": "https://api.github.com/users/icfly2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfly2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-24T12:43:11Z",
        "updated_at": "2020-11-24T12:43:11Z",
        "author_association": "NONE",
        "body": "This got worse 8still running):\r\n![image](https://user-images.githubusercontent.com/7895513/100095565-f9ee2400-2e5a-11eb-8787-e8e6cc1b4305.png)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/732950359/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/733157867",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-733157867",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 733157867,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMzE1Nzg2Nw==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-24T18:30:12Z",
        "updated_at": "2020-11-24T18:30:12Z",
        "author_association": "MEMBER",
        "body": "> The issue is that all work concentrates on one worker. How can the workers be encouraged to steal from each other.\r\n\r\nI am unable to work out the connection between the code example and the daskboard screen shots, so I may be completely \"off\" here.  However, I would expect the actual graph you are constructing to produce minimal concurrency - allowing no more than two workers to execute tasks in parallel.  That is, I get the following graph for your code (using `out.visualize(optimize_graph=True, verbose=True, size=\"8\")`):\r\n\r\n![Screen Shot 2020-11-24 at 12 02 46 PM](https://user-images.githubusercontent.com/20461013/100133940-08cdda00-2e4d-11eb-9613-7580a345c6e4.png)\r\n\r\nIf the bottleneck for each of your tasks is the input IO, then there might not be much you can do.  However, if the bottleneck is in the \"computation\" and/or output IO, you may be able to improve parallelism by breakling your current `task` funciton into more than one task/function. For example, if you only need the input IO of \"task2\" to finish before \"task3\" begins execution, then breaking the workflow into pieces like...\r\n\r\n```python\r\ndef runall(**kwargs):\r\n    return 42\r\n\r\ndef in_io(table_name, depends_on=None):\r\n    return pd.DataFrame({\"a\": np.arange(10)})\r\n\r\ndef out_io(x):\r\n    print(out)\r\n    return True\r\n\r\ndef get_mean(x):\r\n    return x.mean() # some computation of varying expense\r\n\r\nclient = Client()\r\n\r\nin_tasks = {\r\n    \"task1\" : dask.delayed(in_io)('table_1'),\r\n    \"task2\" : dask.delayed(in_io)('table_2'),\r\n}\r\n\r\nmean_tasks = {\r\n    \"task1\" : dask.delayed(get_mean)(in_tasks['task1']),\r\n    \"task2\" : dask.delayed(get_mean)(in_tasks['task2']),\r\n}\r\n\r\nout_tasks = {\r\n    \"task1\" : dask.delayed(out_io)(mean_tasks['task1']),\r\n    \"task2\" : dask.delayed(out_io)(mean_tasks['task2']),\r\n}\r\n\r\n\r\n# Dont start task3 until input task2 IO is done...\r\nin_tasks[\"task3\"] = dask.delayed(in_io)('table_3', depends_on=in_tasks['task2'])\r\nmean_tasks[\"task3\"] = dask.delayed(get_mean)(in_tasks['task3'])\r\nout_tasks[\"task3\"] = dask.delayed(out_io)(mean_tasks['task3'])\r\n\r\nout = dask.delayed(runall)(**out_tasks)\r\nout.compute()\r\n```\r\n\r\nwill give you agraph like this:\r\n\r\n![Screen Shot 2020-11-24 at 12 24 22 PM](https://user-images.githubusercontent.com/20461013/100135993-0a4cd180-2e50-11eb-95a7-e8dbbdf8d29d.png)\r\n\r\n\r\nAgian - I realize I may be completely confused about the issue you are having.  So feel free to say so :)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/733157867/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/733181484",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-733181484",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 733181484,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMzE4MTQ4NA==",
        "user": {
            "login": "icfly2",
            "id": 7895513,
            "node_id": "MDQ6VXNlcjc4OTU1MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7895513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfly2",
            "html_url": "https://github.com/icfly2",
            "followers_url": "https://api.github.com/users/icfly2/followers",
            "following_url": "https://api.github.com/users/icfly2/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfly2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfly2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfly2/subscriptions",
            "organizations_url": "https://api.github.com/users/icfly2/orgs",
            "repos_url": "https://api.github.com/users/icfly2/repos",
            "events_url": "https://api.github.com/users/icfly2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfly2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-24T19:19:01Z",
        "updated_at": "2020-11-24T19:19:01Z",
        "author_association": "NONE",
        "body": "It is an ETL workload so each task implements a set of ETL operations. You aren't off by much, as a next try i was going to turn all the extract, transform and load functions into delayed functions. But this would result in a lot of data being moved and I think the dependencies come from the fact that they depend on the previous task to finish and this would result in even more data being moved between workers.\r\n\r\nFor many of them the E and l part are the slowest. The dependencies occur because some of the later tasks read some of the output of the preceding tasks: eg: Task1 reads a column of string (Address) data, calls an external API and finds the country which these addresses are in. Then dumps the ISO codes in another table. A subsequent task loads these ISO codes and some other data and checks if this information checks out.\r\n\r\nOne initial data loading task virtually all tasks depended on (an initial data load), I've now split the loop into two:\r\n```python\r\nfrom dask.distributed import Client\r\nimport dask\r\nfrom tasks import task1, task2, task3\r\nfrom conf import con\r\n\r\ndef runall(**kwargs):\r\n    print(\"done\")\r\n\r\n\r\ndef task(table_name, depends_on=None):\r\n    df = pd.read_sql(con=con, query=f\"select * from {table_name}\") # read some data from sql, depends on the table how much it is.\r\n    out = df.mean() # some computation of varying expense\r\n    out.to_sql(con=con) \r\n    return True\r\n\r\ndef etl():\r\n    client = Client()\r\n\r\n    tasks = {}\r\n    tasks['taskA'] = dask.delayed(task)('table_1')\r\n    tasks['taskB'] = dask.delayed(task)('table_B')\r\n    out = dask.delayed(runall)(**tasks)\r\n    out.compute()\r\n\r\n    tasks = {}\r\n    tasks['task2'] = dask.delayed(task)('table_2')\r\n    tasks['task3'] = dask.delayed(task)('table_3', depends_on=tasks['task2'])\r\n     out = dask.delayed(runall)(**tasks)\r\n     out.compute()\r\n``` \r\nThis still forces tasks 2 and 3 to run on the same instance, but not 1 and B. As you can see from the picture below, there are now less tasks depending on a preceading one. \r\n![image](https://user-images.githubusercontent.com/7895513/100140689-99c6a480-2e91-11eb-821d-4b3842f4986d.png)\r\n\r\nHowever for the now second and third stages this issue persists. From what I understand in the documentation is that the `sys.getsizeof` evaluation must be under the impression that a lot of data would need to move if a task got called on a different worker to its dependency. \r\n\r\nIs there a way of informing the scheduler that only a bool variable would change worker (and that is optional, return None doesn't appear to fix this either), or pass a custom function to the scheduler with which it picks the worker on which to run the task?\r\n\r\n(I've also tried using client.submit and distributing the load across a range of workers, like I said i didn't want to do, but that didn't yield any success either)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/733181484/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/733209074",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-733209074",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 733209074,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMzIwOTA3NA==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-24T20:14:39Z",
        "updated_at": "2020-11-24T20:14:39Z",
        "author_association": "MEMBER",
        "body": "> as a next try i was going to turn all the extract, transform and load functions into delayed functions. But this would result in a lot of data being moved and I think the dependencies come from the fact that they depend on the previous task to finish and this would result in even more data being moved between workers.\r\n\r\nRight - breaking up the tasks exposes more concurency, but won't help performance if a lot of data needs to be moved around.\r\n\r\n> This still forces tasks 2 and 3 to run on the same instance, but not 1 and B.\r\n\r\nCan you calrify exactly what you want to happen here? (sorry again for being slow) It seems that you want task3 to execute on a different worker than task2?  If I understand correctly, you are not \"forcing\" the exection of task2 and task3 to be on the same worker, but the nature of the task graph makes it very unlikely for anything else to happen.  If you are requiring (only) the output of task2 to begin execution of task3, then the scheduler will almost certainly assign both tasks to the same worker.   Although it is possible to execute task3 on a different worker thank task2, it would always be less performant to do this.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/733209074/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/733520795",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-733520795",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 733520795,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczMzUyMDc5NQ==",
        "user": {
            "login": "icfly2",
            "id": 7895513,
            "node_id": "MDQ6VXNlcjc4OTU1MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7895513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfly2",
            "html_url": "https://github.com/icfly2",
            "followers_url": "https://api.github.com/users/icfly2/followers",
            "following_url": "https://api.github.com/users/icfly2/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfly2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfly2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfly2/subscriptions",
            "organizations_url": "https://api.github.com/users/icfly2/orgs",
            "repos_url": "https://api.github.com/users/icfly2/repos",
            "events_url": "https://api.github.com/users/icfly2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfly2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-25T07:27:58Z",
        "updated_at": "2020-11-25T07:27:58Z",
        "author_association": "NONE",
        "body": "So all the tasks only output `True`, their actual ETL load is done separately. If this is smart or not is up for debate, but legacy and time restrictions mean that isn't changing. Think of the tasks like luigi tasks if that helps.\r\n\r\nThe issue is that they absolutely do not need to run on the  same workers, but must not start in the wrong order. Continuing the example I gave earlier: Checking if a ISO code is plausible cannot be done until the call to the external api is completed.\r\n\r\nThis is the interconnection of the data:\r\n![image](https://user-images.githubusercontent.com/7895513/100195349-7fbfad00-2ef7-11eb-95f2-b0556922aef3.png)\r\n\r\nSo now I'm running 1a and 1b first. And only when they are both done, does the second round start. This allows a lot more parallel tasks. However, tasks like GRAPH_IF will only run on the same worker as GRAPH as they are linked as dependencies. But GRAPH writes to an external graph DB while GRAPH IF reads from that DB and does not have to reside on the same worker, it just needs the upload to have completed. I was wondering if it would be possible to scatter the result of each task (a future containing the bool) thus making it available on every worker. I'm not sure how that would be done though.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/733520795/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/735878785",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-735878785",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 735878785,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczNTg3ODc4NQ==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-30T16:04:15Z",
        "updated_at": "2020-11-30T16:04:15Z",
        "author_association": "MEMBER",
        "body": "I'm still unsure why you wouldn't want GRAPH_IF to run on the same worker as GRAPH (since the worker will be ready to run something new as soon as GRAPH is finished anyway), but perhaps you are just using that sequence as a simple example.\r\n\r\nI don't personally have experience with the [client.replicate](https://github.com/dask/distributed/blob/b4dfc925bac32a488be2016a5930a9b7dd95cec5/distributed/client.py#L3122) API, but you may be able to manually replicate the result on all workers after the first round (e.g. `client.replicate(tasks['task2'])`).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/735878785/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/737415956",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-737415956",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 737415956,
        "node_id": "MDEyOklzc3VlQ29tbWVudDczNzQxNTk1Ng==",
        "user": {
            "login": "icfly2",
            "id": 7895513,
            "node_id": "MDQ6VXNlcjc4OTU1MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7895513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfly2",
            "html_url": "https://github.com/icfly2",
            "followers_url": "https://api.github.com/users/icfly2/followers",
            "following_url": "https://api.github.com/users/icfly2/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfly2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfly2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfly2/subscriptions",
            "organizations_url": "https://api.github.com/users/icfly2/orgs",
            "repos_url": "https://api.github.com/users/icfly2/repos",
            "events_url": "https://api.github.com/users/icfly2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfly2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-12-02T18:34:26Z",
        "updated_at": "2020-12-02T18:34:26Z",
        "author_association": "NONE",
        "body": "I don't mind if `graph_if` runs on the same worker as `graph` as long as `stats_if` (which also depends on `graph`) runs on a different worker. And this is exactly what is not happening.\r\n\r\nI've now \"fixed\" this by throwing 20 workers at the problem and thus having more or less one worker free for each initial task.\r\n\r\nBy using `dask.dataframe` and `dask.bag` in some of the very heavy tasks, and making it split into 18 partitions mostly eliminates the double booking of workers with some free workers dangling about. When I did partitions==workers it interfered (by way of double booking) with some very slow running tasks on some workers and was much slower.\r\n\r\nIn summary: `dataframe` and `bag` are scheduled on other workers to be computed and the scheduler doesn't mind incurring the moving cost. `delayed` is not moved and I am not able to tell the scheduler that the moving cost is very small. So somewhere there is space for optimising the scheduling, by either:\r\n- providing a custom scheduling function (here a pick one with lowest amount of outstanding work)\r\n- ability to specify the cost of moving data (if i understand the current scheduling function correctly this still wouldn't solve it)\r\n- A more complex scheduling function that doesn't price moving data before looking at the other costs.\r\n\r\nSide note, in my digging I found that `distributed/client.py` appears to import `sizeof` from `sizeof.py` but unlike `distributed/worker.py` does use the function defined in `sizeof.py` but instead just the `sizeof` function imported there, not the defined `safe_sizeof`. I have no idea if that is a bug or related to this issue of strange scheduling decisions that cannot be influenced. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/737415956/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1080981152",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-1080981152",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 1080981152,
        "node_id": "IC_kwDOAbcwm85Abnag",
        "user": {
            "login": "bryanwweber",
            "id": 4396228,
            "node_id": "MDQ6VXNlcjQzOTYyMjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4396228?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bryanwweber",
            "html_url": "https://github.com/bryanwweber",
            "followers_url": "https://api.github.com/users/bryanwweber/followers",
            "following_url": "https://api.github.com/users/bryanwweber/following{/other_user}",
            "gists_url": "https://api.github.com/users/bryanwweber/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bryanwweber/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bryanwweber/subscriptions",
            "organizations_url": "https://api.github.com/users/bryanwweber/orgs",
            "repos_url": "https://api.github.com/users/bryanwweber/repos",
            "events_url": "https://api.github.com/users/bryanwweber/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bryanwweber/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-28T18:12:40Z",
        "updated_at": "2022-03-28T18:12:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "@icfly2 Is this issue resolved and can it be closed out? Is there anything that Dask needs to do here to fix the situation? I couldn't tell from your last comment. Thank you! \ud83d\ude04 ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1080981152/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1081188473",
        "html_url": "https://github.com/dask/dask/issues/6884#issuecomment-1081188473",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6884",
        "id": 1081188473,
        "node_id": "IC_kwDOAbcwm85AcaB5",
        "user": {
            "login": "icfly2",
            "id": 7895513,
            "node_id": "MDQ6VXNlcjc4OTU1MTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7895513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/icfly2",
            "html_url": "https://github.com/icfly2",
            "followers_url": "https://api.github.com/users/icfly2/followers",
            "following_url": "https://api.github.com/users/icfly2/following{/other_user}",
            "gists_url": "https://api.github.com/users/icfly2/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/icfly2/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/icfly2/subscriptions",
            "organizations_url": "https://api.github.com/users/icfly2/orgs",
            "repos_url": "https://api.github.com/users/icfly2/repos",
            "events_url": "https://api.github.com/users/icfly2/events{/privacy}",
            "received_events_url": "https://api.github.com/users/icfly2/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-28T21:51:44Z",
        "updated_at": "2022-03-28T21:51:44Z",
        "author_association": "NONE",
        "body": "Mixed bag. Throwing lots of workers at it \u201cfixed it\u201d but not really as you then have memory problems. Ultimately we moved this to airflow :(\r\n\r\ni still think an ability to log a custom scheduling cost function would be very cool.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1081188473/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]