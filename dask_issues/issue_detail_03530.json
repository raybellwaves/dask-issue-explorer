{
    "url": "https://api.github.com/repos/dask/dask/issues/3530",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/3530/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/3530/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/3530/events",
    "html_url": "https://github.com/dask/dask/issues/3530",
    "id": 326234335,
    "node_id": "MDU6SXNzdWUzMjYyMzQzMzU=",
    "number": 3530,
    "title": "Memory leak with Numpy arrays and the threaded scheduler",
    "user": {
        "login": "mrocklin",
        "id": 306380,
        "node_id": "MDQ6VXNlcjMwNjM4MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrocklin",
        "html_url": "https://github.com/mrocklin",
        "followers_url": "https://api.github.com/users/mrocklin/followers",
        "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
        "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
        "organizations_url": "https://api.github.com/users/mrocklin/orgs",
        "repos_url": "https://api.github.com/users/mrocklin/repos",
        "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mrocklin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 56,
    "created_at": "2018-05-24T18:14:06Z",
    "updated_at": "2021-12-09T14:54:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "This example leaks around 500MB of memory on my machine when using the threaded scheduler, and almost no memory when using the single-threaded scheduler:\r\n\r\n```python\r\nimport dask.array as da\r\nx = da.ones((2e4, 2e4), chunks=(2e4, 100))\r\ny = x.rechunk((100, 2e4))\r\nz = y.rechunk((2e4, 100))\r\n\r\nimport psutil\r\nproc = psutil.Process()\r\n\r\nfrom distributed.utils import format_bytes\r\nprint(format_bytes(proc.memory_info().rss))\r\n# 80MB\r\n\r\nfrom dask.diagnostics import ProgressBar\r\nProgressBar().register()\r\n\r\n# z.sum().compute(scheduler='single-threaded')  # This doesn't cause problems\r\nz.sum().compute(scheduler='threads')  # This leaks around 500MB of memory\r\n\r\nprint(format_bytes(proc.memory_info().rss))\r\n# 500-600MB\r\n```\r\n\r\n[Notebook](https://gist.github.com/a32b2ba79dc51ff6f0632104ac23ae40)\r\n\r\nThis doesn't happen when I run it with the single-threaded scheduler.  \r\n\r\nCalling `gc.collect()` doesn't help.  Allocating a new large numpy array afterwards also doesn't take up the leaked memory,  the number just climbs.  Looking at the objects that Python knows about shows that there isn't much around:\r\n\r\n```python\r\nfrom pympler import muppy\r\nall_objects = muppy.get_objects()\r\n\r\nfrom pympler import summary\r\nsum1 = summary.summarize(all_objects)\r\nsummary.print_(sum1)                          \r\n```\r\n\r\n```\r\n                                      types |   # objects |   total size\r\n=========================================== | =========== | ============\r\n                                <class 'str |       60517 |      8.75 MB\r\n                               <class 'dict |       11991 |      5.30 MB\r\n                               <class 'code |       19697 |      2.72 MB\r\n                               <class 'type |        2228 |      2.24 MB\r\n                              <class 'tuple |       16142 |      1.04 MB\r\n                                <class 'set |        2285 |    858.84 KB\r\n                               <class 'list |        7284 |    738.09 KB\r\n                            <class 'weakref |        4412 |    344.69 KB\r\n                        <class 'abc.ABCMeta |         261 |    263.54 KB\r\n                        function (__init__) |        1378 |    183.02 KB\r\n  <class 'traitlets.traitlets.MetaHasTraits |         180 |    175.45 KB\r\n                 <class 'wrapper_descriptor |        2240 |    175.00 KB\r\n                                <class 'int |        5584 |    168.92 KB\r\n                  <class 'getset_descriptor |        2389 |    167.98 KB\r\n            <class 'collections.OrderedDict |         292 |    141.00 KB\r\n```\r\n\r\nThe local schedulers don't have any persistent state.  My next step is to reproduce with the standard concurrent.futures module, but I thought I'd put this up early in case people have suggestions.\r\n\r\ncc @shoyer @pitrou @njsmith",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/3530/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/3530/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}