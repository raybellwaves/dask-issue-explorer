[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1270719189",
        "html_url": "https://github.com/dask/dask/issues/9556#issuecomment-1270719189",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9556",
        "id": 1270719189,
        "node_id": "IC_kwDOAbcwm85LvaLV",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-06T21:30:18Z",
        "updated_at": "2022-10-06T21:30:18Z",
        "author_association": "MEMBER",
        "body": "Hi @astrofrog , it's good to see you around these parts\r\n\r\nI'm not surprised that this would fail to be honest.  Store is meant to be used with persistent storage systems outside of Dask like Zarr or HDF5.  It's strange to give it a numpy array.  We didn't both paying special attention to ensure that this object would be handled in a world with separate memory spaces.  \r\n\r\nIf your objective is to get a numpy array, then I recommend just calling `.compute()`.  \r\n\r\nMy guess though is that you have something else in mind.  Can I ask you for more information about your intent?  What the question behind this question?  What are you trying to accomplish?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1270719189/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 1,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1270727926",
        "html_url": "https://github.com/dask/dask/issues/9556#issuecomment-1270727926",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9556",
        "id": 1270727926,
        "node_id": "IC_kwDOAbcwm85LvcT2",
        "user": {
            "login": "astrofrog",
            "id": 314716,
            "node_id": "MDQ6VXNlcjMxNDcxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/314716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/astrofrog",
            "html_url": "https://github.com/astrofrog",
            "followers_url": "https://api.github.com/users/astrofrog/followers",
            "following_url": "https://api.github.com/users/astrofrog/following{/other_user}",
            "gists_url": "https://api.github.com/users/astrofrog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/astrofrog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/astrofrog/subscriptions",
            "organizations_url": "https://api.github.com/users/astrofrog/orgs",
            "repos_url": "https://api.github.com/users/astrofrog/repos",
            "events_url": "https://api.github.com/users/astrofrog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/astrofrog/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-06T21:41:22Z",
        "updated_at": "2022-10-06T21:41:22Z",
        "author_association": "CONTRIBUTOR",
        "body": "@mrocklin - thanks for your quick reply!\r\n\r\nThis is for the reproject package in the Astropy project - basically we allow users to specify the output array for the calculation I am interested in dask-ifying, with the intent that they could specify for example a large memory-mapped Numpy array to avoid ever having to allocate enough memory for the full result of the calculation. To be more specific, the reproject package is used to transform images, and sometimes the output image might be huge and we want to avoid as much as possible ever holding it all in memory. I tested the example above with:\r\n\r\n```\r\no = np.memmap('test.np', dtype=float, shape=(321, 323), mode='w+')\r\n```\r\n\r\nand it doesn't work either. Would the only way to get this to work properly be to temporarily store the result in a zarr array and then copy that over to the existing Numpy array chunk by chunk?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1270727926/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1270733320",
        "html_url": "https://github.com/dask/dask/issues/9556#issuecomment-1270733320",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9556",
        "id": 1270733320,
        "node_id": "IC_kwDOAbcwm85LvdoI",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-06T21:48:19Z",
        "updated_at": "2022-10-06T21:48:19Z",
        "author_association": "MEMBER",
        "body": "*If* the memmap array passes through pickle well, then I would expect this to work.\r\n\r\nI would certainly expect persistent-storage-backed Zarr to work.  Both from first principles, and also because this is a more commonly used code path (Zarr maintainers also maintain dask.array.store).  \r\n\r\nA few things to try:\r\n1.  Update the minimal example above to be a bit less minimal, and include the memmaped array\r\n2. Try the dask.distributed scheduler (it's a bit more clever about serialization)\r\n3. Shine the John-Signal into the sky \ud83e\udd87 \u26a1  @jakirkham ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1270733320/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1270741421",
        "html_url": "https://github.com/dask/dask/issues/9556#issuecomment-1270741421",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9556",
        "id": 1270741421,
        "node_id": "IC_kwDOAbcwm85Lvfmt",
        "user": {
            "login": "astrofrog",
            "id": 314716,
            "node_id": "MDQ6VXNlcjMxNDcxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/314716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/astrofrog",
            "html_url": "https://github.com/astrofrog",
            "followers_url": "https://api.github.com/users/astrofrog/followers",
            "following_url": "https://api.github.com/users/astrofrog/following{/other_user}",
            "gists_url": "https://api.github.com/users/astrofrog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/astrofrog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/astrofrog/subscriptions",
            "organizations_url": "https://api.github.com/users/astrofrog/orgs",
            "repos_url": "https://api.github.com/users/astrofrog/repos",
            "events_url": "https://api.github.com/users/astrofrog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/astrofrog/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-06T21:58:58Z",
        "updated_at": "2022-10-06T21:59:19Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for the suggestions! I tried 1. which doesn't work, and then also tried to use dask.distributed:\r\n\r\n```python\r\nimport numpy as np\r\nimport dask.array as da\r\nfrom multiprocessing import freeze_support\r\nfrom dask.distributed import Client\r\nfrom dask.utils import SerializableLock\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    freeze_support()\r\n\r\n    client = Client(n_workers=8, processes=True)\r\n\r\n    r = da.random.random((321, 323)).rechunk((100, 100))\r\n    o = np.memmap('test.np', dtype=float, shape=(321, 323), mode='w+')\r\n\r\n    da.store(r, o, lock=SerializableLock())\r\n\r\n    print(r.mean().compute())\r\n    print(o.mean())\r\n```\r\n\r\nwhich doesn't work either (the second mean is still zero).\r\n\r\n@jakirkham - any ideas? \ud83d\ude06 ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1270741421/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1271324970",
        "html_url": "https://github.com/dask/dask/issues/9556#issuecomment-1271324970",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9556",
        "id": 1271324970,
        "node_id": "IC_kwDOAbcwm85LxuEq",
        "user": {
            "login": "astrofrog",
            "id": 314716,
            "node_id": "MDQ6VXNlcjMxNDcxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/314716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/astrofrog",
            "html_url": "https://github.com/astrofrog",
            "followers_url": "https://api.github.com/users/astrofrog/followers",
            "following_url": "https://api.github.com/users/astrofrog/following{/other_user}",
            "gists_url": "https://api.github.com/users/astrofrog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/astrofrog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/astrofrog/subscriptions",
            "organizations_url": "https://api.github.com/users/astrofrog/orgs",
            "repos_url": "https://api.github.com/users/astrofrog/repos",
            "events_url": "https://api.github.com/users/astrofrog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/astrofrog/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-07T09:06:18Z",
        "updated_at": "2022-10-07T09:08:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "@mrocklin having thought about this a bit more, I think what I really want is for ``compute`` to be able to take an existing output Numpy array rather than create a new one, similar to the ``out=`` kwarg in many Numpy functions. I would like to be able to replace this initialization:\r\n\r\nhttps://github.com/dask/dask/blob/bff086075ea7cde2d517ae4e8691d5baf1dbd7c6/dask/array/core.py#L5287\r\n\r\nwith an array I would provide myself. Is that something you would be open to supporting? So then the line above would be replaced with something like:\r\n\r\n```python\r\n   result_dtype = dtype(deepfirst(arrays))\r\n\r\n    if out is None:\r\n        result = np.empty(shape=shape, dtype=result_dtype)\r\n    else:\r\n        if out.shape != shape:\r\n            raise ValueError(f'shape of provided output array {out.shape} does '\r\n                              'not match actual output shape {shape}')\r\n        if out.dtype != result_dtype:\r\n            raise ValueError(f'dtype of provided output array {out.dtype} does '\r\n                              'not match actual output shape {result_dtype}')\r\n        result = out\r\n```\r\n\r\nand there would be a way to pass this down from ``.compute(out=myarray)`` all the way to ``concatenate3``?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1271324970/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1274644440",
        "html_url": "https://github.com/dask/dask/issues/9556#issuecomment-1274644440",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9556",
        "id": 1274644440,
        "node_id": "IC_kwDOAbcwm85L-YfY",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-11T12:54:27Z",
        "updated_at": "2022-10-11T12:54:27Z",
        "author_association": "MEMBER",
        "body": "> and there would be a way to pass this down from .compute(out=myarray) all the way to concatenate3\r\n\r\nThis seems not trivial to me.  The `compute` call can lead down many code paths.  Supporting an out-parameter seems tricky.  Storing into a numpy memmapped array seems sensible.  @jakirkham would be able to speak about why this doesn't work today I would hope.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1274644440/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]