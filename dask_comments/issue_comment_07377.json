[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/797463131",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-797463131",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 797463131,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzQ2MzEzMQ==",
        "user": {
            "login": "achapkowski",
            "id": 5131271,
            "node_id": "MDQ6VXNlcjUxMzEyNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5131271?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achapkowski",
            "html_url": "https://github.com/achapkowski",
            "followers_url": "https://api.github.com/users/achapkowski/followers",
            "following_url": "https://api.github.com/users/achapkowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions",
            "organizations_url": "https://api.github.com/users/achapkowski/orgs",
            "repos_url": "https://api.github.com/users/achapkowski/repos",
            "events_url": "https://api.github.com/users/achapkowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/achapkowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-12T12:34:27Z",
        "updated_at": "2021-03-12T12:34:27Z",
        "author_association": "NONE",
        "body": "\r\nThe custom dtype is defined as:\r\n\r\n```python\r\nclass GeoType(ExtensionDtype):\r\n    type = Geometry\r\n    name = \"geometry\"\r\n    na_value = None\r\n\r\n    @classmethod\r\n    def construct_from_string(cls, string):\r\n        if string == cls.name:\r\n            return cls()\r\n        else:\r\n            raise TypeError(\r\n                \"Cannot construct a '{}' from '{}'\".format(cls.__name__, string)\r\n            )\r\n\r\n    @classmethod\r\n    def construct_array_type(cls):\r\n        return GeoArray\r\n```\r\n\r\nWhere Geometry is a base class that all other Geometries inherit from.  \r\n\r\nWhen given to `meta` on `map_partitions`, I get the following errors now:\r\n\r\n```\r\n  File \"c:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-dev\\lib\\site-packages\\dask\\array\\core.py\", line 1116, in __new__\r\n    meta = meta_from_array(meta, dtype=dtype)\r\n  File \"c:\\Program Files\\ArcGIS\\Pro\\bin\\Python\\envs\\arcgispro-dev\\lib\\site-packages\\dask\\array\\utils.py\", line 70, in meta_from_array\r\n    x = x(shape=(0,) * (ndim or 0), dtype=dtype)\r\nTypeError: Cannot interpret '<arcgis.features.geo._array.GeoType object at 0x000002613B28E608>' as a data type\r\n\r\n```\r\n\r\nWhat needs to be added to the Panda's registered data type for it to work in Dask?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/797463131/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/799545198",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-799545198",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 799545198,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTU0NTE5OA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-15T16:11:53Z",
        "updated_at": "2021-03-15T16:12:27Z",
        "author_association": "MEMBER",
        "body": "What happens if you pass in a dataframe that looks like the expected output ? So for `meta` in map_partitions set something like `df.head()` or `df.partitions[1].head()` if that is more representative.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/799545198/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/799549237",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-799549237",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 799549237,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTU0OTIzNw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-15T16:17:09Z",
        "updated_at": "2021-03-15T16:17:09Z",
        "author_association": "MEMBER",
        "body": "Actually I'm wondering if this is a manifestation of https://github.com/dask/dask/pull/7375",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/799549237/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/799550479",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-799550479",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 799550479,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTU1MDQ3OQ==",
        "user": {
            "login": "achapkowski",
            "id": 5131271,
            "node_id": "MDQ6VXNlcjUxMzEyNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5131271?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achapkowski",
            "html_url": "https://github.com/achapkowski",
            "followers_url": "https://api.github.com/users/achapkowski/followers",
            "following_url": "https://api.github.com/users/achapkowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions",
            "organizations_url": "https://api.github.com/users/achapkowski/orgs",
            "repos_url": "https://api.github.com/users/achapkowski/repos",
            "events_url": "https://api.github.com/users/achapkowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/achapkowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-15T16:18:45Z",
        "updated_at": "2021-03-15T16:18:45Z",
        "author_association": "NONE",
        "body": "If you pass what the data should look like, and it doesn't match the input, it will fail.  One solution I found was to set ```enforce_metadata=False```.  \r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/799550479/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/799594266",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-799594266",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 799594266,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTU5NDI2Ng==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-15T17:15:41Z",
        "updated_at": "2021-03-15T17:15:41Z",
        "author_association": "MEMBER",
        "body": "@jsignell yes, I believe this is related to #7375. Basically right now, dask does not support `map_partitions` with a function that returns a pandas ExtensionArray. If it's going to return an array-like, it must return a NumPy array.\r\n\r\nNote that #7375 will not resolve this in general; it'll just make `.values` on such a Series with an ExtensionDtype work. The fix for the issue in generality should only be a few lines, but it breaks other tests in weird ways, so I'd like to handle it separately.\r\n\r\n@achapkowski, it seems here that you're trying to turn your dask DataFrame into a dask Array, where the chunks are GeoArrays? If you could share the function you're passing to `map_partitions`, that could be helpful. I'm having trouble interpreting the output you've posted. Also, is that output what you see when you call `compute`, or what you see when you call `map_partitions` (as your function gets called on the `meta` array), or some of both?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/799594266/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/799606327",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-799606327",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 799606327,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTYwNjMyNw==",
        "user": {
            "login": "achapkowski",
            "id": 5131271,
            "node_id": "MDQ6VXNlcjUxMzEyNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5131271?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achapkowski",
            "html_url": "https://github.com/achapkowski",
            "followers_url": "https://api.github.com/users/achapkowski/followers",
            "following_url": "https://api.github.com/users/achapkowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions",
            "organizations_url": "https://api.github.com/users/achapkowski/orgs",
            "repos_url": "https://api.github.com/users/achapkowski/repos",
            "events_url": "https://api.github.com/users/achapkowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/achapkowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-15T17:30:37Z",
        "updated_at": "2021-03-15T17:30:37Z",
        "author_association": "NONE",
        "body": "The output is the partitions of data being send to each client.  The first chunk is a Point dataset which is derived from this:\r\n\r\n```\r\n#-------------------------------------------------------------------------\r\n@make_array_nonempty.register(GeoType)\r\ndef _(dtype):\r\n    a = np.array([_default_geometry(), _default_geometry()], dtype=GeoType)\r\n    return _from_geometry(a)\r\n```\r\n\r\nWhere the default geometry is: \r\n\r\n```python\r\nPoint({'x' : 0, 'y' : 0, 'spatialReference' : {'wkid' : 4326}})\r\n```\r\n\r\nThe output for these calls is a DataFrame.  I am performing operations like spatial joins or performing overlay operations like select by location (intersection operation).  In the case of the `spatial join`, there are cases where DataFrame A and DataFrame B can have the same schema.  So I allow for a _left and _right tags.  This modifies the schema and the output can be different than the input.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/799606327/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/799683992",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-799683992",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 799683992,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTY4Mzk5Mg==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-15T19:14:55Z",
        "updated_at": "2021-03-15T19:14:55Z",
        "author_association": "MEMBER",
        "body": "> The output is the partitions of data being send to each client.\r\n\r\nHow are you seeing this? Print statements in the function you're passing to `map_partitions`? Again, if you could share the code for the function you're passing to `map_partitions`, that would be very helpful.\r\n\r\nYou may already know this, but `map_partitions` works by first calling your function on a \"dummy\" pandas DataFrame\u2014in this case, the one produced by your `@make_array_nonempty.register(GeoType)` function. This happens immediately when you call `map_partitions`, _not_ when you call `compute`.\r\n\r\nSo basically, if you have a `print` statement in your mapper function, which is printing out each partition, it's expected behavior to see it getting called on the `Point({'x' : 0, 'y' : 0, 'spatialReference' : {'wkid' : 4326}})` \"dummy\" values. Just because you see that printed doesn't mean that the Point is actually data in your DataFrame.\r\n\r\nThe docs on DataFrame metadata might be helpful here: https://docs.dask.org/en/latest/dataframe-design.html#metadata\r\n\r\n--- \r\nIt sounds like the real issue here is that your mapper function can't handle the \"dummy\" data you've specified (perhaps you're using a function which can't handle `Point`s, only `CurveRing`s?):\r\n\r\n> This is causing issues performing type specific data. How do I do I account for this first group of data?\r\n\r\nThere's nothing dask can really do to help able to handle this data. I'd say you should either a) add some `if` statements to your mapper function to be able to handle the different data types correctly, or b) change your `make_array_nonempty` function to return something more representative of the type of data you'll actually be using (put a `CurveRing` in it instead of a `Point`, for example).\r\n\r\nAlternatively, as you saw, you can pass a `meta`. It sounds to me like you tried passing `GeoType` or a `GeoArray` instance as meta, and that broke (this is the bug related to #7375). However, if the output is supposed to be a DataFrame, then a `GeoArray` is actually the wrong `meta` type, since that implies the result should be an Array. Instead, your `meta` should be a pandas DataFrame, where some of the columns have the dtype `GeoType`. Or, if your function doesn't change the columns/types at all, you can just pass the original DataFrame for convenience: `ddf.map_partitions(my_mapper, ..., meta=ddf)`. See the [`make_meta`](https://docs.dask.org/en/latest/dataframe-api.html#dask.dataframe.utils.make_meta) and [`map_partitions`](https://docs.dask.org/en/latest/dataframe-api.html#dask.dataframe.DataFrame.map_partitions) documentation for more details here.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/799683992/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/800431780",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-800431780",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 800431780,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDQzMTc4MA==",
        "user": {
            "login": "achapkowski",
            "id": 5131271,
            "node_id": "MDQ6VXNlcjUxMzEyNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5131271?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/achapkowski",
            "html_url": "https://github.com/achapkowski",
            "followers_url": "https://api.github.com/users/achapkowski/followers",
            "following_url": "https://api.github.com/users/achapkowski/following{/other_user}",
            "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions",
            "organizations_url": "https://api.github.com/users/achapkowski/orgs",
            "repos_url": "https://api.github.com/users/achapkowski/repos",
            "events_url": "https://api.github.com/users/achapkowski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/achapkowski/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-16T16:49:42Z",
        "updated_at": "2021-03-16T16:49:42Z",
        "author_association": "NONE",
        "body": "```python\r\nresults = self._data.map_partitions(\r\n            lambda part : self._sfn_method(\r\n                part.spatial,\r\n                'join',\r\n                **{\r\n                    \"right_df\" : right_df,\r\n                    \"how\": how,\r\n                    \"op\" : op,\r\n                    \"left_tag\" : left_tag,\r\n                    \"right_tag\" : right_tag\r\n                   }\r\n            ),\r\n            meta=meta,\r\n            enforce_metadata=False\r\n        )\r\n```\r\n\r\nWhere `part` would be a pd.DataFrame, `part.spatial` is a custom Pandas' accessor, and  self._sfn_method would be:\r\n\r\n```python\r\nself._sfn_method = lambda a, sop, **kwargs: getattr(a, sop)(**kwargs)\r\n```\r\n\r\nThis allows me to perform a spatial join on each partition for the dask dataframe, or at least that is the thought.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/800431780/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/802929075",
        "html_url": "https://github.com/dask/dask/issues/7377#issuecomment-802929075",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7377",
        "id": 802929075,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjkyOTA3NQ==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-19T15:47:48Z",
        "updated_at": "2021-03-19T15:47:48Z",
        "author_association": "MEMBER",
        "body": "What is `right_df` in this case? A `pd.DataFrame` or a dask DataFrame? (I don't think a dask DataFrame will work.)\r\n\r\nI'm still unclear on what the issue is.\r\n\r\n> It sounds like the real issue here is that your mapper function can't handle the \"dummy\" data you've specified (perhaps you're using a function which can't handle Points, only CurveRings?)\r\n\r\nIs this accurate? Is the problem that `join` is failing on your dummy data that contains Points?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/802929075/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]