[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/434798102",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-434798102",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 434798102,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDc5ODEwMg==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-31T18:29:22Z",
        "updated_at": "2018-10-31T18:29:22Z",
        "author_association": "MEMBER",
        "body": "This is useful feedback to have. Thanks for raising this @hmaarrfk.\r\n\r\nGiven you have played a bit with `da.map_overlap`'s internals, are there particular points you know of in the current implementation where copies are being created? Would it be possible in your opinion to adjust those to take views without making copies? How difficult might such an effort be?\r\n\r\nJust trying to get a sense of what you think can and cannot be done within the existing API.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/434798102/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/434820210",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-434820210",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 434820210,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDgyMDIxMA==",
        "user": {
            "login": "hmaarrfk",
            "id": 90008,
            "node_id": "MDQ6VXNlcjkwMDA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/90008?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hmaarrfk",
            "html_url": "https://github.com/hmaarrfk",
            "followers_url": "https://api.github.com/users/hmaarrfk/followers",
            "following_url": "https://api.github.com/users/hmaarrfk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hmaarrfk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hmaarrfk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hmaarrfk/subscriptions",
            "organizations_url": "https://api.github.com/users/hmaarrfk/orgs",
            "repos_url": "https://api.github.com/users/hmaarrfk/repos",
            "events_url": "https://api.github.com/users/hmaarrfk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hmaarrfk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-31T19:37:38Z",
        "updated_at": "2019-04-30T16:41:49Z",
        "author_association": "MEMBER",
        "body": "You raise an excellent point.\r\n\r\nHonestly, I used to think that numpy operated on strided arrays internally, but I'm increasingly convinced that they do not. It is pretty hard to read numpy C source code though. It is really dense and uses many macros to template things. So I could be wrong.\r\n\r\nI guess when I originally thought of this addition to the API it was thinking that numpy could natively operate on strided arrays.\r\n\r\nHere is a little benchmark I that clearly shows the limitations of numpy to operate on straightforward  strided arrays:\r\n\r\n<details> <summary>Benchmark</summary>\r\n\r\n```python\r\nimport numpy as np\r\n\r\nchunk_size = (1000, 1000)\r\n# Create a largeish array. The importance is likely \"out of cache\"\r\narr = np.full((10_000, 10_000), fill_value=1, dtype=np.float32)\r\n\r\nN_chunks = [shape // chunk for shape, chunk in zip(arr.shape, chunk_size)]\r\n# Create a few distinct contiguous arrays\r\narrs_contiguous = []\r\nfor i in range(N_chunks[0]):\r\n    inner_arrs = []\r\n    for j in range(N_chunks[1]):\r\n        inner_arrs.append(np.full(chunk_size, fill_value=1, dtype=np.float32))\r\n    arrs_contiguous.append(inner_arrs)\r\n\r\narrs_sliced = []\r\nfor i in range(N_chunks[0]):\r\n    inner_arrs = []\r\n    for j in range(N_chunks[1]):\r\n        chunk_slice = np.s_[chunk_size[0]*i:chunk_size[0]*(i+1), chunk_size[1]*j:chunk_size[1]*(j+1)]\r\n        inner_arrs.append(arr[chunk_slice])\r\n    arrs_sliced.append(inner_arrs)\r\n```\r\n```python\r\n%%timeit \r\n\r\n# Baseline performance\r\n# arr += 1\r\nnp.add(arr, 1, out=arr)\r\n```\r\n`31.8 ms \u00b1 252 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)`\r\n```python\r\n%%timeit \r\n# Looping slowdown\r\nfor inner_arrs in arrs_sliced:\r\n    for the_arr in inner_arrs:\r\n        pass\r\n    \r\n# Is insignificant\r\n```\r\n`1.11 \u00b5s \u00b1 5 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)`\r\n\r\n```python\r\n%%timeit\r\n# 5x slower\r\nfor inner_arrs in arrs_sliced:\r\n    for the_arr in inner_arrs:\r\n        # Both are equivalent in terms of speed\r\n        #the_arr += 1\r\n        np.add(the_arr, 1, out=the_arr)\r\n```\r\n`159 ms \u00b1 650 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)`\r\n```python\r\n%%timeit\r\nfor inner_arrs in arrs_contiguous:\r\n    for the_arr in inner_arrs:\r\n        the_arr += 1\r\n# Much better in terms of performance.\r\n```\r\n`37.2 ms \u00b1 6.09 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)`\r\n```python\r\narrs_sliced[0][0].strides\r\n```\r\n`(40000, 4)`\r\n\r\nPerformance isn't as bad as:\r\n```\r\n%%timeit\r\n# 9x slower\r\nfor inner_arrs in arrs_sliced:\r\n    for the_arr in inner_arrs:\r\n        tmp = the_arr + 1\r\n        the_arr = tmp\r\n```\r\n`241 ms \u00b1 5.03 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)`\r\n\r\n</details>\r\n\r\nSeemes like this kind of stuff could really benefit from real JIT or higher level compilation.\r\nAdding 1000 floats together is basically a whole cache line. It should be pretty well optimized, though it seems like it isn't in the case where the array isn't c-contiguous.\r\n\r\nCC ing: @serge-sans-paille has some comments as to how pythran might deal with this. I know he made use of heavy AVX instructions and likely had to think about this contiguous/non-contiguous types of operations alot.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/434820210/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/434828855",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-434828855",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 434828855,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDgyODg1NQ==",
        "user": {
            "login": "hmaarrfk",
            "id": 90008,
            "node_id": "MDQ6VXNlcjkwMDA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/90008?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hmaarrfk",
            "html_url": "https://github.com/hmaarrfk",
            "followers_url": "https://api.github.com/users/hmaarrfk/followers",
            "following_url": "https://api.github.com/users/hmaarrfk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hmaarrfk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hmaarrfk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hmaarrfk/subscriptions",
            "organizations_url": "https://api.github.com/users/hmaarrfk/orgs",
            "repos_url": "https://api.github.com/users/hmaarrfk/repos",
            "events_url": "https://api.github.com/users/hmaarrfk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hmaarrfk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-10-31T20:04:59Z",
        "updated_at": "2019-04-30T16:41:25Z",
        "author_association": "MEMBER",
        "body": "Here is my best attempt at using numba\r\n<details>\r\n\r\n```python\r\nfrom numba import njit, jit\r\nimport numba\r\n@njit(numba.void(numba.float32[::1]))\r\ndef add_row(b):\r\n    b += 1\r\n@jit\r\ndef my_add_1(a):\r\n    for i in range(a.shape[0]):\r\n        add_row(a[i])\r\n        \r\n# This doesn't perform any better than numpy\r\n@njit(numba.void(numba.float32[:, ::1]))\r\ndef add_2d(a):\r\n    a += 1\r\n```\r\ncompile\r\n```python\r\nmy_add_1(arrs_sliced[0][0])\r\n```\r\n\r\n```python\r\n%%timeit\r\nfor inner_arrs in arrs_sliced:\r\n    for the_arr in inner_arrs:\r\n        my_add_1(the_arr)\r\n```\r\n`77.7 ms \u00b1 715 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)`\r\n</details>",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/434828855/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/434956407",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-434956407",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 434956407,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDk1NjQwNw==",
        "user": {
            "login": "serge-sans-paille",
            "id": 863807,
            "node_id": "MDQ6VXNlcjg2MzgwNw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/863807?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/serge-sans-paille",
            "html_url": "https://github.com/serge-sans-paille",
            "followers_url": "https://api.github.com/users/serge-sans-paille/followers",
            "following_url": "https://api.github.com/users/serge-sans-paille/following{/other_user}",
            "gists_url": "https://api.github.com/users/serge-sans-paille/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/serge-sans-paille/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/serge-sans-paille/subscriptions",
            "organizations_url": "https://api.github.com/users/serge-sans-paille/orgs",
            "repos_url": "https://api.github.com/users/serge-sans-paille/repos",
            "events_url": "https://api.github.com/users/serge-sans-paille/events{/privacy}",
            "received_events_url": "https://api.github.com/users/serge-sans-paille/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-11-01T07:29:26Z",
        "updated_at": "2018-11-01T07:29:26Z",
        "author_association": "NONE",
        "body": "> CC ing: @serge-sans-paille has some comments as to how pythran might deal with\n> this. I know he made use of heavy AVX instructions and likely had to think\n> about this contiguous/non-contiguous types of operations alot.\n\nLooks like you're hitting a bug in pythran, the python <> native\nconversion of the view fail, I opened an issue:\n\nhttps://github.com/serge-sans-paille/pythran/issues/1072\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/434956407/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/435030409",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-435030409",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 435030409,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTAzMDQwOQ==",
        "user": {
            "login": "hmaarrfk",
            "id": 90008,
            "node_id": "MDQ6VXNlcjkwMDA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/90008?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hmaarrfk",
            "html_url": "https://github.com/hmaarrfk",
            "followers_url": "https://api.github.com/users/hmaarrfk/followers",
            "following_url": "https://api.github.com/users/hmaarrfk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hmaarrfk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hmaarrfk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hmaarrfk/subscriptions",
            "organizations_url": "https://api.github.com/users/hmaarrfk/orgs",
            "repos_url": "https://api.github.com/users/hmaarrfk/repos",
            "events_url": "https://api.github.com/users/hmaarrfk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hmaarrfk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-11-01T12:48:25Z",
        "updated_at": "2018-11-01T14:12:38Z",
        "author_association": "MEMBER",
        "body": "Man, life and compilers is hard: This typo (which forces the arrays to be square):\r\n<details>\r\n```python\r\nfrom numba import njit, jit\r\nimport numba\r\n@njit\r\ndef add_2d_loops(a):\r\n    for i in range(a.shape[0]):\r\n        for j in range(a.shape[0]):  # <- should be shape[1]\r\n            a[i, j] += 1\r\n        \r\n@njit  # (numba.void(numba.float32[:, ::1]))\r\ndef add_2d(a):\r\n    a += 1\r\n```\r\nGives you near equal performance\r\n```python\r\n%%timeit\r\nfor inner_arrs in arrs_sliced:   # arrs_contiguous:\r\n    for the_arr in inner_arrs:\r\n        add_2d_loops(the_arr)\r\n```\r\n</details>\r\n* 35 ms vs 30 ms\r\n\r\nFixing the typo, drops you to\r\n* 110 vs 30 ms\r\n\r\nBut in our particular toy example, both the `typo` an the fixed typo give the same result in terms of input output response.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/435030409/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/435038330",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-435038330",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 435038330,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTAzODMzMA==",
        "user": {
            "login": "hmaarrfk",
            "id": 90008,
            "node_id": "MDQ6VXNlcjkwMDA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/90008?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hmaarrfk",
            "html_url": "https://github.com/hmaarrfk",
            "followers_url": "https://api.github.com/users/hmaarrfk/followers",
            "following_url": "https://api.github.com/users/hmaarrfk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hmaarrfk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hmaarrfk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hmaarrfk/subscriptions",
            "organizations_url": "https://api.github.com/users/hmaarrfk/orgs",
            "repos_url": "https://api.github.com/users/hmaarrfk/repos",
            "events_url": "https://api.github.com/users/hmaarrfk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hmaarrfk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-11-01T13:19:15Z",
        "updated_at": "2018-11-01T13:19:15Z",
        "author_association": "MEMBER",
        "body": "In the original post where I created chunked arrays, there was a typo in the calculation of the `chunk_slice`. It didn't affect the results when the arrays were being chunked with (1000, 1000), but it did create strange results with chunks of (100, 10_000)\r\n\r\nThe bug was that I used `chunk_size[1] * i`, when it should be `chunk_size[1] * j`",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/435038330/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/488018441",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-488018441",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 488018441,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODAxODQ0MQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-30T16:20:35Z",
        "updated_at": "2019-04-30T16:20:35Z",
        "author_association": "MEMBER",
        "body": "Is this feature still of interest to you, @hmaarrfk? Would you be interested in submitting a PR?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/488018441/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/488026895",
        "html_url": "https://github.com/dask/dask/issues/4154#issuecomment-488026895",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4154",
        "id": 488026895,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODAyNjg5NQ==",
        "user": {
            "login": "hmaarrfk",
            "id": 90008,
            "node_id": "MDQ6VXNlcjkwMDA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/90008?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hmaarrfk",
            "html_url": "https://github.com/hmaarrfk",
            "followers_url": "https://api.github.com/users/hmaarrfk/followers",
            "following_url": "https://api.github.com/users/hmaarrfk/following{/other_user}",
            "gists_url": "https://api.github.com/users/hmaarrfk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hmaarrfk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hmaarrfk/subscriptions",
            "organizations_url": "https://api.github.com/users/hmaarrfk/orgs",
            "repos_url": "https://api.github.com/users/hmaarrfk/repos",
            "events_url": "https://api.github.com/users/hmaarrfk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hmaarrfk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-30T16:44:54Z",
        "updated_at": "2019-04-30T16:44:54Z",
        "author_association": "MEMBER",
        "body": "Oh man, my work has made me jump down the rabbit hole of performance unfortunately. \r\n\r\nI still haven't had the time to create real benchmarks for how things work on strided arrays.\r\n\r\nThinking of memory models has been big on my priority list, but I haven't had too much time to focus on it.\r\n\r\nIn other performance related PRs I issued, the main question was: \"who is this improvement for\".\r\n\r\nFor example\r\n```python\r\n$ ipython                                                                                               \r\nimport Python 3.7.1 | packaged by conda-forge | (default, Feb 18 2019, 01:42:00) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.5.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import numpy as np                                                                              \r\n\r\nIn [2]: a = np.random.rand(1024, 1024)                                                                  \r\n\r\nIn [3]: %timeit a + a                                                                                   \r\n812 \u00b5s \u00b1 22.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [4]: %timeit a[::2] + a[::2]                                                                         \r\n654 \u00b5s \u00b1 15.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [5]: %timeit a[:, ::2] + a[:, ::2]                                                                   \r\n598 \u00b5s \u00b1 11.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [6]: %timeit a[:512] + a[:512]                                                                       \r\n323 \u00b5s \u00b1 8.05 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [7]: np.__version__                                                                                  \r\nOut[7]: '1.15.4'\r\n```\r\n(Ok i seriously thought i had 1.16 installed, but this kinda illustrates the point).\r\n\r\ndepending on how the memory is organized, and how numpy does strided computation, it is unclear that there is any benefit of storing arrays in \"strided\" format.\r\n\r\nI would have to compare this to what hand tuned strided operation are able to achieve.\r\n\r\nMy general fear, is that in an attempt to speed things up for a particular use case, we would slow everything down for all other use cases....",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/488026895/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]