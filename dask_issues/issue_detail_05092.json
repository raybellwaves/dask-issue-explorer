{
    "url": "https://api.github.com/repos/dask/dask/issues/5092",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/5092/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/5092/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/5092/events",
    "html_url": "https://github.com/dask/dask/issues/5092",
    "id": 467649070,
    "node_id": "MDU6SXNzdWU0Njc2NDkwNzA=",
    "number": 5092,
    "title": "unclear if possible or how to add meta type info to a custom Aggregation",
    "user": {
        "login": "nbmorgan",
        "id": 1404206,
        "node_id": "MDQ6VXNlcjE0MDQyMDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1404206?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbmorgan",
        "html_url": "https://github.com/nbmorgan",
        "followers_url": "https://api.github.com/users/nbmorgan/followers",
        "following_url": "https://api.github.com/users/nbmorgan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbmorgan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbmorgan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbmorgan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbmorgan/orgs",
        "repos_url": "https://api.github.com/users/nbmorgan/repos",
        "events_url": "https://api.github.com/users/nbmorgan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbmorgan/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-07-13T00:58:52Z",
    "updated_at": "2022-05-02T17:23:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "``` ValueError: Metadata inference failed in `_groupby_apply_funcs`. ``` received when I tried my hand at custom Aggregation. It seems like it would be reasonable to add meta to the Aggregation object but that errors differently.\r\n\r\n```python\r\ndef percentile(n):\r\n    from crick import TDigest\r\n    # doc https://github.com/jcrist/crick/blob/master/crick/tdigest.pyx\r\n    # doc https://docs.dask.org/en/stable/dataframe-api.html#dask.dataframe.groupby.Aggregation\r\n    \r\n    \r\n    def percentile_chunck(grouped):\r\n        g_res = []\r\n        for items in grouped:\r\n            t = TDigest()\r\n            g_res.append(t.update(items))\r\n        return(g_res) \r\n    \r\n    def percentile_agg(chunk_TDigests):\r\n        tagg = TDigest()\r\n        for t in chunk_TDigests:\r\n            tagg.merge(t)\r\n        return tagg\r\n   \r\n    def percentile_finalize(tagg):\r\n        return tagg.quantile(n)\r\n    \r\n    return dd.Aggregation(\r\n        name    = 'percentile_{:2.0f}'.format(n*100),\r\n        chunk   = percentile_chunck,\r\n        agg     = percentile_agg,\r\n        finalize=percentile_finalize,\r\n    )\r\n\r\nSpike_day = Spike_data.groupby('modulus_min')['abs_filtered_count'].agg([\r\n    np.sum, \r\n    np.mean, \r\n    np.std, \r\n#    np.median,\r\n    np.var,\r\n    np.min,\r\n    np.max,\r\n    percentile(0.05),\r\n    percentile(0.25),\r\n    percentile(0.50),\r\n    percentile(0.75),\r\n    percentile(0.95)\r\n])\r\ndisplay(Spike_day.head(10)) # prove the aggs work\r\n```\r\n\r\nIf there is a better way to combine percentiles with other aggregations, I would like to hear that as well.  But, I was thinking if I could work through this I could answer several Aggregation related questions on StackOverflow even if there was a better approach.\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/5092/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/5092/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}