[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/498098426",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-498098426",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 498098426,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODA5ODQyNg==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-03T03:09:56Z",
        "updated_at": "2019-06-03T03:09:56Z",
        "author_association": "MEMBER",
        "body": "Thanks for the report. It'd be a tad easier to review the code in a PR, so I haven't looked closely at that, apologies.\r\n\r\n> Reliance on pandas to make the meta (not sure best practice here)\r\n\r\nThat should be fine in this case. The output dtype should always be ints?\r\n\r\n> Using Int64 as my dtype since I prefer ints that can be nulled. Not sure of the implications of this / what dask standards are?\r\n\r\nWe follow pandas, so a regular NumPy int64 would be correct.\r\n\r\n> since concat on MultiIndex seems to cause a memory leak? \r\n\r\nDo you see that with pandas only? Or is that a Dask issue?\r\n\r\n> Not tested against categorical columns which have some different groupby behaviors.\r\n\r\nI believe it should be the same behavior for nunique.\r\n\r\n> What was the reasoning behind using .apply(drop_duplicates) as part of the nunique groupby agg?\r\n\r\nI'm not sure offhand. Does your alternative implementation break any tests?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/498098426/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/498442053",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-498442053",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 498442053,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODQ0MjA1Mw==",
        "user": {
            "login": "bluecoconut",
            "id": 916073,
            "node_id": "MDQ6VXNlcjkxNjA3Mw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/916073?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bluecoconut",
            "html_url": "https://github.com/bluecoconut",
            "followers_url": "https://api.github.com/users/bluecoconut/followers",
            "following_url": "https://api.github.com/users/bluecoconut/following{/other_user}",
            "gists_url": "https://api.github.com/users/bluecoconut/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bluecoconut/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bluecoconut/subscriptions",
            "organizations_url": "https://api.github.com/users/bluecoconut/orgs",
            "repos_url": "https://api.github.com/users/bluecoconut/repos",
            "events_url": "https://api.github.com/users/bluecoconut/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bluecoconut/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-03T21:58:24Z",
        "updated_at": "2019-06-03T22:00:16Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for answers to questions. It might be a few days (or week+) until I can get to making a PR for this.\r\n\r\n> > since concat on MultiIndex seems to cause a memory leak?\r\n\r\n> Do you see that with pandas only? Or is that a Dask issue?\r\n\r\nThe concat MultiIndex problem I have not been able to chase down. I have an alternate implementation that _feels_ more logical (without the `.reset_index()`) but causes memory to explode no matter how careful I am. It's also the case that the memory stays around even when the workers are no longer referencing any data, so it feels like a leak. However, since the \"macro structure\" of the operation is purely passing around multi-indexed dataframes, it doesn't seem like it's a Dask bug, and instead something to do with memory explosion in Pandas.\r\n\r\nI found a few issues related to it, but have not been able to dig or reproduce in a nice re-portable way yet, so I unfortunately don't have a more satisfying answer.\r\n\r\nhttps://github.com/pandas-dev/pandas/issues/19630\r\nhttps://github.com/pandas-dev/pandas/issues/13904\r\nhttps://github.com/pandas-dev/pandas/issues/18519\r\n\r\n> Does your alternative implementation break any tests?\r\n\r\nProbably, but I don't know yet since I haven't implemented in dask directly yet, just using it to wrap dask objects at the moment but since it directly had a corresponding dask implementation, I wanted to raise this issue for documentation reasons at the moment. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/498442053/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/547633624",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-547633624",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 547633624,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzYzMzYyNA==",
        "user": {
            "login": "emlazzarin",
            "id": 1141361,
            "node_id": "MDQ6VXNlcjExNDEzNjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1141361?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/emlazzarin",
            "html_url": "https://github.com/emlazzarin",
            "followers_url": "https://api.github.com/users/emlazzarin/followers",
            "following_url": "https://api.github.com/users/emlazzarin/following{/other_user}",
            "gists_url": "https://api.github.com/users/emlazzarin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/emlazzarin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/emlazzarin/subscriptions",
            "organizations_url": "https://api.github.com/users/emlazzarin/orgs",
            "repos_url": "https://api.github.com/users/emlazzarin/repos",
            "events_url": "https://api.github.com/users/emlazzarin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/emlazzarin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-29T21:17:57Z",
        "updated_at": "2019-10-29T21:17:57Z",
        "author_association": "NONE",
        "body": "`nunique` is still slow and memory-intensive on multi-column groupbys in Dask, and seems somewhat challenging to resolve. Maybe extending `nunique_approx` to groupbys on DataFrames would handle many of these cases?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/547633624/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/548082443",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-548082443",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 548082443,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODA4MjQ0Mw==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-30T19:47:49Z",
        "updated_at": "2019-10-30T19:47:49Z",
        "author_association": "MEMBER",
        "body": "@emlazzarin I believe that's what was proposed in #1821. Is that something you have any interest in working on? (no obligation though)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/548082443/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/607209397",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-607209397",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 607209397,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzIwOTM5Nw==",
        "user": {
            "login": "mgsnuno",
            "id": 1495173,
            "node_id": "MDQ6VXNlcjE0OTUxNzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1495173?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mgsnuno",
            "html_url": "https://github.com/mgsnuno",
            "followers_url": "https://api.github.com/users/mgsnuno/followers",
            "following_url": "https://api.github.com/users/mgsnuno/following{/other_user}",
            "gists_url": "https://api.github.com/users/mgsnuno/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mgsnuno/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mgsnuno/subscriptions",
            "organizations_url": "https://api.github.com/users/mgsnuno/orgs",
            "repos_url": "https://api.github.com/users/mgsnuno/repos",
            "events_url": "https://api.github.com/users/mgsnuno/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mgsnuno/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-01T12:05:34Z",
        "updated_at": "2020-04-01T12:10:54Z",
        "author_association": "CONTRIBUTOR",
        "body": "Have the same issue:\r\n\r\n```python\r\nimport pandas as pd\r\nfrom dask.distributed import Client\r\nfrom dask.datasets import timeseries\r\n\r\nclient = Client()\r\n\r\ndf = timeseries().persist()\r\nhangs1 = df.groupby(df.index)[\"id\"].nunique().compute()\r\nsuper_slow = df.groupby(df.index)[\"id\"].apply(pd.Series.nunique).compute()\r\nfast = df.map_partitions(lambda x: x.groupby(x.index)[\"id\"].nunique()).compute()\r\n```\r\nand `groupby.apply` bumps into: https://github.com/dask/dask/issues/2999\r\n\r\nWhy is `dask.SeriesGroupBy.nunique` so slow? \r\nWhich approach could be taken to improve?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/607209397/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/607681297",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-607681297",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 607681297,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzY4MTI5Nw==",
        "user": {
            "login": "mgsnuno",
            "id": 1495173,
            "node_id": "MDQ6VXNlcjE0OTUxNzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1495173?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mgsnuno",
            "html_url": "https://github.com/mgsnuno",
            "followers_url": "https://api.github.com/users/mgsnuno/followers",
            "following_url": "https://api.github.com/users/mgsnuno/following{/other_user}",
            "gists_url": "https://api.github.com/users/mgsnuno/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mgsnuno/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mgsnuno/subscriptions",
            "organizations_url": "https://api.github.com/users/mgsnuno/orgs",
            "repos_url": "https://api.github.com/users/mgsnuno/repos",
            "events_url": "https://api.github.com/users/mgsnuno/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mgsnuno/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-02T07:50:38Z",
        "updated_at": "2020-04-02T07:50:38Z",
        "author_association": "CONTRIBUTOR",
        "body": "@TomAugspurger or @jrbourbeau any advice on how to fix this issue?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/607681297/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/607779728",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-607779728",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 607779728,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzc3OTcyOA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-02T11:09:00Z",
        "updated_at": "2020-04-02T11:09:00Z",
        "author_association": "MEMBER",
        "body": "@mgsnuno it looks like https://github.com/dask/dask/issues/4869#issue-451220632 has a proposed solution, if you want to try writing tests and submitting a pull request. I haven't looked closely at it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/607779728/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610912769",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-610912769",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 610912769,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDkxMjc2OQ==",
        "user": {
            "login": "mgsnuno",
            "id": 1495173,
            "node_id": "MDQ6VXNlcjE0OTUxNzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1495173?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mgsnuno",
            "html_url": "https://github.com/mgsnuno",
            "followers_url": "https://api.github.com/users/mgsnuno/followers",
            "following_url": "https://api.github.com/users/mgsnuno/following{/other_user}",
            "gists_url": "https://api.github.com/users/mgsnuno/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mgsnuno/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mgsnuno/subscriptions",
            "organizations_url": "https://api.github.com/users/mgsnuno/orgs",
            "repos_url": "https://api.github.com/users/mgsnuno/repos",
            "events_url": "https://api.github.com/users/mgsnuno/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mgsnuno/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-08T11:50:23Z",
        "updated_at": "2020-04-08T11:50:23Z",
        "author_association": "CONTRIBUTOR",
        "body": "I've been spending quite some time going around and trying to figure out why this gets so slow. Still didn't figure out why is so slow, but one way around is:\r\n\r\n```\r\nimport pandas as pd\r\nimport dask\r\n\r\ndf = dask.datasets.timeseries()\r\nfast = df.reset_index().drop_duplicates(['timestamp', 'id']).groupby('timestamp')['id'].count()\r\n```\r\nlike mentioned in: https://github.com/rapidsai/cudf/issues/4663#issuecomment-602970891\r\n\r\n`SeriesGroupBy.unique` is also slow, maybe when we have million of groups there is a big for loop hanging things? Don't know, just wondering.\r\n\r\nAny ideas how to proceed? Maybe people in this thread https://github.com/rapidsai/cudf/issues/4663#issuecomment-602980225 are more fit to tackle this than me. If someone gives me instructions on where to poke, I'd be happy to help.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610912769/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/621874073",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-621874073",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 621874073,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTg3NDA3Mw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-30T14:05:04Z",
        "updated_at": "2020-04-30T14:05:04Z",
        "author_association": "MEMBER",
        "body": "@mgsnuno, the best thing to do now is to try to write a test and open a pull request to start the discussion on how to improve timing.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/621874073/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/622310748",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-622310748",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 622310748,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjMxMDc0OA==",
        "user": {
            "login": "mgsnuno",
            "id": 1495173,
            "node_id": "MDQ6VXNlcjE0OTUxNzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1495173?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mgsnuno",
            "html_url": "https://github.com/mgsnuno",
            "followers_url": "https://api.github.com/users/mgsnuno/followers",
            "following_url": "https://api.github.com/users/mgsnuno/following{/other_user}",
            "gists_url": "https://api.github.com/users/mgsnuno/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mgsnuno/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mgsnuno/subscriptions",
            "organizations_url": "https://api.github.com/users/mgsnuno/orgs",
            "repos_url": "https://api.github.com/users/mgsnuno/repos",
            "events_url": "https://api.github.com/users/mgsnuno/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mgsnuno/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-01T09:05:14Z",
        "updated_at": "2020-05-01T09:05:14Z",
        "author_association": "CONTRIBUTOR",
        "body": "@jsignell ok, sounds good, any advice on how to write a test that fails on timeout?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/622310748/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/624086776",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-624086776",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 624086776,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDA4Njc3Ng==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-05T14:24:04Z",
        "updated_at": "2020-05-05T14:24:04Z",
        "author_association": "MEMBER",
        "body": "There are a few different approaches. Testing timeouts directly can be kind of unreliable since the time that a particular operation is expected to take would vary based on the machine. So the test might pass on one machine and fail on another. I imagine you'd want to be testing for a slowdown of at least 1 or 2 orders of magnitude. For that approach something like: \r\n\r\nhttps://github.com/dask/dask/blob/d1c033dab12b40088895c92ea06f2c1175cb6150/dask/bytes/tests/test_http.py#L27:L35\r\n\r\nAnother less direct approach is if you suspect that some internal loop is being hammered, you could try to write tests that check how many times a function in that loop is called. \r\n\r\nIf writing a test is feeling unwieldy, you might want to instead contribute to https://github.com/dask/dask-benchmarks",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/624086776/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/922351387",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-922351387",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 922351387,
        "node_id": "IC_kwDOAbcwm842-fcb",
        "user": {
            "login": "umonaca",
            "id": 53662960,
            "node_id": "MDQ6VXNlcjUzNjYyOTYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/53662960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/umonaca",
            "html_url": "https://github.com/umonaca",
            "followers_url": "https://api.github.com/users/umonaca/followers",
            "following_url": "https://api.github.com/users/umonaca/following{/other_user}",
            "gists_url": "https://api.github.com/users/umonaca/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/umonaca/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/umonaca/subscriptions",
            "organizations_url": "https://api.github.com/users/umonaca/orgs",
            "repos_url": "https://api.github.com/users/umonaca/repos",
            "events_url": "https://api.github.com/users/umonaca/events{/privacy}",
            "received_events_url": "https://api.github.com/users/umonaca/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-18T18:23:34Z",
        "updated_at": "2021-09-18T18:23:34Z",
        "author_association": "NONE",
        "body": "I am seeing a lot of bugs when running code like `df.groupby(by='APCODE')['Account ID'].nunique().compute()`. Call stack looks like the following:\r\n```\r\ndistributed.worker - WARNING - Compute Failed\r\nFunction:  _nunique_df_chunk\r\nargs:      (Empty DataFrame\r\nColumns: [Account ID, Date, Rate, Zipcode, kWh1, kWh2, kWh3, kWh4, kWh5, kWh6, kWh7, kWh8, kWh9, kWh10, kWh11, kWh12, kWh13, kWh14, kWh15, kWh16, kWh17, kWh18, kWh19, kWh20, kWh21, kWh22, kWh23, kWh24, new_Date, Month, Year, Season, Season_plan, ctype, APCODE, Meter_Type]\r\nIndex: [], 'APCODE')\r\nkwargs:    {'levels': 0, 'name': 'Account ID'}\r\nException: IndexError('index 0 is out of bounds for axis 0 with size 0')\r\n```\r\nWhen running another line of code with two groupby columns `df.groupby(by=['Account ID', 'Date'])['APCODE'].nunique().compute()` I am getting another error:\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n/tmp/ipykernel_33845/544297769.py in <module>\r\n----> 1 df_test = df.groupby(by=['Account ID', 'Date'])['APCODE'].nunique().compute()\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/dask/base.py in compute(self, **kwargs)\r\n    284         dask.base.compute\r\n    285         \"\"\"\r\n--> 286         (result,) = compute(self, traverse=False, **kwargs)\r\n    287         return result\r\n    288 \r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/dask/base.py in compute(*args, **kwargs)\r\n    566         postcomputes.append(x.__dask_postcompute__())\r\n    567 \r\n--> 568     results = schedule(dsk, keys, **kwargs)\r\n    569     return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n    570 \r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/distributed/client.py in get(self, dsk, keys, workers, allow_other_workers, resources, sync, asynchronous, direct, retries, priority, fifo_timeout, actors, **kwargs)\r\n   2669                     should_rejoin = False\r\n   2670             try:\r\n-> 2671                 results = self.gather(packed, asynchronous=asynchronous, direct=direct)\r\n   2672             finally:\r\n   2673                 for f in futures.values():\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/distributed/client.py in gather(self, futures, errors, direct, asynchronous)\r\n   1946             else:\r\n   1947                 local_worker = None\r\n-> 1948             return self.sync(\r\n   1949                 self._gather,\r\n   1950                 futures,\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/distributed/client.py in sync(self, func, asynchronous, callback_timeout, *args, **kwargs)\r\n    843             return future\r\n    844         else:\r\n--> 845             return sync(\r\n    846                 self.loop, func, *args, callback_timeout=callback_timeout, **kwargs\r\n    847             )\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/distributed/utils.py in sync(loop, func, callback_timeout, *args, **kwargs)\r\n    323     if error[0]:\r\n    324         typ, exc, tb = error[0]\r\n--> 325         raise exc.with_traceback(tb)\r\n    326     else:\r\n    327         return result[0]\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/distributed/utils.py in f()\r\n    306             if callback_timeout is not None:\r\n    307                 future = asyncio.wait_for(future, callback_timeout)\r\n--> 308             result[0] = yield future\r\n    309         except Exception:\r\n    310             error[0] = sys.exc_info()\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/tornado/gen.py in run(self)\r\n    760 \r\n    761                     try:\r\n--> 762                         value = future.result()\r\n    763                     except Exception:\r\n    764                         exc_info = sys.exc_info()\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/distributed/client.py in _gather(self, futures, errors, direct, local_worker)\r\n   1811                             exc = CancelledError(key)\r\n   1812                         else:\r\n-> 1813                             raise exception.with_traceback(traceback)\r\n   1814                         raise exc\r\n   1815                     if errors == \"skip\":\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/dask/dataframe/groupby.py in _nunique_df_chunk()\r\n    509         if isinstance(levels, list):\r\n    510             grouped.index = pd.MultiIndex.from_arrays(\r\n--> 511                 [grouped.index.get_level_values(level=level) for level in levels]\r\n    512             )\r\n    513         else:\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/dask/dataframe/groupby.py in <listcomp>()\r\n    509         if isinstance(levels, list):\r\n    510             grouped.index = pd.MultiIndex.from_arrays(\r\n--> 511                 [grouped.index.get_level_values(level=level) for level in levels]\r\n    512             )\r\n    513         else:\r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/pandas/core/indexes/base.py in _get_level_values()\r\n   1805         Index(['a', 'b', 'c'], dtype='object')\r\n   1806         \"\"\"\r\n-> 1807         self._validate_index_level(level)\r\n   1808         return self\r\n   1809 \r\n\r\n~/anaconda3/envs/epri/lib/python3.9/site-packages/pandas/core/indexes/base.py in _validate_index_level()\r\n   1724                 )\r\n   1725             elif level > 0:\r\n-> 1726                 raise IndexError(\r\n   1727                     f\"Too many levels: Index has only 1 level, not {level + 1}\"\r\n   1728                 )\r\n\r\nIndexError: Too many levels: Index has only 1 level, not 2\r\n```\r\n\r\nI have no idea how to create a minimal example to reproduce these errors. I only know that same functions work in pandas and I often encounter errors when running anything like `groupby(by='something')['col_name'].nunique()` in Dask... Probably I can try create an example when I have spare time.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/922351387/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/923097832",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-923097832",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 923097832,
        "node_id": "IC_kwDOAbcwm843BVro",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-20T16:45:52Z",
        "updated_at": "2021-09-20T16:45:52Z",
        "author_association": "MEMBER",
        "body": "Yeah there are definitely still some issues with groupby.nunique particularly when paired with recent versions of pandas.\r\n\r\nYou can always try this workaround https://github.com/dask/dask/issues/4869#issuecomment-610912769",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/923097832/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1502620874",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-1502620874",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 1502620874,
        "node_id": "IC_kwDOAbcwm85ZkCzK",
        "user": {
            "login": "acu192",
            "id": 9354539,
            "node_id": "MDQ6VXNlcjkzNTQ1Mzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9354539?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acu192",
            "html_url": "https://github.com/acu192",
            "followers_url": "https://api.github.com/users/acu192/followers",
            "following_url": "https://api.github.com/users/acu192/following{/other_user}",
            "gists_url": "https://api.github.com/users/acu192/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acu192/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acu192/subscriptions",
            "organizations_url": "https://api.github.com/users/acu192/orgs",
            "repos_url": "https://api.github.com/users/acu192/repos",
            "events_url": "https://api.github.com/users/acu192/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acu192/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-11T03:01:15Z",
        "updated_at": "2023-04-11T03:01:15Z",
        "author_association": "NONE",
        "body": "I'm curious what the resolution of this was. I did a quick search in the changelog but don't see anything.\r\n\r\n@bluecoconut when/where was this fixed?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1502620874/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1502646307",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-1502646307",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 1502646307,
        "node_id": "IC_kwDOAbcwm85ZkJAj",
        "user": {
            "login": "bluecoconut",
            "id": 916073,
            "node_id": "MDQ6VXNlcjkxNjA3Mw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/916073?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bluecoconut",
            "html_url": "https://github.com/bluecoconut",
            "followers_url": "https://api.github.com/users/bluecoconut/followers",
            "following_url": "https://api.github.com/users/bluecoconut/following{/other_user}",
            "gists_url": "https://api.github.com/users/bluecoconut/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bluecoconut/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bluecoconut/subscriptions",
            "organizations_url": "https://api.github.com/users/bluecoconut/orgs",
            "repos_url": "https://api.github.com/users/bluecoconut/repos",
            "events_url": "https://api.github.com/users/bluecoconut/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bluecoconut/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-11T03:45:57Z",
        "updated_at": "2023-04-11T03:45:57Z",
        "author_association": "CONTRIBUTOR",
        "body": "oh sorry @acu192 -- not sure if it's fixed or not, I haven't used dask in years at this point...\r\n\r\nI was closing because I don't have context on this anymore after 3 years -- and no changes in so long so it felt \"inactive\" / seemed unlikely that anyone was working or worrying about this.\r\n\r\nMight be that this isn't good github etiquette (to close 'old' issues) -- tbh, I'm not sure. Should I keep this open? Your fast jump on this implies this issue is clearly still being felt. I think the best way to get attention on it would be to open a new Issue / get some fresh eyes? Or should I just re-open and let this sit?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1502646307/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1502654160",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-1502654160",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 1502654160,
        "node_id": "IC_kwDOAbcwm85ZkK7Q",
        "user": {
            "login": "acu192",
            "id": 9354539,
            "node_id": "MDQ6VXNlcjkzNTQ1Mzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9354539?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/acu192",
            "html_url": "https://github.com/acu192",
            "followers_url": "https://api.github.com/users/acu192/followers",
            "following_url": "https://api.github.com/users/acu192/following{/other_user}",
            "gists_url": "https://api.github.com/users/acu192/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/acu192/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/acu192/subscriptions",
            "organizations_url": "https://api.github.com/users/acu192/orgs",
            "repos_url": "https://api.github.com/users/acu192/repos",
            "events_url": "https://api.github.com/users/acu192/events{/privacy}",
            "received_events_url": "https://api.github.com/users/acu192/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-04-11T04:00:27Z",
        "updated_at": "2023-04-11T04:00:49Z",
        "author_association": "NONE",
        "body": "I ran into this issue a few months ago, so I subscribed here to track its progress. So I can say it is _still_ an issue in Dask.\r\n\r\nI'd suggest leaving it open. Even if it just _sits_, it at least signals to new people like me that the issue is ... still an issue, so we know we're not crazy when we come across it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1502654160/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1782715400",
        "html_url": "https://github.com/dask/dask/issues/4869#issuecomment-1782715400",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4869",
        "id": 1782715400,
        "node_id": "IC_kwDOAbcwm85qQhQI",
        "user": {
            "login": "tbazadaykin",
            "id": 6541960,
            "node_id": "MDQ6VXNlcjY1NDE5NjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6541960?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tbazadaykin",
            "html_url": "https://github.com/tbazadaykin",
            "followers_url": "https://api.github.com/users/tbazadaykin/followers",
            "following_url": "https://api.github.com/users/tbazadaykin/following{/other_user}",
            "gists_url": "https://api.github.com/users/tbazadaykin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tbazadaykin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tbazadaykin/subscriptions",
            "organizations_url": "https://api.github.com/users/tbazadaykin/orgs",
            "repos_url": "https://api.github.com/users/tbazadaykin/repos",
            "events_url": "https://api.github.com/users/tbazadaykin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tbazadaykin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-10-27T10:58:53Z",
        "updated_at": "2023-10-28T13:10:41Z",
        "author_association": "NONE",
        "body": "Looks like this approach is much more effective (at least for integer values) than with drop_duplicates\r\n\r\n```\r\nimport dask.dataframe as dd\r\n\r\nnunique_ext = dd.groupby.Aggregation(\r\n  name='nunique_ext',\r\n  chunk=lambda s: s.agg(list), \r\n  agg=lambda s: s.sum(),  # yep, sum() can concatenate lists\r\n  finalize=lambda s: s.apply(lambda v: len(set(v))),  # my intuition tells me that this can be done more efficiently, but I don\u2019t know how\r\n)\r\n\r\ndf.groupby('University_ID').Object_ID.agg(nunique_ext, split_out=4)\r\n```\r\n\r\n**UPD:**\r\nThis version is faster and more memory efficient\r\n\r\n```\r\nnunique_ext = dd.groupby.Aggregation(\r\n    name='nunique_ext',\r\n    chunk=lambda s: s.apply(np.array),\r\n    agg=lambda s: s.apply(list).apply(np.concatenate),\r\n    finalize=lambda s: s.apply(np.unique).apply(len)\r\n)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1782715400/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]