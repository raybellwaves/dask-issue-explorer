[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/722640640",
        "html_url": "https://github.com/dask/dask/issues/6811#issuecomment-722640640",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6811",
        "id": 722640640,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyMjY0MDY0MA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-05T20:58:27Z",
        "updated_at": "2020-11-05T20:58:27Z",
        "author_association": "MEMBER",
        "body": "IIRC, pandas has gone back and forth on both of these in recent releases. Can you check to see what the behavior is on our oldest supported version?\r\n\r\nIdeally we would match whatever version of pandas is installed, but I'm also OK with just matching the most recent.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/722640640/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/920489961",
        "html_url": "https://github.com/dask/dask/issues/6811#issuecomment-920489961",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6811",
        "id": 920489961,
        "node_id": "IC_kwDOAbcwm8423Y_p",
        "user": {
            "login": "ncclementi",
            "id": 7526622,
            "node_id": "MDQ6VXNlcjc1MjY2MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7526622?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ncclementi",
            "html_url": "https://github.com/ncclementi",
            "followers_url": "https://api.github.com/users/ncclementi/followers",
            "following_url": "https://api.github.com/users/ncclementi/following{/other_user}",
            "gists_url": "https://api.github.com/users/ncclementi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ncclementi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ncclementi/subscriptions",
            "organizations_url": "https://api.github.com/users/ncclementi/orgs",
            "repos_url": "https://api.github.com/users/ncclementi/repos",
            "events_url": "https://api.github.com/users/ncclementi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ncclementi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-16T00:47:46Z",
        "updated_at": "2021-09-16T00:47:46Z",
        "author_association": "MEMBER",
        "body": "Checking in here: \r\nAs of Dask 2021.08.1  and pandas 1.3.2 the example above follows this behavior.\r\n```python\r\ndf = pd.DataFrame({\"a\": [np.timedelta64(1, 'D'), \r\nnp.timedelta64(2, 'D'), \r\nnp.timedelta64(3, 'D')], \"b\": [1,2,3]})\r\nddf = dd.from_pandas(df, 2)\r\n \r\ndf.mean()\r\n```\r\n```\r\na    2 days 00:00:00\r\nb                2.0\r\ndtype: object\r\n```\r\n\r\n```python\r\nddf.mean().compute()\r\n```\r\n```\r\nb    2.0\r\ndtype: float64\r\n```\r\n\r\n```python\r\ndf.std()\r\n```\r\n```\r\na    1 days 00:00:00\r\nb                1.0\r\ndtype: object\r\n```\r\n\r\n```python\r\nddf.std().compute()\r\n```\r\n```\r\n...lib/python3.9/site-packages/dask/dataframe/core.py:1962: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\r\n  meta = self._meta_nonempty.var(axis=axis, skipna=skipna)\r\n  \r\nb    1.0\r\ndtype: float64  \r\n```\r\n\r\n```python\r\ndf.a.mean()\r\n```\r\n```\r\nTimedelta('2 days 00:00:00')\r\n```\r\n\r\n```python\r\nddf.a.std().compute()\r\n```\r\n\r\n```python\r\nTypeError                                 Traceback (most recent call last)\r\n/var/folders/1y/ydztfpnd11b6qmvbb8_x56jh0000gn/T/ipykernel_8470/2452615788.py in <module>\r\n----> 1 ddf.a.std().compute()\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/dask/dataframe/core.py in wrapper(self, *args, **kwargs)\r\n     98         elif kwargs.get(\"numeric_only\") is True:\r\n     99             self = self._get_numeric_data()\r\n--> 100         return func(self, *args, **kwargs)\r\n    101 \r\n    102     return wrapper\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/dask/dataframe/core.py in std(self, axis, skipna, ddof, split_every, dtype, out, numeric_only)\r\n   2120             return handle_out(out, result)\r\n   2121         else:\r\n-> 2122             v = self.var(skipna=skipna, ddof=ddof, split_every=split_every)\r\n   2123             name = self._token_prefix + \"std\"\r\n   2124             result = map_partitions(\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/dask/dataframe/core.py in wrapper(self, *args, **kwargs)\r\n     98         elif kwargs.get(\"numeric_only\") is True:\r\n     99             self = self._get_numeric_data()\r\n--> 100         return func(self, *args, **kwargs)\r\n    101 \r\n    102     return wrapper\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/dask/dataframe/core.py in var(self, axis, skipna, ddof, split_every, dtype, out, numeric_only)\r\n   1960         axis = self._validate_axis(axis)\r\n   1961         _raise_if_object_series(self, \"var\")\r\n-> 1962         meta = self._meta_nonempty.var(axis=axis, skipna=skipna)\r\n   1963         if axis == 1:\r\n   1964             result = map_partitions(\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/pandas/core/generic.py in var(self, axis, skipna, level, ddof, numeric_only, **kwargs)\r\n  10604             **kwargs,\r\n  10605         ):\r\n> 10606             return NDFrame.var(self, axis, skipna, level, ddof, numeric_only, **kwargs)\r\n  10607 \r\n  10608         setattr(cls, \"var\", var)\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/pandas/core/generic.py in var(self, axis, skipna, level, ddof, numeric_only, **kwargs)\r\n  10311         self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\r\n  10312     ):\r\n> 10313         return self._stat_function_ddof(\r\n  10314             \"var\", nanops.nanvar, axis, skipna, level, ddof, numeric_only, **kwargs\r\n  10315         )\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/pandas/core/generic.py in _stat_function_ddof(self, name, func, axis, skipna, level, ddof, numeric_only, **kwargs)\r\n  10297                 name, axis=axis, level=level, skipna=skipna, ddof=ddof\r\n  10298             )\r\n> 10299         return self._reduce(\r\n  10300             func, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\r\n  10301         )\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/pandas/core/series.py in _reduce(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\r\n   4381         if isinstance(delegate, ExtensionArray):\r\n   4382             # dispatch to ExtensionArray interface\r\n-> 4383             return delegate._reduce(name, skipna=skipna, **kwds)\r\n   4384 \r\n   4385         else:\r\n\r\n~/mambaforge/envs/dask-mini-tutorial/lib/python3.9/site-packages/pandas/core/arrays/_mixins.py in _reduce(self, name, skipna, **kwargs)\r\n    258         else:\r\n    259             msg = f\"'{type(self).__name__}' does not implement reduction '{name}'\"\r\n--> 260             raise TypeError(msg)\r\n    261 \r\n    262     def _wrap_reduction_result(self, axis: int | None, result):\r\n\r\nTypeError: 'TimedeltaArray' does not implement reduction 'var'\r\n```\r\n@TomAugspurger is this the behavior we should expect, or we need to re-visit the types returned? ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/920489961/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/920947014",
        "html_url": "https://github.com/dask/dask/issues/6811#issuecomment-920947014",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6811",
        "id": 920947014,
        "node_id": "IC_kwDOAbcwm8425IlG",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-16T14:20:52Z",
        "updated_at": "2021-09-16T14:20:52Z",
        "author_association": "MEMBER",
        "body": "I think I can answer this one. There are a couple things going on here. I ran into some of them recently when working on #7719. \r\n\r\n1. Pandas has decided that timedelta and datetime columns should be treated as numeric. Dask hasn't quite kept up, so when you call `.mean` or `.std` on a whole dataframe, dask will drop time columns.\r\n2. There are no Dask implementations of std for timedelta, and no implementation of mean or std for datetime. This is because internally Dask needs `var` and `sum` to support `std` and `mean` respectively and some of those internal methods aren't supported for time.\r\n3. For the type promotion from integer to float on mean, dask can't really know what the output dtype of mean is. It depends on both the number of rows and the contents of those rows, so Dask just says it's always float. \r\n\r\nIn terms of how to move forward: for 1, we should treat time columns as numeric wherever possible, for 2 we should raise `NotImplemented` until we have the chance to go implement those methods, and for 3 I think that's pretty much the best that dask can do.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/920947014/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]