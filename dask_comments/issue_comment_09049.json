[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1120012442",
        "html_url": "https://github.com/dask/dask/issues/9049#issuecomment-1120012442",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9049",
        "id": 1120012442,
        "node_id": "IC_kwDOAbcwm85Cwgia",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-06T21:14:21Z",
        "updated_at": "2022-05-06T21:14:21Z",
        "author_association": "MEMBER",
        "body": "I feel like `from_array` does *most* of this, where instead of implementing a callable that produces a chunk, you implement a `__getitem__`. The major difference is that `from_map` is a bit more flexible in that it can take a list of iterables which will be broadcast against the callable, whereas `__getitem__` only takes block indices.  But I'm not sure that difference is insurmountable, since the arraylike could keep a dictionary mapping a block tuple to whatever you want (cf. `BlockwiseDepDict`).\r\n\r\nIs there something that one could do with `from_map` that we couldn't do with `from_array`? Or would it mostly be a convenience function?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1120012442/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1120025251",
        "html_url": "https://github.com/dask/dask/issues/9049#issuecomment-1120025251",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9049",
        "id": 1120025251,
        "node_id": "IC_kwDOAbcwm85Cwjqj",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-06T21:36:47Z",
        "updated_at": "2022-05-06T21:36:47Z",
        "author_association": "MEMBER",
        "body": "A common conversation that I and others have with users of Dask (Array or DataFrame) is, how do I get my data into Dask?\r\n\r\n`from_array` is fine for the Zarr user, but there are still users out there that have a directory of `*` (TIFFs, CSVs, some custom format, etc.) that need some help getting things into Dask.\r\n\r\nUsually we mention `delayed` and point them to [this blogpost]( https://blog.dask.org/2019/06/20/load-image-data ), which is good for getting them started. Though going through `delayed` can be a bit slower and take a bit more work for the user. It also doesn't benefit from HLGs (unless I'm missing something).\r\n\r\nThe code in Dask-Image linked above tried to improve on this by \"using\" `map_blocks` to coerce an array of filenames into the loaded array data, which gets pretty close to what an array user might want in terms of a reasonably performant loading path.\r\n\r\nHowever that code is a bit fiddly and complex for the average user. Ideally they wouldn't need to know about those internals. Having some kind of `from_map_blocks` might get us a lot closer to what a user would want.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1120025251/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1120046186",
        "html_url": "https://github.com/dask/dask/issues/9049#issuecomment-1120046186",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9049",
        "id": 1120046186,
        "node_id": "IC_kwDOAbcwm85Cwoxq",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-06T22:11:22Z",
        "updated_at": "2022-05-06T22:11:22Z",
        "author_association": "MEMBER",
        "body": "> It also doesn't benefit from HLGs (unless I'm missing something).\r\n\r\nRight, though `from_array` does now use HLGs, cf. #7417. What I'm proposing is (I think) pretty similar to `from_map`, but it already exists today in `dask.array`. Something like the following (pseudocode since I've changed `_map_read_frame`):\r\n\r\n```python\r\nfrom dask.layers import AraySlicesDep\r\n\r\nclass Image:\r\n    def __init__(filenames, chunks):\r\n        self.slices = ArraySlicesDep(chunks)\r\n        self.filenames = filenames\r\n\r\n    def __getitem__(chunk):\r\n        return _map_read_frame(self.filenames[chunk], array_slice=self.slices[chunk])\r\n\r\nimage = Image(filenames, chunks)\r\narr = da.from_array(image)\r\n```\r\n\r\nThis is similar to providing a callable to `from_map`, is lazy, and works with HLGs. There's some trickery around reproducing the `block-info` data using `ArraySlicesDep`, but that's a problem that would need to be solved with `from_map` as well (we discussed whether `BlockwiseDep` should be an acceptable input to `from_map` in #8911, and decided to not do it for the time being).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1120046186/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1120127824",
        "html_url": "https://github.com/dask/dask/issues/9049#issuecomment-1120127824",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9049",
        "id": 1120127824,
        "node_id": "IC_kwDOAbcwm85Cw8tQ",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-07T04:01:35Z",
        "updated_at": "2022-05-07T04:01:35Z",
        "author_association": "MEMBER",
        "body": "Interesting thanks for composing that example \ud83d\ude4f\r\n\r\nIt would be nice if we baked this class into Dask and then took a handful of inputs to a function instead. Maybe we could handle some of the selection mapping internally for them as well.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1120127824/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1123423822",
        "html_url": "https://github.com/dask/dask/issues/9049#issuecomment-1123423822",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9049",
        "id": 1123423822,
        "node_id": "IC_kwDOAbcwm85C9hZO",
        "user": {
            "login": "clbarnes",
            "id": 8995328,
            "node_id": "MDQ6VXNlcjg5OTUzMjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8995328?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/clbarnes",
            "html_url": "https://github.com/clbarnes",
            "followers_url": "https://api.github.com/users/clbarnes/followers",
            "following_url": "https://api.github.com/users/clbarnes/following{/other_user}",
            "gists_url": "https://api.github.com/users/clbarnes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/clbarnes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/clbarnes/subscriptions",
            "organizations_url": "https://api.github.com/users/clbarnes/orgs",
            "repos_url": "https://api.github.com/users/clbarnes/repos",
            "events_url": "https://api.github.com/users/clbarnes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/clbarnes/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-11T09:26:12Z",
        "updated_at": "2022-05-11T09:28:57Z",
        "author_association": "NONE",
        "body": "> from_array is fine for the Zarr user, but there are still users out there that have a directory of * (TIFFs, CSVs, some custom format, etc.) that need some help getting things into Dask.\r\n\r\nAs it happens I was doing this yesterday - trying to get dask to sit over a stack of images. We are gradually migrating from directories of JPEGs to zarr/N5, so I wrote a zarr store which wraps around one of our common [JPEG stack structures](https://catmaid.readthedocs.io/en/stable/tile_sources.html#file-based-image-stack-with-zoom-level-directories). It's a bit of a hack but not too inconvenient; may be useful to someone who comes across this issue before Dask gets the functionality itself.\r\n\r\n```python\r\nimport typing as tp\r\nfrom pathlib import Path\r\nimport json\r\n\r\nfrom PIL import Image\r\nimport zarr\r\nimport numpy as np\r\n\r\nFMT = \"{z}/{scale}/{y}_{x}{ext}\"\r\n\r\nzarr_meta = {\r\n    \"zarr_format\": 2,\r\n    # \"shape\": None,  # to fill\r\n    # \"chunks\": None,  # to fill\r\n    \"dtype\": \"|u1\",\r\n    \"compressor\": None,\r\n    # \"fill_value\": None,  # to fill\r\n    \"order\": \"C\",\r\n    \"filters\": None,\r\n    \"dimension_separator\": \".\",\r\n}\r\n\r\nclass ImageStore4(zarr._storage.store.BaseStore):\r\n    is_listable = False\r\n    is_writable = False\r\n    is_erasable = False\r\n\r\n    def __init__(\r\n        self,\r\n        root: Path,\r\n        shape: tp.Tuple[int, int, int],\r\n        im_height_width: tp.Tuple[int, int],\r\n        scale: int = 0,\r\n        ext: str = \".jpg\",\r\n        fill_value: int = 0,\r\n        attrs: tp.Optional[dict] = None,\r\n    ):\r\n        self.root = Path(root)\r\n        meta = zarr_meta.copy()\r\n        if len(shape) != 3:\r\n            raise ValueError(\"Shape must have 3 items\")\r\n        if len(im_height_width) != 2:\r\n            raise ValueError(\"Image height/width must have 2 items\")\r\n        meta[\"shape\"] = shape\r\n        meta[\"chunks\"] = (1, *im_height_width)\r\n        meta[\"fill_value\"] = fill_value\r\n        self.meta = json.dumps(meta).encode()\r\n        self.scale = scale\r\n        self.ext = ext\r\n        self.attrs = json.dumps(attrs or dict()).encode()\r\n\r\n    def __getitem__(self, key):\r\n        if \"/\" in key:\r\n            raise ValueError(f\"{type(self)} does not support groups\")\r\n        if key == \".zattrs\":\r\n            return self.attrs\r\n        if key == \".zarray\":\r\n            return self.meta\r\n        z, y, x = key.split(\".\")\r\n        path = self.root / FMT.format(z=z, scale=self.scale, y=y, x=x, ext=self.ext)\r\n        try:\r\n            img = Image.open(path)\r\n        except FileNotFoundError:\r\n            raise KeyError()\r\n        return np.asarray(img).tobytes()\r\n\r\n    def __delitem__(self, _):\r\n        raise NotImplementedError(\"Store is not erasable\")\r\n\r\n    def __iter__(self):\r\n        raise NotImplementedError(\"Store is not listable\")\r\n\r\n    def __len__(self):\r\n        raise NotImplementedError(\"Store is not listable\")\r\n\r\n    def __setitem__(self):\r\n        raise NotImplementedError(\"Store is not writable\")\r\n```\r\n\r\nThe NotImplementedError boilerplate presumably won't be necessary once zarr v3 comes about. Not having to deal with zarr metadata and being able to pass a function to do basically what `__getitem__` does here would be more convenient, though.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1123423822/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1125279512",
        "html_url": "https://github.com/dask/dask/issues/9049#issuecomment-1125279512",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9049",
        "id": 1125279512,
        "node_id": "IC_kwDOAbcwm85DEmcY",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-12T18:03:33Z",
        "updated_at": "2022-05-12T18:03:33Z",
        "author_association": "MEMBER",
        "body": "https://github.com/ska-sa/katdal/pull/351 is maybe an interesting thread to read about some interface desires for custom Array creation.\r\n\r\n> It would be nice if we baked this class into Dask and then took a handful of inputs to a function instead. Maybe we could handle some of the selection mapping internally for them as well.\r\n\r\nAgreed. I think you'd want `da.from_map` to be, conceptually, syntactic sugar around `da.from_array` (though it might not actually call `from_array` internally, and instead go straight to blockwise).\r\n\r\nBut I think it's quite common to have, instead of an array-like class, just:\r\n1. a function that, given a thing to load, loads it\r\n2. a list/ndarray of things to load\r\n\r\nYou can manage this today via either a wrapper class and `from_array`, or object array -> dask array -> `map_blocks(loader_function, ...)`. But I think we could make a much easier interface that does this for you.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1125279512/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]