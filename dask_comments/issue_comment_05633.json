[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/558190161",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-558190161",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 558190161,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODE5MDE2MQ==",
        "user": {
            "login": "hadim",
            "id": 528003,
            "node_id": "MDQ6VXNlcjUyODAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/528003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hadim",
            "html_url": "https://github.com/hadim",
            "followers_url": "https://api.github.com/users/hadim/followers",
            "following_url": "https://api.github.com/users/hadim/following{/other_user}",
            "gists_url": "https://api.github.com/users/hadim/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hadim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hadim/subscriptions",
            "organizations_url": "https://api.github.com/users/hadim/orgs",
            "repos_url": "https://api.github.com/users/hadim/repos",
            "events_url": "https://api.github.com/users/hadim/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hadim/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-25T14:52:36Z",
        "updated_at": "2019-11-25T14:52:36Z",
        "author_association": "NONE",
        "body": "In the meantime, is that possible to access the raw Parquet metadata from a Dask dataframe? So I should be able to compute this myself (and possibly submitting a PR).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/558190161/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/558228148",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-558228148",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 558228148,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIyODE0OA==",
        "user": {
            "login": "simaster123",
            "id": 36990204,
            "node_id": "MDQ6VXNlcjM2OTkwMjA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/36990204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simaster123",
            "html_url": "https://github.com/simaster123",
            "followers_url": "https://api.github.com/users/simaster123/followers",
            "following_url": "https://api.github.com/users/simaster123/following{/other_user}",
            "gists_url": "https://api.github.com/users/simaster123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simaster123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simaster123/subscriptions",
            "organizations_url": "https://api.github.com/users/simaster123/orgs",
            "repos_url": "https://api.github.com/users/simaster123/repos",
            "events_url": "https://api.github.com/users/simaster123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simaster123/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-25T16:17:32Z",
        "updated_at": "2019-11-25T16:20:14Z",
        "author_association": "NONE",
        "body": "Personally, I access the Parquet metadata using fastparquet directly, not Dask.  As an example:\r\n\r\n```\r\npf = fastparquet.ParquetFile(path_to_parquet_file)\r\nall_stats = pf.statistics.copy()\r\nall_info = pf.info.copy()\r\n```\r\n\r\nThere's a lot of data in the metadata, so it's worth playing around with.\r\n\r\nI further note that you can put the fastparquet operations in a delayed function to read the parquet metadata in parallel if you have a lot of files.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/558228148/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/558228192",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-558228192",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 558228192,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIyODE5Mg==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-25T16:17:38Z",
        "updated_at": "2020-02-27T01:21:57Z",
        "author_association": "MEMBER",
        "body": "We've had this discussion in a few places, but I'm not finding them at the moment.\r\n\r\nThe short-version is that adding new pieces of metadata to Dask's collections is costly maintenance-wise, since it affects many little things in many places. We're not opposed to this in principle, but it's worth stating that up front.\r\n\r\nFWIW, I think that this is exactly the case we'd first introduce length-aware DataFrame partitions. But the details are a tricky. If you're interested in pursing this, I think we would need\r\n\r\n1. A proposal on how this will be stored on DataFrame / Series / Index (`dask.array.Array` stores `._chunks` as a tuple\r\n2. A way to pass through this information when creating these objects\r\n3. A proposal on how methods can use this information (e.g. `__len__` can be an example). This will likely need to describe how things fallback to the common unkown-length case (is that automatic? Can that be configured to error?).\r\n4. A proposal for how methods can indicate that they're shape-preserving. e.g.` DataFrame.rename(columns=...)` will not affect the rows, so the lengths are preserved. But `DataFrame[mask]` would have to invalidate the rows.\r\n\r\nSo not insurmountable, but a good amount of work.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/558228192/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/558229457",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-558229457",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 558229457,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIyOTQ1Nw==",
        "user": {
            "login": "hadim",
            "id": 528003,
            "node_id": "MDQ6VXNlcjUyODAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/528003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hadim",
            "html_url": "https://github.com/hadim",
            "followers_url": "https://api.github.com/users/hadim/followers",
            "following_url": "https://api.github.com/users/hadim/following{/other_user}",
            "gists_url": "https://api.github.com/users/hadim/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hadim/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hadim/subscriptions",
            "organizations_url": "https://api.github.com/users/hadim/orgs",
            "repos_url": "https://api.github.com/users/hadim/repos",
            "events_url": "https://api.github.com/users/hadim/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hadim/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-25T16:20:23Z",
        "updated_at": "2019-11-25T16:20:23Z",
        "author_association": "NONE",
        "body": "@TomAugspurger: thanks for the details. @simaster123's solution is good enough for my use case.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/558229457/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/558230586",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-558230586",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 558230586,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIzMDU4Ng==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-25T16:23:06Z",
        "updated_at": "2019-11-25T16:23:06Z",
        "author_association": "MEMBER",
        "body": "I've repurposed this to be a general issue for length-aware dataframes, so that we can link to it from elsewhere. Edited your original post to reflect that.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/558230586/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/558230772",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-558230772",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 558230772,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIzMDc3Mg==",
        "user": {
            "login": "simaster123",
            "id": 36990204,
            "node_id": "MDQ6VXNlcjM2OTkwMjA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/36990204?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simaster123",
            "html_url": "https://github.com/simaster123",
            "followers_url": "https://api.github.com/users/simaster123/followers",
            "following_url": "https://api.github.com/users/simaster123/following{/other_user}",
            "gists_url": "https://api.github.com/users/simaster123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simaster123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simaster123/subscriptions",
            "organizations_url": "https://api.github.com/users/simaster123/orgs",
            "repos_url": "https://api.github.com/users/simaster123/repos",
            "events_url": "https://api.github.com/users/simaster123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simaster123/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-25T16:23:30Z",
        "updated_at": "2019-11-25T16:23:30Z",
        "author_association": "NONE",
        "body": "As an example to delay the parquet read to utilize dask's parallel processing:\r\n\r\n```\r\n\r\n@dask.delayed\r\ndef read_pf(path_to_parquet_file):\r\n   pf = fastparquet.ParquetFile(path_to_parquet_file)\r\n   all_stats = pf.statistics.copy()\r\n   all_info = pf.info.copy()\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/558230772/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/558251171",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-558251171",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 558251171,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODI1MTE3MQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-11-25T17:10:36Z",
        "updated_at": "2019-11-25T18:28:46Z",
        "author_association": "MEMBER",
        "body": "Short term I recommend that we improve the situation by defining a `DataFrame.__len__` method that calls len on one of its' columns.   This should cheaply improve things in a common case.\r\n\r\n```python\r\ndef __len__(self):\r\n    return len(self[self.columns[0]])\r\n```\r\n\r\nFor additional improvements we might ...\r\n\r\n1.  Worry about dataframes with no columns\r\n2.  Choose the column with the smallest dtype itemsize",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/558251171/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/802931921",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-802931921",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 802931921,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjkzMTkyMQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-19T15:51:39Z",
        "updated_at": "2021-03-19T15:51:39Z",
        "author_association": "MEMBER",
        "body": "This method should be faster than when this issue was originally posted since dask is now looking at only one column. The parquet also has specially handling for when the len metadata is available.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/802931921/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1068219989",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-1068219989",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 1068219989,
        "node_id": "IC_kwDOAbcwm84_q75V",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-15T16:53:16Z",
        "updated_at": "2022-03-15T16:53:16Z",
        "author_association": "MEMBER",
        "body": "Starting in #8517 dask is calculating the len of the partitions when creating divisions at least for pre-sorted indexes. It seems like a shame to drop this metadata on the floor, when we could instead keep track of it. I know there is a larger item of pursuing high level expressions, but that work seems to be stalled so I'm wondering if we might be able to get some nice wins out of a simpler solution like just keeping track of len when we have it.\r\n\r\nThere have been several issues that have come up recently that would benefit from keeping track of len. Here are some that are at the top of my brain:\r\n\r\n- how to make non-aggregation groupbys work better. It seems like one good solution is to use a globally unique index. That type of index would be trivial to create if we had lens per-partition.\r\n- how to handle empty partitions. Should they be allowed? What about duplicate divisions?\r\n\r\nRelated issues:\r\n - #8517 \r\n - https://github.com/dask/dask/pull/8806\r\n - https://github.com/dask/dask/pull/7912\r\n - https://github.com/dask/dask/issues/8800\r\n - https://github.com/dask/dask/pull/8659#issuecomment-1037266953\r\n - https://github.com/dask/dask/issues/8749\r\n\r\n## Proposal 1\r\n\r\nSince Tom laid out some questions above, I'll just go through them one by one:\r\n\r\n> 1. A proposal on how this will be stored on DataFrame / Series / Index (`dask.array.Array` stores `._chunks` as a tuple)\r\n\r\nCreate a new attribute on dataframes (maybe called `partition_lens`) that includes a tuple of len for every partition.\r\nIf `partition_lens` is not known then the attribute will be a tuple of `None` same as `divisions`.\r\n\r\n> 2. A way to pass through this information when creating these objects\r\n\r\nThis would look pretty much how we do `divisions` now. We might want it to be part of creation methods eventually, but I think this can be added gradually. We can also add an explicit method (like `compute_chunk_sizes` and `compute_current_divisions`) that is explicitly eager and does the work of computing the lens. This might just look like renaming and altering `compute_current_divisions` to set both `divisions` and `partition_lens` on the dataframe.\r\n\r\n> 3. A proposal on how methods can use this information (e.g. `__len__` can be an example). This will likely need to describe how things fallback to the common unknown-length case (is that automatic? Can that be configured to error?).\r\n\r\nFor the case of len this means that the method can be rewritten like:\r\n\r\n```python\r\n\r\n@property\r\ndef known_partition_lens(self):\r\n    return len(self.partition_lens) > 0 and self.partition_lens[0] is not None\r\n\r\ndef __len__(self):\r\n    if self.known_partition_lens:\r\n        return sum(partition_lens)\r\n    return self.reduction(\r\n        len, np.sum, token=\"len\", meta=int, split_every=False\r\n    ).compute()\r\n```\r\n\r\nIf we want to let people enforce that `partition_lens` be defined for certain cases we can add a config option and a standardized message that looks a lot like the one that array has for chunksize. \r\n\r\n```python\r\n\r\ndef __len__(self):\r\n    if self.known_partition_lens:\r\n        return sum(partition_lens)\r\n    elif dask.config.get(\"enforce_partition_lens\", False):\r\n        raise ValueError(f\"Dataframe partition lens are unknown. {unknown_partition_lens_message}\")\r\n    return self.reduction(\r\n        len, np.sum, token=\"len\", meta=int, split_every=False\r\n    ).compute()\r\n```\r\n\r\n> 4. A proposal for how methods can indicate that they're shape-preserving. e.g.` DataFrame.rename(columns=...)` will not affect the rows, so the lengths are preserved. But `DataFrame[mask]` would have to invalidate the rows.\r\n\r\nThe way that divisions does this is not very formalized. Basically when setting up the output object we either copy the divisions over, transform them, or clear them. To roll this out slowly we would start by clearing `partition_lens` in the majority of operations, then we can gradually add in copies or transformations in places where they make sense.\r\n\r\nping @jcrist, @ian-r-rose, @scharlottej13, @gjoseph92, @rjzamora all of whom I've had bits of conversation with around this.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1068219989/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1068407344",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-1068407344",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 1068407344,
        "node_id": "IC_kwDOAbcwm84_rpow",
        "user": {
            "login": "ryan-williams",
            "id": 465045,
            "node_id": "MDQ6VXNlcjQ2NTA0NQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/465045?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryan-williams",
            "html_url": "https://github.com/ryan-williams",
            "followers_url": "https://api.github.com/users/ryan-williams/followers",
            "following_url": "https://api.github.com/users/ryan-williams/following{/other_user}",
            "gists_url": "https://api.github.com/users/ryan-williams/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ryan-williams/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ryan-williams/subscriptions",
            "organizations_url": "https://api.github.com/users/ryan-williams/orgs",
            "repos_url": "https://api.github.com/users/ryan-williams/repos",
            "events_url": "https://api.github.com/users/ryan-williams/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ryan-williams/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-15T19:54:45Z",
        "updated_at": "2022-03-15T19:54:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "Just to note, I prototyped `DataFrame.iloc` using a new `partition_sizes` member (analogous to `know_partition_lens` above) in #6661.\r\n\r\nI've been meaning to try to make it more reviewable for over a year, but it may be too bit-rotted to be worth much at this point. Just mentioning in case some of the \"propagating the new `partition_sizes` info through various transformations\" (or perhaps some of the unit-testing code) could be a useful reference here \ud83e\udd37\u200d\u2642\ufe0f..\r\n\r\nIn any case, glad to see more serious attention being paid to this, and great write-up @jsignell, thanks!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1068407344/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1068485597",
        "html_url": "https://github.com/dask/dask/issues/5633#issuecomment-1068485597",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5633",
        "id": 1068485597,
        "node_id": "IC_kwDOAbcwm84_r8vd",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-15T21:22:18Z",
        "updated_at": "2022-03-15T21:22:18Z",
        "author_association": "MEMBER",
        "body": "I think there is a lot of logic in #7912 that could also be used to jump start this work if there is consensus that it is desirable.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1068485597/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]