[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/977250118",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-977250118",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 977250118,
        "node_id": "IC_kwDOAbcwm846P6dG",
        "user": {
            "login": "scharlottej13",
            "id": 8620816,
            "node_id": "MDQ6VXNlcjg2MjA4MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8620816?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scharlottej13",
            "html_url": "https://github.com/scharlottej13",
            "followers_url": "https://api.github.com/users/scharlottej13/followers",
            "following_url": "https://api.github.com/users/scharlottej13/following{/other_user}",
            "gists_url": "https://api.github.com/users/scharlottej13/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scharlottej13/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scharlottej13/subscriptions",
            "organizations_url": "https://api.github.com/users/scharlottej13/orgs",
            "repos_url": "https://api.github.com/users/scharlottej13/repos",
            "events_url": "https://api.github.com/users/scharlottej13/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scharlottej13/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-23T22:58:22Z",
        "updated_at": "2021-11-23T22:58:22Z",
        "author_association": "MEMBER",
        "body": "Thanks for raising this issue and for the examples-- I was able to reproduce what you're describing and was actually about to open an issue after reading your SO post. @ian-r-rose and I had a good discussion on this, and it does seem that at the very least the documentation should be updated to reflect this behavior, but it's possible this could be a bug. @gjoseph92 maybe you have thoughts on this?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/977250118/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/977684046",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-977684046",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 977684046,
        "node_id": "IC_kwDOAbcwm846RkZO",
        "user": {
            "login": "DahnJ",
            "id": 18722560,
            "node_id": "MDQ6VXNlcjE4NzIyNTYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/18722560?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DahnJ",
            "html_url": "https://github.com/DahnJ",
            "followers_url": "https://api.github.com/users/DahnJ/followers",
            "following_url": "https://api.github.com/users/DahnJ/following{/other_user}",
            "gists_url": "https://api.github.com/users/DahnJ/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DahnJ/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DahnJ/subscriptions",
            "organizations_url": "https://api.github.com/users/DahnJ/orgs",
            "repos_url": "https://api.github.com/users/DahnJ/repos",
            "events_url": "https://api.github.com/users/DahnJ/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DahnJ/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-24T09:17:01Z",
        "updated_at": "2021-11-24T09:17:01Z",
        "author_association": "CONTRIBUTOR",
        "body": "@scharlottej13 thanks for looking into it! \r\n\r\nBtw, do please upvote any SO questions you find useful \u2014 it's a minor thing that nonetheless helps the question get recognized and lets the asker know that they're at least being useful :)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/977684046/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/981834180",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-981834180",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 981834180,
        "node_id": "IC_kwDOAbcwm846hZnE",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T17:07:51Z",
        "updated_at": "2021-11-29T17:07:51Z",
        "author_association": "MEMBER",
        "body": "A quick skim of the code: https://github.com/dask/dask/blob/d34a35453403631ebbd86b37a5d21f101f0d7758/dask/dataframe/shuffle.py#L558-L564\r\n\r\nmakes me think that `compute=True` with `shuffle='disk'` causes it to immediately _write_ all the data to disk, but not read any back. What gets left in the graph (run when you compute the resulting `DataFrame`) is reading that data back out of disk.\r\n\r\nIt's not immediately clear to me what the value of this is? Seems like it was added long, long ago in https://github.com/dask/dask/pull/378.\r\n\r\nThe documentation is certainly lacking here, but I'm not sure how much reason there even is to keep the feature around?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/981834180/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/981844584",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-981844584",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 981844584,
        "node_id": "IC_kwDOAbcwm846hcJo",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T17:18:30Z",
        "updated_at": "2021-11-29T17:18:30Z",
        "author_association": "MEMBER",
        "body": "> The documentation is certainly lacking here, but I'm not sure how much reason there even is to keep the feature around?\r\n\r\nI agree that it's not obvious that `compute=` is a useful feature to have. A quick flip through the code finds the same pattern in a few places:\r\n\r\n* DataFrame I/O\r\n* Array I/O\r\n* DataFrame shuffling\r\n* DataFrame head/tail\r\n\r\nI don't think these are hugely valuable options, personally, though unfortunately `compute=True` is the default for a number of the dataframe methods, and they are not obscure, so it would take a long-ish deprecation cycle to remove them.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/981844584/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/982094107",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-982094107",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 982094107,
        "node_id": "IC_kwDOAbcwm846iZEb",
        "user": {
            "login": "DahnJ",
            "id": 18722560,
            "node_id": "MDQ6VXNlcjE4NzIyNTYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/18722560?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DahnJ",
            "html_url": "https://github.com/DahnJ",
            "followers_url": "https://api.github.com/users/DahnJ/followers",
            "following_url": "https://api.github.com/users/DahnJ/following{/other_user}",
            "gists_url": "https://api.github.com/users/DahnJ/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DahnJ/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DahnJ/subscriptions",
            "organizations_url": "https://api.github.com/users/DahnJ/orgs",
            "repos_url": "https://api.github.com/users/DahnJ/repos",
            "events_url": "https://api.github.com/users/DahnJ/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DahnJ/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T22:50:19Z",
        "updated_at": "2021-11-29T22:50:19Z",
        "author_association": "CONTRIBUTOR",
        "body": "Regarding the usefulness:\r\n\r\n\r\n## `compute=True` methods\r\n\r\n> I don't think these are hugely valuable options, personally, though unfortunately compute=True is the default for a number of the dataframe methods, and they are not obscure, so it would take a long-ish deprecation cycle to remove them.\r\n\r\nI haven't gone through them all, but regarding I/O and `head` (and I suspect all methods where `compute` is `True` by default), the `compute` option is absolutely useful to me.\r\n\r\nBy default, `df.head()` computes the head. If I instead want to get a lazy object, perhaps because I want to visualize its computational graph, then I use `compute=False`. I have used that parameter for example in [this question](https://stackoverflow.com/questions/69481758/dask-computes-more-than-necessary-during-groupby).\r\n\r\n\r\n\r\n## Shuffle-related `compute=None` methods\r\n\r\nI am still not 100% sure I understand, but if I understood @gjoseph92 correctly, then  `df.set_index(col, divisions=divisions, shuffle='disk', compute=True)` is essentially akin to `df.set_index(col, divisions=divisions).persist()`, but \"persists\" to disk instead of worker memory? \r\n\r\nIf that's the case, then this does seem useful, but then the API is still somewhat confusing (perhaps should instead be a parameter of `persist` ?)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/982094107/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/982126064",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-982126064",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 982126064,
        "node_id": "IC_kwDOAbcwm846ig3w",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T23:25:03Z",
        "updated_at": "2021-11-29T23:25:03Z",
        "author_association": "MEMBER",
        "body": "Agreed that `compute=True` is certainly useful in other places, `head` being a prime example. I was only referring to `set_index` specifically when I said that. @ian-r-rose for I/O, do you specifically mean O (`to_csv`, etc.)? I'm not seeing a `compute` in `read_csv` or `read_parquet`, but maybe there's another input function I'm not thinking of that does this.\r\n\r\nIf `compute` is actually just used in output functions + `head`/`tail`/introspection-type things, you could generalize and say it's really about making functions that you'd use for their side effects\u2014that feel like they should run immediately\u2014actually run immediately. Output has an obvious side effect; `head`/`tail` is probably most often used for the \"side effect\" of printing the first few rows in your notebook. Compare this to functions that produce some meaningful data you'd pass into other functions... like `set_index`.\r\n\r\n> `df.set_index(col, divisions=divisions, shuffle='disk', compute=True)` is essentially akin to `df.set_index(col, divisions=divisions).persist()`, but \"persists\" to disk instead of worker memory?\r\n\r\n@DahnJ yes, basically. You'd probably use it in a similar way. Being pedantic, it is slightly different, in that you are writing 100% of the data to disk, but in an intermediate form where there's still a little work left to do to get it in its final shuffled form. It's basically writing `[a, b, c, d]`; when you read it back, you still have to do `pd.concat([a, b, c, d])`. But that's all.\r\n\r\nIf there was some more general way to have `persist` write to disk instead of to memory, then I think there'd be no use for the argument in `set_index` at all. As it is now, you could always do `df.set_index(col, divisions=divisions).to_parquet(...)`, and then another `from_parquet` step for reading it back. I'm not sure how performance compares, but I might consider that better practice anyway, since you'd be using a \"real\" format for the data on disk, as opposed to whatever serialization scheme dask is using in the current version that may be incompatible with the next.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/982126064/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/982134374",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-982134374",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 982134374,
        "node_id": "IC_kwDOAbcwm846ii5m",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T23:42:13Z",
        "updated_at": "2021-11-29T23:55:03Z",
        "author_association": "MEMBER",
        "body": "> @ian-r-rose for I/O, do you specifically mean O (`to_csv`, etc.)? I'm not seeing a `compute` in `read_csv` or `read_parquet`, but maybe there's another input function I'm not thinking of that does this.\r\n\r\nYes, I'm referring to \"O\".\r\n\r\n> If `compute` is actually just used in output functions + `head`/`tail`/introspection-type things, you could generalize and say it's really about making functions that you'd use for their side effects\u2014that feel like they should run immediately\u2014actually run immediately. Output has an obvious side effect; `head`/`tail` is probably most often used for the \"side effect\" of printing the first few rows in your notebook. Compare this to functions that produce some meaningful data you'd pass into other functions... like `set_index`.\r\n\r\nI suppose you could make this argument, but it seems pretty slippery to me. I can say that I've been surprised by all of the above having `compute=True` as a default before, and it would make more sense to me to have *all* operations be lazy, and just ask users to do `df.head().compute()`. But I can appreciate that there is a lot of code out there which probably relies on the immediate execution, so it would be a tough sell to change the default.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/982134374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/982137353",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-982137353",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 982137353,
        "node_id": "IC_kwDOAbcwm846ijoJ",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-29T23:49:38Z",
        "updated_at": "2021-11-29T23:49:38Z",
        "author_association": "MEMBER",
        "body": "Agreed, it is a little odd that in this lazy computing library, a handful of functions are not lazy by default. And that that is probably not going to change.\r\n\r\nBack to this one in `set_index` though, do we think the `compute=True` option is worth having? (When you could achieve something similar, but maybe not quite a performant, with a `to_*`+`read_*` if you wanted.) I feel like the choice here is between figuring out how to document this odd option, or going through a deprecation cycle to remove it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/982137353/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/982561115",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-982561115",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 982561115,
        "node_id": "IC_kwDOAbcwm846kLFb",
        "user": {
            "login": "DahnJ",
            "id": 18722560,
            "node_id": "MDQ6VXNlcjE4NzIyNTYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/18722560?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DahnJ",
            "html_url": "https://github.com/DahnJ",
            "followers_url": "https://api.github.com/users/DahnJ/followers",
            "following_url": "https://api.github.com/users/DahnJ/following{/other_user}",
            "gists_url": "https://api.github.com/users/DahnJ/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DahnJ/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DahnJ/subscriptions",
            "organizations_url": "https://api.github.com/users/DahnJ/orgs",
            "repos_url": "https://api.github.com/users/DahnJ/repos",
            "events_url": "https://api.github.com/users/DahnJ/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DahnJ/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-11-30T11:47:44Z",
        "updated_at": "2021-11-30T14:14:20Z",
        "author_association": "CONTRIBUTOR",
        "body": "To me, the interesting question would be whether using this option provides any improvements compared to using `to_parquet`. If not, then I'm in favour of deprecating.\r\n\r\nBased on this quick benchmark, it seems that while the writing is faster, reading is much slower (possibly because of the necessity to still `concat` as mentioned by @gjoseph92 ), resulting in a similar overall performance.\r\n\r\n```python\r\nimport dask\r\n\r\nimport dask.dataframe as dd\r\ndf = dask.datasets.timeseries()\r\n\r\n# `compute=True` \r\n# 8.97s\r\ndfb = df.set_index('name', divisions=('Alice', 'Michael', 'Zelda'), shuffle='disk', compute=True)\r\n# 36.9s\r\ndfb.compute()\r\n\r\n\r\n# `to_parquet`\r\n# 49s\r\ndf.set_index('name', divisions=('Alice', 'Michael', 'Zelda'), shuffle='disk').to_parquet('test.temp')\r\n# 1.21s\r\ndd.read_parquet('test.temp').compute()\r\n\r\n```\r\n\r\nOne more thing to possibly consider: where are the files written to? If to the workers' disks, then this is possibly still a significantly different operation from what `to_parquet` provides. If that was the case, having a `disk` option in `persist` again seems like a cleaner option.\r\n\r\n\r\nAn additional point is that I think it might be quite likely that only a very few people are using this option (an perhaps even fewer who actually do so on purpose), given that it's so hard to work out what it even does.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/982561115/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/983265810",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-983265810",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 983265810,
        "node_id": "IC_kwDOAbcwm846m3IS",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-12-01T04:04:16Z",
        "updated_at": "2021-12-01T04:06:40Z",
        "author_association": "MEMBER",
        "body": "Funny, running your benchmarks on my machine (2019 Intel MacBook Pro, 8-core, SSD), they only take 6-8sec, not the 45sec-1min you posted. And with `compute=True`, the `dfb.compute()` part is also ~3x slower than the `set_index` part. But parquest is slightly slower for me as well.\r\n\r\nThis makes sense, because with `to_parquet` you're doing all the same work as the `compute=True` case (write pieces to disk via Dask's shuffle, read them back), _plus_ reading and writing the same amount of data again through parquet. So all this really tells us is that parquet is fast :)\r\n\r\nThe fact that with `compute=True`, you're only \"persisting\" the half of the operation that's fast-ish anyway makes me see even less value in it. If you're actually going to re-compute the shuffled DataFrame multiple times, parquet is clearly far, far faster\u2014in your benchmark, you'd be re-computing a 1sec operation instead of a 37sec operation. Again this makes sense: if you're bothering to persist something, you want to optimize for subsequent re-use (reads) of it to be as fast as possible, even if that makes the persist slightly slower. Persisting the fully-shuffled data does just this.\r\n\r\n> One more thing to possibly consider: where are the files written to? If to the workers' disks, then this is possibly still a significantly different operation from what `to_parquet` provides.\r\n\r\nYup, written to workers' disks. It's true that with multiple worker machines, you probably couldn't get `to_parquet` to write bits of the data to each worker's disk. However, you also can't use `shuffle=\"disk\"` with multiple worker machines for the same reason (they don't share a disk!). And you _certainly_ couldn't use `shuffle=\"disk\", compute=True` safely, because the tasks to read back in the data might not run on workers where the data was actually written! So basically, this comparison is only even relevant for single-machine use.\r\n\r\n--- \r\nAll this is making me lean towards deprecating the `compute` option. Its use is very fringe, its performance benefit seems dubious, yet everyone has to see and be confused by that parameter that's not relevant in most cases. And if we do https://github.com/dask/dask/issues/8435, it would become even more confusing (if there's both `divisions=\"compute\"` and `compute=False`).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/983265810/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/983461952",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-983461952",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 983461952,
        "node_id": "IC_kwDOAbcwm846nnBA",
        "user": {
            "login": "DahnJ",
            "id": 18722560,
            "node_id": "MDQ6VXNlcjE4NzIyNTYw",
            "avatar_url": "https://avatars.githubusercontent.com/u/18722560?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DahnJ",
            "html_url": "https://github.com/DahnJ",
            "followers_url": "https://api.github.com/users/DahnJ/followers",
            "following_url": "https://api.github.com/users/DahnJ/following{/other_user}",
            "gists_url": "https://api.github.com/users/DahnJ/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DahnJ/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DahnJ/subscriptions",
            "organizations_url": "https://api.github.com/users/DahnJ/orgs",
            "repos_url": "https://api.github.com/users/DahnJ/repos",
            "events_url": "https://api.github.com/users/DahnJ/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DahnJ/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-12-01T09:40:42Z",
        "updated_at": "2021-12-01T09:40:42Z",
        "author_association": "CONTRIBUTOR",
        "body": "> All this is making me lean towards deprecating the `compute` option. Its use is very fringe, its performance benefit seems dubious, yet everyone has to see and be confused by that parameter that's not relevant in most cases. \r\n\r\nThis makes sense to me. \r\n\r\nHowever, I still want to explicitly ask about the option of having `persist` with a `disk` option. I have only ever used `LocalCluster` so far, so I could easily utilize `to_parquet`, but what would I do if I use a distributed cluster, want to persist my data on the workers, but don't have enough memory?\r\n\r\nI would probably start this as another issue since it's independent of this issue, but I first wanted to ask you to see if I'm not missing something.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/983461952/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/995239502",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-995239502",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 995239502,
        "node_id": "IC_kwDOAbcwm847UiZO",
        "user": {
            "login": "scharlottej13",
            "id": 8620816,
            "node_id": "MDQ6VXNlcjg2MjA4MTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8620816?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scharlottej13",
            "html_url": "https://github.com/scharlottej13",
            "followers_url": "https://api.github.com/users/scharlottej13/followers",
            "following_url": "https://api.github.com/users/scharlottej13/following{/other_user}",
            "gists_url": "https://api.github.com/users/scharlottej13/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scharlottej13/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scharlottej13/subscriptions",
            "organizations_url": "https://api.github.com/users/scharlottej13/orgs",
            "repos_url": "https://api.github.com/users/scharlottej13/repos",
            "events_url": "https://api.github.com/users/scharlottej13/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scharlottej13/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-12-15T21:47:51Z",
        "updated_at": "2021-12-15T21:47:51Z",
        "author_association": "MEMBER",
        "body": "Thanks all for the discussion! To summarize, it sounds like there are two options (1) to deprecate the compute option in `set_index()` or (2) to improve the documentation so it's clear that `compute=True` is only used when shuffling with disk, and therefore is only relevant when using a single machine. @jsignell, would you like to weigh in here?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/995239502/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/995266919",
        "html_url": "https://github.com/dask/dask/issues/8415#issuecomment-995266919",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8415",
        "id": 995266919,
        "node_id": "IC_kwDOAbcwm847UpFn",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-12-15T22:34:02Z",
        "updated_at": "2021-12-15T22:34:02Z",
        "author_association": "MEMBER",
        "body": "Thanks for the ping, I am all for deprecating surprising behaviors and eager computations. @DahnJ did you open an issue for adding a `disk` option to `persist`? That does seem like an interesting idea. I wonder if it could be supported that the workers could just pick up the pieces of data that they know about even if they don't share a disk. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/995266919/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]