[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/290889758",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-290889758",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 290889758,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDg4OTc1OA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-01T03:03:31Z",
        "updated_at": "2017-04-01T03:03:31Z",
        "author_association": "MEMBER",
        "body": "Is there a workflow that you're trying to accomplish that is not available through the current semantics of persist?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/290889758/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/291525597",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-291525597",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 291525597,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTUyNTU5Nw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-04T14:54:20Z",
        "updated_at": "2017-04-04T14:54:20Z",
        "author_association": "MEMBER",
        "body": "@jakirkham any response to the question above?  Are there workflows that you actively want to do that you can't currently accomplish with the existing API?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/291525597/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/291532525",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-291532525",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 291532525,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTUzMjUyNQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-04T15:15:33Z",
        "updated_at": "2017-04-04T15:15:33Z",
        "author_association": "MEMBER",
        "body": "Sorry for not responding sooner. Basically I would like some form of `persist` that doesn't trigger computation right away, but will keep the data on the workers once a computation of that value is triggered. Does that make sense?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/291532525/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/291533634",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-291533634",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 291533634,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTUzMzYzNA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-04T15:18:56Z",
        "updated_at": "2017-04-04T15:18:56Z",
        "author_association": "MEMBER",
        "body": "I believe that I fully understand the intended operation.  My question is \"why do you need this?\"  Is it not possible to use persist for your use case?  What are you trying to do here such that you need this functionality?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/291533634/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/291583972",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-291583972",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 291583972,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU4Mzk3Mg==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-04T18:06:11Z",
        "updated_at": "2017-04-04T18:06:11Z",
        "author_association": "MEMBER",
        "body": "So we have a computation that is fairly intensive. However, at the end we compute a simple heuristic for our performance. If it is not good enough, we perform another iteration of the computation. If it is good enough, then we break the loop and store results based on one of the upstream values before the heuristic. We merely want to ensure that we don't need to recompute the upstream value after computing the heuristic. That said, there is no need to trigger a computation of this upstream value before we compute the heuristic.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/291583972/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/291586415",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-291586415",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 291586415,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU4NjQxNQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-04T18:15:02Z",
        "updated_at": "2017-04-04T18:15:02Z",
        "author_association": "MEMBER",
        "body": "> That said, there is no need to trigger a computation of this upstream value before we compute the heuristic\r\n\r\nSo using pin there would be a time when you have defined the upstream result, defined the heuristic, but haven't yet asked for either.  Then there is a second time when you've asked for the upstream result to be computed and saved.  Pin would allow you to do significant things in between these two times that you can't do currently.  What is it that you want to do in between these two times?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/291586415/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/291644051",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-291644051",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 291644051,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTY0NDA1MQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-04T21:57:17Z",
        "updated_at": "2017-04-04T21:57:17Z",
        "author_association": "MEMBER",
        "body": "I think there is some confusion based on reading this description. To outline this clearly.\r\n\r\n1. Define how to compute upstream value.\r\n2. Define how to compute heuristic from the upstream value.\r\n3. Compute heuristic. (also keep upstream value somehow?)\r\n\r\nSo my main concern is `persist` seems to imply `compute` without blocking or sending the value back yet. I don't want to accidentally cause Dask to perform some suboptimal computation because I want to keep the upstream result around. Would much rather defer to Dask to do whatever it finds is optimal to get the heuristic value while hanging on to the pieces of the upstream value as they are computed in the process.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/291644051/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/291645138",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-291645138",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 291645138,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTY0NTEzOA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-04-04T22:01:48Z",
        "updated_at": "2017-04-04T22:01:48Z",
        "author_association": "MEMBER",
        "body": "I don't disagree that there isn't value to your feature.  I'm questioning if it's necessary.  The trade off here is that we would need to find a way to build pin, which may be non-trivial.  I'm trying to find an alternative solution for you so that you don't need pin.  \r\n\r\nTo extend your example, lets put in another step\r\n\r\n1. Define how to compute upstream value.\r\n2. Define how to compute heuristic from the upstream value.\r\n3.  Maybe persist upstream?\r\n4. Compute heuristic. (also keep upstream value somehow?)\r\n\r\nSo this would work today if we persist upstream.  Now the question arises, \"OK, so under what situations would we *not* want to do step 3 if you're going to do step 4?\"  Or maybe you don't know yet if you want to do step 4?\r\n\r\nAlso, consider the following alternative.\r\n\r\n```python\r\nupstream, heuristic = persist(upstream, heuristic)\r\nheuristic = heuristic.compute()\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/291645138/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/305483917",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-305483917",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 305483917,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTQ4MzkxNw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-06-01T12:52:21Z",
        "updated_at": "2017-06-01T12:52:21Z",
        "author_association": "MEMBER",
        "body": "@jakirkham does the alternative above work for you?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/305483917/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346208281",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346208281",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346208281,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIwODI4MQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T00:48:36Z",
        "updated_at": "2017-11-22T00:48:36Z",
        "author_association": "MEMBER",
        "body": "Sorry I think I missed the ping.\r\n\r\nYeah I think that is probably a reasonable solution for that use case. Though have not tried it yet. Will explore and get back to you. Currently that use case calls `persist` for those two values separately. This seems to have been doing well thus far on some of our smaller datasets. Though agree that calling `persist` on both together seems like a better idea.\r\n\r\nThat said, I still have some other use cases that would benefit from something like `pin`. For instance, consider a case where one would like to compute a filter on a rather large image stack. This is very doable in the Dask framework and works quite well. With sufficient compute resource for the problem this can complete pretty quickly.\r\n\r\nThe only downside is that interactivity is lost while this computation occurs. Namely one is stuck waiting for the result to be computed before it can be inspected. Though one rarely needs the full result to get a first impression of whether the computation is doing the right thing. One can be perfectly happy looking at some smaller selection of frames (e.g. the first few) while the full result is being sent to disk. From there the user can let the computation proceed or cancel it and retry with different parameters.\r\n\r\nPerhaps one solution would be to read from the file being written to. Though this could have ill-defined behavior or data loss/corruption depending on how the format handles requests to the same data. Even without this issue, it remains unclear to me how one might prioritize frames (e.g. the first few). Maybe breaking out the first few frames and submitting them for computation first would be sufficient?\r\n\r\nAssuming a well behaved format, there can still be challenges like a user jumping to a non-computed frame. For example, maybe it is important to look at frames far from the ends or maybe the user knows a frame that the filter might struggle with. A good solution here likely requires caching and task reprioritization ( https://github.com/dask/dask/issues/2860 ). Namely prioritizing the user's request as highest and caching the result for the storage step to handle as it deems appropriate.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346208281/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346227374",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346227374",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346227374,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjIyNzM3NA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T02:48:31Z",
        "updated_at": "2017-11-22T02:48:31Z",
        "author_association": "MEMBER",
        "body": "> The only downside is that interactivity is lost while this computation occurs\r\n\r\nThis isn't necessarily the case.  Operations like persist are asynchronous.\r\n\r\nWhile I agree with the value of prioritization, I also suspect that your problem could be solved through the use of futures and `as_completed`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346227374/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346412555",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346412555",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346412555,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQxMjU1NQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T17:01:02Z",
        "updated_at": "2017-11-22T17:01:02Z",
        "author_association": "MEMBER",
        "body": "> This isn't necessarily the case. Operations like persist are asynchronous.\r\n\r\nOne could persist and then store the results to disk and view them. However am somewhat concerned w.r.t. what happens if not all of the data can live in the memory of all of the workers. Does this result in workers failing and/or crashing somehow due to memory issues? Do workers start dropping some of the persisted data based on some rules? If the latter, how do we get dropped data back? Can it be recomputed somehow? Also can we prioritize what data is held on to?\r\n\r\nIs it possible to mitigate some of these issues/concerns by caching somehow? Ideally I would want to back the data persisted in memory with data stored on disk, but am not totally sure if that is possible. Maybe this can be tackled with caching? TBH caching the final result would probably negate the need for me to do any storing at all.  Though would want to ensure the full result does ultimately get cached.\r\n\r\nThis is because we normally run multiple filters in a sequence. Inspecting results from each filter along the way. It is not atypical for an issue to crop up in a later step that has an origin in earlier steps (though may be quite subtle before). If a caching solution is possible, it would be nice to reuse the cache (avoiding recomputing) to reinspect a previous result. Would this sort of thing be possible?\r\n\r\n> While I agree with the value of prioritization, I also suspect that your problem could be solved through the use of futures and `as_completed`.\r\n\r\nInteresting. Thanks for the suggestion. Took a look and it may be useful. Though am not totally sure how to leverage this ATM. For instance, if I persist a Dask Array, it constructs a new Dask Array with the chunks as Futures, correct? If I take a slice of that Dask Array, can I somehow determine the Futures included within that slice? If so, can probably use `as_completed` with them (guessing that is what you are meaning). Still don't know how we can raise the priority on that selection of Futures, but that is admittedly a different discussion.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346412555/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346452013",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346452013",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346452013,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQ1MjAxMw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T19:32:33Z",
        "updated_at": "2017-11-22T19:32:33Z",
        "author_association": "MEMBER",
        "body": "Excess data on workers is persisted to disk: http://distributed.readthedocs.io/en/latest/worker.html#spill-data-to-disk\r\n\r\nFor opportunistic caching you might want to take a look at https://github.com/dask/distributed/issues/681\r\n\r\nFor futures yes, persisting replaces chunks with futures.  You could access these directly or convert to delayed objects.  You could slice-persist-call-as-completed if you wanted.  There is no real way to bump priority of tasks in flight, but this would let you see whichever chunks finished first if you wanted.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346452013/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346466882",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346466882",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346466882,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQ2Njg4Mg==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T20:38:25Z",
        "updated_at": "2017-11-22T20:38:25Z",
        "author_association": "MEMBER",
        "body": "Thanks for the info.\r\n\r\nHad seen this in the docs before. Is there any limitation in Dask/Distributed as to how much is spilled to disk? Also does the data on disk get cleaned up in certain cases?\r\n\r\nCould I hack the priority by doing something like passing an array selection and the array itself to `persist`? Trying to think of a way to bump priority on the first thing we display.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346466882/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346468533",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346468533",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346468533,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQ2ODUzMw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T20:46:16Z",
        "updated_at": "2017-11-22T20:46:16Z",
        "author_association": "MEMBER",
        "body": "Short term the overriding priority is first-come-first-served on the scheduler.  So you could do something like the following:\r\n\r\n```python\r\nfirst = x[:10, :]\r\nfirst = first.persist()\r\nx = x.persist()\r\n```\r\n\r\nThis submits all the work at mostly the same time, but prioritizes the first bits because they were submitted a fraction of a second earlier.  This solution is made more complicated by optimizations.\r\n\r\nMedium-term (or short term if you want to do some work) I think that we should implement a third (and higher) level of priority that is determined by the user.  This would probably give you what you want.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346468533/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346476539",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346476539",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346476539,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQ3NjUzOQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T21:21:39Z",
        "updated_at": "2017-11-22T21:21:39Z",
        "author_association": "MEMBER",
        "body": "Yep, that's seems reasonable. Thanks for the suggestions.\r\n\r\nPointers as to what to look at and try wouldn't hurt. Whether I'll be able to follow through is another question. At least it would give me an opportunity to familiarize myself more with how job scheduling works.\r\n\r\nAny thoughts on when data spilled to disk gets cleaned up (if ever)? Just trying to get an idea of how it behaves.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346476539/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346477143",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346477143",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346477143,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQ3NzE0Mw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T21:23:59Z",
        "updated_at": "2017-11-22T21:23:59Z",
        "author_association": "MEMBER",
        "body": "> Any thoughts on when data spilled to disk gets cleaned up (if ever)? Just trying to get an idea of how it behaves.\r\n\r\nIf data is removed from the worker then we delete the files.  If the worker shuts down cleanly, then it deletes all files.  If the worker shuts down uncleanly (SIGTERM) then the next worker removes the files (in master only).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346477143/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/346477820",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-346477820",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 346477820,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjQ3NzgyMA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-11-22T21:27:23Z",
        "updated_at": "2017-11-22T21:27:23Z",
        "author_association": "MEMBER",
        "body": "> Pointers as to what to look at and try wouldn't hurt. Whether I'll be able to follow through is another question. At least it would give me an opportunity to familiarize myself more with how job scheduling works.\r\n\r\nI would start at `distributed/scheduler.py::Scheduler.update_graph`, in particular this line\r\n\r\n                self.priority[key] = (generation, new_priority[key])  # prefer old\r\n\r\nThis is where we decide to first prefer first-come-first-served (the `generation` variable), and then to prefer the graph-based priority.  Probably we want to add a third element just before `generation` that is user-defined priorities.\r\n\r\nThe user provides information to this function in the `distributed/client.py::Client._graph_to_futures` method, which is used from methods like `compute` and `persist`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/346477820/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/374292035",
        "html_url": "https://github.com/dask/dask/issues/2156#issuecomment-374292035",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2156",
        "id": 374292035,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDI5MjAzNQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-19T17:13:01Z",
        "updated_at": "2018-03-19T17:13:01Z",
        "author_association": "MEMBER",
        "body": "Was thinking about the original problem again recently, it might be solved by adding `Future`s for the tasks, but doing something special to keep the tasks from running. For instance submitting them with a non-runnable priority or submitting them to a special queue where they just wait. Then when the actual computation is requested the submitted tasks can actually be reprioritized or moved to a runnable queue.\r\n\r\nWith this sort of implementation, the problem could be solved on the scheduler side alone. Not sure which of these approaches is easiest to achieve. So some advice would be helpful.\r\n\r\nAlso not sure how this would work for the single-machine, threaded scheduler.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/374292035/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]