[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/546495960",
        "html_url": "https://github.com/dask/dask/issues/5533#issuecomment-546495960",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5533",
        "id": 546495960,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjQ5NTk2MA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-25T20:11:57Z",
        "updated_at": "2019-10-25T20:11:57Z",
        "author_association": "MEMBER",
        "body": "cc @aberres and @jcrist if you have thoughts.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/546495960/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/546504941",
        "html_url": "https://github.com/dask/dask/issues/5533#issuecomment-546504941",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5533",
        "id": 546504941,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjUwNDk0MQ==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-25T20:38:53Z",
        "updated_at": "2019-10-25T20:38:53Z",
        "author_association": "MEMBER",
        "body": "Hmmm, interesting. Problem 1 is a bug and should be fixed. You can work around it for now by delaying a function constructor instead of calling `delayed` on the dataclass constructor itself.\r\n\r\nProblem 2 is odd. We currently traverse dataclasses for sub-dask objects as we do for other simple python objects (tuples, lists, dicts, sets). The assumption being that dataclasses aren't expensive to reconstruct - they're just fancier namedtuples. To avoid traversal you can use `traverse=False` when wrapping an existing *dataclass object* (note, not the function that calls it). Given that people want the existing behavior, and theirs a (suboptimal) workaround for your use case I'm not sure if I this is something we can/should fix. Suggestions welcome.\r\n\r\nHere's a working script that avoids both problems:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom dask import delayed\r\n\r\n@dataclass\r\nclass D:\r\n    x: int\r\n    y: float\r\n    def __post_init__(self):\r\n        print(\"getting expensive resource\")\r\n        self.z = self.x + self.y\r\n\r\n    def __call__(self):\r\n        print(self.z, \"is ready\")\r\n        \r\n\r\n# Delay a function instead of the dataclass constructor\r\n@delayed(pure=True)\r\ndef create_D(x, y):\r\n    return D(x, y)\r\n\r\nprint(\"Problem 1\")\r\nd = create_D(1, 1.0).compute()\r\n\r\n\r\ndef operate_on(d: D):\r\n    d()\r\n    print(\"Thanks for\", d.z)\r\n\r\nprint(\"Problem 2\")\r\n# Wrap the `D` object in a non-traversed delayed object first to avoid traversal\r\nd_obj = delayed(d, traverse=False)\r\ndelayed(operate_on)(d_obj).compute()\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n$ python test.py\r\nProblem 1\r\ngetting expensive resource\r\nProblem 2\r\n2.0 is ready\r\nThanks for 2.0\r\n``` ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/546504941/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/546873372",
        "html_url": "https://github.com/dask/dask/issues/5533#issuecomment-546873372",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5533",
        "id": 546873372,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njg3MzM3Mg==",
        "user": {
            "login": "ahirner",
            "id": 6055037,
            "node_id": "MDQ6VXNlcjYwNTUwMzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6055037?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ahirner",
            "html_url": "https://github.com/ahirner",
            "followers_url": "https://api.github.com/users/ahirner/followers",
            "following_url": "https://api.github.com/users/ahirner/following{/other_user}",
            "gists_url": "https://api.github.com/users/ahirner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ahirner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ahirner/subscriptions",
            "organizations_url": "https://api.github.com/users/ahirner/orgs",
            "repos_url": "https://api.github.com/users/ahirner/repos",
            "events_url": "https://api.github.com/users/ahirner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ahirner/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-10-28T09:56:35Z",
        "updated_at": "2019-10-28T09:56:35Z",
        "author_association": "NONE",
        "body": "Thanks for the quick response. \r\nI can make a PR for problem number 1. I'd suggest to have something like `is_dataclass_obj` in `compatibility.py `.\r\n\r\nAfter all, explicitly delaying collections with `dataclass`es is not the worst. I imagine this to be a general use case tough, e.g. when some work like [validation](https://pydantic-docs.helpmanual.io/usage/dataclasses/) has been put into. Maybe mentioning that in the docs is best?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/546873372/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]