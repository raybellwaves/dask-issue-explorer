{
    "url": "https://api.github.com/repos/dask/dask/issues/8229",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/8229/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/8229/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/8229/events",
    "html_url": "https://github.com/dask/dask/issues/8229",
    "id": 1019277344,
    "node_id": "I_kwDOAbcwm848wPAg",
    "number": 8229,
    "title": "Unexpected behaviour with out-of-bound indices",
    "user": {
        "login": "fnattino",
        "id": 49899980,
        "node_id": "MDQ6VXNlcjQ5ODk5OTgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/49899980?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fnattino",
        "html_url": "https://github.com/fnattino",
        "followers_url": "https://api.github.com/users/fnattino/followers",
        "following_url": "https://api.github.com/users/fnattino/following{/other_user}",
        "gists_url": "https://api.github.com/users/fnattino/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fnattino/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fnattino/subscriptions",
        "organizations_url": "https://api.github.com/users/fnattino/orgs",
        "repos_url": "https://api.github.com/users/fnattino/repos",
        "events_url": "https://api.github.com/users/fnattino/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fnattino/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-10-06T21:33:25Z",
    "updated_at": "2021-10-25T21:41:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**What happened**:\r\n\r\nI encountered the following issue when slicing a Dask array with a one-dimensional Dask array of integers. If the array used for slicing contains indices that are out of range in addition to some valid indices, I would expect an `IndexError` to be raised. Instead, no error is raised and it looks like the element corresponding to the first valid index is repeated for all the out-of-bounds indices. If all indices are out of bounds, then `IndexError` is raised as expected, but the error message includes wrong references to the bad indices and array size. \r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nIn [1]: import dask.array as da\r\n\r\nIn [2]: x = da.arange(10)\r\n\r\nIn [3]: idx = 11\r\n   ...: y = x[idx]  # This raises a IndexError, as expected.\r\n\r\nIn [4]: idx = da.from_array([11])\r\n   ...: y = x[idx]\r\n   ...: y.compute() # This raises a IndexError, but the error message should probably be: \"index 11 is out of bounds for axis 0 with size 10\"?\r\n\r\nIn [5]: idx = da.from_array([0, 11])\r\n   ...: y = x[idx]\r\n   ...: y.compute()  # this should raise a `IndexError`. Instead, the zeroth element is repeated.\r\nOut[5]: array([0, 0])  \r\n\r\nIn [6]: idx = da.from_array([0, 1, 11, 12, 13])\r\n   ...: y = x[idx]\r\n   ...: y.compute()  # same as above - the zeroth element is repeated for all the out-of-bounds indices\r\nOut[6]: array([0, 1, 0, 0, 0])\r\n```\r\n\r\n<details><summary>Traceback at [3]</summary>\r\n<p>\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-3-0094457f9d34> in <module>\r\n      1 idx = 11\r\n----> 2 y = x[idx]\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/array/core.py in __getitem__(self, index)\r\n   1737         )\r\n   1738 \r\n-> 1739         index2 = normalize_index(index, self.shape)\r\n   1740         dependencies = {self.name}\r\n   1741         for i in index2:\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/array/slicing.py in normalize_index(idx, shape)\r\n    915     for i, d in zip(idx, none_shape):\r\n    916         if d is not None:\r\n--> 917             check_index(i, d)\r\n    918     idx = tuple(map(sanitize_index, idx))\r\n    919     idx = tuple(map(normalize_slice, idx, none_shape))\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/array/slicing.py in check_index(ind, dimension)\r\n    985 \r\n    986     elif ind >= dimension:\r\n--> 987         raise IndexError(\r\n    988             \"Index is not smaller than dimension %d >= %d\" % (ind, dimension)\r\n    989         )\r\n\r\nIndexError: Index is not smaller than dimension 11 >= 10\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n<details><summary>Traceback at [4]</summary>\r\n<p>\r\n\r\n```python\r\n--------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-4-795172e62a76> in <module>\r\n      1 idx = da.from_array([11])\r\n      2 y = x[idx]\r\n----> 3 y.compute()\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/base.py in compute(self, **kwargs)\r\n    286         dask.base.compute\r\n    287         \"\"\"\r\n--> 288         (result,) = compute(self, traverse=False, **kwargs)\r\n    289         return result\r\n    290 \r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/base.py in compute(*args, **kwargs)\r\n    568         postcomputes.append(x.__dask_postcompute__())\r\n    569 \r\n--> 570     results = schedule(dsk, keys, **kwargs)\r\n    571     return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n    572 \r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/threaded.py in get(dsk, result, cache, num_workers, pool, **kwargs)\r\n     77             pool = MultiprocessingPoolExecutor(pool)\r\n     78 \r\n---> 79     results = get_async(\r\n     80         pool.submit,\r\n     81         pool._max_workers,\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/local.py in get_async(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)\r\n    515                             _execute_task(task, data)  # Re-execute locally\r\n    516                         else:\r\n--> 517                             raise_exception(exc, tb)\r\n    518                     res, worker_id = loads(res_info)\r\n    519                     state[\"cache\"][key] = res\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/local.py in reraise(exc, tb)\r\n    323     if exc.__traceback__ is not tb:\r\n    324         raise exc.with_traceback(tb)\r\n--> 325     raise exc\r\n    326 \r\n    327 \r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/local.py in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    221     try:\r\n    222         task, data = loads(task_info)\r\n--> 223         result = _execute_task(task, data)\r\n    224         id = get_id()\r\n    225         result = dumps((result, id))\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/core.py in _execute_task(arg, cache, dsk)\r\n    119         # temporaries by their reference count and can execute certain\r\n    120         # operations in-place.\r\n--> 121         return func(*(_execute_task(a, cache) for a in args))\r\n    122     elif not ishashable(arg):\r\n    123         return arg\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/optimization.py in __call__(self, *args)\r\n    967         if not len(args) == len(self.inkeys):\r\n    968             raise ValueError(\"Expected %d args, got %d\" % (len(self.inkeys), len(args)))\r\n--> 969         return core.get(self.dsk, self.outkey, dict(zip(self.inkeys, args)))\r\n    970 \r\n    971     def __reduce__(self):\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/core.py in get(dsk, out, cache)\r\n    149     for key in toposort(dsk):\r\n    150         task = dsk[key]\r\n--> 151         result = _execute_task(task, cache)\r\n    152         cache[key] = result\r\n    153     result = _execute_task(out, cache)\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/core.py in _execute_task(arg, cache, dsk)\r\n    119         # temporaries by their reference count and can execute certain\r\n    120         # operations in-place.\r\n--> 121         return func(*(_execute_task(a, cache) for a in args))\r\n    122     elif not ishashable(arg):\r\n    123         return arg\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/utils.py in apply(func, args, kwargs)\r\n     33 def apply(func, args, kwargs=None):\r\n     34     if kwargs:\r\n---> 35         return func(*args, **kwargs)\r\n     36     else:\r\n     37         return func(*args)\r\n\r\n/opt/miniconda3/envs/dark_generators/lib/python3.8/site-packages/dask/array/chunk.py in slice_with_int_dask_array_aggregate(idx, chunk_outputs, x_chunks, axis)\r\n    392     # np.take does not support slice indices\r\n    393     # return np.take(chunk_outputs, idx_final, axis)\r\n--> 394     return chunk_outputs[\r\n    395         tuple(\r\n    396             idx_final if i == axis else slice(None) for i in range(chunk_outputs.ndim)\r\n\r\nIndexError: index 0 is out of bounds for axis 0 with size 0\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2021.9.1\r\n- Python version: 3.8.12\r\n- Operating System: OS X\r\n- Install method (conda, pip, source): `conda install dask[complete] -c conda-forge`\r\n",
    "closed_by": {
        "login": "jrbourbeau",
        "id": 11656932,
        "node_id": "MDQ6VXNlcjExNjU2OTMy",
        "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jrbourbeau",
        "html_url": "https://github.com/jrbourbeau",
        "followers_url": "https://api.github.com/users/jrbourbeau/followers",
        "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
        "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
        "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
        "repos_url": "https://api.github.com/users/jrbourbeau/repos",
        "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
        "type": "User",
        "site_admin": false
    },
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/8229/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/8229/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}