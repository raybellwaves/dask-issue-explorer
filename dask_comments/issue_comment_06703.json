[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/703819564",
        "html_url": "https://github.com/dask/dask/issues/6703#issuecomment-703819564",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6703",
        "id": 703819564,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzgxOTU2NA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-10-05T18:47:34Z",
        "updated_at": "2020-10-05T18:47:34Z",
        "author_association": "MEMBER",
        "body": "This falls under the \"This docstring was copied from pandas.core.frame.DataFrame.corr. Some inconsistencies with the Dask version may exist.\" clause in the docstring.\r\n\r\nImplementing the other correlation methods is certainly in scope. Do you know if the other methods can be implemented efficiently in a blocked fashion? The pearson implementation is at https://github.com/dask/dask/blob/8a699223982ce8425f59f048d0163090b4a81193/dask/dataframe/core.py#L5500 I believe.\r\n\r\n> Bonus: the split_every argument is not documented and this one is not in the Pandas API.\r\n\r\nWe had a similar issue with `split_out`.  I think the hope was to include a standard description of it in each docstring that uses it, but we currently have a general reference int he groupby docs.\r\n\r\nIs this something you're interested in working on?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/703819564/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/706226477",
        "html_url": "https://github.com/dask/dask/issues/6703#issuecomment-706226477",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6703",
        "id": 706226477,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjIyNjQ3Nw==",
        "user": {
            "login": "lfdversluis",
            "id": 3618917,
            "node_id": "MDQ6VXNlcjM2MTg5MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3618917?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lfdversluis",
            "html_url": "https://github.com/lfdversluis",
            "followers_url": "https://api.github.com/users/lfdversluis/followers",
            "following_url": "https://api.github.com/users/lfdversluis/following{/other_user}",
            "gists_url": "https://api.github.com/users/lfdversluis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lfdversluis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lfdversluis/subscriptions",
            "organizations_url": "https://api.github.com/users/lfdversluis/orgs",
            "repos_url": "https://api.github.com/users/lfdversluis/repos",
            "events_url": "https://api.github.com/users/lfdversluis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lfdversluis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-10-09T14:50:42Z",
        "updated_at": "2020-10-09T14:50:42Z",
        "author_association": "NONE",
        "body": "Currently I am swamped with projects at work and I am not sure how much effort it takes to get the hang of the core and investigate how to implement 1) the actual correlation and 2) this distributed in Dask. So for now, in will investigate if I can get by doing precomputation with Dask and the final step with Scipy which does support all three. I just recall having run into this issue in the past and inquire about it for now. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/706226477/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/706391965",
        "html_url": "https://github.com/dask/dask/issues/6703#issuecomment-706391965",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6703",
        "id": 706391965,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjM5MTk2NQ==",
        "user": {
            "login": "andrewfulton9",
            "id": 13774419,
            "node_id": "MDQ6VXNlcjEzNzc0NDE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/13774419?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andrewfulton9",
            "html_url": "https://github.com/andrewfulton9",
            "followers_url": "https://api.github.com/users/andrewfulton9/followers",
            "following_url": "https://api.github.com/users/andrewfulton9/following{/other_user}",
            "gists_url": "https://api.github.com/users/andrewfulton9/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andrewfulton9/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andrewfulton9/subscriptions",
            "organizations_url": "https://api.github.com/users/andrewfulton9/orgs",
            "repos_url": "https://api.github.com/users/andrewfulton9/repos",
            "events_url": "https://api.github.com/users/andrewfulton9/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andrewfulton9/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-10-09T20:38:48Z",
        "updated_at": "2020-10-09T20:38:48Z",
        "author_association": "CONTRIBUTOR",
        "body": "Kendall would probably be tricky to do efficiently in a blocked fashion. Spearman should be straight forward to implement assuming the data is already ranked. If the data is not ranked how would that be handled? The options I see are: rely on the user to know when its appropriate to use spearman, warn if the data is not ranked, or rank the data if it isn't already. I'm happy to work on this.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/706391965/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/712951666",
        "html_url": "https://github.com/dask/dask/issues/6703#issuecomment-712951666",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6703",
        "id": 712951666,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcxMjk1MTY2Ng==",
        "user": {
            "login": "andrewfulton9",
            "id": 13774419,
            "node_id": "MDQ6VXNlcjEzNzc0NDE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/13774419?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andrewfulton9",
            "html_url": "https://github.com/andrewfulton9",
            "followers_url": "https://api.github.com/users/andrewfulton9/followers",
            "following_url": "https://api.github.com/users/andrewfulton9/following{/other_user}",
            "gists_url": "https://api.github.com/users/andrewfulton9/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andrewfulton9/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andrewfulton9/subscriptions",
            "organizations_url": "https://api.github.com/users/andrewfulton9/orgs",
            "repos_url": "https://api.github.com/users/andrewfulton9/repos",
            "events_url": "https://api.github.com/users/andrewfulton9/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andrewfulton9/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-10-20T15:52:03Z",
        "updated_at": "2020-10-20T15:52:03Z",
        "author_association": "CONTRIBUTOR",
        "body": "I looked a little closer at this and realized that in `pd.corr(method='spearman')` pandas actually transforms the columns to ranked, so if we want dask to behave in the same way, I believe we would have to do that as well which likely wont be easy to do efficiently. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/712951666/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]