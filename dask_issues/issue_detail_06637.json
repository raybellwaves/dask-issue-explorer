{
    "url": "https://api.github.com/repos/dask/dask/issues/6637",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/6637/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/6637/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/6637/events",
    "html_url": "https://github.com/dask/dask/issues/6637",
    "id": 701078796,
    "node_id": "MDU6SXNzdWU3MDEwNzg3OTY=",
    "number": 6637,
    "title": "reprs of nested duck arrays",
    "user": {
        "login": "keewis",
        "id": 14808389,
        "node_id": "MDQ6VXNlcjE0ODA4Mzg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/14808389?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keewis",
        "html_url": "https://github.com/keewis",
        "followers_url": "https://api.github.com/users/keewis/followers",
        "following_url": "https://api.github.com/users/keewis/following{/other_user}",
        "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keewis/subscriptions",
        "organizations_url": "https://api.github.com/users/keewis/orgs",
        "repos_url": "https://api.github.com/users/keewis/repos",
        "events_url": "https://api.github.com/users/keewis/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keewis/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 1372867996,
            "node_id": "MDU6TGFiZWwxMzcyODY3OTk2",
            "url": "https://api.github.com/repos/dask/dask/labels/discussion",
            "name": "discussion",
            "color": "bebaf4",
            "default": false,
            "description": "Discussing a topic with no specific actions yet"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-09-14T13:05:43Z",
    "updated_at": "2021-10-14T04:26:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Part of the discussion in #5329. I'm opening this issue to make the discussion on this topic a bit more focused.\r\n\r\nAs mentioned in #5329 (comment), we need to find a way to\r\n- construct a `repr` that includes the metadata from all levels of nesting?\r\n\r\n---\r\n\r\nSimply including the repr of the wrapped array usually results in reprs that are way too long, so instead we could introduce a protocol (or method) that returns a mapping of type names to metadata, and a function to call that protocol. If a duck array does not implement the protocol, the default would be to return `{typename: {}}`.\r\nFor example calling `repr(arr)` where `arr` is a `xarray(pint(dask(sparse)))` would make `xarray` call the data's `__metadata__` and use that to construct it's `repr`. This could be something like\r\n```python\r\ndef __metadata__(self):\r\n    wrapped_metadata = self._data.__metadata__()\r\n    metadata = {\r\n        \"a\": str(self.a),\r\n        \"b\": str(self.b),\r\n    }\r\n    # or something like {**wrapped_metadata, **{type(self).__qualname__: metadata}\r\n    return wrapped_metadata | {type(self).__qualname__: metadata}\r\n```\r\n\r\nIn the example, the result of the first call could be something like:\r\n```python\r\n{\r\n    \"sparse.COO\": {\"shape\": (30, 1000), \"dtype\": \"float64\", \"nnz\": 768, \"fill_value\": 0},\r\n    \"dask.array.Array\": {\"chunks\": (10, 100), \"shape\": (30, 1000), \"dtype\": \"float64\"},\r\n    \"pint.Quantity\": {\"units\": \"m\", \"shape\": (30, 1000), \"dtype\": \"float64\"},\r\n}\r\n```\r\nwith that, `xarray` could either manually format the `repr` or use a helper function (which should probably have a `max_width` parameter).\r\n\r\nThis doesn't work for duck arrays wrapping more than a single duck array, though. Also, I'm not sure if the type name should be the type's `__qualname__`, and if `shape` and `dtype`, which every duck array has to implement as properties, should be included.\r\n\r\nxref pydata/xarray#4324, pydata/xarray#4248",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/6637/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/6637/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}