{
    "url": "https://api.github.com/repos/dask/dask/issues/6164",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/6164/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/6164/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/6164/events",
    "html_url": "https://github.com/dask/dask/issues/6164",
    "id": 611090242,
    "node_id": "MDU6SXNzdWU2MTEwOTAyNDI=",
    "number": 6164,
    "title": "Distributed Partd",
    "user": {
        "login": "mrocklin",
        "id": 306380,
        "node_id": "MDQ6VXNlcjMwNjM4MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrocklin",
        "html_url": "https://github.com/mrocklin",
        "followers_url": "https://api.github.com/users/mrocklin/followers",
        "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
        "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
        "organizations_url": "https://api.github.com/users/mrocklin/orgs",
        "repos_url": "https://api.github.com/users/mrocklin/repos",
        "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mrocklin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-05-02T02:30:35Z",
    "updated_at": "2021-07-17T18:59:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "### Problem\r\n\r\nI was chatting with some RAPIDS devs today (@kkraus14 @quasiben @randerzander @jakirkham @madsbk @pentschev and others ) and they were generally concerned about the scheduling overhead of dataframe merges/set_index operations (anything that uses `shuffle`).  There is an effort to improve scheduling performance generally, but there is also an option to try to rethink how we handle shuffling in dataframes, and maybe other similar operations in the future as well (like array rechunking in extreme situations).  \r\n\r\nThe currrent `\"tasks\"` based shuffling method uses  `O(n log(n))` tasks and log(n) full-dataset communications.  This is fine for ~100 partitions, but becomes challenging once you get to 1000 partition datasets.  We also have a separate solution around [partd](https://github.com/dask/partd), which does things in `O(n)` tasks, by buffering small shards of the data and using disk as a global communication store.  Partd as written doesn't work in a distributed fashion, but we might think about how to do some similar approach in a distributed fashion.\r\n\r\n### DHT\r\n\r\nIn principle, building some sort of distributed hash table (DHT) like thing out of Dask parts isn't hard (actors, pubsub, etc, are all good examples of similar systems that took a couple of days to build).  What is hard is making it resilient.  For this we might look to a mixture solution between some peer-to-peer system, and a centralized `SchedulerPlugin`.  Here is a rough design.\r\n\r\nWe run tasks on each partition of the to-be-shuffled dataframe that split that partition into pieces, and put into some local splitting service.  The first task on a machine probably creates the service (we use a local thread-based-lock to coordinate between multiple tasks on the same machine).  That service splits things apart, stores them in local buffers, and periodically sends batches them to peers.  \r\n\r\nHow does it learn what peers it should send things to?  Probably it has to check in with the scheduler, which will still act as centralized control here, but won't track every individual piece of data. Maybe these things check in with the scheduler, the scheduler alerts everyone else about what is going on, and the things push data around in a way similar to a distributed hash table (DHT).  (there is lots of prior art here and algorithms to steal).  \r\n\r\nOnce all of those tasks are done we run some barrier task, and then there are a bunch of other tasks which pull output partitions from the DHT.  There is some excess communication here because we aren't thinking about locality for the Dask-DHT nodes, but for now let's just allow that as an allowable cost (my apologies).  \r\n\r\nSo great, we get by with 2*n tasks, and probably two full communications.  Not great, but it's probably better than what we have now for large shuffle computations.\r\n\r\n### What can go wrong\r\n\r\nSo what happens if a worker goes down during execution?  We haven't replicated data, and the task that created that chunk of data is gone, so we've lost some things.  We can still recreate and rerun that task though, we just need to tell the scheduler to do so.  So in order to get resilience, we register a [`SchedulerPlugin`](https://distributed.dask.org/en/latest/plugins.html) that calls some custom code whenever a worker goes down.  We know which workers processed which tasks, so we rerun those tasks.  The other DHT nodes will get some duplicate data unfortunately, so they'll probably have to track which tasks they've seen, and know to discard any message that comes from the same task twice.  \r\n\r\n### Nice things\r\n\r\nSo we get a nice combination here of resilience provided by the centralized scheduler, as well as low overhead provided by decentralized execution.  \r\n\r\nIf we can create this as a more general purpose DHT solution then I suspect that people will find other uses for it other than just dataframe all-to-all shuffling.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/6164/reactions",
        "total_count": 9,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 9,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/6164/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}