[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661106775",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-661106775",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 661106775,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTEwNjc3NQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-20T15:22:00Z",
        "updated_at": "2020-07-20T15:22:00Z",
        "author_association": "MEMBER",
        "body": "Libraries like pangeo-data/rechunker want to have exact control over the\nchunk sizes so that they can reliably predict memory usage. I haven't\nverified that the changes here impact rechunker or libraries like it (and\nwon't have time to near term), but this feels like the kind of thing that\nmight have a negative impact.\n\nOn Mon, Jul 20, 2020 at 9:49 AM Matthew Rocklin <notifications@github.com>\nwrote:\n\n> *@mrocklin* commented on this pull request.\n> ------------------------------\n>\n> In dask/array/core.py\n> <https://github.com/dask/dask/pull/6419#discussion_r457457761>:\n>\n> > @@ -2841,7 +2841,7 @@ def from_array(\n>\n>\n>  def from_zarr(\n> -    url, component=None, storage_options=None, chunks=None, name=None, **kwargs\n> +    url, component=None, storage_options=None, chunks=\"auto\", name=None, **kwargs\n>\n> We could. Can I ask for additional motivation though? We don't currently\n> do this for HDF5 or NetCDF or any other format. Why would we do this for\n> Zarr? Why do we care about the old behavior? I expect that adding docs on\n> this is just as likely to lead people astray as it is to help them.\n>\n> As a reminder, the automatic chunking is decently smart and we haven't\n> ever gotten complaints about the choices that it makes, despite pretty\n> heavy usage. It will find a chunking that aligns with the existing chunking\n> in storage, but is mildly larger in other dimensions if necessary.\n>\n> \u2014\n> You are receiving this because you are on a team that was mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/pull/6419#discussion_r457457761>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAKAOIULQN5OEGCJFNNHWELR4RKQXANCNFSM4O5N3PCQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661106775/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661112697",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-661112697",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 661112697,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTExMjY5Nw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-20T15:31:56Z",
        "updated_at": "2020-07-20T15:31:56Z",
        "author_association": "MEMBER",
        "body": "> Libraries like pangeo-data/rechunker want to have exact control over the\r\nchunk sizes so that they can reliably predict memory usage\r\n\r\nThey still have that exact control.  They can specify `chunks` manually just like before and in `from_array`.  The only thing that we've changed here is the default when the user doesn't provide any information.  The result is that users will get larger chunks if their zarr arrays are chunked too finely to be optimal for Dask.\r\n\r\n> but this feels like the kind of thing that might have a negative impact.\r\n\r\nFWIW I would be surprised to see this change have a negative impact on a typical workflow.\r\n\r\n>  I haven't verified that the changes here impact rechunker or libraries like it (and won't have time to near term),\r\n\r\nIs there someone that we can ping from that project who might be able to weigh in here?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661112697/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661122211",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-661122211",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 661122211,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTEyMjIxMQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-20T15:47:38Z",
        "updated_at": "2020-07-20T15:47:38Z",
        "author_association": "MEMBER",
        "body": "Maybe @rabernat could weigh in?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661122211/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661130725",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-661130725",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 661130725,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTEzMDcyNQ==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-20T16:02:07Z",
        "updated_at": "2020-07-20T16:02:07Z",
        "author_association": "MEMBER",
        "body": "I agree that the proposed changes would be useful in many cases. But I would prefer to see a warning + deprecation cycle, rather than a sudden change in the default behavior. I have quite a bit of code that relies on the assumption that `from_zarr` will return the native zarr chunks.\r\n\r\nThere also may be performance impacts. By using larger chunks than the on-disk chunks, we leave it to zarr to figure out how to read those batches of chunks. This currently occurs in a serial / blocking fashion. Switching to async in zarr (see https://github.com/zarr-developers/zarr-python/issues/536), could speed that up a lot.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661130725/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661134239",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-661134239",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 661134239,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTEzNDIzOQ==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-20T16:06:01Z",
        "updated_at": "2020-07-20T16:06:01Z",
        "author_association": "MEMBER",
        "body": "> They can specify `chunks` manually just like before and in `from_array`\r\n\r\nIf you are reading an array directly from a url or path, you don't necessarily know the native chunks. In that case, you have to open up the array first with zarr, examine the metadata, and then call `from_zarr`. It would be nice to have some kind of option to force dask to use the native chunks without the user explicitly specifying what they are.\r\n\r\nDownstream, it would be good to think about how xarray could use this feature effectively.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661134239/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661136645",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-661136645",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 661136645,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTEzNjY0NQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-20T16:08:28Z",
        "updated_at": "2020-07-20T16:08:28Z",
        "author_association": "MEMBER",
        "body": "> I have quite a bit of code that relies on the assumption that from_zarr will return the native zarr chunks.\r\n\r\nIf you have time I'd be curious to learn more about situations where this would break things.\r\n\r\n> There also may be performance impacts. By using larger chunks than the on-disk chunks, we leave it to zarr to figure out how to read those batches of chunks. This currently occurs in a serial / blocking fashion.\r\n\r\nMy guess is that in most of these situations there are several chunks still active.  Alternatively, if we wanted to ensure some concurrency then this is something that we could push up to the more general logic in `from_array`.  We could encourage dask array to use the chunksize in configuration (which we do now) unless there are very few chunks, in which case it should slim down chunk sizes.\r\n\r\n> If you are reading an array directly from a url or path, you don't necessarily know the native chunks. In that case, you have to open up the array first with zarr, examine the metadata, and then call from_zarr. It would be nice to have some kind of option to force dask to use the native chunks without the user explicitly specifying what they are.\r\n\r\nThis is also the case with HDF/NetCDF today.\r\n\r\nIn both of these cases I would prefer that we not have special logic just for Zarr, but instead focus on the upstream `from_array` function so that other formats (hdf, netcdf, tiledb, ...) benefit and we have consistent behavior across formats.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661136645/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/661740439",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-661740439",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 661740439,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTc0MDQzOQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-07-21T09:18:44Z",
        "updated_at": "2020-07-21T09:18:44Z",
        "author_association": "MEMBER",
        "body": "Have we tried this with a Zarr object (maybe from Pangeo)? Perhaps that would help identify relevant issues/alleviate concerns.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/661740439/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/668197090",
        "html_url": "https://github.com/dask/dask/pull/6419#issuecomment-668197090",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6419",
        "id": 668197090,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODE5NzA5MA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-03T19:19:09Z",
        "updated_at": "2020-08-03T19:19:09Z",
        "author_association": "MEMBER",
        "body": "> I have quite a bit of code that relies on the assumption that from_zarr will return the native zarr chunks.\r\n\r\nChecking in here.  Would it be possible to learn more about these issues?  Recall that the heuristics in `from_array` do respect native storage chunk boundaries, they just sometimes include many of them in a single dask array chunk.\r\n\r\nI don't think that we've ever run into an issue with this policy with HDF/NetCDF.  \r\n\r\nIf we're going to block progress on this PR then I think it would be good to get more information on what exactly would cause the break.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/668197090/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]