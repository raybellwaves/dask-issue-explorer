[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/920072319",
        "html_url": "https://github.com/dask/dask/issues/8147#issuecomment-920072319",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8147",
        "id": 920072319,
        "node_id": "IC_kwDOAbcwm8421zB_",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-15T14:29:50Z",
        "updated_at": "2021-09-15T14:29:50Z",
        "author_association": "MEMBER",
        "body": "Thanks for writing this up @MrPowers .  In general I think that it makes sense to assess our I/O routines.  cc @dask/io \r\n\r\n> I can provide suggested next steps is the team would find them useful\r\n\r\nI encourage you to write up your thoughts as a proposal.  I think that it's easier for folks to think about a possible solution than it is to talk about an existing problem.  I don't think that we'll get much disagreement here that inconsistency is bad.  The one caveat might be that \"well, we just follow whatever Pandas does, so this discussion should probably start there\".  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/920072319/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/920131855",
        "html_url": "https://github.com/dask/dask/issues/8147#issuecomment-920131855",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8147",
        "id": 920131855,
        "node_id": "IC_kwDOAbcwm8422BkP",
        "user": {
            "login": "MrPowers",
            "id": 2722395,
            "node_id": "MDQ6VXNlcjI3MjIzOTU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2722395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MrPowers",
            "html_url": "https://github.com/MrPowers",
            "followers_url": "https://api.github.com/users/MrPowers/followers",
            "following_url": "https://api.github.com/users/MrPowers/following{/other_user}",
            "gists_url": "https://api.github.com/users/MrPowers/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MrPowers/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MrPowers/subscriptions",
            "organizations_url": "https://api.github.com/users/MrPowers/orgs",
            "repos_url": "https://api.github.com/users/MrPowers/repos",
            "events_url": "https://api.github.com/users/MrPowers/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MrPowers/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-15T15:38:13Z",
        "updated_at": "2021-09-15T15:38:13Z",
        "author_association": "CONTRIBUTOR",
        "body": "Moving on to proposals:\r\n\r\n**Save modes**\r\n\r\n* append - add files to existing folder\r\n* overwrite - delete all files in folder, then write\r\n* errorifexists - throw an error if any files are in the folder, then write\r\n\r\nThe default save mode should be append.  The current default save mode is clobber, which I don't think should even be an option.  Clobbering makes partial overwrites possible, which I don't think users ever want.\r\n\r\n**Compression**\r\n\r\nUse Snappy compression by default.  Seems like Snappy is the generally accepted winner in the big data space (it's not the best at compressing, but allows for quick inflation)\r\n\r\n**Filenames**\r\n\r\nCurrent filename conventions make filename collisions likely and cause issues [like this one](https://github.com/dask/dask/issues/8145).\r\n\r\nThink it'd be better to write files like this:\r\n\r\n* part-00000-01234567890123456789012345678912.snappy.csv\r\n* part-00001-01234567890123456789012345678912.snappy.csv\r\n\r\nAdvantages of this convention:\r\n\r\n* leading zeros in part keep files ordered in filesystem\r\n* UUID per batch makes it easy to figure out what files are written per batch and minimizes risk of filename conflicts\r\n* add file extension in case folks aren't sure when they come across the files in a filesystem like S3\r\n* Martin previously argued against adding the compression algo in the filename for Parquet files, so maybe that's not a good idea\r\n\r\n**Disk partitioning**\r\n\r\n`to_parquet` has Hive-compliant Disk partitioning via `partition_on` and we should bring `partition_on` to CSV writers and any other files that also can benefit from disk partitioning.\r\n\r\n**Builder interface**\r\n\r\nWe currently have single method interfaces that take lots of arguments:\r\n\r\n<img width=\"730\" alt=\"Screen Shot 2021-09-15 at 10 09 24 AM\" src=\"https://user-images.githubusercontent.com/2722395/133460017-1a1446df-f4a4-4252-8c0f-d3f0b60e8d56.png\">\r\n\r\nThe builder pattern could provide a more ergonomic end user API:\r\n\r\n* `ddf.write.save_mode(\"append\").compression(\"gzip\").csv(\"some-folder\")`\r\n* `ddf.write.save_mode(\"append\").compression(\"gzip\").parquet(\"some-folder\")`\r\n\r\nThink the builder pattern is consistent with how users chain method calls when using other Dask APIs (e.g. DataFrames).\r\n\r\nThe builder pattern could also help reduce tech debt.  We'd have a single place in the codebase to implement the `partition_on`, `save_mode`, and `compression` logic, so we wouldn't need to handle this logic in every writer.\r\n\r\nIt's possible the builder pattern is unPythonic, but not sure huge argument lists are Pythonic either.\r\n\r\n**Backwards compatibility**\r\n\r\nI'm suggesting creating a new interface and keeping the existing backwards compatible with a refactoring like this:\r\n\r\n```\r\ndef to_parquet(df, path, engine='auto', compression='default', write_index=True...):\r\n    df.write.engine(\"auto\").compression(\"default\").write_index(True).parquet(path)\r\n```\r\n\r\nI'm not suggesting adding a big burden of maintaining two separate APIs.\r\n\r\n**Strength of my opinion**\r\n\r\nThis is what I'd like as a user and I'm sure there are tons of details I'm missing.  Feel free to educate me if this suggestion is a bad idea.  This is a weakly held opinion and I welcome feedback.\r\n\r\n**Other details**\r\n\r\nI am glossing over some details to avoid making this message too long (e.g. the `single_file` option in `to_csv`).  I'll be happy to go through each and every option if folks are interested in investigating this further.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/920131855/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/921235990",
        "html_url": "https://github.com/dask/dask/issues/8147#issuecomment-921235990",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8147",
        "id": 921235990,
        "node_id": "IC_kwDOAbcwm8426PIW",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-16T20:51:29Z",
        "updated_at": "2021-09-16T20:51:29Z",
        "author_association": "MEMBER",
        "body": "A few high-level thoughts, without getting into too much detail.\r\n\r\nI totally agree that the large number of options available in the various IO functions currently makes them hard to use and hard to optimise. Obviously they have grown organically, as more options have become available. \r\n\r\nSecondly, I agree that we can revisit what reasonable defaults to have, such as data overwrite and filename generation. Some of these will be the same across IO storage types, some not.\r\n\r\nI am against the \"builder\" interface, I don't see what it gains us, except for a lot of extra `.` in the code.  Given that the eventual IO routine will not be known until the end, we cannot verify the values held in the builder (e.g., compression, in your example, which could be \"gzip\", but could be a dict for parquet) in the chain. Indeed I find it unpythonic!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/921235990/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]