[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850068416",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850068416",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850068416,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDA2ODQxNg==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T02:37:44Z",
        "updated_at": "2021-05-28T02:37:44Z",
        "author_association": "MEMBER",
        "body": "Thanks for writing this up @ian-r-rose !\r\n\r\nThere is no doubt that `layers.py` needs to be reorganized into a more-maintainable module structure.  The only reason we didn't do it immediately was so we could have a larger discussion like this.\r\n\r\nDo you have a specific reason to prefer the shadow `*_layers` structure over an organization where there is a dedicated `layers/` directory with `array` and `dataframe` submodules?  My only worry is that there may be significant layer logic that can/should be shared between the dataframe and array APIs.  Also, I'm curious if you have thoughts on *where* Blockwise-based layer logic should live moving forward.  Right now, some layer-related definitions (like `BlockwiseDep`) live in `blockwise.py`, because that is another \"import-safe\" module.  Do you think we should keep `Blockwise` in this module, and move everything else somewhere more \"layer-specific\"?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850068416/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850077950",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850077950",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850077950,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDA3Nzk1MA==",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T03:07:40Z",
        "updated_at": "2021-05-28T03:07:40Z",
        "author_association": "MEMBER",
        "body": "\r\n> There is no doubt that `layers.py` needs to be reorganized into a more-maintainable module structure. The only reason we didn't do it immediately was so we could have a larger discussion like this.\r\n\r\nYep, in our discussion earlier we talked about how we had kicked the can down the road, and now the can is back :)\r\n\r\n> Do you have a specific reason to prefer the shadow `*_layers` structure over an organization where there is a dedicated `layers/` directory with `array` and `dataframe` submodules?\r\n\r\nI don't have a strong reason to prefer `*_layers` over `layers`, other than a general preference towards shallower hierarchies where it makes sense. But I'm certainly willing to be talked out of it.\r\n\r\n> My only worry is that there may be significant layer logic that can/should be shared between the dataframe and array APIs. Also, I'm curious if you have thoughts on _where_ Blockwise-based layer logic should live moving forward.\r\n\r\nThis is a good point. I suppose it doesn't worry me too much to have some things like `blockwise` and an import-safe `utils` in the root, but if that feels messy to you, I wouldn't have a strong objection to going deeper.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850077950/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850092399",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850092399",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850092399,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDA5MjM5OQ==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T03:56:22Z",
        "updated_at": "2021-05-28T03:56:22Z",
        "author_association": "MEMBER",
        "body": "> a dedicated layers/ directory with `array` and `dataframe` submodules?\r\n\r\nBased on my experience building sheds for bicycles, I'd also prefer this structure. I guess it feels a little more equivalent to the `array`/`dataframe` submodules for them to have exactly the same names. But mostly, I think it will be nice to have a `dask/layers` base module for exactly the sort of\r\n\r\n> significant layer logic that can/should be shared\r\n\r\nthat we'll inevitably end up with. I'd probably vote for moving `blockwise.py`, and maybe even `highlevel.py` (though maybe there are issues with that one I haven't thought of), into `dask/layers` as well.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850092399/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850183202",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850183202",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850183202,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDE4MzIwMg==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T06:40:55Z",
        "updated_at": "2021-05-28T06:40:55Z",
        "author_association": "MEMBER",
        "body": "I'd second Gabe's last comment - this feels like an organization structure I'd be able to wrap my head around relatively easily.\r\n\r\n (Mind you, I'm new to this area of the code in general, so I don't have any special insight on avoiding potential problems down the track) ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850183202/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850206467",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850206467",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850206467,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDIwNjQ2Nw==",
        "user": {
            "login": "GenevieveBuckley",
            "id": 30920819,
            "node_id": "MDQ6VXNlcjMwOTIwODE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30920819?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/GenevieveBuckley",
            "html_url": "https://github.com/GenevieveBuckley",
            "followers_url": "https://api.github.com/users/GenevieveBuckley/followers",
            "following_url": "https://api.github.com/users/GenevieveBuckley/following{/other_user}",
            "gists_url": "https://api.github.com/users/GenevieveBuckley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/GenevieveBuckley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/GenevieveBuckley/subscriptions",
            "organizations_url": "https://api.github.com/users/GenevieveBuckley/orgs",
            "repos_url": "https://api.github.com/users/GenevieveBuckley/repos",
            "events_url": "https://api.github.com/users/GenevieveBuckley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/GenevieveBuckley/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T07:19:53Z",
        "updated_at": "2021-05-28T07:19:53Z",
        "author_association": "MEMBER",
        "body": "Also, Ian suggested we might want a `dask.layer_utils` - see this for context https://github.com/dask/dask/pull/7595#discussion_r641015828\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850206467/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850490458",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850490458",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850490458,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDQ5MDQ1OA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T15:16:02Z",
        "updated_at": "2021-05-28T15:16:02Z",
        "author_association": "MEMBER",
        "body": "Crazy idea, what if we left these in dask/dataframe or dask/array and just\naccepted the added requirements on the scheduler.\n\nThis is somewhat unclean, but we might do it anyway and see if anyone\ncomplains.\n\nIn practice everyone I know deploys the same software environment on the\nscheduler as they do on the workers.\n\nI've always been the one to argue for this cleanliness, but I wanted us to\nbe aware of breaking this cleanliness as an option.\n\nOn Fri, May 28, 2021 at 2:20 AM Genevieve Buckley ***@***.***>\nwrote:\n\n> Also, Ian suggested we might want a dask.layer_utils - see this for\n> context #7595 (comment)\n> <https://github.com/dask/dask/pull/7595#discussion_r641015828>\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/7722#issuecomment-850206467>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTHWM3SJZ5IDXMWGNQDTP472TANCNFSM45VQGBYQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850490458/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850548222",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850548222",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850548222,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDU0ODIyMg==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T16:56:40Z",
        "updated_at": "2021-05-28T17:15:07Z",
        "author_association": "MEMBER",
        "body": "Thanks for getting this conversation started @ian-r-rose!\r\n\r\nFWIW, like @rjzamora and @gjoseph92, I would prefer a single new `layers/` directory over multiple `*_layers/` directories for each collection type.\r\n\r\nThat said, I'd like to propose another option where we stick with our existing directory structure by having separate `array/layers.py`, `dataframe/layers.py`, etc. files for the various Dask collections, as well as a root `layers.py` file for `Layer` code which is used in multiple collections. To me this seems like a natural approach as we already do this today with files like `core.py` and `utils.py`. Do others have thoughts on this structure? \r\n\r\nRe: allowing the scheduler to run NumPy, pandas, ... code. That's certainly something we should consider. I'm also not aware of any deployments where the scheduler and workers have separate software environments. Do folks who are writing `Layer` classes feel pain around not being able to use libraries like NumPy and pandas? ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850548222/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850582380",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850582380",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850582380,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDU4MjM4MA==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T18:03:26Z",
        "updated_at": "2021-05-28T18:03:26Z",
        "author_association": "MEMBER",
        "body": ">I'd like to propose another option where we stick with our existing directory structure by having separate array/layers.py, dataframe/layers.py, etc. files for the various Dask collections, as well as a root layers.py file for Layer code which is used in multiple collections.\r\n\r\nI don't think I follwo this. Are you suggesting that we add `layers.py` files to the existing `dask.array` and `dask.dataframe` modules?\r\n\r\n>Do folks who are writing Layer classes feel pain around not being able to use libraries like NumPy and pandas?\r\n\r\nI do think there are cases where it would be very convenient to bake numpy/pandas-API usge into the graph-materialization logic.  For example, when slicing out chunks of an Array/DataFrame for each task that is generated.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850582380/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850590618",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850590618",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850590618,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDU5MDYxOA==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T18:21:36Z",
        "updated_at": "2021-05-28T18:21:36Z",
        "author_association": "MEMBER",
        "body": "> Are you suggesting that we add layers.py files to the existing dask.array and dask.dataframe modules?\r\n\r\nYep, that's exactly it. This will help avoid a single, unwieldy `layers.py` file as we add more `Layer`s (as Ian  mentioned in his original comment), but will also conform nicely to our existing file structure. Specifically, I'm proposing something like:\r\n\r\n\r\n```\r\ndask/\r\n\u251c\u2500\u2500 ...\r\n\u251c\u2500\u2500 layers.py (layers shared across multiple collections go here)\r\n\u251c\u2500\u2500 array/\r\n      \u251c\u2500\u2500 ...\r\n      \u2514\u2500\u2500 layers.py (array layers go here)\r\n\u251c\u2500\u2500 dataframe/\r\n      \u251c\u2500\u2500 ...\r\n      \u2514\u2500\u2500 layers.py (dataframe layers go here)\r\n\u251c\u2500\u2500 ...\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850590618/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850598561",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850598561",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850598561,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDU5ODU2MQ==",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T18:38:50Z",
        "updated_at": "2021-05-28T18:38:50Z",
        "author_association": "MEMBER",
        "body": " > That said, I'd like to propose another option where we stick with our existing directory structure by having separate `array/layers.py`, `dataframe/layers.py`, etc. files for the various Dask collections, as well as a root `layers.py` file for `Layer` code which is used in multiple collections. To me this seems like a natural approach as we already do this today with files like `core.py` and `utils.py`. Do others have thoughts on this structure?\r\n\r\nThis is certainly cleaner, and we discussed it previously in #7381. I just want to flag that a consequence of this is that you will need numpy/pandas installed in order to import/instantiate the layers, so we would want to do it deliberately.\r\n\r\n> Re: allowing the scheduler to run NumPy, pandas, ... code. That's certainly something we should consider. I'm also not aware of any deployments where the scheduler and workers have separate software environments. Do folks who are writing `Layer` classes feel pain around not being able to use libraries like NumPy and pandas?\r\n\r\nYes, there are a number of functions around reshaping, reasoning about nans and dtypes and such that would be useful to be able to use in `Layer` classes. We may be able to get rid of `CallableLazyImport` all together. However, as far as I know we still want to keep the restriction of not deserializing user code/objects on the scheduler, so there are perhaps fewer things that one can do with numpy/pandas than might appear on first blush.\r\n\r\nI think that in practice, keeping the layer implementations separate does allow for easier enforcing of serialization restrictions, even if we do want to relax the numpy/pandas restrictions. But if the specific constraints are well-documented and clear, perhaps it's not a big deal.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850598561/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850605110",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850605110",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850605110,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDYwNTExMA==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T18:53:10Z",
        "updated_at": "2021-05-28T18:53:10Z",
        "author_association": "MEMBER",
        "body": ">  I just want to flag that a consequence of this is that you will need numpy/pandas installed in order to import/instantiate the layers, so we would want to do it deliberately.\r\n\r\nHmm I could be missing something, but I don't quite follow why this would require us to import NumPy/pandas. We would continue to avoid top-level imports in, for example `array/layers.py`, just like we do today in the root-level `layers.py`. We would also add the new `dask.array.layers`, `dask.dataframe.layers` modules to our import check in CI\r\n\r\nhttps://github.com/dask/dask/blob/636b0d664e78febc54434131d6f7f906a6e74f6a/continuous_integration/scripts/test_imports.sh#L17\r\n\r\nlike we did for `dask.layers` previously ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850605110/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850619033",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850619033",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850619033,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDYxOTAzMw==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T19:13:42Z",
        "updated_at": "2021-05-28T19:13:42Z",
        "author_association": "MEMBER",
        "body": "I assume that we could change the existing behavior, but we currently import a lot if things in `dataframe/__init__` that in-turn import pandas etc.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850619033/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850619934",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850619934",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850619934,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDYxOTkzNA==",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T19:15:43Z",
        "updated_at": "2021-05-28T19:15:43Z",
        "author_association": "MEMBER",
        "body": "> I assume that we could change the existing behavior, but we currently import a lot if things in `dataframe/__init__` that in-turn import pandas etc.\r\n\r\nRight, it seems like an enormous undertaking to avoid importing numpy/pandas based on all the things in `__init__`",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850619934/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850633694",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850633694",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850633694,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDYzMzY5NA==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T19:41:19Z",
        "updated_at": "2021-05-28T19:50:45Z",
        "author_association": "MEMBER",
        "body": "> I assume that we could change the existing behavior, but we currently import a lot if things in dataframe/__init__ that in-turn import pandas etc.\r\n\r\nAh, I forgot that something like `from dask.dataframe.layers import FooLayer` will run through `dask/dataframe/__init__.py` and not just go straight to `dask/dataframe/layers.py`. In that case, I agree that if we want to keep the NumPy/pandas `import` restrictions then moving layers to a separate `layers/` directory as proposed in https://github.com/dask/dask/issues/7722#issuecomment-850068416 is a better approach.\r\n\r\nI suppose the question we need to answer now is whether or not we want to continue to keep the `import` restrictions or not. I'm personally open to relaxing this requirement as it sounds like it would reduce the burden on developers and we're not aware of any cases where relaxing the `import` restriction would be an issue. What do others think? \r\n\r\nEDIT: I do wonder if this will have any implications for a future version of the scheduler which might be written in some other language like C or Go",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850633694/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/850641778",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-850641778",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 850641778,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDY0MTc3OA==",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-28T20:00:03Z",
        "updated_at": "2021-05-28T20:00:03Z",
        "author_association": "MEMBER",
        "body": "> EDIT: I do wonder if this will have any implications for a future version of the scheduler which might be written in some other language like C or Go\r\n\r\nGood point -- avoiding numpy/pandas would make that somewhat more tractable.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/850641778/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/853089473",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-853089473",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 853089473,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MzA4OTQ3Mw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-02T14:44:33Z",
        "updated_at": "2021-06-02T14:44:33Z",
        "author_association": "MEMBER",
        "body": "Just to hop on here late :) It seems like the most approachable solution, that leaves our options open re-imports is to have a separate top-level `layers` directory as suggested in https://github.com/dask/dask/issues/7722#issuecomment-850068416. \r\n\r\nIn such a directory we could even enforce that pandas and numpy not be imported. \r\n\r\nI am imagining this structure:\r\n```\r\n\u251c\u2500\u2500 layers\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 array.py\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 core.py\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dataframe.py\r\n\u2514\u2500\u2500\u00a0\u2514\u2500\u2500 utils.py\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/853089473/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/853363206",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-853363206",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 853363206,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MzM2MzIwNg==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-02T20:31:56Z",
        "updated_at": "2021-06-02T20:31:56Z",
        "author_association": "MEMBER",
        "body": "@jsignell the only issue with that, versus having `array`, `dataframe`, etc. subdirectories like:\r\n```\r\n.\r\n\u2514\u2500\u2500 layers\r\n    \u251c\u2500\u2500 array\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 core.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 map_overlap.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 optimization.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 rechunk.py\r\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 slicing.py\r\n    \u251c\u2500\u2500 dataframe\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 core.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 io.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 optimization.py\r\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 shuffle.py\r\n    \u251c\u2500\u2500 blockwise.py\r\n    \u251c\u2500\u2500 core.py\r\n    \u2514\u2500\u2500 optimization.py\r\n```\r\nis that we'd have to collapse a lot of code into one file. For example, `array/overlap.py` and `array/slicing.py` are currently two files (1k and 2k lines respectively); bringing all of that (and more) into one `array.py` file would get really long.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/853363206/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/853374991",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-853374991",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 853374991,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1MzM3NDk5MQ==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-02T20:52:49Z",
        "updated_at": "2021-06-02T20:52:49Z",
        "author_association": "MEMBER",
        "body": "> Crazy idea, what if we left these in dask/dataframe or dask/array and just accepted the added requirements on the scheduler. This is somewhat unclean, but we might do it anyway and see if anyone complains. In practice everyone I know deploys the same software environment on the scheduler as they do on the workers. I've always been the one to argue for this cleanliness, but I wanted us to be aware of breaking this cleanliness as an option.\r\n\r\nI have been thinking this as well. It's starting to feel like cumbersome and wide-reaching restriction for a relatively niche use case. I'd imagine >95% of users don't care. Additionally, NumPy is already effectively required on the scheduler (it's a transitive dependency of bokeh).\r\n\r\n> I do wonder if this will have any implications for a future version of the scheduler which might be written in some other language like C or Go\r\n\r\nI agree with this, but only if we actually think we're going to rewrite _all_ of the scheduler in something besides Cython. And beyond that, it would only apply if the high-level graph logic in dask itself were rewritten in a different language too\u2014because that dask code is what lowers HLGs, whether locally with the threaded scheduler or on a cluster with distributed.\r\n\r\nIf we got to that point, I'd imagine dask graphs were no longer even Python dicts, but some other data structure managed by a compiled library with a Python API, and dask as we know it would be pretty different. If we don't see that happening in a timescale we care about, then even if the whole scheduler were rewritten in Rust by next year, I imagine it would still embed a Python interpreter to basically run `HighLevelGraph.to_dict()`. And in that case, that Python interpreter could still require NumPy and Pandas if it needed to, even if the whole rest of the scheduler was isolated.\r\n\r\nAll that said\u2014moving some files around and changing imports is not _that_ much work. It doesn't have that many downsides besides a few days' toil. And if we decide we don't like it in the future, it's probably pretty easy to merge things back together. If we think there's a real chance that keeping NumPy and Pandas imports out of the scheduler will make a difference for a meaningful set of users, then it's much easier to adopt that stance now and undo it later than to go the other way around.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/853374991/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/854066682",
        "html_url": "https://github.com/dask/dask/issues/7722#issuecomment-854066682",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7722",
        "id": 854066682,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg1NDA2NjY4Mg==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-06-03T17:54:34Z",
        "updated_at": "2021-06-03T17:54:34Z",
        "author_association": "MEMBER",
        "body": "Aside from the imports discussion, I  like the idea of having the layers in their own hierarchy. \r\n\r\nAs Gabe mentioned there will be multiple files per collection type so I think the options to consider are:\r\n\r\n```\r\n.\r\n\u2514\u2500\u2500 array\r\n    \u251c\u2500\u2500 core.py\r\n    \u251c\u2500\u2500 map_overlap.py\r\n    \u251c\u2500\u2500 optimization.py\r\n\u2514\u2500\u2500 layers\r\n    \u251c\u2500\u2500 array\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 core.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 map_overlap.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 optimization.py\r\n```\r\n\r\nOR\r\n\r\n```\r\n.\r\n\u2514\u2500\u2500 array\r\n    \u251c\u2500\u2500 core.py\r\n    \u251c\u2500\u2500 map_overlap.py\r\n    \u251c\u2500\u2500 optimization.py\r\n    \u251c\u2500\u2500 layers\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 core.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 map_overlap.py\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 optimization.py\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/854066682/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]