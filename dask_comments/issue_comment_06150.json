[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/620739586",
        "html_url": "https://github.com/dask/dask/issues/6150#issuecomment-620739586",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6150",
        "id": 620739586,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDczOTU4Ng==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-28T17:12:29Z",
        "updated_at": "2020-04-28T17:12:29Z",
        "author_association": "MEMBER",
        "body": "Thanks for the feature request @astrofrog! In general, such an option seems nice. Do you know what impact using `bottleneck` functions would have on NumPy's NEP-18 dispatching? For example, today if I have a dask array with sparse chunks, then we return a sparse array:\r\n\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: import dask.array as da\r\n\r\nIn [3]: import sparse\r\n\r\nIn [4]: x = da.random.random((100, 100), chunks=(10, 10))\r\n\r\nIn [5]: x[x < 0.1] = np.nan\r\n\r\nIn [6]: y = x.map_blocks(sparse.COO.from_numpy)\r\n\r\nIn [7]: da.nanmax(y, axis=0).compute()\r\nOut[7]: <COO: shape=(100,), dtype=float64, nnz=100, fill_value=0.0>\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/620739586/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/620750414",
        "html_url": "https://github.com/dask/dask/issues/6150#issuecomment-620750414",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6150",
        "id": 620750414,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDc1MDQxNA==",
        "user": {
            "login": "astrofrog",
            "id": 314716,
            "node_id": "MDQ6VXNlcjMxNDcxNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/314716?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/astrofrog",
            "html_url": "https://github.com/astrofrog",
            "followers_url": "https://api.github.com/users/astrofrog/followers",
            "following_url": "https://api.github.com/users/astrofrog/following{/other_user}",
            "gists_url": "https://api.github.com/users/astrofrog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/astrofrog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/astrofrog/subscriptions",
            "organizations_url": "https://api.github.com/users/astrofrog/orgs",
            "repos_url": "https://api.github.com/users/astrofrog/repos",
            "events_url": "https://api.github.com/users/astrofrog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/astrofrog/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-28T17:33:36Z",
        "updated_at": "2020-04-28T17:33:36Z",
        "author_association": "CONTRIBUTOR",
        "body": "@jrbourbeau - thanks for the quick reply! I'm not familiar enough with NEP-18 to know the implications here, but if bottleneck can only handle regular Numpy arrays, it may still be worth allowing it to be used for that specific case?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/620750414/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/620804819",
        "html_url": "https://github.com/dask/dask/issues/6150#issuecomment-620804819",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6150",
        "id": 620804819,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDgwNDgxOQ==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-28T19:19:47Z",
        "updated_at": "2020-04-28T19:19:47Z",
        "author_association": "MEMBER",
        "body": "Ideally dask would check if bottleneck is installed and swap out numpy functions for bottleneck functions if they're available. We already do this for `toolz`, where we swap out faster `cytoolz` functions if `cytoolz` is installed.\r\n\r\nA couple of hurdles that come to mind are (1) we would need to make sure not to modify our current behavior when working with numpy-like arrays (e.g. sparse or cupy arrays). For example, when using `bottleneck.nanmax` on a `sparse.COO` array, bottleneck tries to coerce the input to a (dense) numpy array:\r\n\r\n```python\r\nIn [1]: import sparse\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: import bottleneck as bn\r\n\r\nIn [4]: x = np.random.random((10, 10))\r\n\r\nIn [5]: x[x < 0.1] = np.nan\r\n\r\nIn [6]: xs = sparse.COO.from_numpy(x)\r\n\r\nIn [7]: xs\r\nOut[7]: <COO: shape=(10, 10), dtype=float64, nnz=100, fill_value=0.0>\r\n\r\nIn [8]: bn.nanmax(xs, axis=0)\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-8-aa184c3b50db> in <module>\r\n----> 1 bn.nanmax(xs, axis=0)\r\n\r\n~/miniforge3/envs/dask-dev/lib/python3.8/site-packages/sparse/_sparse_array.py in __array__(self, **kwargs)\r\n    220\r\n    221         if not AUTO_DENSIFY:\r\n--> 222             raise RuntimeError(\r\n    223                 \"Cannot convert a sparse array to dense automatically. \"\r\n    224                 \"To manually densify, use the todense method.\"\r\n\r\nRuntimeError: Cannot convert a sparse array to dense automatically. To manually densify, use the todense method.\r\n```\r\n\r\n(2) numpy's `nan*` functions have `out=` and `keepdims=` keyword arguments that don't appear to be implemented in bottleneck (at least from looking at the API docs). \r\n\r\nIf we can use bottleneck functions without too much added code complexity and without disrupting the user experience, I'd be in favor of such an addition. \r\n\r\n@TomAugspurger any thoughts on what it's been like using bottleneck in pandas or what you think about using it here?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/620804819/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/620810995",
        "html_url": "https://github.com/dask/dask/issues/6150#issuecomment-620810995",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6150",
        "id": 620810995,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMDgxMDk5NQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-28T19:33:30Z",
        "updated_at": "2020-04-28T19:33:30Z",
        "author_association": "MEMBER",
        "body": "I think a config that changes things globally would be fine. I'd recommend not having it enabled by default (even if bottleneck is present). Bottleneck has some issues with precision for float32 arrays: https://github.com/pydata/bottleneck/issues/193.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/620810995/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]