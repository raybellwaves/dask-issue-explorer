[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/802960193",
        "html_url": "https://github.com/dask/dask/issues/7416#issuecomment-802960193",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7416",
        "id": 802960193,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjk2MDE5Mw==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-19T16:33:54Z",
        "updated_at": "2021-03-19T16:33:54Z",
        "author_association": "MEMBER",
        "body": "Thanks for bringing this up @alimanfoo! I agree that the current implementation could be improved by just computing chunksize across the margins of each dimension. FWIW we do a similar optimization for computing the length of a Dask DataFrame (i.e. we only compute the length of a single column). ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/802960193/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/802960412",
        "html_url": "https://github.com/dask/dask/issues/7416#issuecomment-802960412",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7416",
        "id": 802960412,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjk2MDQxMg==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-19T16:34:15Z",
        "updated_at": "2021-03-19T16:34:15Z",
        "author_association": "MEMBER",
        "body": "cc @gjoseph92 as this issue may interest you ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/802960412/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/803180836",
        "html_url": "https://github.com/dask/dask/issues/7416#issuecomment-803180836",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7416",
        "id": 803180836,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzE4MDgzNg==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-19T23:01:31Z",
        "updated_at": "2021-03-19T23:01:31Z",
        "author_association": "MEMBER",
        "body": "Thanks for pointing this out @alimanfoo. I agree that there's probably a more efficient way to compute the chunksizes. A couple notes:\r\n\r\n* I might be wrong here, but I think we actually are already only computing along the margin/basis of each dimension: yes, we `map_blocks`, but then for each axis, we slice out the chunk shapes at index 0 of all other axes (key here is the `[0]` (I also find this code very confusing to read FYI)):\r\n  https://github.com/dask/dask/blob/b288de7d448ba8f05a93ea5cee19807740b86249/dask/array/core.py#L1264-L1270\r\n  I think this means we only end up referencing the blocks along the \"edges\" of the `chunk_shapes`, not the \"center\", so when we cull the graph in `compute`, unnecessary keys of the `chunk_shapes` array\u2014and therefore the keys of the array we're calling `compute_chunk_sizes` on\u2014won't be computed.\r\n* Your approach is clever, but because you're computing over the _indexer_, versus the array that has NaNs in its chunks, I think it would be hard for dask to use in generality. I really like the approach of only needing to compute the indexer, but just given some random array with NaNs in its chunks, you can't necessarily go back and find the thing that indexed it, compute it, then propagate those known chunks forward though whatever other operations came subsequently (without, at least, some very complex and likely impossible graph introspection).\r\n\r\nBasically, if you need to have known chunksizes, `arr[idx.compute()]` is probably always going to be faster than `arr[idx].compute_chunk_sizes()`, since you have some special information here that dask can't determine: `idx` is the only thing you need to compute to determine the final chunk sizes. This may be worth considering for xarray, while unknown shapes still aren't supported.\r\n\r\nStill, there's room to improve: we're computing chunk sizes even for axes where we already know them. In fact, even when there are no NaNs at all in the chunks, this method will still compute everything. The docstring says \"This is especially useful when the chunk sizes are unknown\" as though there are other situations in which you'd want to call it; perhaps what we actually want is \"This fills in NaNs in chunksizes, if there are any\".\r\n\r\nAnother little thought: once `compute_chunk_sizes` has gone to the trouble of computing all this, it would be kinda nice if it could cull blocks from the Array that we now know aren't used. For example:\r\n\r\n```python\r\nnothing = x[da.full(x.shape[:1], False)]\r\n# determine that there are going to be 0 elements in `nothing`\r\nnothing.compute_chunk_sizes()\r\n# yet this still requires computing all of `x` again, just to toss it out\r\nnothing.compute()\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/803180836/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/803460973",
        "html_url": "https://github.com/dask/dask/issues/7416#issuecomment-803460973",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7416",
        "id": 803460973,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ2MDk3Mw==",
        "user": {
            "login": "alimanfoo",
            "id": 703554,
            "node_id": "MDQ6VXNlcjcwMzU1NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/703554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alimanfoo",
            "html_url": "https://github.com/alimanfoo",
            "followers_url": "https://api.github.com/users/alimanfoo/followers",
            "following_url": "https://api.github.com/users/alimanfoo/following{/other_user}",
            "gists_url": "https://api.github.com/users/alimanfoo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alimanfoo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alimanfoo/subscriptions",
            "organizations_url": "https://api.github.com/users/alimanfoo/orgs",
            "repos_url": "https://api.github.com/users/alimanfoo/repos",
            "events_url": "https://api.github.com/users/alimanfoo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alimanfoo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-20T20:47:03Z",
        "updated_at": "2021-03-20T20:47:03Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks Gabe, appreciate there is some complexity here.\n\nJust wanted to mention that arr[idx.compute()] is not an option for me\nunfortunately. Because idx is of the order of 50MB computing it then using\nas an argument causes a blow up of memory usage on the scheduler. That is\nin fact what I was originally doing, then found I was running out of\nmemory, then started exploring indexing with the dask array, then hit this\nissue :-)\n\nOn Fri, 19 Mar 2021, 23:01 Gabe Joseph, ***@***.***> wrote:\n\n> Thanks for pointing this out @alimanfoo <https://github.com/alimanfoo>. I\n> agree that there's probably a more efficient way to compute the chunksizes.\n> A couple notes:\n>\n>    - I might be wrong here, but I think we actually are already only\n>    computing along the margin/basis of each dimension: yes, we map_blocks,\n>    but then for each axis, we slice out the chunk shapes at index 0 of all\n>    other axes (key here is the [0] (I also find this code very confusing\n>    to read FYI)):\n>\n>    https://github.com/dask/dask/blob/b288de7d448ba8f05a93ea5cee19807740b86249/dask/array/core.py#L1264-L1270\n>    I think this means we only end up referencing the blocks along the\n>    \"edges\" of the chunk_shapes, not the \"center\", so when we cull the\n>    graph in compute, unnecessary keys of the chunk_shapes array\u2014and\n>    therefore the keys of the array we're calling compute_chunk_sizes\n>    on\u2014won't be computed.\n>    - Your approach is clever, but because you're computing over the\n>    *indexer*, versus the array that has NaNs in its chunks, I think it\n>    would be hard for dask to use in generality. I really like the approach of\n>    only needing to compute the indexer, but just given some random array with\n>    NaNs in its chunks, you can't necessarily go back and find the thing that\n>    indexed it, compute it, then propagate those known chunks forward though\n>    whatever other operations came subsequently (without, at least, some very\n>    complex and likely impossible graph introspection).\n>\n> Basically, if you need to have known chunksizes, arr[idx.compute()] is\n> probably always going to be faster than arr[idx].compute_chunk_sizes(),\n> since you have some special information here that dask can't determine:\n> idx is the only thing you need to compute to determine the final chunk\n> sizes. This may be worth considering for xarray, while unknown shapes still\n> aren't supported.\n>\n> Still, there's room to improve: we're computing chunk sizes even for axes\n> where we already know them. In fact, even when there are no NaNs at all in\n> the chunks, this method will still compute everything. The docstring says\n> \"This is especially useful when the chunk sizes are unknown\" as though\n> there are other situations in which you'd want to call it; perhaps what we\n> actually want is \"This fills in NaNs in chunksizes, if there are any\".\n>\n> Another little thought: once compute_chunk_sizes has gone to the trouble\n> of computing all this, it would be kinda nice if it could cull blocks from\n> the Array that we now know aren't used. For example:\n>\n> nothing = x[da.full(x.shape[:1], False)]\n> # determine that there are going to be 0 elements in `nothing`\n> nothing.compute_chunk_sizes()\n> # yet this still requires computing all of `x` again, just to toss it out\n> nothing.compute()\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/7416#issuecomment-803180836>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAFLYQTD7NAIPEG7MFUFOG3TEPJVXANCNFSM4ZOQYEAQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/803460973/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/805105746",
        "html_url": "https://github.com/dask/dask/issues/7416#issuecomment-805105746",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7416",
        "id": 805105746,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTEwNTc0Ng==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-23T17:50:35Z",
        "updated_at": "2021-03-23T17:50:35Z",
        "author_association": "MEMBER",
        "body": "> Because idx is of the order of 50MB computing it then using as an argument causes a blow up of memory usage on the scheduler\r\n\r\nInteresting. 50MB is big, but it's not _that_ big. I wonder we should instead focus our efforts on fancy indexing (`take`) performance with large indexers.\r\n\r\nIt's interesting to me that the memory is blowing up on the scheduler specifically, but neither on your client process (as it generates the graph for `arr[idx.compute()]`), nor on the workers as they actually compute it? Currently, there's no high-level graph for slicing, so invoking `arr[idx.compute()]` on the client will generate the whole graph up-front\u2014basically, the memory usage of that should be the same on both the client and the scheduler. Does your scheduler have less memory than the client machine?\r\n\r\nThis is a bit of a shot in the dark, but I'm curious if you see the same memory blow-up with:\r\n```python\r\ncomputed_idx = idx.compute()\r\nwith dask.config.set(**{'array.slicing.split_large_chunks': False}):\r\n    sliced = arr[computed_idx]\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/805105746/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/848841376",
        "html_url": "https://github.com/dask/dask/issues/7416#issuecomment-848841376",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7416",
        "id": 848841376,
        "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODg0MTM3Ng==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-05-26T14:57:46Z",
        "updated_at": "2021-05-26T14:57:46Z",
        "author_association": "MEMBER",
        "body": "Just wanted to drop a reference to the slicing high level graph layer that Genevieve has been working on. https://github.com/dask/dask/pull/7655",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/848841376/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]