{
    "url": "https://api.github.com/repos/dask/dask/issues/5695",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/5695/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/5695/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/5695/events",
    "html_url": "https://github.com/dask/dask/issues/5695",
    "id": 535118666,
    "node_id": "MDU6SXNzdWU1MzUxMTg2NjY=",
    "number": 5695,
    "title": "Configuration Validation",
    "user": {
        "login": "quasiben",
        "id": 1403768,
        "node_id": "MDQ6VXNlcjE0MDM3Njg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/quasiben",
        "html_url": "https://github.com/quasiben",
        "followers_url": "https://api.github.com/users/quasiben/followers",
        "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
        "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
        "organizations_url": "https://api.github.com/users/quasiben/orgs",
        "repos_url": "https://api.github.com/users/quasiben/repos",
        "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
        "received_events_url": "https://api.github.com/users/quasiben/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 1012929478,
            "node_id": "MDU6TGFiZWwxMDEyOTI5NDc4",
            "url": "https://api.github.com/repos/dask/dask/labels/config",
            "name": "config",
            "color": "1586c0",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-12-09T18:32:07Z",
    "updated_at": "2022-12-08T18:12:08Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "I wanted to start a discussion on how to improve dask configuration through validation. \r\n\r\nA common problem users experience (with regards to configuration) is invalid and/or missing values.  This can often bubble up to the user in obscure errors and only after the application has started.  \r\n\r\nA simple example:\r\n\r\n```python\r\nIn [1]: import dask\r\n\r\nIn [2]: dask.config.get(\"logging\")\r\nOut[2]: {'distributed': 'info', 'distributed.client': 'warning', 'bokeh': 'critical'}\r\n\r\nIn [3]: dask.config.set({\"logging.distributed\": \"inf\"})\r\nOut[3]: <dask.config.set at 0x7f0ddec57ac8>\r\n\r\nIn [4]: from distributed import Client\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-4-fa1827681742> in <module>\r\n----> 1 from distributed import Client\r\n\r\n/datasets/bzaitlen/GitRepos/distributed/distributed/__init__.py in <module>\r\n----> 1 from . import config\r\n      2 from dask.config import config\r\n      3 from .actor import Actor, ActorFuture\r\n      4 from .core import connect, rpc\r\n      5 from .deploy import LocalCluster, Adaptive, SpecCluster, SSHCluster\r\n\r\n/datasets/bzaitlen/GitRepos/distributed/distributed/config.py in <module>\r\n    134\r\n    135\r\n--> 136 initialize_logging(dask.config.config)\r\n\r\n/datasets/bzaitlen/GitRepos/distributed/distributed/config.py in initialize_logging(config)\r\n    131             _initialize_logging_new_style(config)\r\n    132         else:\r\n--> 133             _initialize_logging_old_style(config)\r\n    134\r\n    135\r\n\r\n/datasets/bzaitlen/GitRepos/distributed/distributed/config.py in _initialize_logging_old_style(config)\r\n     91     for name, level in loggers.items():\r\n     92         if isinstance(level, str):\r\n---> 93             level = logging_names[level.upper()]\r\n     94         logger = logging.getLogger(name)\r\n     95         logger.setLevel(level)\r\n\r\nKeyError: 'INF'\r\n```\r\n\r\nWith configuration validation in place, the user would have received an error at the time of setting the value to `inf`, an invalid logging value.\r\n\r\n\r\nI think it would be beneficial to do one, possibly two things:\r\n\r\n1) Schema-tize configuration -- strongly type configuration values for a given key\r\n2) build cli tool to validate configuration is correct (dask-config)\r\n\r\nSome potentially libraries to consider in pursuit of validation:\r\n- https://schematics.readthedocs.io/en/latest/\r\n- https://traitlets.readthedocs.io/en/stable/\r\n- https://docs.python-cerberus.org/en/stable/index.html\r\n- https://marshmallow.readthedocs.io/en/stable/",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/5695/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/5695/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}