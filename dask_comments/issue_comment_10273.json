[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1541848785",
        "html_url": "https://github.com/dask/dask/issues/10273#issuecomment-1541848785",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10273",
        "id": 1541848785,
        "node_id": "IC_kwDOAbcwm85b5r7R",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-10T10:03:49Z",
        "updated_at": "2023-05-10T10:03:49Z",
        "author_association": "MEMBER",
        "body": "Thanks for your report. \r\n\r\nThis is actually intended behavior and the special case of `nout=1` is even mentioned explicitly in the [documentation](https://docs.dask.org/en/stable/delayed-api.html#dask.delayed.delayed). If anything, we should raise in this case because you are clearly not returning a 1-tuple.\r\n\r\nWhat you'd be looking for is something like an \"auto\" functionality. This is not implemented because dask is constructing the full task graph before any tasks are computed. Therefore, we need to know this information ahead of time.\r\n\r\nWhen using dask.distributed (e.g. using a LocalCluster) there is the possibility for tasks to launch new tasks such that the graph is fully dynamic, see https://distributed.dask.org/en/stable/task-launch.html",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1541848785/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1549588829",
        "html_url": "https://github.com/dask/dask/issues/10273#issuecomment-1549588829",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10273",
        "id": 1549588829,
        "node_id": "IC_kwDOAbcwm85cXNld",
        "user": {
            "login": "mdwgrogan",
            "id": 13625429,
            "node_id": "MDQ6VXNlcjEzNjI1NDI5",
            "avatar_url": "https://avatars.githubusercontent.com/u/13625429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mdwgrogan",
            "html_url": "https://github.com/mdwgrogan",
            "followers_url": "https://api.github.com/users/mdwgrogan/followers",
            "following_url": "https://api.github.com/users/mdwgrogan/following{/other_user}",
            "gists_url": "https://api.github.com/users/mdwgrogan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mdwgrogan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mdwgrogan/subscriptions",
            "organizations_url": "https://api.github.com/users/mdwgrogan/orgs",
            "repos_url": "https://api.github.com/users/mdwgrogan/repos",
            "events_url": "https://api.github.com/users/mdwgrogan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mdwgrogan/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-16T12:41:45Z",
        "updated_at": "2023-05-16T12:41:45Z",
        "author_association": "NONE",
        "body": "Noted on the expected behavior, and on the docs.\r\n\r\nI agree that there should be an exception raised - I think the problem is that the slice taken in the iterator means different things, but isn't necessarily invalid, so an exception isn't naturally raised at the source. In our case, it was raised downstream when we were multiplying together two arrays in a later task, and the dimensions did not work together (because of the slice).\r\n\r\nI might be able to contribute a PR, although I'd probably need some guidance. I think the exception should ideally raise when the Delayed task is created, but without the function executing on a small amount of inputs, I'm not sure how I'd tell the return type. Alternatively (more easily?), I checked that wrapping the function with a tuple-check in the case that nout is set does work:\r\n\r\n```python\r\ndef _check_len(func, n, *args, **kwargs):\r\n    def f(*args, **kwargs):\r\n        ret = func(*args, **kwargs)\r\n        if not isinstance(ret, tuple) or len(ret) != n:\r\n            raise RuntimeError(f\"Function {func.__name__} didn't return a tuple of length {n}\")\r\n        return ret\r\n    f.__name__ = func.__name__\r\n    f.__doc__ = func.__doc__\r\n    return f\r\n```\r\n\r\nThoughts?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1549588829/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1549664853",
        "html_url": "https://github.com/dask/dask/issues/10273#issuecomment-1549664853",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10273",
        "id": 1549664853,
        "node_id": "IC_kwDOAbcwm85cXgJV",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-05-16T13:20:01Z",
        "updated_at": "2023-05-16T13:20:01Z",
        "author_association": "MEMBER",
        "body": "Possibly but we'd likely need to relax the check on the object. While a tuple is surely the desired output I expect there are users that are relying on this simply being an iterarable/sequence of any kind.\r\n\r\nI would suggest to attempt the wrapping and see what breaks in our test suite :)\r\n\r\n@jrbourbeau do you have an idea how such a post-compute verification could be implemented?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1549664853/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1573852086",
        "html_url": "https://github.com/dask/dask/issues/10273#issuecomment-1573852086",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10273",
        "id": 1573852086,
        "node_id": "IC_kwDOAbcwm85dzxO2",
        "user": {
            "login": "d-v-b",
            "id": 3805136,
            "node_id": "MDQ6VXNlcjM4MDUxMzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3805136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/d-v-b",
            "html_url": "https://github.com/d-v-b",
            "followers_url": "https://api.github.com/users/d-v-b/followers",
            "following_url": "https://api.github.com/users/d-v-b/following{/other_user}",
            "gists_url": "https://api.github.com/users/d-v-b/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/d-v-b/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/d-v-b/subscriptions",
            "organizations_url": "https://api.github.com/users/d-v-b/orgs",
            "repos_url": "https://api.github.com/users/d-v-b/repos",
            "events_url": "https://api.github.com/users/d-v-b/events{/privacy}",
            "received_events_url": "https://api.github.com/users/d-v-b/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-06-02T14:42:46Z",
        "updated_at": "2023-06-02T14:42:46Z",
        "author_association": "MEMBER",
        "body": "Isn't this something that could be handled transparently via type annotations? c.f. https://github.com/dask/dask/issues/8853",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1573852086/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]