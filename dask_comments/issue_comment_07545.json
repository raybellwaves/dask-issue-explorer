[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/817149725",
        "html_url": "https://github.com/dask/dask/issues/7545#issuecomment-817149725",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7545",
        "id": 817149725,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzE0OTcyNQ==",
        "user": {
            "login": "chrisroat",
            "id": 1053153,
            "node_id": "MDQ6VXNlcjEwNTMxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1053153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrisroat",
            "html_url": "https://github.com/chrisroat",
            "followers_url": "https://api.github.com/users/chrisroat/followers",
            "following_url": "https://api.github.com/users/chrisroat/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrisroat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrisroat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrisroat/subscriptions",
            "organizations_url": "https://api.github.com/users/chrisroat/orgs",
            "repos_url": "https://api.github.com/users/chrisroat/repos",
            "events_url": "https://api.github.com/users/chrisroat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrisroat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-04-10T15:00:32Z",
        "updated_at": "2021-04-10T15:00:32Z",
        "author_association": "CONTRIBUTOR",
        "body": "I've found that turning off optimization causes this problem to go away.  The optimizer is somehow deciding to inline the calc computation when the outputs are mixed like this.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/817149725/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/817962202",
        "html_url": "https://github.com/dask/dask/issues/7545#issuecomment-817962202",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7545",
        "id": 817962202,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzk2MjIwMg==",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-04-12T16:44:49Z",
        "updated_at": "2021-04-12T16:44:49Z",
        "author_association": "MEMBER",
        "body": "Thanks for the nice example @chrisroat, I'm able to reproduce the same behavior. Looking through `dask.compute`, we optimize each type of dask collection independently here:\r\n\r\nhttps://github.com/dask/dask/blob/09862ed99a02bf3a617ac53b116f9ecf81eea338/dask/base.py#L331-L342\r\n\r\nThat is, we optimize Dask arrays using the the default optimizer for Dask arrays, then optimize Dask DataFrames using the default optimizer for Dask DataFrames, etc. Since each of these optimization passes is done independently, when we are doing the array optimization the optimizer doesn't know that the `calc` function is being used elsewhere (in the Dask DataFrame computation) so low-level task fusion results in the `calc` function being inlined. The same thing also happens when the DataFrame optimizer runs too. \r\n\r\nI don't necessarily have a good long-term fix for this at the moment, though as a temporary workaround you can try disabling low-level task fusion by setting the `optimization.fuse.active` configuration value to `False`. This is slightly better than disabling optimizations altogether. \r\n\r\ncc'ing @crusaderky @madsbk who have thought about graph optimizations recently and may be interested in this (though no obligation)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/817962202/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/824652812",
        "html_url": "https://github.com/dask/dask/issues/7545#issuecomment-824652812",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7545",
        "id": 824652812,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDY1MjgxMg==",
        "user": {
            "login": "chrisroat",
            "id": 1053153,
            "node_id": "MDQ6VXNlcjEwNTMxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1053153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrisroat",
            "html_url": "https://github.com/chrisroat",
            "followers_url": "https://api.github.com/users/chrisroat/followers",
            "following_url": "https://api.github.com/users/chrisroat/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrisroat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrisroat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrisroat/subscriptions",
            "organizations_url": "https://api.github.com/users/chrisroat/orgs",
            "repos_url": "https://api.github.com/users/chrisroat/repos",
            "events_url": "https://api.github.com/users/chrisroat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrisroat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-04-22T08:35:26Z",
        "updated_at": "2021-04-22T08:35:26Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for the tip on turning off `fuse`.  I also found #7587 which is related, and maybe a duplicate from an implementation point of view - both issues might be solved by some sort of global optimization.\r\n\r\nMy graphs are pretty large, so I do rely on a lot of the optimization to avoid the scheduler falling over.  I'm breaking up my pipelines to keep the graphs under 100k and avoid these issues.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/824652812/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]