[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1243423543",
        "html_url": "https://github.com/dask/dask/issues/9476#issuecomment-1243423543",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9476",
        "id": 1243423543,
        "node_id": "IC_kwDOAbcwm85KHSM3",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-12T08:56:51Z",
        "updated_at": "2022-09-12T08:56:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "Wouldn't that conflict with the `Schema` that was used to write originally the Parquet file? I assume that you'd give preference to what the user specifies in the `dtype` dictionary, so that for a given column you check if it's in that dictionary and use that type, and if it's not, you default to the type the metadata `Schema` specifies.\r\n\r\nBut I'd say that if something was written in a given binary format and you try to read it in some other format, things won't always work.\r\n\r\nOf course, there's always the option of reading as-it-is, and then adding a final `astype` in `read-parquet` to whatever the user says in `dtype`, but that's basically what you already did.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1243423543/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1247331747",
        "html_url": "https://github.com/dask/dask/issues/9476#issuecomment-1247331747",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9476",
        "id": 1247331747,
        "node_id": "IC_kwDOAbcwm85KWMWj",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-14T21:42:55Z",
        "updated_at": "2022-09-14T21:42:55Z",
        "author_association": "MEMBER",
        "body": ">Wouldn't that conflict with the Schema that was used to write originally the Parquet file? I assume that you'd give preference to what the user specifies in the dtype dictionary, so that for a given column you check if it's in that dictionary and use that type, and if it's not, you default to the type the metadata Schema specifies.\r\n\r\nYes, my understanding is that the `dtypes=` dictionary should specify what the output dtype should be in the backend dataframe library (pandas). You are correct that the user-specified dtype must \"agree\" with the underlying pyarrow dtype that is encoded in the `Schema`. However, it is important to cosider that there is not always a simple 1-to-1 mapping between the binary representtion in pyarrow and pandas dtype (a string may become both an \"object\" and  pyarrow string, depending on the pandas metadata). \r\n\r\nFor a given binary representation in pyarrow (say `String`), it seems that the output pandas dtype will typically correspond to the numpy dtype specified in the \"pandas\" metadata within the same parquet file.  Therefore, it should be possible to avoid casting after the read in certain cases, as long as we can update or throw away the custom metadata. With that said, this **may** be a bit tricky in practice.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1247331747/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1249038853",
        "html_url": "https://github.com/dask/dask/issues/9476#issuecomment-1249038853",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9476",
        "id": 1249038853,
        "node_id": "IC_kwDOAbcwm85KctIF",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-16T07:52:34Z",
        "updated_at": "2022-09-16T08:11:09Z",
        "author_association": "CONTRIBUTOR",
        "body": "Yes, I know that the mapping is not always unique. My point is: when can we take advantage of a hypothetical `dtypes` parameter in `read_parquet` to do something more efficient than just `dd.read_parquet(file).astype(types)`? Is there any case actually where we gain something? My understanding is that `astype` looks at the numpy `dtype` and doesn't really allocate a new array if not needed: it just changes the view associated to the array, so that's already pretty efficient. \r\n\r\nIn `read_csv` of course it makes sense because everything is stored in plain text, so unless all your columns are strings you don't get what you want in `df`, and a type conversion must be done. However, when a binary format such as Parquet is used, you nearly always get what you want after reading, so the use of `astype` is pretty rare, and only for some particular columns.\r\n\r\nThe only common case I can think of are strings that may be loaded as objects. However, if the Parquet file was already written with `pyarrow` strings, latest Pandas won't load that as `object`, but as `string[pyarrow]`, as far as I'm concerned. \r\n\r\nPerhaps what could be done in `read_parquet`, even if there's no `dtypes` parameter, is the following:\r\n\r\n1. Check `metadata` to look for general `object` columns (I mean, stored as such).\r\n2. Try to load those as `strings`, because most `object` columns should be actually strings (e.g., if stored with old versions of `pyarrow`, or if the user forgot to specify explicitly that those were strings).\r\n3. If for some column that fails, reload it as `object`.\r\n\r\nThat is, assuming by default that `object` columns are actually meant to be strings, unless on runtime it's realised that it is another kind of object, and leaving the few remaining cases for the user to manually change that via `astype`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1249038853/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1251035717",
        "html_url": "https://github.com/dask/dask/issues/9476#issuecomment-1251035717",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9476",
        "id": 1251035717,
        "node_id": "IC_kwDOAbcwm85KkUpF",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-09-19T13:39:28Z",
        "updated_at": "2022-09-19T13:39:28Z",
        "author_association": "MEMBER",
        "body": ">when can we take advantage of a hypothetical\u00a0dtypes\u00a0parameter in\u00a0read_parquet\u00a0to do something more efficient than just\u00a0dd.read_parquet(file).astype(types)?\u00a0Is there any case actually where we gain something?\r\n\r\nYeah, I don\u2019t know of an obvious situation besides choosing between string and object for string-encoded data, or between category and string/int/etc for dictionary-encoded data. Your general point is a very good one: We definitely don\u2019t want to expand the `read_parquet` API without clear motivation, and the motivation is weak if the proposed option is intended for an edge case, or if using `astype` is (almost always) just as efficient.\r\n\r\nSide Note: I\u2019m not yet sure if modifying the pandas metadata to use `\u201dstring\u201d` for the `\"numpy_type\u201d` field actually reduces the peak memory usage for the motivating high-cardinality \u201ccategory\u201d-column case here. I do know that replacing the metadata does change the output pandas dtype as expected, but so does a simple `astype` operation.  I will need to do some tests on high-cardinality data to see if there is any real performance benefit to a `dtypes=`-like feature.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1251035717/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]