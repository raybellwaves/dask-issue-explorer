[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/590497356",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-590497356",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 590497356,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDQ5NzM1Ng==",
        "user": {
            "login": "quasiben",
            "id": 1403768,
            "node_id": "MDQ6VXNlcjE0MDM3Njg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quasiben",
            "html_url": "https://github.com/quasiben",
            "followers_url": "https://api.github.com/users/quasiben/followers",
            "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
            "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
            "organizations_url": "https://api.github.com/users/quasiben/orgs",
            "repos_url": "https://api.github.com/users/quasiben/repos",
            "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quasiben/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-24T19:07:30Z",
        "updated_at": "2020-02-24T19:07:30Z",
        "author_association": "MEMBER",
        "body": "@AntSimi thank you for the bug report.  I verified similar behavior but noticed that upon multiple runs it sometimes is correct.  Not sure what's going on here.  Can I ask you to try without `distributed` ?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/590497356/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/590737080",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-590737080",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 590737080,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5MDczNzA4MA==",
        "user": {
            "login": "AntSimi",
            "id": 36040805,
            "node_id": "MDQ6VXNlcjM2MDQwODA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/36040805?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AntSimi",
            "html_url": "https://github.com/AntSimi",
            "followers_url": "https://api.github.com/users/AntSimi/followers",
            "following_url": "https://api.github.com/users/AntSimi/following{/other_user}",
            "gists_url": "https://api.github.com/users/AntSimi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AntSimi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AntSimi/subscriptions",
            "organizations_url": "https://api.github.com/users/AntSimi/orgs",
            "repos_url": "https://api.github.com/users/AntSimi/repos",
            "events_url": "https://api.github.com/users/AntSimi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AntSimi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-25T08:07:47Z",
        "updated_at": "2020-02-25T08:07:47Z",
        "author_association": "NONE",
        "body": "I modify example to remove dask distributed:\r\n```python\r\nimport dask.array as da\r\n\r\ndef put_2(data):\r\n    # Put a zero at first index of block\r\n    data[0] = 2\r\n    return data\r\n\r\nif __name__ == '__main__':\r\n    # Create ones matrix with two chunk\r\n    d = da.ones(100, chunks=(5,), dtype='i4')\r\n    # Save it\r\n    d.to_zarr('/tmp/data.zarr', component='d', overwrite=True)\r\n    # Read Ones\r\n    read_d = da.from_zarr('/tmp/data.zarr', component='d')\r\n    # Apply put_0 on each block\r\n    new_d = da.blockwise(put_2, 'i', read_d, 'i', dtype='i4')\r\n    # Save inplace of previous array\r\n    a = new_d.to_zarr('/tmp/data.zarr', component='d', overwrite='True', compute=False)\r\n    # a.visualize('tree.png')\r\n    a.compute()\r\n    # Read new save :(\r\n    read_d = da.from_zarr('/tmp/data.zarr', component='d')\r\n    d = read_d.compute()\r\n    print(d)\r\n    print((d!=0).all())\r\n```\r\nSeveral outputs\r\n```bash\r\n...@...:$ python zarr_dask_over_write.py\r\n [2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1\r\n 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1\r\n 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1]\r\nTrue\r\n(...@...:$ python zarr_dask_over_write.py \r\n[2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1\r\n 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 0 0 0 0 2 0 0 0 0 2 0 0 0\r\n 0 2 0 0 0 0 2 0 0 0 0 2 0 0 0 0 2 0 0 0 0 2 0 0 0 0]\r\nFalse\r\n...@...:$ python zarr_dask_over_write.py \r\n[2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1\r\n 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1\r\n 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 1 1]\r\nTrue\r\n```\r\nMost of the time result is good, but sometime is wrong with dask.distributed the error occurs more.\r\nMy guess is \"create\" step could occurs aftter or before all \"from_zarr\" step.\r\n![tree](https://user-images.githubusercontent.com/36040805/75226653-0864bd80-57ad-11ea-95d1-aeeb8329acd5.png)\r\nCreate step with \"overwrite=True\" do an \"rmdirs\".\r\nIn my real use i have a dataset which are bigger than memory so i couldn't fully load before create step.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/590737080/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/797563350",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-797563350",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 797563350,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzU2MzM1MA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-12T15:30:05Z",
        "updated_at": "2021-03-12T15:36:21Z",
        "author_association": "MEMBER",
        "body": "I am taking a look at this now and can only reproduce with the distributed case. I think the issue is happening within the `to_zarr` method actually. If you add `compute=False` to the `to_zarr`,  it seems to work as expected:\r\n\r\n\r\n```python\r\nimport dask.array as da\r\nfrom distributed import Client\r\n\r\nclient = Client()\r\n\r\ndef put_2(data):\r\n    # Put 2 at first index of block\r\n    data[0] = 2\r\n    return data\r\n\r\n# Create ones matrix with two chunk\r\nd = da.ones(10, chunks=(5,), dtype='i4')\r\n# Save it\r\nd.to_zarr('/tmp/data.zarr', component='d', overwrite=True)\r\n\r\n# Read Ones\r\nread_d = da.from_zarr('/tmp/data.zarr', component='d')\r\n# Apply put_2 on each block\r\nnew_d = da.blockwise(put_2, 'i', read_d, 'i', dtype='i4')\r\nprint(f\"NEW: {new_d.compute()}\")\r\n# Save inplace of previous array\r\nnew_d.to_zarr('/tmp/data.zarr', component='d', overwrite=True, compute=False)\r\nprint(f\"AFTER WRITE: {new_d.compute()}\")\r\n# Read new save :(\r\nread_d = da.from_zarr('/tmp/data.zarr', component='d')\r\nprint(f\"READ: {read_d.compute()}\")\r\n```\r\n\r\nWith `compute=False` I get:\r\n```python\r\nNEW: [2 1 1 1 1 2 1 1 1 1]\r\nAFTER WRITE: [2 1 1 1 1 2 1 1 1 1]\r\nREAD: [1 1 1 1 1 1 1 1 1 1]\r\n```\r\n\r\nWith `compute=True` I get:\r\n\r\n```python\r\nNEW: [2 1 1 1 1 2 1 1 1 1]\r\nAFTER WRITE: [2 0 0 0 0 2 0 0 0 0]\r\nREAD: [2 0 0 0 0 2 0 0 0 0]\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/797563350/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/797574266",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-797574266",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 797574266,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzU3NDI2Ng==",
        "user": {
            "login": "AntSimi",
            "id": 36040805,
            "node_id": "MDQ6VXNlcjM2MDQwODA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/36040805?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AntSimi",
            "html_url": "https://github.com/AntSimi",
            "followers_url": "https://api.github.com/users/AntSimi/followers",
            "following_url": "https://api.github.com/users/AntSimi/following{/other_user}",
            "gists_url": "https://api.github.com/users/AntSimi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AntSimi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AntSimi/subscriptions",
            "organizations_url": "https://api.github.com/users/AntSimi/orgs",
            "repos_url": "https://api.github.com/users/AntSimi/repos",
            "events_url": "https://api.github.com/users/AntSimi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AntSimi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-12T15:47:02Z",
        "updated_at": "2021-03-12T15:49:23Z",
        "author_association": "NONE",
        "body": "I am able to recreate similar error with huge array, original array have only 1 and we put some 2, but several times i found  zeros in array\r\n```python\r\nimport dask.array as da\r\n\r\ndef put_2(data):\r\n    # Put a zero at first index of block\r\n    data[0] = 2\r\n    return data\r\n\r\nif __name__ == '__main__':\r\n    # Create ones matrix with two chunk\r\n    d = da.ones(100000000, chunks=(2500000,), dtype='i4')\r\n    # Save it\r\n    d.to_zarr('/tmp/data.zarr', component='d', overwrite=True)\r\n    # Read Ones\r\n    read_d = da.from_zarr('/tmp/data.zarr', component='d')\r\n    # Apply put_2 on each block\r\n    new_d = da.blockwise(put_2, 'i', read_d, 'i', dtype='i4')\r\n    # Save inplace of previous array\r\n    a = new_d.to_zarr('/tmp/data.zarr', component='d', overwrite='True', compute=False)\r\n    a.compute()\r\n    # Read new save :(\r\n    read_d = da.from_zarr('/tmp/data.zarr', component='d')\r\n    d = read_d.compute()\r\n    print((d!=0).all())\r\n```\r\nPrint result must be always True, but several time i get False\r\nI used python 3.7.10 with dask-core-2021.3.0 and zarr 2.6.1",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/797574266/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/797577546",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-797577546",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 797577546,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzU3NzU0Ng==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-12T15:51:53Z",
        "updated_at": "2021-03-12T15:51:53Z",
        "author_association": "MEMBER",
        "body": "I was able to get the desired output with this diff:\r\n\r\n```diff\r\ndiff --git a/dask/array/core.py b/dask/array/core.py\r\nindex 9aa10950..f45a3619 100644\r\n--- a/dask/array/core.py\r\n+++ b/dask/array/core.py\r\n@@ -3318,10 +3318,9 @@ def to_zarr(\r\n     # sharded across workers (not done serially on the originating\r\n     # machine).  Or the caller may decide later to not to do this\r\n     # computation, and so nothing should be written to disk.\r\n-    z = delayed(zarr.create)(\r\n-        shape=arr.shape,\r\n+    z = delayed(zarr.array)(\r\n+        data=arr,\r\n         chunks=chunks,\r\n-        dtype=arr.dtype,\r\n         store=mapper,\r\n         path=component,\r\n         overwrite=overwrite,\r\n```\r\n\r\nWould you be able to see if that works for you?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/797577546/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/797579187",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-797579187",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 797579187,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzU3OTE4Nw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-12T15:54:12Z",
        "updated_at": "2021-03-12T15:54:12Z",
        "author_association": "MEMBER",
        "body": "I'm not sure what the implications are for performance, but that seems like a reasonable solution to me. I'll open a PR to carry on the conversation.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/797579187/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/797581839",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-797581839",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 797581839,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzU4MTgzOQ==",
        "user": {
            "login": "AntSimi",
            "id": 36040805,
            "node_id": "MDQ6VXNlcjM2MDQwODA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/36040805?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AntSimi",
            "html_url": "https://github.com/AntSimi",
            "followers_url": "https://api.github.com/users/AntSimi/followers",
            "following_url": "https://api.github.com/users/AntSimi/following{/other_user}",
            "gists_url": "https://api.github.com/users/AntSimi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AntSimi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AntSimi/subscriptions",
            "organizations_url": "https://api.github.com/users/AntSimi/orgs",
            "repos_url": "https://api.github.com/users/AntSimi/repos",
            "events_url": "https://api.github.com/users/AntSimi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AntSimi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-12T15:57:39Z",
        "updated_at": "2021-03-12T15:57:39Z",
        "author_association": "NONE",
        "body": "Thanks, with this patch, it work well for me.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/797581839/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/797611958",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-797611958",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 797611958,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzYxMTk1OA==",
        "user": {
            "login": "AntSimi",
            "id": 36040805,
            "node_id": "MDQ6VXNlcjM2MDQwODA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/36040805?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AntSimi",
            "html_url": "https://github.com/AntSimi",
            "followers_url": "https://api.github.com/users/AntSimi/followers",
            "following_url": "https://api.github.com/users/AntSimi/following{/other_user}",
            "gists_url": "https://api.github.com/users/AntSimi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AntSimi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AntSimi/subscriptions",
            "organizations_url": "https://api.github.com/users/AntSimi/orgs",
            "repos_url": "https://api.github.com/users/AntSimi/repos",
            "events_url": "https://api.github.com/users/AntSimi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AntSimi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-12T16:43:54Z",
        "updated_at": "2021-03-12T16:43:54Z",
        "author_association": "NONE",
        "body": "After a quick look to dask graph.\r\nI think there will be a problem for array larger than memory, because if i understood correctly the graph all data must be loaded before to start storage.\r\n![image](https://user-images.githubusercontent.com/36040805/110970454-0fc81c00-835a-11eb-80a4-b6885ff38103.png)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/797611958/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1167338162",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-1167338162",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 1167338162,
        "node_id": "IC_kwDOAbcwm85FlCqy",
        "user": {
            "login": "tcompa",
            "id": 3862206,
            "node_id": "MDQ6VXNlcjM4NjIyMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3862206?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tcompa",
            "html_url": "https://github.com/tcompa",
            "followers_url": "https://api.github.com/users/tcompa/followers",
            "following_url": "https://api.github.com/users/tcompa/following{/other_user}",
            "gists_url": "https://api.github.com/users/tcompa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tcompa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tcompa/subscriptions",
            "organizations_url": "https://api.github.com/users/tcompa/orgs",
            "repos_url": "https://api.github.com/users/tcompa/repos",
            "events_url": "https://api.github.com/users/tcompa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tcompa/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-06-27T13:14:12Z",
        "updated_at": "2022-06-27T13:21:25Z",
        "author_association": "NONE",
        "body": "Hi there, quick question: Is this issue considered as closed?\r\nThe corresponding PR https://github.com/dask/dask/pull/7379 was not brought forward and -if I understand correctly- it would force the whole execution before writing data to disk, which doesn't play well with large data.\r\n\r\nI am hitting this issue again: I load large amount of data via `from_zarr()`, I do some processing, and then I'd like to use `to_zarr(..., overwrite=True)` - but something goes wrong and I end up with very small files (correct shape and chunks, wrong data).\r\n\r\nMy current quick&dirty workaround is to save data to a new zarr component and then play with folders (remove old one, move new one to correct path), but it means that I have to create/remove/move large temporary folders (`to_zarr` can be called to save a 30G array, for instance).\r\n\r\nCode:\r\n<details>\r\n  <summary>Click to expand!</summary>\r\n  \r\n  ```python\r\nimport shutil\r\n\r\n\r\ndef to_zarr_custom(newzarrurl=None, array=None, component=\"\", overwrite=False):\r\n\r\n    \"\"\"\r\n\r\n    Custom workaround for dask issue\r\n    (https://github.com/dask/dask/issues/5942), where a dask array loaded with\r\n    from_zarr cannot be written with to_zarr(..., overwrite=True).\r\n\r\n    :param newzarrurl: ouput zarr file\r\n    :type newzarrurl: str\r\n    :param array: dask array to be stored\r\n    :type array: dask array\r\n    :param component: target subfolder of the zarr file (optional, default \"\")\r\n    :type component: str\r\n    :param overwrite: overwrite existing data (optional, default False)\r\n    :type overwrite: boolean\r\n\r\n    \"\"\"\r\n\r\n    # Check required arguments\r\n    if newzarrurl is None:\r\n        raise Exception(\"ERROR: Missing newzarrurl arg in to_zarr_custom\")\r\n    if array is None:\r\n        raise Exception(\"ERROR: Missing array arg in to_zarr_custom\")\r\n\r\n    # Sanitize arguments\r\n    if component.endswith(\"/\"):\r\n        component = component[:-1]\r\n    if not newzarrurl.endswith(\"/\"):\r\n        newzarrurl += \"/\"\r\n\r\n    if overwrite:\r\n        tmp_suffix = \"_TEMPORARY_ZARR_ARRAY\"\r\n        array.to_zarr(\r\n            newzarrurl,\r\n            component=component + tmp_suffix,\r\n            dimension_separator=\"/\",\r\n        )\r\n        shutil.rmtree(newzarrurl + component)\r\n        shutil.move(\r\n            newzarrurl + component + tmp_suffix, newzarrurl + component\r\n        )\r\n    else:\r\n        array.to_zarr(newzarrurl, component=component, dimension_separator=\"/\")\r\n```\r\n</details>\r\n\r\n\r\nI am happy to provide more context/tests if it is useful, but more generally I'd like to know whether @AntSimi or others found any workaround that they are happy with. Thanks!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1167338162/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1172071832",
        "html_url": "https://github.com/dask/dask/issues/5942#issuecomment-1172071832",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5942",
        "id": 1172071832,
        "node_id": "IC_kwDOAbcwm85F3GWY",
        "user": {
            "login": "AntSimi",
            "id": 36040805,
            "node_id": "MDQ6VXNlcjM2MDQwODA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/36040805?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AntSimi",
            "html_url": "https://github.com/AntSimi",
            "followers_url": "https://api.github.com/users/AntSimi/followers",
            "following_url": "https://api.github.com/users/AntSimi/following{/other_user}",
            "gists_url": "https://api.github.com/users/AntSimi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AntSimi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AntSimi/subscriptions",
            "organizations_url": "https://api.github.com/users/AntSimi/orgs",
            "repos_url": "https://api.github.com/users/AntSimi/repos",
            "events_url": "https://api.github.com/users/AntSimi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AntSimi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-01T08:15:16Z",
        "updated_at": "2022-07-01T08:15:16Z",
        "author_association": "NONE",
        "body": "@tcompa I don't find a workaround",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1172071832/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]