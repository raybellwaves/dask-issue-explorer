{
    "url": "https://api.github.com/repos/dask/dask/issues/10238",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/10238/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/10238/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/10238/events",
    "html_url": "https://github.com/dask/dask/issues/10238",
    "id": 1689265116,
    "node_id": "I_kwDOAbcwm85ksCPc",
    "number": 10238,
    "title": "dask.array.store: support for distributed locks",
    "user": {
        "login": "ahnsws",
        "id": 17461258,
        "node_id": "MDQ6VXNlcjE3NDYxMjU4",
        "avatar_url": "https://avatars.githubusercontent.com/u/17461258?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ahnsws",
        "html_url": "https://github.com/ahnsws",
        "followers_url": "https://api.github.com/users/ahnsws/followers",
        "following_url": "https://api.github.com/users/ahnsws/following{/other_user}",
        "gists_url": "https://api.github.com/users/ahnsws/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ahnsws/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ahnsws/subscriptions",
        "organizations_url": "https://api.github.com/users/ahnsws/orgs",
        "repos_url": "https://api.github.com/users/ahnsws/repos",
        "events_url": "https://api.github.com/users/ahnsws/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ahnsws/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        },
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-04-28T23:55:36Z",
    "updated_at": "2024-02-05T01:45:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the issue**:\r\nCalling `dask.array.store` with a `Lock`, a `distributed.Client` context, and a zarr target throws an error.\r\n\r\nPlease let me know if this should be filed elsewhere, with zarr or distributed.\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport dask.array as da\r\nimport zarr\r\nfrom distributed import Client\r\n\r\n\r\ndef run_succeeds1():\r\n    z_arr: zarr.Array = zarr.zeros(shape=(5, 5))\r\n    d_arr: da.Array = da.from_zarr(z_arr)\r\n    z = zarr.create(shape=d_arr.shape)\r\n    with Client():\r\n        return da.store(d_arr, z, lock=False)\r\n\r\n\r\ndef run_succeeds2():\r\n    z_arr: zarr.Array = zarr.zeros(shape=(5, 5))\r\n    d_arr: da.Array = da.from_zarr(z_arr)\r\n    z = zarr.create(shape=d_arr.shape)\r\n    return da.store(d_arr, z, lock=True)\r\n\r\n\r\ndef run_fails():\r\n    z_arr: zarr.Array = zarr.zeros(shape=(5, 5))\r\n    d_arr: da.Array = da.from_zarr(z_arr)\r\n    z = zarr.create(shape=d_arr.shape)\r\n    with Client():\r\n        return da.store(d_arr, z, lock=True)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    run_succeeds1()\r\n    run_succeeds2()\r\n    # run_fails()\r\n\r\n```\r\n\r\n**Anything else we need to know?**:\r\nThe full stacktrace I get when I run `run_fails` is:\r\n\r\n```\r\n2023-04-28 19:51:54,465 - distributed.protocol.pickle - ERROR - Failed to serialize <ToPickle: HighLevelGraph with 1 layers.\r\n<dask.highlevelgraph.HighLevelGraph object at 0x7fb099e26560>\r\n 0. 140396455233728\r\n>.\r\nTraceback (most recent call last):\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/pickle.py\", line 63, in dumps\r\n    result = pickle.dumps(x, **dump_kwargs)\r\nTypeError: cannot pickle '_thread.lock' object\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/pickle.py\", line 68, in dumps\r\n    pickler.dump(x)\r\nTypeError: cannot pickle '_thread.lock' object\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/pickle.py\", line 81, in dumps\r\n    result = cloudpickle.dumps(x, **dump_kwargs)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/cloudpickle/cloudpickle_fast.py\", line 73, in dumps\r\n    cp.dump(obj)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/cloudpickle/cloudpickle_fast.py\", line 632, in dump\r\n    return Pickler.dump(self, obj)\r\nTypeError: cannot pickle '_thread.lock' object\r\nTraceback (most recent call last):\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/pickle.py\", line 63, in dumps\r\n    result = pickle.dumps(x, **dump_kwargs)\r\nTypeError: cannot pickle '_thread.lock' object\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/pickle.py\", line 68, in dumps\r\n    pickler.dump(x)\r\nTypeError: cannot pickle '_thread.lock' object\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/serialize.py\", line 350, in serialize\r\n    header, frames = dumps(x, context=context) if wants_context else dumps(x)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/serialize.py\", line 73, in pickle_dumps\r\n    frames[0] = pickle.dumps(\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/pickle.py\", line 81, in dumps\r\n    result = cloudpickle.dumps(x, **dump_kwargs)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/cloudpickle/cloudpickle_fast.py\", line 73, in dumps\r\n    cp.dump(obj)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/cloudpickle/cloudpickle_fast.py\", line 632, in dump\r\n    return Pickler.dump(self, obj)\r\nTypeError: cannot pickle '_thread.lock' object\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/titanium/PycharmProjects/debug-ome-zarr/run.py\", line 32, in <module>\r\n    run_fails()\r\n  File \"/home/titanium/PycharmProjects/debug-ome-zarr/run.py\", line 26, in run_fails\r\n    return da.store(d_arr, z, lock=True)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/dask/array/core.py\", line 1237, in store\r\n    compute_as_if_collection(Array, store_dsk, map_keys, **kwargs)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/dask/base.py\", line 341, in compute_as_if_collection\r\n    return schedule(dsk2, keys, **kwargs)\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/client.py\", line 3204, in get\r\n    futures = self._graph_to_futures(\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/client.py\", line 3103, in _graph_to_futures\r\n    header, frames = serialize(ToPickle(dsk), on_error=\"raise\")\r\n  File \"/home/titanium/.cache/pypoetry/virtualenvs/debug-ome-zarr-XhBiG45F-py3.10/lib/python3.10/site-packages/distributed/protocol/serialize.py\", line 372, in serialize\r\n    raise TypeError(msg, str(x)[:10000]) from exc\r\nTypeError: ('Could not serialize object of type HighLevelGraph', '<ToPickle: HighLevelGraph with 1 layers.\\n<dask.highlevelgraph.HighLevelGraph object at 0x7fb099e26560>\\n 0. 140396455233728\\n>')\r\n\r\nProcess finished with exit code 1\r\n\r\n```\r\n\r\n**Environment**:\r\n- Dask version: 2023.4.1\r\n- Python version: 3.10.6\r\n- Operating System: ubuntu 22.04\r\n- Install method (conda, pip, source): poetry\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/10238/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/10238/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}