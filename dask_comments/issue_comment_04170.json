[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/435606401",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-435606401",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 435606401,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTYwNjQwMQ==",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-11-03T17:34:41Z",
        "updated_at": "2018-11-03T17:34:49Z",
        "author_association": "MEMBER",
        "body": "Have you tried looking at dask.bag's `map` and `pluck`?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/435606401/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/435608750",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-435608750",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 435608750,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTYwODc1MA==",
        "user": {
            "login": "nsadeh",
            "id": 15837587,
            "node_id": "MDQ6VXNlcjE1ODM3NTg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/15837587?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nsadeh",
            "html_url": "https://github.com/nsadeh",
            "followers_url": "https://api.github.com/users/nsadeh/followers",
            "following_url": "https://api.github.com/users/nsadeh/following{/other_user}",
            "gists_url": "https://api.github.com/users/nsadeh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nsadeh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nsadeh/subscriptions",
            "organizations_url": "https://api.github.com/users/nsadeh/orgs",
            "repos_url": "https://api.github.com/users/nsadeh/repos",
            "events_url": "https://api.github.com/users/nsadeh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nsadeh/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-11-03T18:06:25Z",
        "updated_at": "2018-11-03T18:06:25Z",
        "author_association": "NONE",
        "body": "Looking now. Have never used it before.\r\n\r\nI have a DataFrame where some columns are json and I am trying to flatten them. Some of the json columns, when flattened, could have their own json columns.\r\n\r\nBasically, would I be casting the column (Series) into a bag, then mapping (using bag.map) and use pluck to define the column names, then to_dataframe? And applying this all to the dataframe partitions?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/435608750/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/437511049",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-437511049",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 437511049,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzUxMTA0OQ==",
        "user": {
            "login": "mlisovyi",
            "id": 10157590,
            "node_id": "MDQ6VXNlcjEwMTU3NTkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10157590?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mlisovyi",
            "html_url": "https://github.com/mlisovyi",
            "followers_url": "https://api.github.com/users/mlisovyi/followers",
            "following_url": "https://api.github.com/users/mlisovyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/mlisovyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mlisovyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mlisovyi/subscriptions",
            "organizations_url": "https://api.github.com/users/mlisovyi/orgs",
            "repos_url": "https://api.github.com/users/mlisovyi/repos",
            "events_url": "https://api.github.com/users/mlisovyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mlisovyi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-11-09T22:12:02Z",
        "updated_at": "2018-11-09T22:12:02Z",
        "author_association": "NONE",
        "body": "Is there a working example of how to implement it? I'm 100% a beginner with dask, but bumped into the same situation",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/437511049/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/437588766",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-437588766",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 437588766,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzU4ODc2Ng==",
        "user": {
            "login": "ap1495",
            "id": 35802181,
            "node_id": "MDQ6VXNlcjM1ODAyMTgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/35802181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ap1495",
            "html_url": "https://github.com/ap1495",
            "followers_url": "https://api.github.com/users/ap1495/followers",
            "following_url": "https://api.github.com/users/ap1495/following{/other_user}",
            "gists_url": "https://api.github.com/users/ap1495/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ap1495/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ap1495/subscriptions",
            "organizations_url": "https://api.github.com/users/ap1495/orgs",
            "repos_url": "https://api.github.com/users/ap1495/repos",
            "events_url": "https://api.github.com/users/ap1495/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ap1495/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-11-10T14:46:07Z",
        "updated_at": "2018-11-10T14:46:07Z",
        "author_association": "NONE",
        "body": "I'm new to Dask as well and would love a function similar to pandas json_normalize..\r\nFor now could you please share a working example of how we can achieve this using dask.bag?\r\n\r\nThanks !!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/437588766/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/443435998",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-443435998",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 443435998,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzQzNTk5OA==",
        "user": {
            "login": "mlisovyi",
            "id": 10157590,
            "node_id": "MDQ6VXNlcjEwMTU3NTkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10157590?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mlisovyi",
            "html_url": "https://github.com/mlisovyi",
            "followers_url": "https://api.github.com/users/mlisovyi/followers",
            "following_url": "https://api.github.com/users/mlisovyi/following{/other_user}",
            "gists_url": "https://api.github.com/users/mlisovyi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mlisovyi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mlisovyi/subscriptions",
            "organizations_url": "https://api.github.com/users/mlisovyi/orgs",
            "repos_url": "https://api.github.com/users/mlisovyi/repos",
            "events_url": "https://api.github.com/users/mlisovyi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mlisovyi/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-12-01T15:56:34Z",
        "updated_at": "2018-12-01T15:56:34Z",
        "author_association": "NONE",
        "body": "I managed to implement it and it is available in [this kernel on kaggle](https://www.kaggle.com/mlisovyi/bigdata-dask-pandas-flat-json-trim-data-upd?scriptVersionId=7750362). \r\n\r\nThe essence is that you do something like:\r\n`df[new_column_name] = df[json_field].to_bag().pluck(key, default=default_value).to_dataframe().iloc[:,0]`,\r\nwhere `json_field` is the column in a dask dataframe containing dictionaries (you have to transform strings (which you will most likely have, if you read in data from a file) into python dictionaries), and you iterate over `key` in the dictionary providing the `default_value` in case of you have incomplete population of dictionaries between rows",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/443435998/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/488014750",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-488014750",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 488014750,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODAxNDc1MA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-30T16:10:37Z",
        "updated_at": "2019-04-30T16:10:37Z",
        "author_association": "MEMBER",
        "body": "Glad to hear you got something working, @mlisovyi. Given the interest here, I wonder if there is a general function that would be useful. Maybe worth a PR? Any thoughts on this @TomAugspurger?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/488014750/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/488050392",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-488050392",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 488050392,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODA1MDM5Mg==",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-30T17:52:54Z",
        "updated_at": "2019-04-30T17:52:54Z",
        "author_association": "MEMBER",
        "body": "I think we can safely close this, as there seems to be a workaround, but no general framework we can propose for the variety of JSON input that users may be interested in.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/488050392/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/488068899",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-488068899",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 488068899,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODA2ODg5OQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-30T18:45:01Z",
        "updated_at": "2019-04-30T18:45:01Z",
        "author_association": "MEMBER",
        "body": "Agreed with @martindurant that this would be difficult to solve in general. For simple cases, `dask.delayed` works well.\r\n\r\n```python\r\n>>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},\r\n...         {'name': {'given': 'Mose', 'family': 'Regner'}},\r\n...         {'id': 2, 'name': 'Faye Raker'}]\r\n>>> big_data = [data, data, data]\r\n>>> dfs = [dask.delayed(pd.io.json.json_normalize)(x) for x in big_data]\r\n>>> df = dd.from_delayed(dfs)\r\n```\r\n\r\nFor anything more complex, moving to the dask.bag API is reasonable. Documentation writing around this would be valuable.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/488068899/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/613358289",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-613358289",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 613358289,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzM1ODI4OQ==",
        "user": {
            "login": "manojonline",
            "id": 62209768,
            "node_id": "MDQ6VXNlcjYyMjA5NzY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/62209768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/manojonline",
            "html_url": "https://github.com/manojonline",
            "followers_url": "https://api.github.com/users/manojonline/followers",
            "following_url": "https://api.github.com/users/manojonline/following{/other_user}",
            "gists_url": "https://api.github.com/users/manojonline/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/manojonline/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/manojonline/subscriptions",
            "organizations_url": "https://api.github.com/users/manojonline/orgs",
            "repos_url": "https://api.github.com/users/manojonline/repos",
            "events_url": "https://api.github.com/users/manojonline/events{/privacy}",
            "received_events_url": "https://api.github.com/users/manojonline/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-14T10:29:24Z",
        "updated_at": "2020-04-14T10:29:24Z",
        "author_association": "NONE",
        "body": "> dfs = [dask.delayed(pd.io.json.json_normalize)(x) for x in big_data]\r\n\r\nThe json_normalize as above seems to put the entire work load on a single worker. When loading big datasets, there is a risk of worker running out of memory?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/613358289/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/614270423",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-614270423",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 614270423,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDI3MDQyMw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-15T20:44:28Z",
        "updated_at": "2020-04-15T20:44:28Z",
        "author_association": "MEMBER",
        "body": "> The json_normalize as above seems to put the entire work load on a single worker\r\n\r\nWhy do you think that? It should result in one task per Delayed result in `dfs`. If the `x` passed to `delayed(json_normalize)` is too large then you would indeed have memory issues.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/614270423/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/619256162",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-619256162",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 619256162,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTI1NjE2Mg==",
        "user": {
            "login": "manojonline",
            "id": 62209768,
            "node_id": "MDQ6VXNlcjYyMjA5NzY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/62209768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/manojonline",
            "html_url": "https://github.com/manojonline",
            "followers_url": "https://api.github.com/users/manojonline/followers",
            "following_url": "https://api.github.com/users/manojonline/following{/other_user}",
            "gists_url": "https://api.github.com/users/manojonline/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/manojonline/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/manojonline/subscriptions",
            "organizations_url": "https://api.github.com/users/manojonline/orgs",
            "repos_url": "https://api.github.com/users/manojonline/repos",
            "events_url": "https://api.github.com/users/manojonline/events{/privacy}",
            "received_events_url": "https://api.github.com/users/manojonline/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-24T21:58:43Z",
        "updated_at": "2020-04-24T21:58:43Z",
        "author_association": "NONE",
        "body": "I tried something similar, and i saw that the entire json_normalize was\npassed onto one worker.\nThis was my setup.\n\nimport json\nimport dask\nimport pandas as pd\nimport dask.bag as db\nimport dask.dataframe as dd\nfrom pandas.io.json import json_normalize\n\nbag = db.read_text('*.json').map(json.loads)\n\njson_list = [dask.delayed(pd.io.json.json_normalize)(bag,\nrecord_path=['shops', ['items']],\n                                                 meta=[['shops',\n'creation_date'], ['shops', 'owner'],\n                                                       ['shops', 'title'],\n['shops', 'type'],\n                                                       ['shops',\n'location', 'map'], ['shops', 'location', 'x'],\n                                                       ['shops',\n'location', 'y'], 'generation_timestamp'])]\n\ndf = dd.from_delayed(json_list)\n\n\nThis Dask Graph showed that the entire json_normalize was sent to a single\nworker and it ran into memory issues.\nThe directory has over 11000 json files.\n\nPS: I'm very new to Python as well dask and pandas.\n\nCheers\nManoj\n\n\n\n\nOn Wed, Apr 15, 2020 at 10:44 PM Tom Augspurger <notifications@github.com>\nwrote:\n\n> The json_normalize as above seems to put the entire work load on a single\n> worker\n>\n> Why do you think that? It should result in one task per Delayed result in\n> dfs. If the x passed to delayed(json_normalize) is too large then you\n> would indeed have memory issues.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/4170#issuecomment-614270423>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AO2T52GZAMO4V7254PNYV53RMYMDXANCNFSM4GBTT6VQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/619256162/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1426770823",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-1426770823",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 1426770823,
        "node_id": "IC_kwDOAbcwm85VCsuH",
        "user": {
            "login": "kevinschaich",
            "id": 9244728,
            "node_id": "MDQ6VXNlcjkyNDQ3Mjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9244728?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinschaich",
            "html_url": "https://github.com/kevinschaich",
            "followers_url": "https://api.github.com/users/kevinschaich/followers",
            "following_url": "https://api.github.com/users/kevinschaich/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinschaich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinschaich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinschaich/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinschaich/orgs",
            "repos_url": "https://api.github.com/users/kevinschaich/repos",
            "events_url": "https://api.github.com/users/kevinschaich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinschaich/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-11T13:32:31Z",
        "updated_at": "2023-02-11T13:32:31Z",
        "author_association": "NONE",
        "body": "Hey guys \u2013\u00a0may have found a solution that works w/ the default distributed readers + map functions:\r\n\r\n```python\r\ndf = df.map_partitions(lambda x: pd.json_normalize(x.to_dict(orient=\"records\")), enforce_metadata=False)\r\n```\r\n\r\nBefore & after:\r\n\r\n<img width=\"1289\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9244728/218260004-c110abbb-33c4-4518-91da-c5ffa491ba66.png\">\r\n\r\nFull example:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\n\r\n# assuming your JSON is standard (array of objects, comma-separated, not ND-JSON)\r\ndf = dd.read_json(\"/path/to/my/data.json\", orient=\"records\", lines=False)\r\n\r\ndf = df.map_partitions(lambda x: pd.json_normalize(x.to_dict(orient=\"records\")), enforce_metadata=False)\r\n```\r\n\r\nLet me know if this is the most efficient way to do it / if anyone has suggested improvements. I tried getting Bags to work with `.map` but didn't have any luck.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1426770823/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1426779287",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-1426779287",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 1426779287,
        "node_id": "IC_kwDOAbcwm85VCuyX",
        "user": {
            "login": "kevinschaich",
            "id": 9244728,
            "node_id": "MDQ6VXNlcjkyNDQ3Mjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9244728?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinschaich",
            "html_url": "https://github.com/kevinschaich",
            "followers_url": "https://api.github.com/users/kevinschaich/followers",
            "following_url": "https://api.github.com/users/kevinschaich/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinschaich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinschaich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinschaich/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinschaich/orgs",
            "repos_url": "https://api.github.com/users/kevinschaich/repos",
            "events_url": "https://api.github.com/users/kevinschaich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinschaich/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-11T14:10:20Z",
        "updated_at": "2023-02-11T14:10:20Z",
        "author_association": "NONE",
        "body": "Upon some further testing and attempting to write this DataFrame back to disk (I've tried json, csv, parquet), I'm encountering some schema errors: \r\n\r\n```\r\n    tracks.href: string\r\n    tracks.total: int64\r\n\r\nThis error *may* be resolved by passing in schema information for\r\nthe mismatched column(s) using the `schema` keyword in `to_parquet`.\r\n```\r\n\r\nLet me know if anyone has suggestions.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1426779287/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1426878952",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-1426878952",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 1426878952,
        "node_id": "IC_kwDOAbcwm85VDHHo",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-11T21:21:12Z",
        "updated_at": "2023-02-11T21:21:12Z",
        "author_association": "MEMBER",
        "body": "Your errors will happen if there are sections of your data which have no valid values. You are best including a `meta=` to `map_partitions`, with a value being a zero-length dataframe of the correct dtypes expected for your data (with href maybe as object and total maybe as Int64 or float64). I think this is probably what you intended `enforce_metadata` for, but that acts for the case that you provide a meta.\r\n\r\nOtherwise, the technique is fine, and map_partitions often does play this role of plugging in for functions not already provided by dask.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1426878952/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1426879360",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-1426879360",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 1426879360,
        "node_id": "IC_kwDOAbcwm85VDHOA",
        "user": {
            "login": "kevinschaich",
            "id": 9244728,
            "node_id": "MDQ6VXNlcjkyNDQ3Mjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9244728?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kevinschaich",
            "html_url": "https://github.com/kevinschaich",
            "followers_url": "https://api.github.com/users/kevinschaich/followers",
            "following_url": "https://api.github.com/users/kevinschaich/following{/other_user}",
            "gists_url": "https://api.github.com/users/kevinschaich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kevinschaich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kevinschaich/subscriptions",
            "organizations_url": "https://api.github.com/users/kevinschaich/orgs",
            "repos_url": "https://api.github.com/users/kevinschaich/repos",
            "events_url": "https://api.github.com/users/kevinschaich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kevinschaich/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-11T21:23:55Z",
        "updated_at": "2023-02-11T21:23:55Z",
        "author_association": "NONE",
        "body": "@martindurant I tried a version of that:\r\n\r\n```python\r\nschema = pd.json_normalize(df.partitions[0].head(1).to_dict(orient=\"records\"))\r\ndf = df.map_partitions(lambda x: pd.json_normalize(x.to_dict(orient=\"records\")), meta=schema)\r\n```\r\n\r\nbut no luck. Same error.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1426879360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1426879769",
        "html_url": "https://github.com/dask/dask/issues/4170#issuecomment-1426879769",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/4170",
        "id": 1426879769,
        "node_id": "IC_kwDOAbcwm85VDHUZ",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-02-11T21:26:25Z",
        "updated_at": "2023-02-11T21:26:25Z",
        "author_association": "MEMBER",
        "body": "That is not surprising, as that is exactly what dask guesses as your meta. But it seems that your schema is not consistent, so you need to find one that is acceptable across all partitions, perhaps with the dtype suggestions I gave above, e.g.\r\n```\r\nschema[\"tracks.total\"] = schema[\"tracks.total\"].astype(\"Int64\")\r\n```\r\n(note the upper case \"I\")",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1426879769/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]