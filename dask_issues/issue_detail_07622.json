{
    "url": "https://api.github.com/repos/dask/dask/issues/7622",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/7622/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/7622/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/7622/events",
    "html_url": "https://github.com/dask/dask/issues/7622",
    "id": 873634008,
    "node_id": "MDU6SXNzdWU4NzM2MzQwMDg=",
    "number": 7622,
    "title": "Using series apply with a dict meta instead of tuple throws",
    "user": {
        "login": "fuglede",
        "id": 6169306,
        "node_id": "MDQ6VXNlcjYxNjkzMDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6169306?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fuglede",
        "html_url": "https://github.com/fuglede",
        "followers_url": "https://api.github.com/users/fuglede/followers",
        "following_url": "https://api.github.com/users/fuglede/following{/other_user}",
        "gists_url": "https://api.github.com/users/fuglede/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fuglede/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fuglede/subscriptions",
        "organizations_url": "https://api.github.com/users/fuglede/orgs",
        "repos_url": "https://api.github.com/users/fuglede/repos",
        "events_url": "https://api.github.com/users/fuglede/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fuglede/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 386719598,
            "node_id": "MDU6TGFiZWwzODY3MTk1OTg=",
            "url": "https://api.github.com/repos/dask/dask/labels/documentation",
            "name": "documentation",
            "color": "f9d0c4",
            "default": true,
            "description": "Improve or add to documentation"
        },
        {
            "id": 996497175,
            "node_id": "MDU6TGFiZWw5OTY0OTcxNzU=",
            "url": "https://api.github.com/repos/dask/dask/labels/good%20second%20issue",
            "name": "good second issue",
            "color": "5319e7",
            "default": false,
            "description": "Clearly described, educational, but less trivial than \"good first issue\"."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-05-01T10:24:03Z",
    "updated_at": "2021-09-27T15:07:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Via [this StackOverflow post](https://stackoverflow.com/q/67273742/5085211): Suppose `test.csv` is\r\n\r\n```\r\nage,name\r\n28,Alice\r\n```\r\n\r\nNow, let's try the following:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\n\r\ndf = dd.read_csv(\"test.csv\", dtype={'name': str})\r\nresult = df['age'].apply(lambda num: num + 1, meta={'age': int})\r\nresult.compute()\r\n```\r\n\r\nThis fails with the below error. Notably, replacing the meta argument with `('age', int)` does not cause any issues.\r\n\r\n**What happened**:\r\n\r\nThe following error:\r\n\r\n```python\r\n--------------------------------------------------------------------------\r\nAttributeError                           Traceback (most recent call last)\r\n<ipython-input-3-10c145120c76> in <module>\r\n      3 df = dd.read_csv(\"test.csv\", dtype={'name': str})\r\n      4 result = df['age'].apply(lambda num: num + 1, meta={'age': int})\r\n----> 5 result.compute()\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\base.py in compute(self, **kwargs)\r\n    281         dask.base.compute\r\n    282         \"\"\"\r\n--> 283         (result,) = compute(self, traverse=False, **kwargs)\r\n    284         return result\r\n    285\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\base.py in compute(*args, **kwargs)\r\n    563         postcomputes.append(x.__dask_postcompute__())\r\n    564\r\n--> 565     results = schedule(dsk, keys, **kwargs)\r\n    566     return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n    567\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\threaded.py in get(dsk, result, cache, num_workers, pool, **kwargs)\r\n     82         get_id=_thread_get_id,\r\n     83         pack_exception=pack_exception,\r\n---> 84         **kwargs\r\n     85     )\r\n     86\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\local.py in get_async(apply_async, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, **kwargs)\r\n    485                         _execute_task(task, data)  # Re-execute locally\r\n    486                     else:\r\n--> 487                         raise_exception(exc, tb)\r\n    488                 res, worker_id = loads(res_info)\r\n    489                 state[\"cache\"][key] = res\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\local.py in reraise(exc, tb)\r\n    315     if exc.__traceback__ is not tb:\r\n    316         raise exc.with_traceback(tb)\r\n--> 317     raise exc\r\n    318\r\n    319\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\local.py in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    220     try:\r\n    221         task, data = loads(task_info)\r\n--> 222         result = _execute_task(task, data)\r\n    223         id = get_id()\r\n    224         result = dumps((result, id))\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\core.py in _execute_task(arg, cache, dsk)\r\n    119         # temporaries by their reference count and can execute certain\r\n    120         # operations in-place.\r\n--> 121         return func(*(_execute_task(a, cache) for a in args))\r\n    122     elif not ishashable(arg):\r\n    123         return arg\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\optimization.py in __call__(self, *args)\r\n    961         if not len(args) == len(self.inkeys):\r\n    962             raise ValueError(\"Expected %d args, got %d\" % (len(self.inkeys), len(args)))\r\n--> 963         return core.get(self.dsk, self.outkey, dict(zip(self.inkeys, args)))\r\n    964\r\n    965     def __reduce__(self):\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\core.py in get(dsk, out, cache)\r\n    149     for key in toposort(dsk):\r\n    150         task = dsk[key]\r\n--> 151         result = _execute_task(task, cache)\r\n    152         cache[key] = result\r\n    153     result = _execute_task(out, cache)\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\core.py in _execute_task(arg, cache, dsk)\r\n    119         # temporaries by their reference count and can execute certain\r\n    120         # operations in-place.\r\n--> 121         return func(*(_execute_task(a, cache) for a in args))\r\n    122     elif not ishashable(arg):\r\n    123         return arg\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\utils.py in apply(func, args, kwargs)\r\n     33 def apply(func, args, kwargs=None):\r\n     34     if kwargs:\r\n---> 35         return func(*args, **kwargs)\r\n     36     else:\r\n     37         return func(*args)\r\n\r\n\\miniconda3\\lib\\site-packages\\dask\\dataframe\\core.py in apply_and_enforce(*args, **kwargs)\r\n   5493             c = meta.columns\r\n   5494         else:\r\n-> 5495             c = meta.name\r\n   5496         return _rename(c, df)\r\n   5497     return df\r\n\r\n\\miniconda3\\lib\\site-packages\\pandas\\core\\generic.py in __getattr__(self, name)\r\n   5463             if self._info_axis._can_hold_identifiers_and_holds_name(name):\r\n   5464                 return self[name]\r\n-> 5465             return object.__getattribute__(self, name)\r\n   5466\r\n   5467     def __setattr__(self, name: str, value) -> None:\r\n\r\nAttributeError: 'DataFrame' object has no attribute 'name'\r\n```\r\n\r\n**What you expected to happen**:\r\n\r\nThe same as if I had used the tuple instead:\r\n\r\n```python\r\nIn [6]: import dask.dataframe as dd\r\n   ...:\r\n   ...: df = dd.read_csv(\"test.csv\", dtype={'name': str})\r\n   ...: df['age'].apply(lambda num: num + 1, meta=('age', int)).compute()\r\nOut[6]:\r\n0    29\r\nName: age, dtype: int64\r\n```\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2021.03.0\r\n- Python version: 3.7.6\r\n- Operating System: Windows 10\r\n- Install method (conda, pip, source): conda",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/7622/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/7622/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}