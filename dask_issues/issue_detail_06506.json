{
    "url": "https://api.github.com/repos/dask/dask/issues/6506",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/6506/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/6506/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/6506/events",
    "html_url": "https://github.com/dask/dask/issues/6506",
    "id": 677834184,
    "node_id": "MDU6SXNzdWU2Nzc4MzQxODQ=",
    "number": 6506,
    "title": "Bypassing dask dependency management",
    "user": {
        "login": "lr4d",
        "id": 44430780,
        "node_id": "MDQ6VXNlcjQ0NDMwNzgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/44430780?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lr4d",
        "html_url": "https://github.com/lr4d",
        "followers_url": "https://api.github.com/users/lr4d/followers",
        "following_url": "https://api.github.com/users/lr4d/following{/other_user}",
        "gists_url": "https://api.github.com/users/lr4d/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lr4d/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lr4d/subscriptions",
        "organizations_url": "https://api.github.com/users/lr4d/orgs",
        "repos_url": "https://api.github.com/users/lr4d/repos",
        "events_url": "https://api.github.com/users/lr4d/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lr4d/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-08-12T16:45:11Z",
    "updated_at": "2020-08-26T18:31:25Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "We are trying to improve the resilience of one of our critical data pipelines by storing small, valuable task results in a `distributed.Queue` (could also be another temporary storage layer), which we retrieve at a later part of the execution.\r\n\r\nBy default, our graph looks something like this:\r\n```\r\nload_xyz -> store_xyz -> metadata_xyz \u2014> commit_xyz_abc\r\nload_abc -> store_abc -> metadata_abc /\r\n```\r\n\r\nWith the increased resilience, we could have 2 distinct graphs looking something like this:\r\n```\r\nload_xyz -> store_xyz -> metadata_xyz_q    # This stores the result in a distributed.Queue\r\nload_abc -> store_abc -> metadata_abc_q   # This stores the result in a distributed.Queue\r\n\r\nwait_for_q_fill -> commit_xyz_abc  # This fetches the results from the Queue and finishes execution\r\n```\r\nHere, `wait_for_q_fill`, still depends on the storage layer to be filled with the required keys from `metadata_xyz_q` and `metadata_abc_q`. However, the distinction is that we no longer keep any data related to `metadata_xyz`, `metadata_abc` at the workers' side.\r\n\r\nHence, the order of execution from the previous graph is still applicable, but the dependencies of the result from `metadata_*` to `commit` no longer apply. i.e. as long as `metadata_*_q` has finished successfully, dask can \"forget\" about feeding its result to any other task.\r\n\r\nThere's various ways this could be implemented, one could simply call compute on the graph up to `metadata_*_q`, and then run the `commit` graph; I've also looked into futures but it's not really applicable for our use case. I was hoping someone could give me some suggestions for having such an implementation more integrated with dask/distributed.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/6506/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/6506/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}