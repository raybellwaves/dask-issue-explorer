[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587182541",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587182541",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587182541,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzE4MjU0MQ==",
        "user": {
            "login": "d-v-b",
            "id": 3805136,
            "node_id": "MDQ6VXNlcjM4MDUxMzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3805136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/d-v-b",
            "html_url": "https://github.com/d-v-b",
            "followers_url": "https://api.github.com/users/d-v-b/followers",
            "following_url": "https://api.github.com/users/d-v-b/following{/other_user}",
            "gists_url": "https://api.github.com/users/d-v-b/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/d-v-b/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/d-v-b/subscriptions",
            "organizations_url": "https://api.github.com/users/d-v-b/orgs",
            "repos_url": "https://api.github.com/users/d-v-b/repos",
            "events_url": "https://api.github.com/users/d-v-b/events{/privacy}",
            "received_events_url": "https://api.github.com/users/d-v-b/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-17T22:50:16Z",
        "updated_at": "2020-02-17T22:50:16Z",
        "author_association": "MEMBER",
        "body": "Looking closer at the performance of indexing an array created by `da.stack` indicates that the time to index the first element depends on the size of the array along the stacked axis -- the large the stacked array is, the longer it takes to get the first element. This is a little surprising! Is there some way to combine sub-arrays without this unfavorable scaling? ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587182541/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587230630",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587230630",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587230630,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzIzMDYzMA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-18T01:25:51Z",
        "updated_at": "2020-02-18T01:25:51Z",
        "author_association": "MEMBER",
        "body": "Hrm, the first thing I would do to figure out what was going on here would probably be to run this under a Python profiler and see what comes back.  If you're interested in doing that that would probably be the right next step.  Alternatively, if you're able to provide a minimal reproducible example I'd be happy to run it and take a look under snakeviz or something.  I could try to create such a reproducer given your explanation, but my guess is that i'm liable to miss something, and you're probably much faster at this, if you have the time.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587230630/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587240761",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587240761",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587240761,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI0MDc2MQ==",
        "user": {
            "login": "d-v-b",
            "id": 3805136,
            "node_id": "MDQ6VXNlcjM4MDUxMzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3805136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/d-v-b",
            "html_url": "https://github.com/d-v-b",
            "followers_url": "https://api.github.com/users/d-v-b/followers",
            "following_url": "https://api.github.com/users/d-v-b/following{/other_user}",
            "gists_url": "https://api.github.com/users/d-v-b/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/d-v-b/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/d-v-b/subscriptions",
            "organizations_url": "https://api.github.com/users/d-v-b/orgs",
            "repos_url": "https://api.github.com/users/d-v-b/repos",
            "events_url": "https://api.github.com/users/d-v-b/events{/privacy}",
            "received_events_url": "https://api.github.com/users/d-v-b/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-18T02:15:27Z",
        "updated_at": "2020-02-18T02:15:27Z",
        "author_association": "MEMBER",
        "body": "Here's a MRE: \r\n```python\r\nfrom dask import delayed\r\nimport dask.array as da\r\nimport numpy as np\r\nfrom timeit import timeit \r\n\r\ndef stacked_indexing_test(length, inner_shape, dtype='uint16'):\r\n    sub_arrays = [da.from_delayed(delayed(np.zeros(inner_shape, dtype=dtype)), shape=inner_shape, dtype=dtype, name=idx) for idx in range(length)]\r\n    stacked = da.stack(sub_arrays)    \r\n    result = timeit('stacked[0]', number=10, globals={'stacked':stacked})\r\n    return result\r\n```\r\n\r\nOn my desktop workstation, calling this function as so:\r\n```python\r\n[stacked_indexing_test(x, (1000000,)) for x in [10, 100, 1000, 10000, 100000]]\r\n```\r\nproduces the following output:\r\n```\r\n# time in seconds\r\n[0.005615579022560269,\r\n 0.0021283560199663043,\r\n 0.003612712025642395,\r\n 0.15081311302492395,\r\n 0.9848928459687158]\r\n```\r\n\r\nif I profile `stacked_array[0]` for an array created a la the function above, I see this (the biggest timesink is a dict update, and I'm only showing the top of the output): \r\n```\r\n        377 function calls (373 primitive calls) in 0.009 seconds\r\n\r\n   Ordered by: internal time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        2    0.006    0.003    0.006    0.003 {method 'update' of 'dict' objects}\r\n        1    0.001    0.001    0.009    0.009 <string>:1(<module>)\r\n        2    0.001    0.000    0.001    0.000 slicing.py:1203(_cumsum)\r\n        2    0.000    0.000    0.000    0.000 core.py:1136(shape)\r\n        1    0.000    0.000    0.006    0.006 highlevelgraph.py:87(from_collections)\r\n        1    0.000    0.000    0.001    0.001 slicing.py:269(slice_slices_and_integers)\r\n        1    0.000    0.000    0.008    0.008 core.py:1483(__getitem__)\r\n        3    0.000    0.000    0.000    0.000 utils.py:31(meta_from_array)\r\n       94    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\r\n        1    0.000    0.000    0.009    0.009 {built-in method builtins.exec}\r\n        2    0.000    0.000    0.000    0.000 slicing.py:821(check_index)\r\n       24    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n        1    0.000    0.000    0.000    0.000 slicing.py:765(normalize_index)\r\n        4    0.000    0.000    0.001    0.000 slicing.py:1215(cached_cumsum)\r\n        1    0.000    0.000    0.000    0.000 core.py:1010(__new__)\r\n        1    0.000    0.000    0.000    0.000 base.py:640(tokenize)\r\n        7    0.000    0.000    0.000    0.000 numeric.py:1786(isscalar)\r\n        2    0.000    0.000    0.000    0.000 slicing.py:326(_slice_1d)\r\n       24    0.000    0.000    0.000    0.000 abc.py:137(__instancecheck__)\r\n       12    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n        1    0.000    0.000    0.001    0.001 slicing.py:85(slice_array)\r\n      4/2    0.000    0.000    0.000    0.000 utils.py:500(__call__)\r\n        1    0.000    0.000    0.001    0.001 slicing.py:204(slice_wrap_lists)\r\n        1    0.000    0.000    0.000    0.000 core.py:2325(normalize_chunks)\r\n...\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587240761/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587246552",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587246552",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587246552,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI0NjU1Mg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-18T02:40:15Z",
        "updated_at": "2020-02-18T02:40:15Z",
        "author_association": "MEMBER",
        "body": "Ah thanks.  Here is my slightly modified version of that in case other people want to play.\r\n\r\n```python\r\nimport dask\r\nimport dask.array as da\r\nimport numpy as np\r\n\r\nsub_arrays = [\r\n    da.from_delayed(\r\n        dask.delayed(np.zeros)((1000000,), dtype=\"int64\"), \r\n        shape=(1000000,), \r\n        dtype=\"int64\", \r\n        name=idx\r\n    ) \r\n    for idx in range(10000)\r\n]\r\n\r\nstacked = da.stack(sub_arrays)\r\n%load_ext snakeviz\r\n%%snakeviz\r\nfor i in range(len(stacked)):\r\n    stacked[i]\r\n```\r\n\r\nI also see the dict update.  It's coming from within the HighLevelGraphs code.  (snakeviz is a bit better at visualizing the call stack here).  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587246552/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587266798",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587266798",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587266798,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI2Njc5OA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-18T03:57:49Z",
        "updated_at": "2020-02-18T03:57:49Z",
        "author_association": "MEMBER",
        "body": "cc also @bmerry , who might be interested in this sort of problem.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587266798/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587295256",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587295256",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587295256,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzI5NTI1Ng==",
        "user": {
            "login": "bmerry",
            "id": 1963944,
            "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmerry",
            "html_url": "https://github.com/bmerry",
            "followers_url": "https://api.github.com/users/bmerry/followers",
            "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
            "organizations_url": "https://api.github.com/users/bmerry/orgs",
            "repos_url": "https://api.github.com/users/bmerry/repos",
            "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmerry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-18T06:08:03Z",
        "updated_at": "2020-02-18T06:08:03Z",
        "author_association": "MEMBER",
        "body": "I'll see if I can take a look this week. I've had plenty of performance issues before with slicing a small piece out of a large array scaling with the size of the large array. Apart from just creating the slice being slow, you'll definitely find that `stacked[i].compute()` will also scale poorly because `compute` requires time proportional to the whole graph (something I'm hoping to fix).\r\n\r\nAt the moment I suspect that for best performance one will need to avoid iterating and instead use functions like `blockwise` or `map_blocks` to express the whole computation in a functional style. Unfortunately that may require some rearchitecture of your application :-(\r\n\r\nOne thing to note is that the *first* indexing operation may be slower, because it computes a cumulative sum over the chunk sizes (showing up as `_cumsum` in the profile), which is then cached. So @mrocklin's code is probably a better test since it iterates the whole array.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587295256/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587360588",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587360588",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587360588,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzM2MDU4OA==",
        "user": {
            "login": "bmerry",
            "id": 1963944,
            "node_id": "MDQ6VXNlcjE5NjM5NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bmerry",
            "html_url": "https://github.com/bmerry",
            "followers_url": "https://api.github.com/users/bmerry/followers",
            "following_url": "https://api.github.com/users/bmerry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions",
            "organizations_url": "https://api.github.com/users/bmerry/orgs",
            "repos_url": "https://api.github.com/users/bmerry/repos",
            "events_url": "https://api.github.com/users/bmerry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bmerry/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-18T09:24:34Z",
        "updated_at": "2020-02-18T09:24:34Z",
        "author_association": "MEMBER",
        "body": "I think the issue is that each use of `dask.delayed` forms a separate layer in the high-level graph. There are other approaches to building a large array out of a function that can load a single piece, and we should probably give them more coverage in the documentation.\r\n\r\nHere's a variation that uses `map_blocks`. It's a lot faster, but it still doesn't seem to be scaling linearly (1.8s to iterate over 10^4 chunks, 64s to iterate over 10^5). It looks like that's because indexing looks up the shape, which is currently done by summing up all the chunk sizes. That should be fairly easy to fix fortunately.\r\n\r\n```python3\r\n#!/usr/bin/env python3\r\nimport dask\r\nimport dask.array as da\r\nimport numpy as np\r\nimport time\r\n\r\ndef load_block(block_id):\r\n    # Would normally use block_id (or block_info) to determine which data to load\r\n    return np.zeros((1, 1000000,), dtype=\"int64\")\r\n\r\nstacked = da.map_blocks(\r\n    load_block,\r\n    chunks=((1,) * 10000, (1000000,)),\r\n    dtype=\"int64\"\r\n)\r\nfor i in range(len(stacked)):\r\n    stacked[i]\r\n```\r\n\r\nSomething I've had limited success with in a similar (but not identical) application in the past is to take a collection that I know will be used as a base for many other operations and run the optimiser on it e.g. [here](https://github.com/ska-sa/katdal/blob/d986f6b31f304906742c9b992fffa295ebd4b154/katdal/lazy_indexer.py#L139). Note that assigning to the `.dask` attribute of a collection is something @mrocklin would like to deprecate and has been the source of bugs in the past, so if you do this be prepared that a future dask version might require you to change your code.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587360588/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/587511134",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-587511134",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 587511134,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4NzUxMTEzNA==",
        "user": {
            "login": "d-v-b",
            "id": 3805136,
            "node_id": "MDQ6VXNlcjM4MDUxMzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3805136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/d-v-b",
            "html_url": "https://github.com/d-v-b",
            "followers_url": "https://api.github.com/users/d-v-b/followers",
            "following_url": "https://api.github.com/users/d-v-b/following{/other_user}",
            "gists_url": "https://api.github.com/users/d-v-b/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/d-v-b/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/d-v-b/subscriptions",
            "organizations_url": "https://api.github.com/users/d-v-b/orgs",
            "repos_url": "https://api.github.com/users/d-v-b/repos",
            "events_url": "https://api.github.com/users/d-v-b/events{/privacy}",
            "received_events_url": "https://api.github.com/users/d-v-b/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-02-18T15:14:33Z",
        "updated_at": "2020-02-18T15:14:33Z",
        "author_association": "MEMBER",
        "body": "Thanks to both @mrocklin and @bmerry for looking into this. I'll look into your suggestions. As a user who doesn't know the internals of Dask very well, it's a little surprising that there's a big performance difference between an array constructed with `map_blocks` and an array constructed with `stack(from_delayed)`. Would it make sense to get numbers for this kind behavior thing by adding performance tests in the test suite? ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/587511134/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/632843142",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-632843142",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 632843142,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg0MzE0Mg==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-22T18:33:07Z",
        "updated_at": "2020-05-22T18:33:07Z",
        "author_association": "MEMBER",
        "body": "I am finally coming back to this issue and I think there are a few paths forward.\r\n\r\n1. This is probably obvious, but the workflow described in this issue is pretty similar to the recommended approach for reading lots of images into a dask array ([dask array docs](https://docs.dask.org/en/latest/array-creation.html#using-dask-delayed)). Perhaps it would be better to change that example to use `map_blocks` or at least add a section on why it might be a better idea to use `map_blocks` in some cases.\r\n\r\n2. I'm wondering if it would be appropriate to add a `from_blocks` method to dask array. This would be pretty much an alias for map_blocks with the exception that a `shape` option could be passed instead or in addition to `chunks`. \r\n\r\n3. Is there any way that we could optimize `stack`? Is that even the right place for optimization to occur?\r\n\r\n4. Adding performance tests would be great, but I don't think the test suite is the right place. They would go into https://github.com/dask/dask-benchmarks (which is currently not very active). ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/632843142/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/639812088",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-639812088",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 639812088,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTgxMjA4OA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T20:54:54Z",
        "updated_at": "2020-06-05T20:54:54Z",
        "author_association": "MEMBER",
        "body": "Ok! I took a crack at making the graph construction faster in #6293 and I will also add a section to the docs recommending that people consider using `map_blocks` since it constructs a smaller graph, so will be faster. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/639812088/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/639837589",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-639837589",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 639837589,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTgzNzU4OQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T21:42:29Z",
        "updated_at": "2020-06-05T21:42:29Z",
        "author_association": "MEMBER",
        "body": "I sketched out what a `from_blocks` method could look like in #6294",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/639837589/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/714536079",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-714536079",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 714536079,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcxNDUzNjA3OQ==",
        "user": {
            "login": "m-albert",
            "id": 12528388,
            "node_id": "MDQ6VXNlcjEyNTI4Mzg4",
            "avatar_url": "https://avatars.githubusercontent.com/u/12528388?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/m-albert",
            "html_url": "https://github.com/m-albert",
            "followers_url": "https://api.github.com/users/m-albert/followers",
            "following_url": "https://api.github.com/users/m-albert/following{/other_user}",
            "gists_url": "https://api.github.com/users/m-albert/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/m-albert/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/m-albert/subscriptions",
            "organizations_url": "https://api.github.com/users/m-albert/orgs",
            "repos_url": "https://api.github.com/users/m-albert/repos",
            "events_url": "https://api.github.com/users/m-albert/events{/privacy}",
            "received_events_url": "https://api.github.com/users/m-albert/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-10-22T14:31:52Z",
        "updated_at": "2020-10-22T14:31:52Z",
        "author_association": "NONE",
        "body": "Recently I also stumbled upon the very slow indexing of `stack`ed arrays. What we found here https://github.com/dask/dask-image/issues/161 is that, as @bmerry suggested, indexing arrays created with `map_block` is much faster. Importantly, also array creation is much faster.\r\n\r\n> I think the issue is that each use of dask.delayed forms a separate layer in the high-level graph. There are other approaches to building a large array out of a function that can load a single piece, and we should probably give them more coverage in the documentation. https://github.com/dask/dask/issues/5913#issuecomment-587360588\r\n\r\nAs @bmerry mentions, using `stack` creates arrays with complicated dask graphs. This is desirable in the general case, as intermediate computations within those graphs could be needed elsewhere. However, often when creating a large array this is not the case, e.g. when reading in images (and individual data chunks will ever only be accessed by indexing the resulting array). In those cases, it makes sense to fuse tasks underlying each chunk of the created array (e.g. using `dask.optimize(stacked)`), **which recovers quick indexing performance**.\r\n\r\nHere's some code and timing:\r\n\r\n```python\r\nimport dask\r\nimport dask.array as da\r\nimport numpy as np\r\n\r\ndef create_array_stacked(shape, new_shape0):\r\n    sub_arrays = [\r\n        da.from_delayed(\r\n            dask.delayed(np.zeros)((shape,), dtype=\"int64\"), \r\n            shape=(shape,), \r\n            dtype=\"int64\", \r\n            name=idx\r\n        ) \r\n        for idx in range(new_shape0)\r\n    ]\r\n\r\n    stacked = da.stack(sub_arrays)\r\n    return stacked\r\n\r\ndef create_array_mapped(shape, new_shape0):\r\n    mapped = dask.array.map_blocks(\r\n        np.zeros,\r\n        shape=shape,\r\n        chunks=dask.array.core.normalize_chunks((1,) + (shape,), (new_shape0, shape)),\r\n        dtype='int64'\r\n    )\r\n    return mapped\r\n\r\ndef index_along_stack(stacked):\r\n    for i in range(len(stacked)):\r\n        stacked[i]\r\n\r\nshape = 10\r\nnew_shape0 = 10000\r\n\r\nstacked = create_array_stacked(shape, new_shape0)\r\nmapped = create_array_mapped(shape, new_shape0)\r\n\r\n# indexing\r\n%timeit index_along_stack(stacked) # 9.1s\r\n%timeit index_along_stack(mapped) # 1.1s\r\n\r\n# creation\r\n%timeit create_array_stacked(shape, new_shape0) # 1.3s\r\n%timeit create_array_mapped(shape, new_shape0) # 3.8ms\r\n```\r\n\r\nAfter optimization:\r\n```python\r\nstacked_optimized, = dask.optimize(stacked)\r\n%timeit index_along_stack(stacked_optimized) # 1.1s\r\n\r\nmapped_optimized, = dask.optimize(mapped)\r\n%timeit index_along_stack(mapped_optimized) # 1.1s",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/714536079/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1282813555",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-1282813555",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 1282813555,
        "node_id": "IC_kwDOAbcwm85Mdi5z",
        "user": {
            "login": "hanslovsky",
            "id": 1086317,
            "node_id": "MDQ6VXNlcjEwODYzMTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1086317?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hanslovsky",
            "html_url": "https://github.com/hanslovsky",
            "followers_url": "https://api.github.com/users/hanslovsky/followers",
            "following_url": "https://api.github.com/users/hanslovsky/following{/other_user}",
            "gists_url": "https://api.github.com/users/hanslovsky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hanslovsky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hanslovsky/subscriptions",
            "organizations_url": "https://api.github.com/users/hanslovsky/orgs",
            "repos_url": "https://api.github.com/users/hanslovsky/repos",
            "events_url": "https://api.github.com/users/hanslovsky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hanslovsky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-18T18:12:35Z",
        "updated_at": "2022-10-18T18:12:35Z",
        "author_association": "NONE",
        "body": "I cannot reproduce the results for `dask.optimize` from https://github.com/dask/dask/issues/5913#issuecomment-714536079 on Manjaro Linux with Python 3.10.6 and dask 2022.7.0. This is my MWE:\r\n```python\r\nimport time\r\n\r\nimport dask\r\nimport dask.array as da\r\nimport numpy as np\r\n\r\nfrom dask import delayed\r\n\r\n\r\ndef f():\r\n    return np.random.random(size=(6, 512, 512)).astype(np.float32)\r\n\r\n\r\nif __name__ == '__main__':\r\n    sizes = (1, 10, 100, 1_000, 10_000, 100_000)\r\n    for size in sizes:\r\n        delayed_f = delayed(f)\r\n        shape = f().shape\r\n        dtype = f().dtype\r\n        data = [da.from_delayed(delayed_f(), shape=shape, dtype=dtype) for _ in range(size)]\r\n        stack = da.stack(data, axis=0)\r\n        optimized = dask.optimize(stack)\r\n\r\n        t0 = time.time()\r\n        data[0].compute()\r\n        t1 = time.time()\r\n        dt1 = t1 - t0\r\n\r\n        t0 = time.time()\r\n        stack[0].compute()\r\n        t1 = time.time()\r\n        dt2 = t1 - t0\r\n\r\n        t0 = time.time()\r\n        optimized[0].compute()\r\n        t1 = time.time()\r\n        dt3 = t1 - t0\r\n\r\n        print(f'{size=}: {dt1=} {dt2=} {dt3=}')\r\n```\r\n\r\nThe program crashes with memory issues for `size=10_000`. These are the numbers for smaller sizes. The runtimes increase drastically with `dask.optimize` already for `size=10`.\r\n```\r\nsize=1: dt1=0.012610435485839844 dt2=0.010903358459472656 dt3=0.009810209274291992\r\nsize=10: dt1=0.009593963623046875 dt2=0.0110321044921875 dt3=0.20687413215637207\r\nsize=100: dt1=0.010175943374633789 dt2=0.014065742492675781 dt3=2.138862371444702\r\nsize=1000: dt1=0.024163484573364258 dt2=0.02058243751525879 dt3=20.04542565345764\r\n```\r\nwithout `dask.optimize`, this is what I get:\r\n```\r\nsize=1: dt1=0.024511337280273438 dt2=0.014386415481567383\r\nsize=10: dt1=0.009800910949707031 dt2=0.021082639694213867\r\nsize=100: dt1=0.024363994598388672 dt2=0.021132707595825195\r\nsize=1000: dt1=0.012864828109741211 dt2=0.019921064376831055\r\nsize=10000: dt1=0.024328231811523438 dt2=0.18598151206970215\r\nsize=100000: dt1=0.02416396141052246 dt2=2.679401397705078\r\n```\r\n\r\nAm I doing something terribly wrong here?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1282813555/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1282865332",
        "html_url": "https://github.com/dask/dask/issues/5913#issuecomment-1282865332",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5913",
        "id": 1282865332,
        "node_id": "IC_kwDOAbcwm85Mdvi0",
        "user": {
            "login": "hanslovsky",
            "id": 1086317,
            "node_id": "MDQ6VXNlcjEwODYzMTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1086317?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hanslovsky",
            "html_url": "https://github.com/hanslovsky",
            "followers_url": "https://api.github.com/users/hanslovsky/followers",
            "following_url": "https://api.github.com/users/hanslovsky/following{/other_user}",
            "gists_url": "https://api.github.com/users/hanslovsky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hanslovsky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hanslovsky/subscriptions",
            "organizations_url": "https://api.github.com/users/hanslovsky/orgs",
            "repos_url": "https://api.github.com/users/hanslovsky/repos",
            "events_url": "https://api.github.com/users/hanslovsky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hanslovsky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-10-18T18:54:01Z",
        "updated_at": "2022-10-18T18:54:01Z",
        "author_association": "NONE",
        "body": "I was able to apply the `da.map_blocks` solution to my problem. This is what it looks like for me:\r\n```python\r\nmapped = da.map_blocks(lambda: f()[np.newaxis], chunks=((1,) * size, *shape), dtype=dtype)\r\n```\r\nFor completeness, this is the updated MWE, timing direct access to the delayed objects, `da.stack`, and `da.map_blocks`:\r\n```python\r\nimport time\r\n\r\nimport dask\r\nimport dask.array as da\r\nimport numpy as np\r\n\r\nfrom dask import delayed\r\n\r\n\r\ndef f() -> np.ndarray:\r\n    return np.random.random(size=(6, 512, 512)).astype(np.float32)\r\n\r\n\r\nif __name__ == '__main__':\r\n    sizes = (1, 10, 100, 1_000, 10_000, 100_000)\r\n    for size in sizes:\r\n        delayed_f = delayed(f)\r\n        shape = f().shape\r\n        dtype = f().dtype\r\n        data = [da.from_delayed(delayed_f(), shape=shape, dtype=dtype) for _ in range(size)]\r\n        stack = da.stack(data, axis=0)\r\n        mapped = da.map_blocks(lambda: f()[np.newaxis], chunks=((1,) * size, *shape), dtype=dtype)\r\n\r\n\r\n        t0 = time.time()\r\n        data[0].compute()\r\n        t1 = time.time()\r\n        dt1 = t1 - t0\r\n\r\n        t0 = time.time()\r\n        stack[0].compute()\r\n        t1 = time.time()\r\n        dt2 = t1 - t0\r\n\r\n        t0 = time.time()\r\n        mapped[0].compute()\r\n        t1 = time.time()\r\n        dt3 = t1 - t0\r\n\r\n        print(f'{size=}: {dt1=} {dt2=} {dt3=}')\r\n```\r\nwith output\r\n```\r\nsize=1: dt1=0.013468265533447266 dt2=0.009941577911376953 dt3=0.009962797164916992\r\nsize=10: dt1=0.010763406753540039 dt2=0.010058403015136719 dt3=0.009970903396606445\r\nsize=100: dt1=0.010707855224609375 dt2=0.012035608291625977 dt3=0.010043144226074219\r\nsize=1000: dt1=0.010357856750488281 dt2=0.022076845169067383 dt3=0.011590719223022461\r\nsize=10000: dt1=0.012791872024536133 dt2=0.23499560356140137 dt3=0.01624917984008789\r\nsize=100000: dt1=0.010257482528686523 dt2=2.551173210144043 dt3=0.08847475051879883\r\n```\r\nIndexing in `map_blocked` gets slower with more chunks as well, but the impact is much less than for `da.stack`. This will work for my use case.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1282865332/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]