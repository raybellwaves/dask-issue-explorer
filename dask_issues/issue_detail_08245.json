{
    "url": "https://api.github.com/repos/dask/dask/issues/8245",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/8245/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/8245/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/8245/events",
    "html_url": "https://github.com/dask/dask/issues/8245",
    "id": 1022552303,
    "node_id": "I_kwDOAbcwm8488ujv",
    "number": 8245,
    "title": "Implement `unstack()` and/or `pivot()`",
    "user": {
        "login": "DahnJ",
        "id": 18722560,
        "node_id": "MDQ6VXNlcjE4NzIyNTYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18722560?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DahnJ",
        "html_url": "https://github.com/DahnJ",
        "followers_url": "https://api.github.com/users/DahnJ/followers",
        "following_url": "https://api.github.com/users/DahnJ/following{/other_user}",
        "gists_url": "https://api.github.com/users/DahnJ/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DahnJ/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DahnJ/subscriptions",
        "organizations_url": "https://api.github.com/users/DahnJ/orgs",
        "repos_url": "https://api.github.com/users/DahnJ/repos",
        "events_url": "https://api.github.com/users/DahnJ/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DahnJ/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-10-11T10:50:54Z",
    "updated_at": "2022-02-05T16:46:11Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "For a recent [Stackoverflow question](https://stackoverflow.com/questions/69480773/convert-column-of-categoricals-to-additional-columns/69524920#69524920), I wrote a PoC version of `unstack`, which I believe does not exist in Dask. I suppose this is connected to https://github.com/dask/dask/issues/1493 but is in principle independent of it.\r\n\r\nPasting verbatim from the SO question for convenience:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\n\r\n# Create Dask DataFrame out of your `frame`\r\n# npartitions is more than 1 to demonstrate this works on a partitioned datataset\r\ndf = dd.from_pandas(frame, npartitions=3)\r\n\r\n# Dask needs to know work out what the categories are\r\n# Alternatively you can use df.categorize\r\n# See https://docs.dask.org/en/latest/dataframe-categoricals.html\r\ncategory = 'category'\r\ndf[category] = df[category].astype(category).cat.as_known()\r\n\r\n# Dask needs to know what the resulting DataFrame looks like\r\nnew_columns = pd.CategoricalIndex(df[category].cat.categories, name=category)\r\nmeta = pd.DataFrame(columns=new_columns, \r\n                    index=df._meta.set_index(['idx', 'id']).index)\r\n\r\n# Implement using apply_concat_apply (\"aca\")\r\n# More details: https://blog.dask.org/2019/10/08/df-groupby\r\ndef identity(x): return x\r\n\r\ndef my_unstack(x):\r\n    return x.set_index(['id', 'idx', 'category'], drop=True).unstack()\r\n    \r\ndef combine(x):\r\n    return x.groupby(level=[0, 1]).sum()\r\n\r\nresult = dd.core.apply_concat_apply([df], \r\n                   chunk=identity, \r\n                   aggregate=my_unstack, \r\n                   combine=combine,\r\n                   meta=meta)\r\nresult.compute()\r\n```\r\n\r\nCould this be actually used in Dask? `my_unstack` would of course have to be extended, but is this in principle correct and could eventually be part of the API?\r\n\r\nI am happy to contribute to a PR in such a case.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/8245/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/8245/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}