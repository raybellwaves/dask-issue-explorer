[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1190204485",
        "html_url": "https://github.com/dask/dask/issues/9293#issuecomment-1190204485",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9293",
        "id": 1190204485,
        "node_id": "IC_kwDOAbcwm85G8RRF",
        "user": {
            "login": "pp-mo",
            "id": 2089069,
            "node_id": "MDQ6VXNlcjIwODkwNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2089069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pp-mo",
            "html_url": "https://github.com/pp-mo",
            "followers_url": "https://api.github.com/users/pp-mo/followers",
            "following_url": "https://api.github.com/users/pp-mo/following{/other_user}",
            "gists_url": "https://api.github.com/users/pp-mo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pp-mo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pp-mo/subscriptions",
            "organizations_url": "https://api.github.com/users/pp-mo/orgs",
            "repos_url": "https://api.github.com/users/pp-mo/repos",
            "events_url": "https://api.github.com/users/pp-mo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pp-mo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-20T12:15:23Z",
        "updated_at": "2022-07-20T12:15:23Z",
        "author_association": "NONE",
        "body": "Note : #9240 may be relevant, at least to point#1 in the description above",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1190204485/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1190341070",
        "html_url": "https://github.com/dask/dask/issues/9293#issuecomment-1190341070",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9293",
        "id": 1190341070,
        "node_id": "IC_kwDOAbcwm85G8ynO",
        "user": {
            "login": "pavithraes",
            "id": 33131404,
            "node_id": "MDQ6VXNlcjMzMTMxNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/33131404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pavithraes",
            "html_url": "https://github.com/pavithraes",
            "followers_url": "https://api.github.com/users/pavithraes/followers",
            "following_url": "https://api.github.com/users/pavithraes/following{/other_user}",
            "gists_url": "https://api.github.com/users/pavithraes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pavithraes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pavithraes/subscriptions",
            "organizations_url": "https://api.github.com/users/pavithraes/orgs",
            "repos_url": "https://api.github.com/users/pavithraes/repos",
            "events_url": "https://api.github.com/users/pavithraes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pavithraes/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-20T14:13:42Z",
        "updated_at": "2022-07-20T14:13:42Z",
        "author_association": "MEMBER",
        "body": "@pp-mo Thanks for opening this!\r\n\r\n> It's possible that this behaviour is essential,\r\ne.g. because a memory-copied object contains O.S. resources (like file handles) which cannot function in a forked process.\r\nIf so, however, that is really not obvious, and should probably be documented somewhere.\r\n\r\nIndeed, this is to be expected with multiprocessing and distributed schedulers. I also agree that we can document this better, maybe in the [Scheduling docs](https://docs.dask.org/en/stable/scheduling.html). Would you be interested in submitting a PR for this?\r\n\r\nHere's a simpler example:\r\n\r\n```python\r\nimport numpy as np\r\n\r\nfrom dask import delayed\r\nfrom dask.distributed import Client\r\n\r\na = np.ones(shape=(3,3))\r\n\r\n@delayed\r\ndef get_id(x):\r\n    return id(x)\r\n\r\nget_id(a).compute()\r\n\r\nwith dask.config.set(scheduler='threads'):\r\n    print(get_id(a).compute())\r\n\r\nwith dask.config.set(scheduler='processes'):\r\n    print(get_id(a).compute())\r\n\r\nwith Client() as client:\r\n    print(get_id(a).compute())\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1190341070/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1190507824",
        "html_url": "https://github.com/dask/dask/issues/9293#issuecomment-1190507824",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9293",
        "id": 1190507824,
        "node_id": "IC_kwDOAbcwm85G9bUw",
        "user": {
            "login": "pp-mo",
            "id": 2089069,
            "node_id": "MDQ6VXNlcjIwODkwNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2089069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pp-mo",
            "html_url": "https://github.com/pp-mo",
            "followers_url": "https://api.github.com/users/pp-mo/followers",
            "following_url": "https://api.github.com/users/pp-mo/following{/other_user}",
            "gists_url": "https://api.github.com/users/pp-mo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pp-mo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pp-mo/subscriptions",
            "organizations_url": "https://api.github.com/users/pp-mo/orgs",
            "repos_url": "https://api.github.com/users/pp-mo/repos",
            "events_url": "https://api.github.com/users/pp-mo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pp-mo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-20T16:39:07Z",
        "updated_at": "2022-07-20T16:54:21Z",
        "author_association": "NONE",
        "body": "> Here's a simpler example:\r\n> \r\n```\r\n. . .\r\n@delayed\r\n def get_id(x):\r\n     return id(x)\r\n . . .\r\nget_id(a).compute()\r\n. . .\r\nwith dask.config.set(scheduler='threads'):\r\n    print(get_id(a).compute())\r\n. . .\r\n```\r\nActually, I really don't think this **_is_** the same thing :  \r\nsince in this case the array is passed as an argument, what the called function will receive is an actual (computed) numpy array, and _not_ the original lazy array object.\r\n\r\nThat is exactly why my example is using a global variable : because if it is passed as an argument, the Dask scheduler will compute it before passing to the worker.\r\n\r\n((\r\nN.B. aside ...\r\nI have also trialled code that creates an inner function referring to a lazy array which is a call argument -- i.e. local variable in a call instance (closure), with the same results.  \r\nThis technique is much like what one does for decorator functions.\r\nThis is actually really _required_ for sensible usage, only I didn't show it because it is more complicated + confusing to read.\r\nI mean something like this (not tested!) ...\r\n```\r\ndef get_worker(this_array):\r\n  @dask.delayed\r\n  def inner():\r\n    return array_details(this_array)  # 'this_array' is a free variable from the enclosing def\r\n\r\n  worker = inner()  # call returns a delayed to process the specific array in this invocation\r\n  return worker\r\n\r\nworker1 = get_worker(dask_array_1)\r\nworker2 = get_worker(dask_array_2)\r\nresult1, result2 = dask.compute([worker1, worker2])\r\n```\r\n))\r\n\r\nSo, the point of my query is that the array, as a generic Python object, should **_not_** need to be copied/duplicated/serialised when used like this -- unless it contains O.S.-specific resources, which I _think_ it does not -- i.e. if it is just a set of information in memory like a \"regular\" Python object.\r\nBecause obviously, other \"ordinary Python objects\" are not modified in this way -- they exist for the forked worker process just as memory content, identical to the original.\r\n\r\nObviously I may be missing something here.\r\nBut I did at least confirm that referencing the array in the expected way **_does_** work successfully, if I replace the Dask scheduler with plain Python multiprocessing :  In such cases, the forked process does see an array identical to the original, and it can also be computed.  (And likewise with a threaded or synchronous scheduler).\r\n\r\nApart from the \"why\", I also don't really even understand **_how_** the dask scheduler can \"replace\" this dask.Array object with something else in the forked process\r\n -- perhaps it keeps references to all Dask objects~\r\n --  or perhaps it scans the entire Python environment for variables containing Dask objects and replaces them that way?\r\nThat is just why this effect is such a big surprise :  how should the scheduler even \"know about\" that dask array which happens to be stored in a global variable (or a function closure, in the more complex, realistic code) ?  \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1190507824/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1190514602",
        "html_url": "https://github.com/dask/dask/issues/9293#issuecomment-1190514602",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9293",
        "id": 1190514602,
        "node_id": "IC_kwDOAbcwm85G9c-q",
        "user": {
            "login": "pp-mo",
            "id": 2089069,
            "node_id": "MDQ6VXNlcjIwODkwNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2089069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pp-mo",
            "html_url": "https://github.com/pp-mo",
            "followers_url": "https://api.github.com/users/pp-mo/followers",
            "following_url": "https://api.github.com/users/pp-mo/following{/other_user}",
            "gists_url": "https://api.github.com/users/pp-mo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pp-mo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pp-mo/subscriptions",
            "organizations_url": "https://api.github.com/users/pp-mo/orgs",
            "repos_url": "https://api.github.com/users/pp-mo/repos",
            "events_url": "https://api.github.com/users/pp-mo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pp-mo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-20T16:46:05Z",
        "updated_at": "2022-07-20T16:52:51Z",
        "author_association": "NONE",
        "body": "> Would you be interested in submitting a PR for this?\r\n\r\nP.S. I certainly don't mean to disparage the docs, which have really got so much better in recent years !\r\n\r\nBut detail of why some things work as expected, and others not, is still sometimes hard to grasp.\r\nMy own major aim here is really to understand **_why_** what I am doing didn't work as expected.\r\n\r\nI certainly am prepared to contribute, _if_ it can be easily explained at all !  But I also know that some things can be just too intricate to suit explanation at the user level.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1190514602/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1191275050",
        "html_url": "https://github.com/dask/dask/issues/9293#issuecomment-1191275050",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9293",
        "id": 1191275050,
        "node_id": "IC_kwDOAbcwm85HAWoq",
        "user": {
            "login": "pp-mo",
            "id": 2089069,
            "node_id": "MDQ6VXNlcjIwODkwNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2089069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pp-mo",
            "html_url": "https://github.com/pp-mo",
            "followers_url": "https://api.github.com/users/pp-mo/followers",
            "following_url": "https://api.github.com/users/pp-mo/following{/other_user}",
            "gists_url": "https://api.github.com/users/pp-mo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pp-mo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pp-mo/subscriptions",
            "organizations_url": "https://api.github.com/users/pp-mo/orgs",
            "repos_url": "https://api.github.com/users/pp-mo/repos",
            "events_url": "https://api.github.com/users/pp-mo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pp-mo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-21T09:44:35Z",
        "updated_at": "2022-07-21T09:50:44Z",
        "author_association": "NONE",
        "body": "> how the dask scheduler can \"replace\" this dask.Array object with something else in the forked process\r\n\r\n**UPDATE:**\r\nI just discovered that the Dask scheduling is in fact copying other Python objects too.\r\nE.G. with a global object created like this...\r\n```\r\nclass NormalObject:\r\n    pass\r\n\r\nglobal_normal_object = NormalObject()\r\nglobal_normal_object.custom_property = 'exists'\r\n```\r\n... a process worker (unlike a threaded one) does not see this object at the identical address.\r\nSo it must be a \"copy\". \r\nWhereas, if the worker is a fork created via a `concurrent.futures.ProcessPoolExecutor`, then  it **_does_** have this object at the same address, as expected from a normal Linux fork, which has memory duplicated by [\"copy-on-write\"](https://en.wikipedia.org/wiki/Copy-on-write#In_virtual_memory_management).\r\n\r\nSo I think serialisation really is involved ,after all, and is applied to the _whole_ Python environment in some way.\r\n\r\n\r\nFrom a user documentation point of view, this seems to belie the simple explanation that process-scheduled workers are created via `concurrent.futures.ProcessPoolExecutor`, as given [here](https://docs.dask.org/en/stable/scheduling.html#local-processes).  Obviously, there must be a bit more to it than that, and behaviour is somewhat different to expectation.\r\nWe can maybe fix that, and also it seems like the #9240 problem can be addressed : we need to serialize arrays more carefully.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1191275050/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1191500107",
        "html_url": "https://github.com/dask/dask/issues/9293#issuecomment-1191500107",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9293",
        "id": 1191500107,
        "node_id": "IC_kwDOAbcwm85HBNlL",
        "user": {
            "login": "pavithraes",
            "id": 33131404,
            "node_id": "MDQ6VXNlcjMzMTMxNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/33131404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pavithraes",
            "html_url": "https://github.com/pavithraes",
            "followers_url": "https://api.github.com/users/pavithraes/followers",
            "following_url": "https://api.github.com/users/pavithraes/following{/other_user}",
            "gists_url": "https://api.github.com/users/pavithraes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pavithraes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pavithraes/subscriptions",
            "organizations_url": "https://api.github.com/users/pavithraes/orgs",
            "repos_url": "https://api.github.com/users/pavithraes/repos",
            "events_url": "https://api.github.com/users/pavithraes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pavithraes/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-21T13:40:43Z",
        "updated_at": "2022-07-21T13:40:43Z",
        "author_association": "MEMBER",
        "body": "@ian-r-rose Do you have thoughts on this issue and how we can improve the docs?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1191500107/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1199516702",
        "html_url": "https://github.com/dask/dask/issues/9293#issuecomment-1199516702",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9293",
        "id": 1199516702,
        "node_id": "IC_kwDOAbcwm85Hfywe",
        "user": {
            "login": "pp-mo",
            "id": 2089069,
            "node_id": "MDQ6VXNlcjIwODkwNjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2089069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pp-mo",
            "html_url": "https://github.com/pp-mo",
            "followers_url": "https://api.github.com/users/pp-mo/followers",
            "following_url": "https://api.github.com/users/pp-mo/following{/other_user}",
            "gists_url": "https://api.github.com/users/pp-mo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pp-mo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pp-mo/subscriptions",
            "organizations_url": "https://api.github.com/users/pp-mo/orgs",
            "repos_url": "https://api.github.com/users/pp-mo/repos",
            "events_url": "https://api.github.com/users/pp-mo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pp-mo/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-07-29T15:19:52Z",
        "updated_at": "2022-07-29T15:19:52Z",
        "author_association": "NONE",
        "body": "> I think serialisation really is involved ,after all, and is applied to the whole Python environment in some way.\r\n\r\nUpdate : I still don't get quite how+where this happens, but on reflection I'm more + more convinced that it is somehow inevitable.\r\nThat is ... you **_can't_** seriously expect workers in a Pool to have a code environment equivalent to a simple \"fork\", since they may be re-used.\r\nSo, _I will muse a bit longer on how we can improve the description_.\r\n\r\nMeanwhile, good to see the #9240 \"failure of serialisation\" is now fixed ! :+1: ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1199516702/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]