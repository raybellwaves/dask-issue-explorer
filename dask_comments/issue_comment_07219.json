[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/779410011",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-779410011",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 779410011,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQxMDAxMQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-15T19:23:52Z",
        "updated_at": "2021-02-15T19:23:52Z",
        "author_association": "MEMBER",
        "body": "A PR to fix this would be very welcome :)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/779410011/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/779434584",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-779434584",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 779434584,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQzNDU4NA==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-15T20:29:44Z",
        "updated_at": "2021-02-15T20:29:44Z",
        "author_association": "CONTRIBUTOR",
        "body": "Sometime this week, hopefully.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/779434584/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780055175",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780055175",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780055175,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA1NTE3NQ==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:08:19Z",
        "updated_at": "2021-02-16T19:08:30Z",
        "author_association": "CONTRIBUTOR",
        "body": "Further notes:\r\n\r\n1. The Arrow stuff is unrelated (albeit how the user encountered this originally), you can get same effect by just using the Pandas dataframe directly.\r\n2. At least part of the issue appears to be meta detection: dtype(\"O\") is always assumed to store strings, even when (as in this case) it is other object types.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780055175/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780060608",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780060608",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780060608,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA2MDYwOA==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:18:44Z",
        "updated_at": "2021-02-16T19:18:44Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hacking the meta detection code to return a datetime object rather than a hardcoded string (\"foo\", see _simple_fake_mapping in dask/dataframe/utils.py) results in some progress, where I get a `pandas._libs.tslibs.np_datetime.OutOfBoundsDatetime: Out of bounds nanosecond timestamp: 2500-01-01 00:00:00` error instead.\r\n\r\nSo fixing meta type detection to take values from underlying Series might help somewhat, but is not sufficient. `np.datetime64(\"1970-01-01\", \"ms\")` had same result.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780060608/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780061764",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780061764",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780061764,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA2MTc2NA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:20:56Z",
        "updated_at": "2021-02-16T19:20:56Z",
        "author_association": "MEMBER",
        "body": "If you have a smaller MRE that would be helpful to put on this issue.\r\n\r\nAs a note, some of the IO methods use part of the data as their `_meta` so I think that is a reasonable approach. We'd probably just want to do it in the case of `dtype='O'`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780061764/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780062380",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780062380",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780062380,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA2MjM4MA==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:22:07Z",
        "updated_at": "2021-02-16T19:22:07Z",
        "author_association": "CONTRIBUTOR",
        "body": "I guess doing it at load time would solve it for the Arrow case? And I guess that could be done for Pandas too. Will add smaller MRE.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780062380/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780063162",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780063162",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780063162,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA2MzE2Mg==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:23:24Z",
        "updated_at": "2021-02-16T19:27:52Z",
        "author_association": "CONTRIBUTOR",
        "body": "A smaller MRE:\r\n\r\n```python\r\nimport numpy as np\r\nfrom dask import dataframe as dd\r\nimport pandas as pd\r\nfrom pandas.testing import assert_frame_equal\r\nfrom datetime import datetime\r\n\r\ndef test_timestamp_as_object_out_of_range():\r\n    \"\"\"\r\n    Timestamps stored as objects can be used in Dask.\r\n    \"\"\"\r\n    pandas_df = pd.DataFrame(\r\n        {\r\n            \"datetime\": [\r\n                np.datetime64(\"0001-01-01 00:00\", \"ms\"),\r\n                np.datetime64(\"2012-05-02 12:35\", \"ms\"),\r\n                np.datetime64(\"2012-05-03 15:42\", \"ms\"),\r\n                np.datetime64(\"3000-05-03 15:42\", \"ms\"),\r\n            ],\r\n        }\r\n    )\r\n    assert pandas_df.datetime.dtype == np.dtype(\"O\")\r\n    dask_df = dd.from_pandas(pandas_df, npartitions=1)\r\n    assert dask_df.datetime.dtype == np.dtype(\"O\")\r\n\r\n    # Check that roundtripping works:\r\n    pandas_df2 = dask_df.compute()\r\n    assert pandas_df2.datetime.dtype == np.dtype(\"O\")\r\n    assert_frame_equal(pandas_df, pandas_df2)\r\n\r\n    # Check that we can operate on the datetimes correctly:\r\n    pandas_df = pandas_df[pandas_df.datetime > datetime(2500, 1, 1, 0, 0, 0)]\r\n    dask_df = dask_df[dask_df.datetime > datetime(2500, 1, 1, 0, 0, 0)]\r\n    assert_frame_equal(pandas_df, dask_df.compute())\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780063162/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780063484",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780063484",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780063484,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA2MzQ4NA==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:24:05Z",
        "updated_at": "2021-02-16T19:24:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "Oh, and thank you for the help and suggestions!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780063484/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780066509",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780066509",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780066509,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA2NjUwOQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:29:27Z",
        "updated_at": "2021-02-16T19:29:27Z",
        "author_association": "MEMBER",
        "body": "I did something kind of similar in https://github.com/dask/dask/pull/6976 for reference",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780066509/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780077172",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780077172",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780077172,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDA3NzE3Mg==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-16T19:48:43Z",
        "updated_at": "2021-02-16T19:48:43Z",
        "author_association": "CONTRIBUTOR",
        "body": "Interestingly, if I go back to the Arrow variant and do _two_ things, the original MRE passes:\r\n\r\n1. Load with additional `meta=pandas_df.head()` argument to `read_parquet()`.\r\n2. Hardcode (as temporary workaround) scalar for `dtype(\"O\")` to `np.datetime64(\"3000-01-01\", \"ms\")` (`np.datetime64(\"1970-01-01\", \"ms\")` somehow gets reset back to nanoseconds, and doesn't work?!).\r\n\r\nSo this suggests there are two different places meta is coming from (maybe _meta vs _meta_empty?).\r\n\r\nSeems like reasonable stopping point, will continue later in the week.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780077172/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780649326",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780649326",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780649326,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDY0OTMyNg==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-17T15:46:09Z",
        "updated_at": "2021-02-17T15:47:04Z",
        "author_association": "CONTRIBUTOR",
        "body": "So here's the problem with just passing in `meta` with some data to e.g. `read_parquet()`:\r\n\r\n1. `_Frame.__init__` (baseclass for Series and DataFrame) gets passed in meta.\r\n2. It passes it to `make_meta()`.\r\n3. `make_meta()` drops all the values (e.g. by returning `meta.iloc[:0]` depending on type).\r\n4. Later, references to `obj._meta_nonempty` create a new DataFrame/Series with fake data from the now-empty `_meta`.\r\n\r\nIn order to fix this, I propose:\r\n\r\n1. If passed in `meta` for `_Frame.__init__` is not empty, _and_ it's a Series, _and_ the dtype is object (the only case where ambiguity of type is possible), store a 2-row version of it on the DataFrame.\r\n2. When looking up `_meta_nonempty`, just return `_meta` if it is non-empty.\r\n\r\nWith these changes, passing in `meta` will make objects match the original.\r\n\r\nIn addition, I suggest always passing in real data, rather than relying on user to pass in `meta` themselves, when reading in data formats like Parquet. so `read_parquet(..., meta=None)` would actually use the underlying data for `meta` detection.\r\n\r\n1. Is what I wrote above clear? If not, I can submit a sketch PR.\r\n2. If it is clear, what is your opinion of these two proposals?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780649326/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780706590",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780706590",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780706590,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDcwNjU5MA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-17T17:08:26Z",
        "updated_at": "2021-02-17T17:08:26Z",
        "author_association": "MEMBER",
        "body": "FWIW, I'd recommend against adding a bunch of hacks in Dask to work around this issue. I suspect that pandas will have proper support for non-nanosecond resolution timestamps sometime within the next year or two (through an extension type).\r\n\r\nIn the meantime, if we wanted to support something like this, we could do it through `DataFrame.gt` and `Series.gt`. That would allow the user to pass the correct `meta` in cases where Dask can't correctly determine it:\r\n\r\n```python\r\n    dask_df = dask_df[dask_df.datetime.gt(datetime(2500, 1, 1, 0, 0, 0) meta=bool)]\r\n```\r\n\r\nThe thing is, we *want* `foo > datetime(...)` to raise when foo is just a regular object column with anything other than datetimes. Any kind of guessing is bound to get stuff wrong at least some of the time, so let's ask the user to clarify here.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780706590/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780827808",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780827808",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780827808,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDgyNzgwOA==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-17T20:20:03Z",
        "updated_at": "2021-02-17T20:20:03Z",
        "author_association": "CONTRIBUTOR",
        "body": "The datetime/timestamp things seems like a special case of a more general issue? Specifically, you can store any Python object in a `dtype(\"O\")` Series, but Dask assumes it's always strings. \r\n\r\nAnd if Dask wants to restrict itself to strings, that's another alternative too I guess, but if so there should probably be some code that complains if it notices blatant non-strings in the column during construction of the Dask DataFrame.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780827808/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780849897",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780849897",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780849897,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDg0OTg5Nw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-17T21:00:29Z",
        "updated_at": "2021-02-17T21:00:29Z",
        "author_association": "MEMBER",
        "body": "Historically object-dtype was most often strings. I think it's use is shrinking as extension types come online. But as you say, it can hold any arbitrary Python object, not just strings.\r\n\r\nSo when the user tries to do a dtype-dependent operation (like compare with a scalar), what are we to do? The established behavior is to assume strings. IMO, we should push users away from object-dtype, while providing them a way to specify the correct `meta` if necessary.\r\n\r\n>  if it notices blatant non-strings in the column during construction of the Dask DataFrame.\r\n\r\nThis is somewhat difficult, since \"construction\" of the Dask DataFrame is in principal done without looking at the data. So it wouldn't be until executing the graph that we could actually check the contents of the object dtype column.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780849897/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/780868500",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-780868500",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 780868500,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDg2ODUwMA==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-17T21:32:44Z",
        "updated_at": "2021-02-17T21:32:44Z",
        "author_association": "CONTRIBUTOR",
        "body": "\"Providing [users] a way to specify the correct meta if necessary\" is exactly what my proposal above does, I believe, and in a way that has nothing to do with timestamps/datetimes or whatever, it's completely generic.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/780868500/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/781381246",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-781381246",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 781381246,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTM4MTI0Ng==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-18T14:27:22Z",
        "updated_at": "2021-02-18T14:40:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "To expand on the above, the usage of `>` is just an example, there are other operations that could presumably break? I don't even know what operation the original person who reported this to me was using, this was just my attempt at a reproducer. So a solution that isn't tied to specific operations, but rather to how the dataframe is constructed, seems more robust and less of a burden for users.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/781381246/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/782189883",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-782189883",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 782189883,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjE4OTg4Mw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-19T16:36:58Z",
        "updated_at": "2021-02-19T16:36:58Z",
        "author_association": "MEMBER",
        "body": "I like this part of the proposal:\r\n\r\n> 1. If passed in `meta` for `_Frame.__init__` is not empty, _and_ it's a Series, _and_ the dtype is object (the only case where ambiguity of type is possible), store a 2-row version of it on the DataFrame.\r\n> 2. When looking up `_meta_nonempty`, just return `_meta` if it is non-empty.\r\n\r\nBut I think the logic of 1 can be simplified. I think it can just be: if a `meta` is passed in the init, use up to 2 rows of it as the `_meta`. In general, I like `._meta` to look as much like the computed object as possible. \r\n\r\nI think this proposal fits with @TomAugspurger's suggestion that we encourage users to specify the anticipated `meta` of the output of a task. \r\n\r\nThe second part of the proposal might be a bit more controversial:\r\n\r\n> In addition, I suggest always passing in real data, rather than relying on user to pass in `meta` themselves, when reading in data formats like Parquet. so `read_parquet(..., meta=None)` would actually use the underlying data for `meta` detection.\r\n\r\nI do think we could enable this behavoir with a kwarg, but I am not sure we'd want to enable it by default since like Tom mentioned, calling `read_parquet` does not necessarily read from any of the datafiles and this would be changing that behavior. \r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/782189883/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/784419786",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-784419786",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 784419786,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4NDQxOTc4Ng==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-23T18:34:31Z",
        "updated_at": "2021-02-23T18:34:31Z",
        "author_association": "CONTRIBUTOR",
        "body": "Downside to this proposal is that, now that I'm reading the code, it will involve changing `meta` construction in pretty much every reader API separately.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/784419786/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/784771660",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-784771660",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 784771660,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4NDc3MTY2MA==",
        "user": {
            "login": "SultanOrazbayev",
            "id": 20208402,
            "node_id": "MDQ6VXNlcjIwMjA4NDAy",
            "avatar_url": "https://avatars.githubusercontent.com/u/20208402?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SultanOrazbayev",
            "html_url": "https://github.com/SultanOrazbayev",
            "followers_url": "https://api.github.com/users/SultanOrazbayev/followers",
            "following_url": "https://api.github.com/users/SultanOrazbayev/following{/other_user}",
            "gists_url": "https://api.github.com/users/SultanOrazbayev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SultanOrazbayev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SultanOrazbayev/subscriptions",
            "organizations_url": "https://api.github.com/users/SultanOrazbayev/orgs",
            "repos_url": "https://api.github.com/users/SultanOrazbayev/repos",
            "events_url": "https://api.github.com/users/SultanOrazbayev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SultanOrazbayev/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-24T05:12:46Z",
        "updated_at": "2021-02-24T05:12:46Z",
        "author_association": "CONTRIBUTOR",
        "body": "A related issue: https://github.com/dask/dask/issues/6537",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/784771660/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/785095226",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-785095226",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 785095226,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTA5NTIyNg==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-24T14:00:11Z",
        "updated_at": "2021-02-24T14:00:11Z",
        "author_association": "MEMBER",
        "body": "I haven't read the proposal in https://github.com/dask/dask/issues/7219#issuecomment-780649326 closely, but a couple general comments:\r\n\r\n1. pandas has regretted every instance of values-dependent (rather than dtype-dependant) behavior, and we're trying to remove all possible instances of it.\r\n2. Dask prefers to use `_meta` rather than `_meta_nonempty` wherever possible.\r\n\r\nSo all else equal, my preferred solution is something like\r\n\r\n1. Offer a workaround at the site of the problem (so a `meta` argument to `.gt`).\r\n2. Encourage the development and use of extension types.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/785095226/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/785113148",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-785113148",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 785113148,
        "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTExMzE0OA==",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-02-24T14:27:31Z",
        "updated_at": "2021-02-24T14:27:31Z",
        "author_association": "CONTRIBUTOR",
        "body": "I will go talk to the original reporter and see if extension type might work better for them.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/785113148/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1402453516",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-1402453516",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 1402453516,
        "node_id": "IC_kwDOAbcwm85Tl74M",
        "user": {
            "login": "sarahyurick",
            "id": 53962159,
            "node_id": "MDQ6VXNlcjUzOTYyMTU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/53962159?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sarahyurick",
            "html_url": "https://github.com/sarahyurick",
            "followers_url": "https://api.github.com/users/sarahyurick/followers",
            "following_url": "https://api.github.com/users/sarahyurick/following{/other_user}",
            "gists_url": "https://api.github.com/users/sarahyurick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sarahyurick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sarahyurick/subscriptions",
            "organizations_url": "https://api.github.com/users/sarahyurick/orgs",
            "repos_url": "https://api.github.com/users/sarahyurick/repos",
            "events_url": "https://api.github.com/users/sarahyurick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sarahyurick/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-24T19:08:33Z",
        "updated_at": "2023-01-24T19:08:33Z",
        "author_association": "NONE",
        "body": "Hi, I wanted to ask if there are any more plans/desire to work on this?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1402453516/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1402594514",
        "html_url": "https://github.com/dask/dask/issues/7219#issuecomment-1402594514",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7219",
        "id": 1402594514,
        "node_id": "IC_kwDOAbcwm85TmeTS",
        "user": {
            "login": "itamarst",
            "id": 3266662,
            "node_id": "MDQ6VXNlcjMyNjY2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itamarst",
            "html_url": "https://github.com/itamarst",
            "followers_url": "https://api.github.com/users/itamarst/followers",
            "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
            "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
            "organizations_url": "https://api.github.com/users/itamarst/orgs",
            "repos_url": "https://api.github.com/users/itamarst/repos",
            "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itamarst/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-01-24T20:27:01Z",
        "updated_at": "2023-01-24T20:27:01Z",
        "author_association": "CONTRIBUTOR",
        "body": "I am not planning on working on it, it turned out the users requesting it were trying to do this as workaround, and solving the underlying issue was better approach.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1402594514/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]