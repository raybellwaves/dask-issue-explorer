[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/668628935",
        "html_url": "https://github.com/dask/dask/issues/6484#issuecomment-668628935",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6484",
        "id": 668628935,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODYyODkzNQ==",
        "user": {
            "login": "gforsyth",
            "id": 3596999,
            "node_id": "MDQ6VXNlcjM1OTY5OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3596999?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gforsyth",
            "html_url": "https://github.com/gforsyth",
            "followers_url": "https://api.github.com/users/gforsyth/followers",
            "following_url": "https://api.github.com/users/gforsyth/following{/other_user}",
            "gists_url": "https://api.github.com/users/gforsyth/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gforsyth/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gforsyth/subscriptions",
            "organizations_url": "https://api.github.com/users/gforsyth/orgs",
            "repos_url": "https://api.github.com/users/gforsyth/repos",
            "events_url": "https://api.github.com/users/gforsyth/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gforsyth/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-04T14:26:50Z",
        "updated_at": "2020-08-04T14:26:50Z",
        "author_association": "MEMBER",
        "body": "Hey @jqmp -- thanks for reporting.  I haven't had a chance to take a close look at this yet, but can you confirm whether this issue impacts using the `pyarrow` or `fastparquet` engines or both?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/668628935/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/668654099",
        "html_url": "https://github.com/dask/dask/issues/6484#issuecomment-668654099",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6484",
        "id": 668654099,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODY1NDA5OQ==",
        "user": {
            "login": "jqmp",
            "id": 42037,
            "node_id": "MDQ6VXNlcjQyMDM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/42037?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jqmp",
            "html_url": "https://github.com/jqmp",
            "followers_url": "https://api.github.com/users/jqmp/followers",
            "following_url": "https://api.github.com/users/jqmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/jqmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jqmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jqmp/subscriptions",
            "organizations_url": "https://api.github.com/users/jqmp/orgs",
            "repos_url": "https://api.github.com/users/jqmp/repos",
            "events_url": "https://api.github.com/users/jqmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jqmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-04T15:09:53Z",
        "updated_at": "2020-08-04T15:09:53Z",
        "author_association": "NONE",
        "body": "Thanks for the quick response! The behavior does vary depending on the engine: `pyarrow` produces the non-deterministic behavior above, while `fastparquet` just refuses to load the file at all.\r\n\r\n(However, I checked that when dealing with regular Pandas dataframes, `pyarrow` does seem to handle multi-indices cleanly and deterministically.)\r\n\r\nIn this case I prefer the behavior of `fastparquet`, so maybe the answer for us is to use `fastparquet` for Dask and `pyarrrow` for Pandas (since it handles multi-indices). Are there any gotchas we should be aware of before making the switch?\r\n\r\nFor reference, this is the test code I used:\r\n\r\n```\r\nimport pytest\r\n\r\nfrom pyarrow import parquet, Table\r\n\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\n\r\n\r\n@pytest.mark.parametrize('engine', ['pyarrow', 'fastparquet'])\r\ndef test_dask_problem(tmpdir, engine):\r\n    # Construct a Dask DataFrame with a multi-index.\r\n    raw_df = pd.DataFrame(\r\n        columns=[\"color\", \"shape\"],\r\n        data=[\r\n            [\"red\", \"square\"],\r\n            [\"blue\", \"circle\"],\r\n        ],\r\n    )\r\n    dask_raw_df = dd.from_pandas(raw_df, npartitions=1)\r\n    dask_counts_df = dask_raw_df.groupby([\"color\", \"shape\"]).size().to_frame(\"count\")\r\n\r\n    # Write it to Parquet, read it back, and convert it to Pandas.\r\n    path = tmpdir / 'df.pq'\r\n    dd.to_parquet(dask_counts_df, str(path), write_index=True, engine=engine)\r\n    dask_counts_df_from_file = dd.read_parquet(str(path), engine=engine)\r\n    counts_df_from_file = dask_counts_df_from_file.compute()\r\n\r\n    # Check that the index structure is as expected.\r\n    print(counts_df_from_file)\r\n    assert counts_df_from_file.index.names == ('color', 'shape')\r\n\r\n\r\ndef test_pandas(tmpdir):\r\n    # Construct a Pandas DataFrame with a multi-index.\r\n    raw_df = pd.DataFrame(\r\n        columns=[\"color\", \"shape\"],\r\n        data=[\r\n            [\"red\", \"square\"],\r\n            [\"blue\", \"circle\"],\r\n        ],\r\n    )\r\n    counts_df = raw_df.groupby([\"color\", \"shape\"]).size().to_frame(\"count\")\r\n\r\n    # Write it to Parquet and read it back.\r\n    path = tmpdir / 'df.pq'\r\n    with path.open(\"wb\") as file_:\r\n        parquet.write_table(Table.from_pandas(counts_df), file_)\r\n    with path.open(\"rb\") as file_:\r\n        counts_df_from_file = parquet.read_table(file_).to_pandas()\r\n\r\n    # Check that the index structure is as expected.\r\n    print(counts_df_from_file)\r\n    assert counts_df_from_file.index.names == ('color', 'shape')\r\n```\r\nAnd running it:\r\n```\r\n> PYTHONHASHSEED=1 pytest --tb=no\r\n...\r\ntests/test_bug.py FF.\r\n...\r\nFAILED tests/test_bug.py::test_dask_problem[pyarrow] - AssertionError: assert FrozenList(['shape', 'color']) == ('color', 'shape')\r\nFAILED tests/test_bug.py::test_dask_problem[fastparquet] - ValueError: Cannot read DataFrame with MultiIndex.\r\n================================================ 2 failed, 1 passed, 5 warnings in 1.33s",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/668654099/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/668660162",
        "html_url": "https://github.com/dask/dask/issues/6484#issuecomment-668660162",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6484",
        "id": 668660162,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODY2MDE2Mg==",
        "user": {
            "login": "gforsyth",
            "id": 3596999,
            "node_id": "MDQ6VXNlcjM1OTY5OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3596999?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gforsyth",
            "html_url": "https://github.com/gforsyth",
            "followers_url": "https://api.github.com/users/gforsyth/followers",
            "following_url": "https://api.github.com/users/gforsyth/following{/other_user}",
            "gists_url": "https://api.github.com/users/gforsyth/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gforsyth/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gforsyth/subscriptions",
            "organizations_url": "https://api.github.com/users/gforsyth/orgs",
            "repos_url": "https://api.github.com/users/gforsyth/repos",
            "events_url": "https://api.github.com/users/gforsyth/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gforsyth/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-04T15:20:26Z",
        "updated_at": "2020-08-04T15:20:26Z",
        "author_association": "MEMBER",
        "body": "@rjzamora @martindurant -- I imagine the difference here is partially due to the recent `pyarrow` changes, but also what's the desired behavior here?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/668660162/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]