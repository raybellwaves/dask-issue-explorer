[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1735905651",
        "html_url": "https://github.com/dask/dask/pull/10530#issuecomment-1735905651",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10530",
        "id": 1735905651,
        "node_id": "IC_kwDOAbcwm85nd9Fz",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-09-26T16:38:17Z",
        "updated_at": "2023-09-26T16:40:02Z",
        "author_association": "MEMBER",
        "body": "Okay, so after fixing some unrelated CI failures, we're getting \r\n\r\n```\r\nFAILED dask/dataframe/tests/test_dataframe.py::test_quantile[tdigest-expected0] - assert 0.19999999999999973 == 0.35 \u00b1 3.5e-07\r\n  comparison failed\r\n  Obtained: 0.19999999999999973\r\n  Expected: 0.35 \u00b1 3.5e-07\r\n```\r\n\r\nThe fact that we're getting an incorrect result (as opposed to an exception) is somewhat alarming. I'll go ahead an yank the release on PyPI until others have time to investigate what might have changed (cc @milesgranger)\r\n\r\nEDIT: `crick==0.0.4` has been yanked on PyPI https://pypi.org/project/crick/0.0.4/ (it hadn't been released on conda-forge yet -- we'll hold off on that too)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1735905651/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1737031576",
        "html_url": "https://github.com/dask/dask/pull/10530#issuecomment-1737031576",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10530",
        "id": 1737031576,
        "node_id": "IC_kwDOAbcwm85niP-Y",
        "user": {
            "login": "milesgranger",
            "id": 13764397,
            "node_id": "MDQ6VXNlcjEzNzY0Mzk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/13764397?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/milesgranger",
            "html_url": "https://github.com/milesgranger",
            "followers_url": "https://api.github.com/users/milesgranger/followers",
            "following_url": "https://api.github.com/users/milesgranger/following{/other_user}",
            "gists_url": "https://api.github.com/users/milesgranger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/milesgranger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/milesgranger/subscriptions",
            "organizations_url": "https://api.github.com/users/milesgranger/orgs",
            "repos_url": "https://api.github.com/users/milesgranger/repos",
            "events_url": "https://api.github.com/users/milesgranger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/milesgranger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-09-27T09:22:54Z",
        "updated_at": "2023-09-27T18:45:47Z",
        "author_association": "MEMBER",
        "body": "Git bisect'd it to https://github.com/dask/crick/commit/fa237749b5d04d64fe1b8539b4532c652358f731\r\n\r\nWhich seems like a legitimate fix based on the linked issue: https://github.com/dask/crick/issues/14 \r\n\r\nFurthermore, I've tried other implementations of tdigest approximation of quantiles from [pyarrow](https://redis.io/commands/tdigest.create/), [pytdigest](https://github.com/protivinsky/pytdigest), [tdigest](https://github.com/CamDavidsonPilon/tdigest), Rust's [tdigest](https://github.com/MnO2/t-digest), [Redis' TDIGEST](https://redis.io/commands/tdigest.create/) and _all_ give slightly differing ranges for the values and quantile range presented in the failing test.\r\n\r\nLower bound's lowest (the failing value here) being pyarrow and Redis always rounding to 0 followed by Rust's w/ 0.0999 and highest being crick's 0.0.3 release value of 0.35. Naively I find this a bit strange given the small data size and the upper bound tending to match at 3.8 or rounded to 4 (pyarrow and Redis); but I'm out of my depth to make any concrete judgements.\r\n\r\npyarrow appears the most \"main stream\" of the existing Python offerings which supports tdigest; should we opt to replace crick with pyarrow?\r\n\r\n---\r\n\r\nThat said, it appears the 0.0.4 is not in fact broken based on experiences with the other listed implementations, and the existing test shouldn't be used as the benchmark for accuracy here. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1737031576/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1794655719",
        "html_url": "https://github.com/dask/dask/pull/10530#issuecomment-1794655719",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10530",
        "id": 1794655719,
        "node_id": "IC_kwDOAbcwm85q-EXn",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-06T11:52:13Z",
        "updated_at": "2023-11-06T12:41:50Z",
        "author_association": "MEMBER",
        "body": "I'd like to point out that the test we're dealing with here is not very sensible. It uses test data with 9 data points so the result of the quantile is highly depending on the interpolation method that is applied.\r\n\r\nInstead, we should look at the output for randomly distributed values and see if the calculated numbers match what we expect Ensuring that the interpolation is properly implemented is up to the backend implementation to ensure.\r\n\r\nFor instance, we can use the `exponential` distribution which we can generate using numpy or dask.array and has even an analytical solution to the quantile (see https://en.wikipedia.org/wiki/Exponential_distribution). Using large enough array sizes reduces the impact of the interpolation method and we can focus on the actual result. ~Iterating over a couple of different implementations is quite interesting.~\r\n\r\nThe following compares numpy, pyarrow, crick (raw w/out dask), dask (default) and dask using crick)\r\n\r\n```python\r\nimport math\r\nimport dask.array as da\r\nimport numpy as np\r\n\r\nfrom dask.array.percentile import percentile as da_percentile\r\nimport pyarrow.compute as pc\r\n\r\ndef quantile_crick_raw(np_arr, p):\r\n    from crick import TDigest\r\n    digest = TDigest()\r\n    digest.update(np_arr)\r\n    return digest.quantile(p)\r\n\r\ndef quantile_crick_fragmented(np_arr, p, nchunks):\r\n    from crick import TDigest\r\n    digest = TDigest()\r\n    for split in np.array_split(np_arr, nchunks):\r\n        digest.update(split)\r\n    return digest.quantile(p)\r\n\r\ndef quantile_exact(p, beta=1):\r\n    return - math.log(1 - p) * beta \r\n\r\nsize = 10_000\r\nnchunks = 2\r\n\r\nda_arr = da.random.exponential(1, size, chunks=(size // nchunks,))\r\nnp_arr = da_arr.compute()\r\n\r\nfor quantile in [0.3, 0.7, 0.9]:\r\n    print(f\"{quantile=}\")\r\n    print(f\"Numpy\\t\\t\\t{np.quantile(np_arr, quantile):.2f}\")\r\n    print(f\"Dask\\t\\t\\t{da_percentile(da_arr, quantile * 100, internal_method='dask').compute()[0]:.2f}\")\r\n    print(f\"Dask (crick) 0.0.4\\t{da_percentile(da_arr, quantile * 100, internal_method='tdigest').compute()[0]:.2f}\")\r\n    print(f\"Crick raw 0.0.4\\t\\t{quantile_crick_raw(np_arr, quantile):.2f}\")\r\n    print(f\"Crick raw split\\t\\t{quantile_crick_fragmented(np_arr, quantile, nchunks):.2f}\")\r\n    print(f\"Pyarrow\\t\\t\\t{pc.tdigest(np_arr, quantile)[0].as_py():.2f}\")\r\n    print(f\"Exact solution\\t\\t{quantile_exact(quantile):.2f}\")\r\n    print()```\r\n\r\n```python\r\nquantile=0.3\r\nNumpy\t\t\t0.34\r\nDask\t\t\t0.35\r\nDask (crick) 0.0.4\t0.34\r\nCrick raw 0.0.4\t\t0.34\r\nCrick raw split\t\t0.34\r\nPyarrow\t\t\t0.34\r\nExact solution\t\t0.36\r\n\r\nquantile=0.7\r\nNumpy\t\t\t1.19\r\nDask\t\t\t1.19\r\nDask (crick) 0.0.4\t1.19\r\nCrick raw 0.0.4\t\t1.19\r\nCrick raw split\t\t1.19\r\nPyarrow\t\t\t1.19\r\nExact solution\t\t1.20\r\n\r\nquantile=0.9\r\nNumpy\t\t\t2.27\r\nDask\t\t\t2.28\r\nDask (crick) 0.0.4\t2.27\r\nCrick raw 0.0.4\t\t2.27\r\nCrick raw split\t\t2.27\r\nPyarrow\t\t\t2.28\r\nExact solution\t\t2.30\r\n```\r\n\r\n~This shows that the dask implementation itself is quite horribly broken regardless of what backend is being used. It also shows that~ crick is doing just fine.\r\n\r\n~What is wrong here?~\r\n\r\nEdit: The dask API works differently to everyone else's. Dask expects the quantile as a value in the range `0...100` whereas most other APIs are expected `0...1`\r\nWith this corrected, I get the expected results.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1794655719/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1794731069",
        "html_url": "https://github.com/dask/dask/pull/10530#issuecomment-1794731069",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10530",
        "id": 1794731069,
        "node_id": "IC_kwDOAbcwm85q-Ww9",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-06T12:40:09Z",
        "updated_at": "2023-11-06T12:40:09Z",
        "author_association": "MEMBER",
        "body": "I propose to ditch `dask.dataframe.tests.test_dataframe.py::test_quantile` and replace it with a test that iterates over a couple of different random distributions and compares it's results to numpy.\r\nIf there are no other anomalies, I propose to unyank (is that possible?) crick and create a `conda-forge` release",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1794731069/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1800308540",
        "html_url": "https://github.com/dask/dask/pull/10530#issuecomment-1800308540",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10530",
        "id": 1800308540,
        "node_id": "IC_kwDOAbcwm85rToc8",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-07T22:37:15Z",
        "updated_at": "2023-11-07T22:37:15Z",
        "author_association": "MEMBER",
        "body": "Unyanked on PyPI",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1800308540/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]