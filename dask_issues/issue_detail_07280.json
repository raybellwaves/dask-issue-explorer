{
    "url": "https://api.github.com/repos/dask/dask/issues/7280",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/7280/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/7280/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/7280/events",
    "html_url": "https://github.com/dask/dask/issues/7280",
    "id": 817544050,
    "node_id": "MDU6SXNzdWU4MTc1NDQwNTA=",
    "number": 7280,
    "title": "Allow custom schedulers to inline futures on persist()",
    "user": {
        "login": "clarkzinzow",
        "id": 7699919,
        "node_id": "MDQ6VXNlcjc2OTk5MTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7699919?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/clarkzinzow",
        "html_url": "https://github.com/clarkzinzow",
        "followers_url": "https://api.github.com/users/clarkzinzow/followers",
        "following_url": "https://api.github.com/users/clarkzinzow/following{/other_user}",
        "gists_url": "https://api.github.com/users/clarkzinzow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/clarkzinzow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/clarkzinzow/subscriptions",
        "organizations_url": "https://api.github.com/users/clarkzinzow/orgs",
        "repos_url": "https://api.github.com/users/clarkzinzow/repos",
        "events_url": "https://api.github.com/users/clarkzinzow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/clarkzinzow/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 386719400,
            "node_id": "MDU6TGFiZWwzODY3MTk0MDA=",
            "url": "https://api.github.com/repos/dask/dask/labels/scheduler",
            "name": "scheduler",
            "color": "D10945",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-02-24T17:02:17Z",
    "updated_at": "2021-10-14T07:19:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "`dask.persist()` currently has [dedicated logic](https://github.com/dask/dask/blob/895c9541044e16809151f0e3db95c48ea338c6d3/dask/base.py#L744-L759) to detect if the scheduler is the Dask Distributed scheduler, which is the only path to inlining futures in the returned collections instead of resolving and materializing the concrete values of those futures; the latter happens by default for all other schedulers. In addition to this being a bit clunky, this unfortunately makes it impossible for other schedulers to match Dask Distributed's persist semantics of inlining futures, since those schedulers won't be able to tell whether they're in a `compute()` or `persist()` call.\r\n\r\n## Possible solution\r\n\r\nIf Dask inverted this control by signaling to the scheduler that it is getting a persist call (e.g. with an injected `__persist=True` kwarg), other schedulers could opt-in to the future inlining semantics. There could still be dedicated detection logic for Dask Distributed, or there could be logic in `client.get()` to check for that flag and dispatch to a `client.persist()` variant that doesn't do the `collections_to_dsk` conversion or the post-persist transformations (I think that might be doable?), in which case the dedicated detection wouldn't be necessary.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/7280/reactions",
        "total_count": 4,
        "+1": 4,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/7280/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}