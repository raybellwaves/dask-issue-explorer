[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/596213742",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-596213742",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 596213742,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjIxMzc0Mg==",
        "user": {
            "login": "psimaj",
            "id": 35408671,
            "node_id": "MDQ6VXNlcjM1NDA4Njcx",
            "avatar_url": "https://avatars.githubusercontent.com/u/35408671?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/psimaj",
            "html_url": "https://github.com/psimaj",
            "followers_url": "https://api.github.com/users/psimaj/followers",
            "following_url": "https://api.github.com/users/psimaj/following{/other_user}",
            "gists_url": "https://api.github.com/users/psimaj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/psimaj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/psimaj/subscriptions",
            "organizations_url": "https://api.github.com/users/psimaj/orgs",
            "repos_url": "https://api.github.com/users/psimaj/repos",
            "events_url": "https://api.github.com/users/psimaj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/psimaj/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-08T14:49:12Z",
        "updated_at": "2020-03-08T14:49:12Z",
        "author_association": "CONTRIBUTOR",
        "body": "I would be interested in implementing this. Has there been any progress regarding deciding whether it's a wanted feature?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/596213742/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/596215974",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-596215974",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 596215974,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjIxNTk3NA==",
        "user": {
            "login": "jkmacc-LANL",
            "id": 6475152,
            "node_id": "MDQ6VXNlcjY0NzUxNTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6475152?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jkmacc-LANL",
            "html_url": "https://github.com/jkmacc-LANL",
            "followers_url": "https://api.github.com/users/jkmacc-LANL/followers",
            "following_url": "https://api.github.com/users/jkmacc-LANL/following{/other_user}",
            "gists_url": "https://api.github.com/users/jkmacc-LANL/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jkmacc-LANL/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jkmacc-LANL/subscriptions",
            "organizations_url": "https://api.github.com/users/jkmacc-LANL/orgs",
            "repos_url": "https://api.github.com/users/jkmacc-LANL/repos",
            "events_url": "https://api.github.com/users/jkmacc-LANL/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jkmacc-LANL/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-08T15:11:56Z",
        "updated_at": "2020-03-08T15:11:56Z",
        "author_association": "NONE",
        "body": "@lheagy Does simpeg have/need a blockwise [lsqr](https://web.stanford.edu/group/SOL/software/lsqr/lsqr-toms82a.pdf) solver?  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/596215974/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/596260304",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-596260304",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 596260304,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjI2MDMwNA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-08T22:29:29Z",
        "updated_at": "2020-03-08T22:29:29Z",
        "author_association": "MEMBER",
        "body": "> I would be interested in implementing this. Has there been any progress regarding deciding whether it's a wanted feature?\r\n\r\nIn principle functions like this are possibly in-scope for the project.  However they are also hard, and this isn't something that anyone should dive into if they're not already somewhat familiar with this space.  (I for example, am not sufficiently familiar with this space to do it well).\r\n\r\nThis function belongs to a larger class of functions that might warrant its own dask-foo project.  It probably doesn't make sense for someone to implement this algorithm as a side project and submit it to Dask.  This would let us check a box, but would likely give users a bad experience  \r\n\r\nInstead, my guess is that doing this well will involve writing down some simple implementation (which may not actually be that hard), and then trying it out on a sizable problem and seeing how it behaves.  My guess is that to make things work well will require some tuning, as well as some additional expertise around preconditioning, and figuring out how to do that well.\r\n\r\n(disclaimer, I don't really know what I'm talking about here).  \r\n\r\nIf folks know what they're doing here then I totally encourage them to pursue this.  I'd be happy to help help guide on the Dask performance side.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/596260304/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601313009",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601313009",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601313009,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTMxMzAwOQ==",
        "user": {
            "login": "jkmacc-LANL",
            "id": 6475152,
            "node_id": "MDQ6VXNlcjY0NzUxNTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6475152?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jkmacc-LANL",
            "html_url": "https://github.com/jkmacc-LANL",
            "followers_url": "https://api.github.com/users/jkmacc-LANL/followers",
            "following_url": "https://api.github.com/users/jkmacc-LANL/following{/other_user}",
            "gists_url": "https://api.github.com/users/jkmacc-LANL/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jkmacc-LANL/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jkmacc-LANL/subscriptions",
            "organizations_url": "https://api.github.com/users/jkmacc-LANL/orgs",
            "repos_url": "https://api.github.com/users/jkmacc-LANL/repos",
            "events_url": "https://api.github.com/users/jkmacc-LANL/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jkmacc-LANL/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-19T17:27:02Z",
        "updated_at": "2020-03-19T17:27:02Z",
        "author_association": "NONE",
        "body": "The canonical Python `lsqr` resides in `scipy.sparse.linalg.lsqr`, not in NumPy proper.  By analogy, would you suggest that `lsqr` might reside in the [`sparse`](https://sparse.pydata.org/en/latest/index.html) library instead of `dask.linalg`, and Dask integration would follow their [roadmap](https://sparse.pydata.org/en/latest/roadmap.html#scipy-integration)?  That does seem reasonable to me.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601313009/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601397142",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601397142",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601397142,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTM5NzE0Mg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-19T20:19:51Z",
        "updated_at": "2020-03-19T20:19:51Z",
        "author_association": "MEMBER",
        "body": "I think that it would be ok to include an lsqr implementation in the dask.array.linalg module.\r\n\r\nI wouldn't expect the sparse maintainers to want to include dask-specific code in their codebase.  Dask is a bit more used to doing this.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601397142/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601440262",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601440262",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601440262,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTQ0MDI2Mg==",
        "user": {
            "login": "lheagy",
            "id": 6361812,
            "node_id": "MDQ6VXNlcjYzNjE4MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6361812?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lheagy",
            "html_url": "https://github.com/lheagy",
            "followers_url": "https://api.github.com/users/lheagy/followers",
            "following_url": "https://api.github.com/users/lheagy/following{/other_user}",
            "gists_url": "https://api.github.com/users/lheagy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lheagy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lheagy/subscriptions",
            "organizations_url": "https://api.github.com/users/lheagy/orgs",
            "repos_url": "https://api.github.com/users/lheagy/repos",
            "events_url": "https://api.github.com/users/lheagy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lheagy/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-19T22:09:19Z",
        "updated_at": "2020-03-19T22:09:19Z",
        "author_association": "NONE",
        "body": "Hi @jkmacc-LANL, thanks for pinging me and sorry for my delay! In SimPEG, we use the [pymatsolver](https://github.com/simpeg/pymatsolver) package to interface to a variety of solvers. For the most part, the workhorse we use for solving linear systems is [Pardiso](https://www.pardiso-project.org/), but we do also interface to `scipy.sparse.linalg`, primarily: `spsolve`, `splu`, `cg` and `bicgstab`",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601440262/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601572205",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601572205",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601572205,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTU3MjIwNQ==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-20T07:47:46Z",
        "updated_at": "2020-03-20T07:49:40Z",
        "author_association": "NONE",
        "body": "Hello,\r\nI think this would be a very useful addition :) in one of the projects I work on (https://github.com/equinor/pylops-distributed) we have already implemented cg and cgls using dask (mostly aimed at supporting linear operators). I would be very happy to see if there is anything we do that is not optimal, will keep a close eye on this development ;)\r\n\r\nMy only question is: lsqr is indeed in the sparse subpackage of scipy but it supports both dense, sparse and linear operators; here you mostly only talk about sparse. Given that an iterative solver like lsqr (or cgls) is effectively just a bunch a matrix-vector multiplications, I wonder if you would consider having a single codebase for different types of matrices like in scipy? Note, every solver in scipy starts with a aslinearoperator(A) making all the time the input matrix become a linear operators and later one using matvec and rmatvec so that no need for different codebase arise for different types of input matrices...\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601572205/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601767433",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601767433",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601767433,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTc2NzQzMw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-20T15:44:06Z",
        "updated_at": "2020-03-20T15:44:06Z",
        "author_association": "MEMBER",
        "body": "> :) in one of the projects I work on (https://github.com/equinor/pylops-distributed) we have already implemented cg and cgls using dask (mostly aimed at supporting linear operators). I would be very happy to see if there is anything we do that is not optimal, will keep a close eye on this development ;)\r\n\r\nVery cool.  How does it perform?  I'd love to see a [performance report](https://docs.dask.org/en/latest/diagnostics-distributed.html#capture-diagnostics) if you have time to generate one.\r\n\r\n> Note, every solver in scipy starts with a aslinearoperator(A) making all the time the input matrix become a linear operators and later one using matvec and rmatvec so that no need for different codebase arise for different types of input matrices...\r\n\r\nDask array implements the SciPy LinearOperator interface: https://docs.dask.org/en/latest/array-linear-operator.html . \r\n\r\nIf that's all we need, then great.  I wouldn't be surprised though if there was more work to do though.\r\n\r\nIf anyone has time to generate a representative example that people can play with, I think that that would be a great start.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601767433/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601882287",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601882287",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601882287,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTg4MjI4Nw==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-20T19:49:17Z",
        "updated_at": "2020-03-20T19:49:17Z",
        "author_association": "NONE",
        "body": "> \r\n> > Very cool. How does it perform? I'd love to see a [performance report](https://docs.dask.org/en/latest/diagnostics-distributed.html#capture-diagnostics) if you have time to generate one.\r\n\r\nThanks :) when I started trying to implement cg I tried different strategies and ended up with 3: 1. run compute after every iteration (graphs are smaller but it seemed to me that some of the computations were repeated), 2. run persist at every iteration (graph grows during iterations and computions follow it), 3. don't run compute until last iteration (compute graph can become very big), . As you should see from the reports, 3 is the fasted but I sometimes experience problems when my 'matrix' is a complex linear operator that already in its own has a fairly big graph, in that case I revert to 2. 1 is the slowest as I think from my understanding is that some of the computations are rerun every time i call a compute... I am sure you probably have comments/better ideas, would love to hear them :)\r\n\r\nI have run the performance tests on my laptop (here is the code I used https://github.com/mrava87/pylops_notebooks/blob/master/developement-distributed/Solvers.ipynb), but I can repeat it on a PBS cluster next week with much bigger matrices if you think that it is a useful exercise. Note that as expected the equivalent scipy solver is much faster at least for such small problems, but the main reason we use dask here is because of large memory requirements in some of the problems we solve more than to speed up computations...\r\n\r\nSeems like Github doesn't support attaching html files, I placed them here https://github.com/mrava87/pylops_notebooks/tree/master/developement-distributed\r\n\r\n> > Note, every solver in scipy starts with a aslinearoperator(A) making all the time the input matrix become a linear operators and later one using matvec and rmatvec so that no need for different codebase arise for different types of input matrices...\r\n> \r\n> Dask array implements the SciPy LinearOperator interface: https://docs.dask.org/en/latest/array-linear-operator.html .\r\n> \r\n> If that's all we need, then great. I wouldn't be surprised though if there was more work to do though.\r\n> \r\n\r\nI hoped the same and I think it would have been if every numpy call within the solver could be done using method calls (so that if an array is a dask array instead of a numpy array the equivalent dask method would be called) but in some cases this is not possible - e.g. np.sign(a) at line 80 or alfa = np.linalg.norm(v) at line 362 in https://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96. So porting the code may not be so difficult but some things need changed as you say.\r\n\r\n> If anyone has time to generate a representative example that people can play with, I think that that would be a great start.\r\n\r\nNot sure I have time myself now to work on a dask-based lsqr but if someone else does I am happy to be in the loop ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601882287/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601886772",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601886772",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601886772,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTg4Njc3Mg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-20T20:01:24Z",
        "updated_at": "2020-03-20T20:01:24Z",
        "author_association": "MEMBER",
        "body": "> I tried different strategies \r\n\r\nYes, doing this well can definitely require some finesse.  We did this in the dask-glm package and came up with a decent approach.  People may want to check out the algorithms there.  https://github.com/dask/dask-glm/blob/master/dask_glm/algorithms.py\r\n\r\nExactly where and when to call persist and compute in a way that both avoids repeated computation and also doesn't leave a bunch of data in memory can be an interesting puzzle.\r\n\r\n> but I can repeat it on a PBS cluster next week with much bigger matrices if you think that it is a useful exercise\r\n\r\nI would recommend waiting until we get things to be smooth on a single machine, and then scaling up afterwards.  Looking at the performance reports you have so far it looks like we're not there yet, so iterating on a single machine should still be productive (and presumably easier)\r\n\r\n> Seems like Github doesn't support attaching html files, I placed them here\r\n\r\nI recommend using https://raw.githack.com .  For now, here are some links:\r\n-    https://raw.githack.com/mrava87/pylops_notebooks/master/developement-distributed/dask-report-cg_compute.html\r\n-    https://raw.githack.com/mrava87/pylops_notebooks/master/developement-distributed/dask-report-cg_persist.html\r\n-    https://raw.githack.com/mrava87/pylops_notebooks/master/developement-distributed/dask-report-cg_postponed.html\r\n\r\n> I hoped the same and I think it would have been if every numpy call within the solver could be done using method calls (so that if an array is a dask array instead of a numpy array the equivalent dask method would be called) but in some cases this is not possible - e.g. np.sign(a) at line 80 or alfa = np.linalg.norm(v) at line 362 in https://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96. So porting the code may not be so difficult but some things need changed as you say.\r\n\r\nWe actually changed numpy recently so that numpy functions work fine on dask arrays, so this shouldn't present a problem\r\n\r\n```python\r\nIn [1]: import dask.array as da                                                                          \r\nIn [2]: x = da.ones(10)                                                                                  \r\nIn [3]: import numpy as np                                                                               \r\nIn [4]: np.sign(x)                                                                                       \r\nOut[4]: dask.array<sign, shape=(10,), dtype=float64, chunksize=(10,), chunktype=numpy.ndarray>\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601886772/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601912055",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601912055",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601912055,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTkxMjA1NQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-20T21:09:56Z",
        "updated_at": "2020-03-20T21:09:56Z",
        "author_association": "MEMBER",
        "body": "The examples that you're running are pretty small.  Scheduling overhead will dominate in a case like this.  It would be interesting to see what things look like with a more realistic problem size",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601912055/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/601932676",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-601932676",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 601932676,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTkzMjY3Ng==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-20T22:13:51Z",
        "updated_at": "2020-03-20T22:13:51Z",
        "author_association": "NONE",
        "body": "Thanks for the feedback :) I will try with a larger matrix size and look at your GML algorithms and report back ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/601932676/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602078240",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602078240",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602078240,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA3ODI0MA==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-21T17:45:50Z",
        "updated_at": "2020-03-21T17:45:50Z",
        "author_association": "NONE",
        "body": "Hi again, \r\n\r\nI rerun the tests on a much bigger matrix (3000 x 3000) and performance reports are at the same links as before. Now the scheduling overhead should be less pronounced.\r\n\r\nAlso, I have a small comment on https://docs.dask.org/en/latest/array-linear-operator.html. When I run it I would have expected that a full support of scipy LinearOperator would lead to a dask-in dask-out behaviour. Imagine you run this (note that this is the same as your snippet code but `b` is also a dask array:\r\n\r\n```\r\nimport dask.array as da\r\nx = da.random.random(size=(100, 100), chunks=(10, 10))\r\n\r\nfrom scipy.sparse.linalg.interface import MatrixLinearOperator\r\nA = MatrixLinearOperator(x)\r\n\r\nimport numpy as np\r\nb = da.random.random(100)\r\n\r\nfrom scipy.sparse.linalg import gmres\r\ninv = gmres(A, b, maxiter=2)\r\n```\r\n\r\nyou would expect `inv` to be also a dask array. In that way all internal operations of the solver, *not just* the `A*x` operations, would be distributed. However this is not the case because scipy solvers use the `.matvec` (and `.rmatvec`) method of the operator, here the `MatrixLinearOperator`. Actually if you run:\r\n```\r\nx = da.random.random(100)\r\nA.matvec(x), A._matvec(x)\r\n```\r\nyou can see that the first one returns a numpy array because of this `x = np.asanyarray(x)` at line 220 of https://github.com/scipy/scipy/blob/v1.4.1/scipy/sparse/linalg/interface.py#L55-L501, while the second ones returns a dask array as only a dot product is performed in the `_matvec` method of a `MatrixLinearOperator`... is this the behaviour you actually expected in your example and do you think it is optimal or you would believe that not continuously passing back and forth between dask and numpy is a better strategy?\r\n\r\nI think this is the same problem I faced in the past when running `lsqr`. At that time when I implemented the `pylops_distributed.LinearOperator` class, I did it in such a way such that `matvec` does return a dask array unless otherwise instructed. Running lqsr gave me an error probably based on what you said in your comment... I updated numpy and now lsqr works fine but I fear that since there is no compute/persist in it, computations are repeated... so the approach that returns a numpy array every time `matvec` is called is actually more performant in this scenario, but perhaps it is not optimal either?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602078240/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602078718",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602078718",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602078718,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA3ODcxOA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-21T17:49:24Z",
        "updated_at": "2020-03-21T17:49:24Z",
        "author_association": "MEMBER",
        "body": "It would also, if you have more time, be interesting to see what performance looks like with sparse arrays.\r\n\r\n```python\r\ny = da.random.random(size=x.shape, chunks=x.chunks)\r\nx[y> 0.99] = 0  # create random sparsity\r\nx = x.map_blocks(sparse.COO)\r\n\r\n# normal cg code follows ...\r\n```\r\n\r\nThis probably only makes sense to do after the dense case is working somewhat smoothly though.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602078718/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602079862",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602079862",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602079862,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA3OTg2Mg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-21T17:58:06Z",
        "updated_at": "2020-03-21T17:58:06Z",
        "author_association": "MEMBER",
        "body": "Ah, interesting timing on the responses.  I sent mine before seeing your response.\r\n\r\nOne change that I recommend:\r\n\r\n```python\r\nA = np.random.randn(n, n)\r\n...\r\nAda = da.from_array(A, chunks=(n//2, n))\r\n...\r\ndask.compute(... Ada ...)\r\n```\r\n\r\nCurrently you have this numpy array `A`, stored locally in your Jupyter process.   Then you wrap that in `da.from_array`, and then you compute with it.  However, every compute call now needs to move that numpy array from your local Jupyter process out to the scheduler and workers, which can significantly increase overhead times.  Instead, I recommend either creating a dask array from the start, or else persisting the array once.\r\n\r\nAdditionally, I recommend chunking a bit more finely.  Otherwise you won't be able to use the cores that you have.\r\n\r\n```python\r\nAda = da.from_array(A, chunks=(n//4, n//4)).persist()  # move the data to the workers once\r\n\r\nAda = da.random.random((n, n), chunks=(n//4, n//4))  # or create it there in the first place\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602079862/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602080848",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602080848",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602080848,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA4MDg0OA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-21T18:05:34Z",
        "updated_at": "2020-03-21T18:05:34Z",
        "author_association": "MEMBER",
        "body": "Regarding the LinearOperator API, I believe that the contract that the scipy algorithms expect is that matvec always returns a concrete numpy array.  If we can relax this constraint within dask.array and still have things work then great.  \r\n\r\nIn general I wouldn't expect returning a Numpy array to be terrible though.  Usually the result of a matvec is small, and needs to be inspected immediately (to test for convergence for example), so returning a Numpy array here might often be necessary, and not blow up memory.  \r\n\r\n> you can see that the first one returns a numpy array because of this x = np.asanyarray(x) at line 220\r\n\r\nRight, but the `vec` part of the matvec is likely to be small.  Even if your example you have `x = da.random.random(100)`.  There isn't really a need to use dask array for an array this small.  I think that it is sensible to use Numpy arrays here.\r\n\r\n> is this the behaviour you actually expected in your example and do you think it is optimal or you would believe that not continuously passing back and forth between dask and numpy is a better strategy?\r\n\r\nI think that it is fine to pass between the two as long as the thing that we are passing is small.  I also think that in many of these algorithms it will be necessary in order to test for convergence.  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602080848/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602848100",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602848100",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602848100,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjg0ODEwMA==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-23T20:48:26Z",
        "updated_at": "2020-03-23T20:48:26Z",
        "author_association": "NONE",
        "body": "Thanks for all the comments. \r\n\r\nIn order:\r\n- thanks for the tip about persisting ``Ada``, it does indeed help. I have also played a bit with chunking and increased as you suggest but the timings seem to increase if I chunk too much. As my mac book pro is dual-core (with hyper threading), it seems to be that chunking by 2 in each dimension (4 chunks) is the best approach when the entire solver is run on dask arrays (graph is created and then evaluated at once). Chunking less seem to be effective if only the `dot`/`matvec` operation is run on dask while all the rest of operations are run numpy arrays - as in your last comment. This last approach is the one that gives the best timing overall for chunking of 2-1 and I agree with you that in many cases it may be the best approach. The reason I think that having a solver that distributes all operations (not only matvec) could be useful is because in some real life problems the data vector may easily exceed 10s/100s GB and so distributing it would be beneficial both for memory reasons and also to speed up vector-vector products. I attach some screenshots for the different cases and performance reports for 2-2 case are at usual links (plus https://raw.githack.com/mrava87/pylops_notebooks/master/developement-distributed/dask-report-cg_onlymatvec.html)\r\n\r\n- LinearOperator API: I agree. If people want a pure dask solver like your ``glm`` or my ``cg`` solvers, I don't think scipy solvers can be used without some code changes. However if the interest is in just speeding up the costly `matvec` operation, then pure scipy solvers could be good enough as long as the operator itself applies a `compute`. I tried \r\n\r\nFinally, a question regarding `persist` (and `compute`). Is there any difference between these 3 ways of calling persist - any specific one recommended here?\r\n\r\n```\r\nimport dask.array as da\r\nfrom dask import persist\r\nfrom dask.distributed import Client\r\nclient = Client(...)\r\n...\r\npersist(x)\r\nclient.persist(x)\r\nda.persist(x)\r\n```\r\nI see you use the first one in `gml`...\r\n\r\nWill get back to you soon with the sparse example.\r\n\r\n\r\n*4-4 chunks*\r\n![4_4_persist](https://user-images.githubusercontent.com/22675848/77360398-951f7e80-6d4d-11ea-856a-4d8c437d750a.png)\r\n*2-2 chunks*\r\n![2_2_persist](https://user-images.githubusercontent.com/22675848/77360410-981a6f00-6d4d-11ea-8887-0fe21282e10c.png)\r\n*2-1 chunks*\r\n![2_1_persist](https://user-images.githubusercontent.com/22675848/77360407-96e94200-6d4d-11ea-9516-b8ae5b1594c9.png)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602848100/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602857346",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602857346",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602857346,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjg1NzM0Ng==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-23T21:09:17Z",
        "updated_at": "2020-03-23T21:09:17Z",
        "author_association": "MEMBER",
        "body": "```\r\npersist(x)  # these two are mostly identical\r\nclient.persist(x)  # these two are mostly identical\r\nda.persist(x)  # this one doesn't exist to my knowledge :)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602857346/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602882786",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602882786",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602882786,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjg4Mjc4Ng==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-23T22:08:52Z",
        "updated_at": "2020-03-23T22:08:52Z",
        "author_association": "NONE",
        "body": "Ops sorry I think I confused it with da.compute() ;) \r\n\r\nGood to know the other two are the same ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602882786/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602887173",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-602887173",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 602887173,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjg4NzE3Mw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-23T22:19:45Z",
        "updated_at": "2020-03-23T22:19:45Z",
        "author_association": "MEMBER",
        "body": "> but the timings seem to increase if I chunk too much\r\n\r\nYou might want to verify that you're using single-threaded BLAS/LAPACK.  See https://docs.dask.org/en/latest/array-best-practices.html#avoid-oversubscribing-threads\r\n\r\n> The reason I think that having a solver that distributes all operations (not only matvec) could be useful is because in some real life problems the data vector may easily exceed 10s/100s GB and so distributing it would be beneficial both for memory reasons and also to speed up vector-vector products\r\n\r\nSure, in that case then yes, the scipy implementations will likely fail and we'll have to rebuild our own (as you've done)\r\n\r\nLooking at the performance reports now, the main issue is all of the whitespace here:\r\n\r\n![cg-overhead](https://user-images.githubusercontent.com/306380/77368385-5a035800-6d19-11ea-9de6-a460f20dec3c.png)\r\n\r\nThis shows two things\r\n\r\n1.  There isn't enough work in each step to really saturate hardware.  You may have a multi-core machine, but we only have four sizeable tasks to actually run here.  In general you're going to want a few times as many tasks as you have cores in order to really pack things in and saturate hardware.\r\n2.  There is about a 100ms gap between iterations, presumably this is work done locally within your algorithm, or shipping the new task graph up to the scheduler.  At some point we would want to profile this bit and see if we can shrink it down.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602887173/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/603956686",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-603956686",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 603956686,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzk1NjY4Ng==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-25T16:51:49Z",
        "updated_at": "2020-03-25T16:51:49Z",
        "author_association": "NONE",
        "body": "Sorry, I only had ``\u00d2MP_NUM_THREADS`` set to 1. I added also the other two, and given I use conda numpy with MKL I think that was needed to avoid the problem of oversubscribing. Re-run the examples, they are all slightly faster but no dramatic changes in the terms of performance.\r\n\r\nNot sure I can tell the reason of this 100ms gap as basically no work is done between iterations other than a tolerance check. For the cases that do not make the graph upfront and compute everything together, could it be the creation of the graph for the iteration?\r\n\r\nAlso, I so far create the client with `processes=False`, is this what you would reccomend when testing on a single-node?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/603956686/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/609065237",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-609065237",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 609065237,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTA2NTIzNw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-04T17:49:16Z",
        "updated_at": "2020-04-04T17:49:16Z",
        "author_association": "MEMBER",
        "body": "> Also, I so far create the client with processes=False, is this what you would reccomend when testing on a single-node?\r\n\r\nI don't have a blanket recommendation.  It depends a lot on what you're trying to do.  The right configuration depends on many factors.  What you're doing it's obviously wrong in any way though.  The next thing I would try in your situation is to try creating more chunks so that you can get more saturation of the hardware.  You might also try running a local profiler on your code to see if you can capture what those 100ms gaps are doing.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/609065237/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/609396827",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-609396827",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 609396827,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTM5NjgyNw==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-05T10:50:47Z",
        "updated_at": "2020-04-05T10:50:47Z",
        "author_association": "NONE",
        "body": "Sorry, I didn't mean in general, but for this specific case study working on a single-machine setup. My understanding was that since pretty much all computations are done on Numpy arrays, using threads will release the GIL and there would be no overhead in data transfer (that is what I understand from your doc when explaining where to use threads and processes)...]\r\n\r\nRegarding local profiling, you suggest using dask diagnostic tools https://docs.dask.org/en/latest/diagnostics-local.html or anything else? I will try to dig deeper into this 100ms and let you know once I find out why :)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/609396827/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/609438674",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-609438674",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 609438674,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTQzODY3NA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-05T15:56:42Z",
        "updated_at": "2020-04-05T15:56:42Z",
        "author_association": "MEMBER",
        "body": "There are some suggestions on how to effectively profile the various parts\nof a Dask computation here:\nhttps://docs.dask.org/en/latest/phases-of-computation.html\n\nOn Sun, Apr 5, 2020 at 3:51 AM Matteo Ravasi <notifications@github.com>\nwrote:\n\n> Sorry, I didn't mean in general, but for this specific case study working\n> on a single-machine setup. My understanding was that since pretty much all\n> computations are done on Numpy arrays, using threads will release the GIL\n> and there would be no overhead in data transfer (that is what I understand\n> from your doc when explaining where to use threads and processes)...]\n>\n> Regarding local profiling, you suggest using dask diagnostic tools\n> https://docs.dask.org/en/latest/diagnostics-local.html or anything else?\n> I will try to dig deeper into this 100ms and let you know once I find out\n> why :)\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/5955#issuecomment-609396827>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTAJ45CTODLHV3MIKKTRLBPBJANCNFSM4K5B5U6A>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/609438674/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/621987099",
        "html_url": "https://github.com/dask/dask/issues/5955#issuecomment-621987099",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5955",
        "id": 621987099,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTk4NzA5OQ==",
        "user": {
            "login": "mrava87",
            "id": 22675848,
            "node_id": "MDQ6VXNlcjIyNjc1ODQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22675848?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrava87",
            "html_url": "https://github.com/mrava87",
            "followers_url": "https://api.github.com/users/mrava87/followers",
            "following_url": "https://api.github.com/users/mrava87/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrava87/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrava87/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrava87/subscriptions",
            "organizations_url": "https://api.github.com/users/mrava87/orgs",
            "repos_url": "https://api.github.com/users/mrava87/repos",
            "events_url": "https://api.github.com/users/mrava87/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrava87/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-30T17:13:41Z",
        "updated_at": "2020-04-30T17:13:41Z",
        "author_association": "NONE",
        "body": "Hello,\r\nsorry for the very slow reply.\r\n\r\nI did some more testing and looked into the different phases of computation. Nothing appears abnormal. The only thing that in my opinion could explain this 100ms gaps is this three lines at the start of every iteration \r\n\r\n```\r\nif compute or client is not None:\r\n    if np.abs(kold) < tol:\r\n        break\r\n```\r\n\r\n(https://github.com/equinor/pylops-distributed/blob/1e60d7f1d002c514dda2ec1a20bfb208103fa871/pylops_distributed/optimization/cg.py#L64)\r\n\r\nNow increasing a bit the size of the problem (https://github.com/mrava87/pylops_notebooks/blob/master/developement-distributed/Solvers-short.ipynb) and taking these lines away seem sto remove these systematic gaps, although there are still some gaps here and there ( https://raw.githack.com/mrava87/pylops_notebooks/master/developement-distributed/dask-report-cg_persist.html).\r\n\r\nMy understanding of persist is that the computation is performed and results kept on workers (not returned to the process running the notebook), so I would expect a simple check as np.abs(kold) < tol to run on one worker and not be responsible of 100ms, but perhaps some data transfer happens that I cannot personally explain... Would be great if you could take a look at the code and let me know if you see something suspicious that could explain thsi behaviour (so far I did not push the new version without these three lines but thats the only change i made locally to get these new results). Thanks!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/621987099/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]