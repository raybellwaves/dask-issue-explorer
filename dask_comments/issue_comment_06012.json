[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/598801391",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-598801391",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 598801391,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODgwMTM5MQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-13T16:15:06Z",
        "updated_at": "2020-03-13T16:15:06Z",
        "author_association": "MEMBER",
        "body": "Thank you for raising an issue @aruns5640 .\r\n\r\nFirst, can I ask you to try with a newer version of Dask and PyArrow?  2.3.0 is relatively old.  \r\n\r\nSecond, if things still don't work, can you try to load the data with just PyArrow, and verify that it supports these types?  If not, then you might want to raise an issue with that project.  \r\n\r\nThird, if things don't work, but Arrow does support these types, then can I ask you to try to produce a minimal reproducible example?  This is probably the first step to solving things within Dask if that is what has to happen.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/598801391/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599024295",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599024295",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599024295,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTAyNDI5NQ==",
        "user": {
            "login": "aruns5640",
            "id": 45639264,
            "node_id": "MDQ6VXNlcjQ1NjM5MjY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/45639264?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aruns5640",
            "html_url": "https://github.com/aruns5640",
            "followers_url": "https://api.github.com/users/aruns5640/followers",
            "following_url": "https://api.github.com/users/aruns5640/following{/other_user}",
            "gists_url": "https://api.github.com/users/aruns5640/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aruns5640/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aruns5640/subscriptions",
            "organizations_url": "https://api.github.com/users/aruns5640/orgs",
            "repos_url": "https://api.github.com/users/aruns5640/repos",
            "events_url": "https://api.github.com/users/aruns5640/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aruns5640/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-14T07:51:23Z",
        "updated_at": "2020-03-14T13:25:22Z",
        "author_association": "NONE",
        "body": "Thanks for the reply.. will try with the updated version of dask and pyarrow..so just to clarify regarding the decimal dtypes.. In dask dataframe, is it possible to read and do the calculations of decimal columns without losing the precision(without converting it into float type)  ?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599024295/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599502783",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599502783",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599502783,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTUwMjc4Mw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T12:13:21Z",
        "updated_at": "2020-03-16T12:13:21Z",
        "author_association": "MEMBER",
        "body": "> but when it comes to Dask dataframe, the same decimal object is consider as string and getting the error\r\n\r\nA minimal example would be great here. See http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports. I'm guessing you can separate this issue from parquet IO.\r\n\r\nRight now, Decimals will be stored as object dtype, which Dask assumes are strings. So things like `+` won't work, but you might be able to do `df.map_partitions(operator.add, other, meta=...)`. The proper fix is for pandas to have a dedicated Decimal dtype, but that's likely some way off.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599502783/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599624906",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599624906",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599624906,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTYyNDkwNg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T16:13:37Z",
        "updated_at": "2020-03-16T16:13:37Z",
        "author_association": "MEMBER",
        "body": "If only there was some way to register new data types for Pandas ... :)\n\nOn Mon, Mar 16, 2020 at 5:13 AM Tom Augspurger <notifications@github.com>\nwrote:\n\n> but when it comes to Dask dataframe, the same decimal object is consider\n> as string and getting the error\n>\n> A minimal example would be great here. See\n> http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports. I'm\n> guessing you can separate this issue from parquet IO.\n>\n> Right now, Decimals will be stored as object dtype, which Dask assumes are\n> strings. So things like + won't work, but you might be able to do df.map_partitions(operator.add,\n> other, meta=...). The proper fix is for pandas to have a dedicated\n> Decimal dtype, but that's likely some way off.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/6012#issuecomment-599502783>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTCAGIOYW7UJNOEIK4LRHYJXFANCNFSM4LHCX6HQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599624906/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599673580",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599673580",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599673580,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTY3MzU4MA==",
        "user": {
            "login": "aruns5640",
            "id": 45639264,
            "node_id": "MDQ6VXNlcjQ1NjM5MjY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/45639264?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aruns5640",
            "html_url": "https://github.com/aruns5640",
            "followers_url": "https://api.github.com/users/aruns5640/followers",
            "following_url": "https://api.github.com/users/aruns5640/following{/other_user}",
            "gists_url": "https://api.github.com/users/aruns5640/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aruns5640/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aruns5640/subscriptions",
            "organizations_url": "https://api.github.com/users/aruns5640/orgs",
            "repos_url": "https://api.github.com/users/aruns5640/repos",
            "events_url": "https://api.github.com/users/aruns5640/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aruns5640/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T17:45:00Z",
        "updated_at": "2020-03-16T17:57:53Z",
        "author_association": "NONE",
        "body": "Thanks @mrocklin , @TomAugspurger  for the feedback, please find the sample code and the parquet file below.\r\n\r\n`import dask as dask\r\nimport dask.dataframe as dd\r\n\r\ntest=dd.read_parquet(\"testDataMapping.parquet\",engine=\"pyarrow\")\r\n#this gives the correct results\r\ntest[\"DECIMAL_20_2+20_10\"]=test[\"DECIMAL_20_2\"]+test[\"DECIMAL_20_10\"]\r\ntest[\"DECIMAL_20_2+20_10_mul_int\"]=test[\"DECIMAL_20_2+20_10\"]*2\r\n#for a demo below show some string number,and the results are not populated the actual result(what am trying to say is,\r\n#for the above operations str object works like number not like str)\r\ntest['A']='250'\r\ntest['B']='100'\r\ntest['C']=test['A']*2\r\ntest['D']=test['A']+test['B']\r\n#the below operations decimal columns are consider as str object and getting the TypeError: error message\r\ntest[\"DECIMAL_20_2+20_10_add_int\"]=test[\"DECIMAL_20_2+20_10\"]+200\r\ntest[\"DECIMAL_20_2+20_10_div_int\"]=test[\"DECIMAL_20_2+20_10\"]/2\r\ntest[\"DECIMAL_20_2+20_10_mul_float\"]=test[\"DECIMAL_20_2+20_10\"]*2.02\r\n\r\nprint(test.dtypes)\r\nprint(test.head())`\r\n[testDataMapping.parquet.zip](https://github.com/dask/dask/files/4339577/testDataMapping.parquet.zip)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599673580/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599682387",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599682387",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599682387,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTY4MjM4Nw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T18:03:35Z",
        "updated_at": "2020-03-16T18:03:35Z",
        "author_association": "MEMBER",
        "body": "Do you need to use parquet to reproduce the example? Or can you create an in-memory pandas DataFrame with Decimal objects as values?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599682387/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599695052",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599695052",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599695052,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTY5NTA1Mg==",
        "user": {
            "login": "aruns5640",
            "id": 45639264,
            "node_id": "MDQ6VXNlcjQ1NjM5MjY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/45639264?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aruns5640",
            "html_url": "https://github.com/aruns5640",
            "followers_url": "https://api.github.com/users/aruns5640/followers",
            "following_url": "https://api.github.com/users/aruns5640/following{/other_user}",
            "gists_url": "https://api.github.com/users/aruns5640/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aruns5640/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aruns5640/subscriptions",
            "organizations_url": "https://api.github.com/users/aruns5640/orgs",
            "repos_url": "https://api.github.com/users/aruns5640/repos",
            "events_url": "https://api.github.com/users/aruns5640/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aruns5640/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T18:30:15Z",
        "updated_at": "2020-03-16T18:30:15Z",
        "author_association": "NONE",
        "body": "@TomAugspurger , you can use the below in memory pandas DataFrame, thanks for the quick reply\r\n\r\ntest=pd.DataFrame({\"DECIMAL_20_2\":[999999999999999999.99,-123456789123456789.12], \"DECIMAL_20_10\":[9999999999.9999999999,-1234567890.0123456789]})\r\ntest[\"DECIMAL_20_2\"]=test[\"DECIMAL_20_2\"].astype(str).map(decimal.Decimal)\r\ntest[\"DECIMAL_20_10\"]=test[\"DECIMAL_20_10\"].astype(str).map(decimal.Decimal)\r\n\r\ntest=dd.from_pandas(test,1)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599695052/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599699645",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599699645",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599699645,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTY5OTY0NQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T18:40:49Z",
        "updated_at": "2020-03-16T18:40:49Z",
        "author_association": "MEMBER",
        "body": "Thanks. Here's the tracback:\r\n\r\n```pytb\r\nIn [20]: test.DECIMAL_20_2 + 10\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/array_ops.py in na_arithmetic_op(left, right, op, str_rep)\r\n    148     try:\r\n--> 149         result = expressions.evaluate(op, str_rep, left, right)\r\n    150     except TypeError:\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/computation/expressions.py in evaluate(op, op_str, a, b, use_numexpr)\r\n    207     if use_numexpr:\r\n--> 208         return _evaluate(op, op_str, a, b)\r\n    209     return _evaluate_standard(op, op_str, a, b)\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/computation/expressions.py in _evaluate_standard(op, op_str, a, b)\r\n     69     with np.errstate(all=\"ignore\"):\r\n---> 70         return op(a, b)\r\n     71\r\n\r\nTypeError: can only concatenate str (not \"int\") to str\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n~/Envs/dask-dev/lib/python3.7/site-packages/dask/dataframe/utils.py in raise_on_meta_error(funcname, udf)\r\n    171     try:\r\n--> 172         yield\r\n    173     except Exception as e:\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/dask/dataframe/core.py in elemwise(op, *args, **kwargs)\r\n   4602         with raise_on_meta_error(funcname(op)):\r\n-> 4603             meta = partial_by_order(*parts, function=op, other=other)\r\n   4604\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/dask/utils.py in partial_by_order(*args, **kwargs)\r\n   1075         args2.insert(i, arg)\r\n-> 1076     return function(*args2, **kwargs)\r\n   1077\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/common.py in new_method(self, other)\r\n     63\r\n---> 64         return method(self, other)\r\n     65\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/__init__.py in wrapper(left, right)\r\n    499         rvalues = extract_array(right, extract_numpy=True)\r\n--> 500         result = arithmetic_op(lvalues, rvalues, op, str_rep)\r\n    501\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/array_ops.py in arithmetic_op(left, right, op, str_rep)\r\n    196         with np.errstate(all=\"ignore\"):\r\n--> 197             res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\r\n    198\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/array_ops.py in na_arithmetic_op(left, right, op, str_rep)\r\n    150     except TypeError:\r\n--> 151         result = masked_arith_op(left, right, op)\r\n    152\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/array_ops.py in masked_arith_op(x, y, op)\r\n    111             with np.errstate(all=\"ignore\"):\r\n--> 112                 result[mask] = op(xrav[mask], y)\r\n    113\r\n\r\nTypeError: can only concatenate str (not \"int\") to str\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-20-2d276ccfebe8> in <module>\r\n----> 1 test.DECIMAL_20_2 + 10\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/dask/dataframe/core.py in <lambda>(self, other)\r\n   1382             return lambda self, other: elemwise(op, other, self)\r\n   1383         else:\r\n-> 1384             return lambda self, other: elemwise(op, self, other)\r\n   1385\r\n   1386     def rolling(self, window, min_periods=None, center=False, win_type=None, axis=0):\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/dask/dataframe/core.py in elemwise(op, *args, **kwargs)\r\n   4601         ]\r\n   4602         with raise_on_meta_error(funcname(op)):\r\n-> 4603             meta = partial_by_order(*parts, function=op, other=other)\r\n   4604\r\n   4605     result = new_dd_object(graph, _name, meta, divisions)\r\n\r\n/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py in __exit__(self, type, value, traceback)\r\n    128                 value = type()\r\n    129             try:\r\n--> 130                 self.gen.throw(type, value, traceback)\r\n    131             except StopIteration as exc:\r\n    132                 # Suppress StopIteration *unless* it's the same exception that\r\n\r\n~/Envs/dask-dev/lib/python3.7/site-packages/dask/dataframe/utils.py in raise_on_meta_error(funcname, udf)\r\n    191         )\r\n    192         msg = msg.format(\" in `{0}`\".format(funcname) if funcname else \"\", repr(e), tb)\r\n--> 193         raise ValueError(msg)\r\n    194\r\n    195\r\n\r\nValueError: Metadata inference failed in `add`.\r\n\r\nOriginal error is below:\r\n------------------------\r\nTypeError('can only concatenate str (not \"int\") to str')\r\n\r\nTraceback:\r\n---------\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/dask/dataframe/utils.py\", line 172, in raise_on_meta_error\r\n    yield\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/dask/dataframe/core.py\", line 4603, in elemwise\r\n    meta = partial_by_order(*parts, function=op, other=other)\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/dask/utils.py\", line 1076, in partial_by_order\r\n    return function(*args2, **kwargs)\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/common.py\", line 64, in new_method\r\n    return method(self, other)\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/__init__.py\", line 500, in wrapper\r\n    result = arithmetic_op(lvalues, rvalues, op, str_rep)\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/array_ops.py\", line 197, in arithmetic_op\r\n    res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/array_ops.py\", line 151, in na_arithmetic_op\r\n    result = masked_arith_op(left, right, op)\r\n  File \"/Users/taugspurger/Envs/dask-dev/lib/python3.7/site-packages/pandas/core/ops/array_ops.py\", line 112, in masked_arith_op\r\n    result[mask] = op(xrav[mask], y)\r\n```\r\n\r\nSo as I said, the proper fix is for pandas to have a dedicated decimal dtype. You might explore what fletcher has here: https://github.com/xhochy/fletcher\r\n\r\nShort of that, all Dask can do is avoiding executing code to determine the output metadata. I think that in the case of object-dtype, it's safest to assume that `Series[object] + scalar` is object dtype. That's no worse than what we have today.\r\n\r\n@aruns5640 are you interested in working on this? The issue is probably somewhere areound https://github.com/dask/dask/blob/278ad0a46a414c1309d0b4a882fe9eb3fd20e41d/dask/dataframe/core.py#L2986-L2989.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599699645/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599705524",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599705524",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599705524,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTcwNTUyNA==",
        "user": {
            "login": "aruns5640",
            "id": 45639264,
            "node_id": "MDQ6VXNlcjQ1NjM5MjY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/45639264?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aruns5640",
            "html_url": "https://github.com/aruns5640",
            "followers_url": "https://api.github.com/users/aruns5640/followers",
            "following_url": "https://api.github.com/users/aruns5640/following{/other_user}",
            "gists_url": "https://api.github.com/users/aruns5640/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aruns5640/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aruns5640/subscriptions",
            "organizations_url": "https://api.github.com/users/aruns5640/orgs",
            "repos_url": "https://api.github.com/users/aruns5640/repos",
            "events_url": "https://api.github.com/users/aruns5640/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aruns5640/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T18:54:26Z",
        "updated_at": "2020-03-16T19:07:01Z",
        "author_association": "NONE",
        "body": "Thanks @TomAugspurger for the reply, i will definetly look into the issue, but not sure i can able to make fix on it ;). \r\nI am just wonder, how the same code works in pandas dataframe.\r\n(one correction from the above code to work in pandas\r\ntest[\"DECIMAL_20_2+20_10_mul_float\"]=test[\"DECIMAL_20_2+20_10\"]*decimal.Decimal(2.02))\r\n\r\n@TomAugspurger , so could you please suggest a solution for this problem , how can I mitigate it, convert it to float64? (but precision will be lost :( .. )",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599705524/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/599723646",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-599723646",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 599723646,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTcyMzY0Ng==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-16T19:36:55Z",
        "updated_at": "2020-03-16T19:36:55Z",
        "author_association": "MEMBER",
        "body": "See the dask DataFrame docs on metadata and inference. \n\n> On Mar 16, 2020, at 13:54, aruns5640 <notifications@github.com> wrote:\n> \n> \ufeff\n> Thanks @TomAugspurger for the reply, i will definetly look into the issue, but not sure i can able to make fix on it ;).\n> I am just wonder, how the same code works in pandas dataframe ?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/599723646/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602303533",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-602303533",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 602303533,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjMwMzUzMw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-23T00:13:11Z",
        "updated_at": "2020-03-23T00:13:11Z",
        "author_association": "MEMBER",
        "body": "So I think that this issue comes down to having Pandas support a decimal dtype.  I'm not sure that there is anything that we can do in Dask dataframe until that is done.  I also think that once that is done we should probably get it for free (mostly).  With that in mind I'm going to close this issue.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602303533/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/602876707",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-602876707",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 602876707,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjg3NjcwNw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-23T21:53:49Z",
        "updated_at": "2020-03-23T21:53:49Z",
        "author_association": "MEMBER",
        "body": "@mrocklin there's a potential general issue here, where we're assuming that object dtype implies strings, which isn't always the case. It's possible that this fixes it\r\n\r\n```diff\r\ndiff --git a/dask/dataframe/core.py b/dask/dataframe/core.py\r\nindex 030f67136..bfa382b87 100644\r\n--- a/dask/dataframe/core.py\r\n+++ b/dask/dataframe/core.py\r\n@@ -1388,7 +1388,7 @@ Dask Name: {name}, {task} tasks\"\"\"\r\n         if inv:\r\n             return lambda self, other: elemwise(op, other, self)\r\n         else:\r\n-            return lambda self, other: elemwise(op, self, other)\r\n+            return lambda self, other: elemwise(op, self, other, meta=op(self._meta, _extract_meta(other)))\r\n \r\n     def rolling(self, window, min_periods=None, center=False, win_type=None, axis=0):\r\n         \"\"\"Provides rolling transformations.\r\n```\r\n\r\nThat fixes this case\r\n\r\n```python\r\nIn [2]: df = pd.DataFrame({\"A\": [1, 2]}, dtype=object)\r\n\r\nIn [3]: ddf = dd.from_pandas(df, 2)\r\n\r\nIn [4]: (ddf * ddf).compute()\r\nOut[4]:\r\n   A\r\n0  1\r\n1  4\r\n```\r\n\r\nbut I'm not sure if it breaks anything else. If anyone is interested / able to write tests for that it'd be welcome.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/602876707/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/604032191",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-604032191",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 604032191,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDAzMjE5MQ==",
        "user": {
            "login": "aruns5640",
            "id": 45639264,
            "node_id": "MDQ6VXNlcjQ1NjM5MjY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/45639264?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aruns5640",
            "html_url": "https://github.com/aruns5640",
            "followers_url": "https://api.github.com/users/aruns5640/followers",
            "following_url": "https://api.github.com/users/aruns5640/following{/other_user}",
            "gists_url": "https://api.github.com/users/aruns5640/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aruns5640/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aruns5640/subscriptions",
            "organizations_url": "https://api.github.com/users/aruns5640/orgs",
            "repos_url": "https://api.github.com/users/aruns5640/repos",
            "events_url": "https://api.github.com/users/aruns5640/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aruns5640/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-25T19:11:35Z",
        "updated_at": "2020-03-25T19:11:35Z",
        "author_association": "NONE",
        "body": "@TomAugspurger thanks for it.. Just one clarification,  as you mentioned above objects dtypes consider as string, then how the below calculations did it in the right way\r\ntest[\"DECIMAL_20_2+20_10\"]=test[\"DECIMAL_20_2\"]+test[\"DECIMAL_20_10\"]\r\ntest[\"DECIMAL_20_2+20_10_mul_int\"]=test[\"DECIMAL_20_2+20_10\"]*2??",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/604032191/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/604032975",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-604032975",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 604032975,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDAzMjk3NQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-25T19:13:14Z",
        "updated_at": "2020-03-25T19:13:14Z",
        "author_association": "MEMBER",
        "body": "You can add strings to eachother, and multiply strings by integers :)\r\n\r\nIt's only the `string * string` that caused issues.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/604032975/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/604035670",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-604035670",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 604035670,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDAzNTY3MA==",
        "user": {
            "login": "aruns5640",
            "id": 45639264,
            "node_id": "MDQ6VXNlcjQ1NjM5MjY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/45639264?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aruns5640",
            "html_url": "https://github.com/aruns5640",
            "followers_url": "https://api.github.com/users/aruns5640/followers",
            "following_url": "https://api.github.com/users/aruns5640/following{/other_user}",
            "gists_url": "https://api.github.com/users/aruns5640/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aruns5640/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aruns5640/subscriptions",
            "organizations_url": "https://api.github.com/users/aruns5640/orgs",
            "repos_url": "https://api.github.com/users/aruns5640/repos",
            "events_url": "https://api.github.com/users/aruns5640/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aruns5640/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-25T19:19:03Z",
        "updated_at": "2020-03-25T19:19:03Z",
        "author_association": "NONE",
        "body": "But adding and multiplying strings behaves differently right,  (I mentioned  that in my  example), here we get exact value as adding 2 number and same as for multiplying ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/604035670/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/604059643",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-604059643",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 604059643,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDA1OTY0Mw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-03-25T20:09:28Z",
        "updated_at": "2020-03-25T20:09:28Z",
        "author_association": "MEMBER",
        "body": "This is on the `DataFrame._meta` or `DataFrame._meta_nonempty` object. For object dtype `_meta_nonempty` will be a Series of `_strings`\r\n\r\n```python\r\nIn [10]: df = pd.DataFrame({\"A\": [1, 2]}, dtype=object)\r\n\r\nIn [11]: ddf = dd.from_pandas(df, 2)\r\n\r\nIn [12]: ddf._meta_nonempty\r\nOut[12]:\r\n     A\r\n0  foo\r\n1  foo\r\n\r\nIn [13]: ddf._meta_nonempty + 10\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n~/sandbox/pandas/pandas/core/ops/array_ops.py in na_arithmetic_op(left, right, op, str_rep, is_cmp)\r\n    166     try:\r\n--> 167         result = expressions.evaluate(op, str_rep, left, right)\r\n    168     except TypeError:\r\n\r\n~/sandbox/pandas/pandas/core/computation/expressions.py in evaluate(op, op_str, a, b, use_numexpr)\r\n    196     if use_numexpr:\r\n--> 197         return _evaluate(op, op_str, a, b)\r\n    198     return _evaluate_standard(op, op_str, a, b)\r\n\r\n~/sandbox/pandas/pandas/core/computation/expressions.py in _evaluate_standard(op, op_str, a, b)\r\n     66     with np.errstate(all=\"ignore\"):\r\n---> 67         return op(a, b)\r\n     68\r\n\r\nTypeError: can only concatenate str (not \"int\") to str\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-13-5451c88a9e71> in <module>\r\n----> 1 ddf._meta_nonempty + 10\r\n\r\n~/sandbox/pandas/pandas/core/ops/__init__.py in f(self, other, axis, level, fill_value)\r\n    817                 self = self.fillna(fill_value)\r\n    818\r\n--> 819             new_data = dispatch_to_series(self, other, op, str_rep)\r\n    820             return self._construct_result(new_data)\r\n    821\r\n\r\n~/sandbox/pandas/pandas/core/ops/__init__.py in dispatch_to_series(left, right, func, str_rep, axis)\r\n    380         # Get the appropriate array-op to apply to each block's values.\r\n    381         array_op = get_array_op(func, str_rep=str_rep)\r\n--> 382         bm = left._data.apply(array_op, right=right)\r\n    383         return type(left)(bm)\r\n    384\r\n\r\n~/sandbox/pandas/pandas/core/internals/managers.py in apply(self, f, filter, **kwargs)\r\n    443\r\n    444             if callable(f):\r\n--> 445                 applied = b.apply(f, **kwargs)\r\n    446             else:\r\n    447                 applied = getattr(b, f)(**kwargs)\r\n\r\n~/sandbox/pandas/pandas/core/internals/blocks.py in apply(self, func, **kwargs)\r\n    362         \"\"\"\r\n    363         with np.errstate(all=\"ignore\"):\r\n--> 364             result = func(self.values, **kwargs)\r\n    365\r\n    366         return self._split_op_result(result)\r\n\r\n~/sandbox/pandas/pandas/core/ops/array_ops.py in arithmetic_op(left, right, op, str_rep)\r\n    220     else:\r\n    221         with np.errstate(all=\"ignore\"):\r\n--> 222             res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\r\n    223\r\n    224     return res_values\r\n\r\n~/sandbox/pandas/pandas/core/ops/array_ops.py in na_arithmetic_op(left, right, op, str_rep, is_cmp)\r\n    172             #  will handle complex numbers incorrectly, see GH#32047\r\n    173             raise\r\n--> 174         result = masked_arith_op(left, right, op)\r\n    175\r\n    176     if is_cmp and (is_scalar(result) or result is NotImplemented):\r\n\r\n~/sandbox/pandas/pandas/core/ops/array_ops.py in masked_arith_op(x, y, op)\r\n    126         if mask.any():\r\n    127             with np.errstate(all=\"ignore\"):\r\n--> 128                 result[mask] = op(xrav[mask], y)\r\n    129\r\n    130     result, _ = maybe_upcast_putmask(result, ~mask, np.nan)\r\n\r\nTypeError: can only concatenate str (not \"int\") to str\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/604059643/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/802856019",
        "html_url": "https://github.com/dask/dask/issues/6012#issuecomment-802856019",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6012",
        "id": 802856019,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjg1NjAxOQ==",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-03-19T14:02:26Z",
        "updated_at": "2021-03-19T14:02:26Z",
        "author_association": "MEMBER",
        "body": "@TomAugspurger 's suggested fix, with appropriate test, may be a small PR. However, I suspect that setting the df _meta correctly would be at least a simple workaround.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/802856019/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]