{
    "url": "https://api.github.com/repos/dask/dask/issues/7208",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/7208/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/7208/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/7208/events",
    "html_url": "https://github.com/dask/dask/issues/7208",
    "id": 807037218,
    "node_id": "MDU6SXNzdWU4MDcwMzcyMTg=",
    "number": 7208,
    "title": "High memory usage when loading a custom-strided/non-contigous numpy array ",
    "user": {
        "login": "FirefoxMetzger",
        "id": 4402489,
        "node_id": "MDQ6VXNlcjQ0MDI0ODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4402489?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FirefoxMetzger",
        "html_url": "https://github.com/FirefoxMetzger",
        "followers_url": "https://api.github.com/users/FirefoxMetzger/followers",
        "following_url": "https://api.github.com/users/FirefoxMetzger/following{/other_user}",
        "gists_url": "https://api.github.com/users/FirefoxMetzger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/FirefoxMetzger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/FirefoxMetzger/subscriptions",
        "organizations_url": "https://api.github.com/users/FirefoxMetzger/orgs",
        "repos_url": "https://api.github.com/users/FirefoxMetzger/repos",
        "events_url": "https://api.github.com/users/FirefoxMetzger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/FirefoxMetzger/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 14,
    "created_at": "2021-02-12T08:12:17Z",
    "updated_at": "2021-10-14T07:16:19Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!-- Please include a self-contained copy-pastable example that generates the issue if possible.\r\n\r\nPlease be concise with code posted. See guidelines below on how to provide a good bug report:\r\n\r\n- Craft Minimal Bug Reports http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\r\n- Minimal Complete Verifiable Examples https://stackoverflow.com/help/mcve\r\n\r\nBug reports that follow these guidelines are easier to diagnose, and so are often handled much more quickly.\r\n-->\r\n\r\n**What happened**: \r\n\r\nI am trying to load an array from numpy into dask that uses custom striding (essentially a variant of [stride_tricks](https://numpy.org/doc/stable/reference/generated/numpy.lib.stride_tricks.as_strided.html)). The problem is that calling `dask.array.from_array` creates an inflated copy of the array which blows up memory. I admit that I have not used dask before, so it can very well be user-error on my part.\r\n\r\nThe background is that I am trying to create a (naive) implementation of convolution for ndimages. In my case, both the image (stack of HD resolution images) and the kernel (kernel size >50x50) are large. Inflating the image (as is done in some convolution implementations to then rely on BLAS for matrix-matrix or matrix-vector math), is not admissible. However, we can express a windowed version of the array/image using custom strides without creating a copy/inflating. After having done that, we can apply the kernel without copying data around. After vectorization (SIMD) along the last dimension (it remains contiguous), doing so is surprisingly fast. I have a working implementation that makes it concurrent using OpenMP (apply kernel to windows in parallel), but I was musing about creating a dask-based implementation, which could be much better/cleaner.\r\n\r\n**What you expected to happen**:\r\n\r\nThe array gets loaded into dask without creating a copy and while preserving the original strides.\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport numpy as np\r\nfrom skimage.util import view_as_windows  # cleaner than using stride_tricks directly\r\nimport dask.array as da\r\n\r\nsize= 10000\r\n\r\n# okay, only stores 10000x10000 doubles\r\nnumpy_array = view_as_windows(np.arange(size*size).reshape(size,size), (5,5))\r\n\r\n# not okay, store 2498000400 doubles (~30x more memory needed)\r\nfoo = da.from_array(view_as_windows(np.arange(size*size).reshape(size,size), (5,5)))\r\n```\r\n\r\n**Anything else we need to know?**:\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2.21.0\r\n- Python version: 3.7.0 64-bit\r\n- Operating System: Windows 10 V20H2\r\n- Install method (conda, pip, source): pip\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/7208/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/7208/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}