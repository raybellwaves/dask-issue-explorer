[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/406496273",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-406496273",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 406496273,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ5NjI3Mw==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-07-20T05:52:24Z",
        "updated_at": "2018-07-20T05:52:24Z",
        "author_association": "MEMBER",
        "body": "What about decorators?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/406496273/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/407360484",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-407360484",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 407360484,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzM2MDQ4NA==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-07-24T10:34:17Z",
        "updated_at": "2018-07-24T10:36:42Z",
        "author_association": "MEMBER",
        "body": "@jakirkham Decorators would work well. This is what I came up with off the top of my head:\r\n\r\n```python\r\nfrom __future__ import print_function\r\n\r\nfrom collections import namedtuple\r\nfrom functools import wraps\r\n\r\nfrom dask.core import flatten\r\nimport dask.array as da\r\n\r\n\r\nTaskAnnotation = namedtuple(\"TaskAnnotation\", [\"annotations\"])\r\n\r\n\r\ndef annotate(annotations):\r\n    if isinstance(annotations, TaskAnnotation):\r\n        annotations = (annotations,)\r\n    elif not isinstance(annotations, (tuple, list)):\r\n        annotations = (annotations,)\r\n\r\n    for a in annotations:\r\n        assert isinstance(a, TaskAnnotation), type(a)\r\n\r\n    def inner(fn):\r\n        # @wraps(fn)  # Fails to wrap a functools.partial\r\n        def decorator(*args, **kwargs):\r\n            array = fn(*args, **kwargs)\r\n            graph = array.__dask_graph__()\r\n\r\n            rewrite = {k: graph[k] + annotations for k\r\n                       in flatten(array.__dask_keys__())}\r\n\r\n            graph.update_with_key(rewrite, array.name)\r\n\r\n            return array\r\n\r\n        return decorator\r\n\r\n    return inner\r\n\r\n\r\nan = TaskAnnotation({\"resources\": {\"GPU\": 1}})\r\nones = annotate(an)(da.ones)\r\nprint(ones((10, 10), chunks=(5, 5)))\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/407360484/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/407361920",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-407361920",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 407361920,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzM2MTkyMA==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-07-24T10:40:23Z",
        "updated_at": "2018-07-24T10:40:53Z",
        "author_association": "MEMBER",
        "body": "Another style I like from a user perspective is context managers (tensorflow style):\r\n\r\n```python\r\nwith dask.annotations(an1, an2):\r\n    A = da.ones(...)\r\n    B = da.arange(...)\r\n```\r\n\r\nThis would involve changing the Array constructor to defer to graph annotation contexts (which is probably more complex from a codebase POV)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/407361920/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/410014603",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-410014603",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 410014603,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDAxNDYwMw==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-02T17:57:52Z",
        "updated_at": "2018-08-02T17:57:52Z",
        "author_association": "MEMBER",
        "body": "Have you looked at [`array_plugins`]( http://dask.pydata.org/en/latest/array-creation.html#plugins )?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/410014603/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/410078697",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-410078697",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 410078697,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDA3ODY5Nw==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-02T21:50:10Z",
        "updated_at": "2018-08-02T21:50:10Z",
        "author_association": "MEMBER",
        "body": "@jakirkham Ah that looks ideal.\r\n\r\nI haven't had time to collect my thoughts in detail, but my primary interest is using Task Annotations provide hints or directives to schedulers:\r\n\r\nExamples include:\r\n\r\n- Embedding a size hint for a dask array chunk. `{\"size\": 1048576}`\r\n- Directives to instruct the scheduler where to run the task\r\n  - Worker A. `{\"workers\" : [\"A\", 192.168.1.10\"]}`\r\n  - I/O or Compute Worker Pools. `{\"worker_pool\": [\"io\", \"compute\"}`\r\n  - Scatter the key over the entire cluster. `{\"scatter\": \"all\"}` or `{\"scatter\": [\"A\", \"192.168.1.10\", \"compute\"]}`\r\n- Resource requirements. `{\"resources\": {\"GPU\":2}`\r\n\r\nTo reiterate, I think the power and usefulness of Annotations/Directives would be decoupling directives from the current functions which submit the graph to the scheduler (map/submit/persist etc.).\r\n\r\nAdditionally, this could introduce more flexibility into the current system of Scheduler Plugins. For e.g. the scheduler could request a valid worker list from the plugin for a task, given the associated Annotations/Directives.\r\n\r\nThis might be a fairly major change from the perspective of the distributed scheduler, but I think it would be a powerful + useful change.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/410078697/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/410092270",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-410092270",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 410092270,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDA5MjI3MA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-02T22:51:43Z",
        "updated_at": "2018-08-02T22:51:43Z",
        "author_association": "MEMBER",
        "body": "Very cool. Thanks for sharing. Agree this would be very useful.\n\nGuessing you have already read [the resources docs]( http://distributed.readthedocs.io/en/latest/resources.html ).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/410092270/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/410171657",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-410171657",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 410171657,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDE3MTY1Nw==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-03T07:37:13Z",
        "updated_at": "2018-08-03T07:37:13Z",
        "author_association": "MEMBER",
        "body": "> Guessing you have already read the resources docs.\r\n\r\nThanks, yes I have.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/410171657/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/412381407",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-412381407",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 412381407,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjM4MTQwNw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-13T00:10:59Z",
        "updated_at": "2018-08-13T00:10:59Z",
        "author_association": "MEMBER",
        "body": "Thanks for putting something together @sjperkins .  It's useful to have this to drive conversation.  I'm curious to hear what others have to say.  \r\n\r\nMy inital thoughts are as follows:\r\n\r\n1.  How does this affect micro-performance of scheduling and optimization?\r\n2.  Are there other things like this that we would want to add on eventually, if so how do we future proof this and avoid glomming on features?\r\n3.  Would it make sense, as @shoyer has suggested earlier, of having a proper `Task` class, which would probably elliminate the need for this class (and would be more future-proofed) but would probably affect micro-performance?\r\n4.  Are there situations that this will make more complex in the future?  What is the maintenance burden of a feature like this?  Who is likely to maintian complications around it going forward?\r\n\r\nAnyway, just initial thoughts.  Again, I look forward to seeing what others have to say.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/412381407/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/412382045",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-412382045",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 412382045,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjM4MjA0NQ==",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-13T00:22:11Z",
        "updated_at": "2018-08-13T00:22:11Z",
        "author_association": "MEMBER",
        "body": "I think a optional Task class (https://github.com/dask/dask/issues/2299) would be the way to go here.\r\n\r\nAnother use case that comes to mind is keeping track of the provenance of a task, to enable better error tracebacks that point back directly to the source of the problem.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/412382045/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/412476835",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-412476835",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 412476835,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjQ3NjgzNQ==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-13T10:36:35Z",
        "updated_at": "2018-08-13T10:38:25Z",
        "author_association": "MEMBER",
        "body": ">    How does this affect micro-performance of scheduling and optimization?\r\n\r\nThe current implementation of allowing arbitrary annotations with a task tuple is sub-optimal (`split_task_annotations` likely slows things down), but this could probably be much improved by only allowing a single annotation in the last tuple position by *convention*, and introducing an extra type test at this position.\r\n\r\n>    Would it make sense, as @shoyer has suggested earlier, of having a proper Task class, which would probably elliminate the need for this class (and would be more future-proofed) but would probably affect micro-performance?\r\n\r\nSee example implementation based on https://github.com/dask/dask/issues/2299 below.\r\n\r\n```python\r\nfrom __future__ import print_function\r\n\r\n\r\nclass Task(tuple):\r\n    __slots__ = ()\r\n\r\n    _index_names = (\"function\", \"args\", \"kwargs\", \"annotations\")\r\n\r\n    def __new__(cls, fn, *args, **kwargs):\r\n        annots = kwargs.pop(\"annotations\", None)\r\n        return tuple.__new__(Task, (fn, args, kwargs, annots))\r\n\r\n    @property\r\n    def function(self):\r\n        return self[0]\r\n\r\n    @property\r\n    def args(self):\r\n        return self[1]\r\n\r\n    @property\r\n    def kwargs(self):\r\n        return self[2]\r\n\r\n    @property\r\n    def annotations(self):\r\n        return self[3]\r\n\r\n    def __repr__(self):\r\n        details = \", \".join(\"%s=%s\" % (n, repr(self[i]))\r\n                            for i, n in enumerate(self._index_names)\r\n                            if self[i])\r\n        return 'Task({})'.format(details)\r\n\r\n\r\ndef f(x):\r\n    return x + 1\r\n\r\nprint(Task(f, 4, bob='foo', annotations={\"resource\": \"GPU\"}))\r\nTask(function=<function f at 0x7f5e2054acf8>, args=(4,), kwargs={'bob': 'foo'}, annotations={'resource': 'GPU'})\r\nprint(Task(f, 4, \"qux\", annotations={\"resource\": \"GPU\"}))\r\nTask(function=<function f at 0x7f5e2054acf8>, args=(4, 'qux'), annotations={'resource': 'GPU'})\r\n```\r\n\r\nThe following timings on python 2.7.12 suggest ~4.5X slower for task construction and ~3.5X slower for pickling.\r\n\r\n```python\r\n# construct 1000 tuples\r\n%timeit [(f, i, {\"foo\":\"bar\"}, {\"resource\":\"GPU\"}) for i in xrange(1000)]\r\n10000 loops, best of 3: 168 \u00b5s per loop\r\n\r\n# construct 1000 Tasks\r\n%timeit [Task(f, i, foo=\"bar\", annotation={\"resource\":\"GPU\"}) for i in xrange(1000)]\r\n1000 loops, best of 3: 718 \u00b5s per loop\r\n\r\nfrom cPickle import dumps\r\n\r\n# Serialise 1000 tuples\r\n%timeit dumps([(f, i, {\"foo\":\"bar\"}, {\"resource\":\"GPU\"}) for i in xrange(1000)])\r\n100 loops, best of 3: 2.24 ms per loop\r\n\r\n# Serialise 1000 Tasks\r\n%timeit dumps([Task(f, i, foo=\"bar\", annotation={\"resource\":\"GPU\"}) for i in xrange(1000)])\r\n100 loops, best of 3: 8.03 ms per loop\r\n```\r\n\r\n>   Are there other things like this that we would want to add on eventually, if so how do we future proof this and avoid glomming on features?\r\n\r\nI think the `Task` object provides the way forward. The Annotation specification (it's a dict) is deliberately open-ended, allowing arbitrary task metadata. In fact, perhaps metadata is a better name than annotation.\r\n\r\n```python\r\nTask(f, 1, foo=\"bar\", __task_metadata__={\"resources\": \"GPU\"})\r\n```\r\n\r\nIf some requirement arose that was substantially different enough to not be expressed via metadata, an additional tuple position could be added. For e.g. @shoyer 's concept of provenance/origination (which should actually go in metadata) could be expressed at an additional position.\r\n\r\n>  What is the maintenance burden of a feature like this?\r\n\r\nI think this will lessen *future* maintenance burden. Currently, most user scheduling logic is expressed via kwargs in `update_graph`:\r\nhttps://github.com/dask/distributed/blob/b16ee25506fd20ec5daa7d77e338e2725e778562/distributed/scheduler.py#L1312-L1316\r\n\r\nThis means that this signature (and the function itself) changes with each new addition of scheduling functionality. I see there is a new `actor` kwarg for instance. Embedding this data in the graph will simplify the interface. While this will increase the graph size, it will correspondingly decrease the scheduling logic that must be pickled (per task in any case) during `Client._graph_to_futures`.\r\n\r\n>    Are there situations that this will make more complex in the future?\r\n\r\nGreater flexibility probably introduces complexity. Current complexity might involve deciding whether annotations/metadata supercede current logic expressed in `submit/compute/persist`. Ultimately I think that most of the functionality in `Scheduler.update_graph` should be expressed in separate plugins, but I'm not familiar enough with the code to decide whether this is realistic.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/412476835/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413193231",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413193231",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413193231,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzE5MzIzMQ==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-15T13:13:06Z",
        "updated_at": "2018-08-15T13:13:06Z",
        "author_association": "MEMBER",
        "body": "As an alternative to the adding annotations in the graph, I previously toyed with the idea of expanding the [dask collections interface](http://dask.pydata.org/en/latest/custom-collections.html#the-dask-collection-interface) to allow collections to provide extra keyword arguments to the scheduler on compute/persist. This would allow collections to track and enforce things like worker or resource constraints without modifying any of the scheduler or graph internals. I envisioned things like `workers=` or `resources=` then being added to methods accepting user-defined-functions (e.g. `map_blocks`, `map_partitions`, etc...), and the collection would maintain these constraints internally, forwarding them to the scheduler on `compute` or `persist`.\r\n\r\nPros:\r\n- Simple, no modification to graph or scheduler internals\r\n- Generic, not just for constraint annotations\r\n\r\nCons:\r\n- Collections specific, doesn't work for people building graphs manually\r\n- Splits state up, may add extra book-keeping in the collections (not sure)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413193231/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413473906",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413473906",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413473906,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzQ3MzkwNg==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-16T08:53:01Z",
        "updated_at": "2018-08-16T08:53:01Z",
        "author_association": "MEMBER",
        "body": "I'm putting together a [script](https://github.com/dask/dask/files/2292995/test_task.py.zip) to test out the impact of the `(tuple, annotated_tuple, task)` strategies.\r\n\r\nI'm not reproducing the 10X slower to pickle mentioned by @shoyer in #2299.\r\n\r\nThe pickling sizes are somewhat larger with annotations (but compression reduces this by several factors). \r\n\r\nCurrently, the script produces the following results for 1000 tasks:\r\n\r\n```\r\nTASK CREATION TIMING\r\ntuple 180 nanoseconds\r\nannotated_tuple 462 nanoseconds\r\ntask 804 nanoseconds\r\n\r\nPICKLING TASK TIMING\r\ntuple 2.95 microseconds\r\nannotated_tuple 5.85 microseconds\r\ntask 7.88 microseconds\r\n\r\nPICKLING SIZES\r\ntuple 54753 bytes\r\nannotated_tuple 77828 bytes\r\ntask 77818 bytes\r\n\r\nBZIP2 PICKLED SIZES\r\ntuple 7807 bytes\r\nannotated_tuple 9129 bytes\r\ntask 8909 bytes\r\n```\r\n\r\nI intend to expand it to measure the timing impact on the various schedulers, but will be working on this in an incremental fashion over the next while.\r\n\r\nI also wanted to point out that in the context of https://github.com/dask/dask/issues/3514 that I don't think annotations are an all or nothing affair -- Annotating every single task in the graph would  seems like overkill to me. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413473906/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413637153",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413637153",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413637153,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzYzNzE1Mw==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-16T18:14:20Z",
        "updated_at": "2018-08-16T18:14:20Z",
        "author_association": "MEMBER",
        "body": "Updated the [script](https://github.com/dask/dask/files/2294723/test_task.py.zip).\r\n\r\n- Creates a dask dictionary of {key: task} values (hence increased creation time + pickled sizes)\r\n- patches dask.local._execute_task with the 3 different strategies (current task tuple, annotated task tuple and new `Task` object). This doesn't use annotations in any form, merely strips them out.\r\n- Test task execution timings with the 3 strats.\r\n\r\n```\r\nTASK CREATION TIMING\r\ntuple 333 nanoseconds\r\nannotated_tuple 616 nanoseconds\r\ntask 862 nanoseconds\r\n\r\nPICKLING TASK TIMING\r\ntuple 3.45 microseconds\r\nannotated_tuple 6.75 microseconds\r\ntask 8.51 microseconds\r\n\r\nTASK EXECUTION TIMING\r\ntuple 28.4 microseconds\r\nannotated_tuple 28.7 microseconds\r\ntask 12.1 microseconds\r\n\r\nPICKLING SIZES\r\ntuple 84652 bytes\r\nannotated_tuple 106728 bytes\r\ntask 107717 bytes\r\n\r\nBZIP2 PICKLED SIZES\r\ntuple 15055 bytes\r\nannotated_tuple 18253 bytes\r\ntask 17919 bytes\r\n```\r\n\r\nThe task execution timing is interesting because the new `Task` object does pretty well. Its twice as fast as standard and annotated tuples probably because the task is already in canonical (function, args, kwargs, annots) form and some object creation is avoided. So there's some tradeoff here between `Task` construction and execution. . There doesn't seem to be a noticeable difference between the standard and annotated tuple execution timings, which is great.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413637153/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413668207",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413668207",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413668207,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzY2ODIwNw==",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-16T20:04:47Z",
        "updated_at": "2018-08-16T20:04:47Z",
        "author_association": "MEMBER",
        "body": "I would be interested to see how well a Cython extension type does. If there's ever a time to add an optional compile-time dependency, this would be it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413668207/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413793772",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413793772",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413793772,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc5Mzc3Mg==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-17T08:20:19Z",
        "updated_at": "2018-08-17T08:20:19Z",
        "author_association": "MEMBER",
        "body": "The \"twice as fast\" Task timings objects were incorrect -- Task objects were ending up in the cache. Nevertheless, after correcting for this, Task objects are still slightly faster than tuples and annotated tuples.\r\n\r\nI've pushed the test script up to https://github.com/dask/dask/pull/3869 so that the changes can be viewed/tracked.\r\n\r\n```\r\nTASK EXECUTION TIMING\r\ntuple 29.4 microseconds\r\nannotated_tuple 29.8 microseconds\r\ntask 25.3 microseconds\r\n\r\nTASK CREATION TIMING\r\ntuple 364 nanoseconds\r\nannotated_tuple 677 nanoseconds\r\ntask 942 nanoseconds\r\n\r\nPICKLING TASK TIMING\r\ntuple 3.96 microseconds\r\nannotated_tuple 7.73 microseconds\r\ntask 9.5 microseconds\r\n\r\nPICKLING SIZES\r\ntuple 84652 bytes\r\nannotated_tuple 106728 bytes\r\ntask 107717 bytes\r\n\r\nBZIP2 PICKLED SIZES\r\ntuple 15055 bytes\r\nannotated_tuple 18253 bytes\r\ntask 17919 bytes\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413793772/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413794274",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413794274",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413794274,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc5NDI3NA==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-17T08:22:35Z",
        "updated_at": "2018-08-17T08:22:35Z",
        "author_association": "MEMBER",
        "body": "@crusaderky. this might be useful in the context of https://github.com/dask/dask/pull/3549. As I interpret the latest incantation, you're using dummy functions in tasks to mark tasks that shouldn't be compiled?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413794274/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413794587",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413794587",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413794587,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzc5NDU4Nw==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-17T08:23:56Z",
        "updated_at": "2018-08-17T08:23:56Z",
        "author_association": "MEMBER",
        "body": "> I would be interested to see how well a Cython extension type does. If there's ever a time to add an optional compile-time dependency, this would be it.\r\n\r\n@shoyer Where do you think Cython would improve things in the context of the above benchmarks?\r\n\r\n- Task Creation?\r\n- Task Pickling?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413794587/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413828998",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413828998",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413828998,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzgyODk5OA==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-17T10:49:04Z",
        "updated_at": "2018-08-17T10:49:04Z",
        "author_association": "MEMBER",
        "body": "Using a slotted Task object (not subclassed from tuple) reduces task execution time to ~0.73X  of plain tuple and compressed pickle size to ~1.32X plain tuple.\r\n\r\n```\r\nTASK EXECUTION TIMING\r\ntuple 29.9 microseconds\r\nannotated_tuple 30.5 microseconds\r\ntask 21.6 microseconds\r\n\r\nTASK CREATION TIMING\r\ntuple 348 nanoseconds\r\nannotated_tuple 666 nanoseconds\r\ntask 899 nanoseconds\r\n\r\nPICKLING TASK TIMING\r\ntuple 3.95 microseconds\r\nannotated_tuple 7.09 microseconds\r\ntask 7.36 microseconds\r\n\r\nPICKLING SIZES\r\ntuple 48550 bytes\r\nannotated_tuple 57578 bytes\r\ntask 64568 bytes\r\n\r\nBZIP2 PICKLED SIZES\r\ntuple 9695 bytes\r\nannotated_tuple 10621 bytes\r\ntask 12851 bytes\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413828998/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413922199",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413922199",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413922199,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkyMjE5OQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-17T16:39:18Z",
        "updated_at": "2018-08-17T16:39:18Z",
        "author_association": "MEMBER",
        "body": "Note that from a scalability perspective we probably care more about creation and serialization costs than exectution, which will be parallelized out.  Execution cost *does* matter though on the single machine case, especially when people try to scale down pretty hard.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413922199/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413924195",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413924195",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413924195,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzkyNDE5NQ==",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-17T16:46:59Z",
        "updated_at": "2018-08-17T16:46:59Z",
        "author_association": "MEMBER",
        "body": "> Where do you think Cython would improve things in the context of the above benchmarks?\r\n>\r\n> Task Creation?\r\n> Task Pickling?\r\n\r\nYes, for both of these.\r\n\r\nSimply taking your `Task` class and making it a Cython extension type instead makes it about twice as fast for task creation, and a little faster for pickling:\r\nhttps://gist.github.com/shoyer/7a29cc510db06310b370cd4ac537a361",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413924195/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/413950931",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-413950931",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 413950931,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzk1MDkzMQ==",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-17T18:26:35Z",
        "updated_at": "2018-08-17T19:20:00Z",
        "author_association": "MEMBER",
        "body": "To summarize my results (on Python 3.6) from the notebook linked above:\r\n```\r\nTASK CREATION TIMING\r\ntuple 343 ns\r\nTask 1.14 \u00b5s\r\nCythonTask 635 ns\r\nCythonTask2 548 ns\r\n\r\nPICKLING TASK TIMING\r\ntuple 500 ns\r\nTask 1.55 \u00b5s\r\nCythonTask 1.31 \u00b5s\r\nCythonTask2 1.17 \u00b5s\r\n```\r\n\r\n(I don't know why my pickling timings are so far off)\r\n\r\n `CythonTask` is simply a Cython extension type version of `Task` that uses a C struct internally instead of Python slots. `CythonTask2` is a slightly refactored version that does less parsing in the class constructor, and which I think is probably more suitable for use in dask.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/413950931/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/414727238",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-414727238",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 414727238,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDcyNzIzOA==",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-21T16:00:21Z",
        "updated_at": "2018-08-21T16:06:29Z",
        "author_association": "MEMBER",
        "body": "Just my +1 here - this would be a first step in letting dask.array let the scheduler know the expected RAM usage of a task output, so that the dask scheduler can optimize more aggressively to minimize RAM. In my dask.array problems I frequently face chunks that are 100x the size of other chunks.\r\n\r\nOther super useful usages would be to let the scheduler  know that a task is limited by I/O or network and requires very little CPU, thus is should be run out of band.\r\n\r\nAnother benefit would be to be able to say \"this is a CUDA task, so it should detract from a pool of X cuda workers instead of your CPU workers\". This is fundamental for hybrid dask.array problems when only a small part of  the problem is solved by CUDA, whereas the rest is run by CPU.\r\n\r\nFinally, it would allow letting the dask scheduler know that a task will lock the GIL, thus allowing for hybrid multi-threaded / multi-process workflows.\r\n\r\nAs for the possible implementations:\r\n\r\n- as correctly pointed out, #3549 uses dummy functions as markers. It's ugly to look at, but does the job.\r\n- Task classes (#2299) is probably more elegant although it sounds somewhat more invasive?\r\n- decorators in my opinion are a no-no, because if you apply a decorator on the fly it can't be pickled, and it will confuse anything that relies on detecting specific functions in the graph",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/414727238/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/414880989",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-414880989",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 414880989,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDg4MDk4OQ==",
        "user": {
            "login": "dhirschfeld",
            "id": 881019,
            "node_id": "MDQ6VXNlcjg4MTAxOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/881019?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhirschfeld",
            "html_url": "https://github.com/dhirschfeld",
            "followers_url": "https://api.github.com/users/dhirschfeld/followers",
            "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
            "repos_url": "https://api.github.com/users/dhirschfeld/repos",
            "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-22T01:56:14Z",
        "updated_at": "2018-08-22T01:56:14Z",
        "author_association": "NONE",
        "body": "My interest in this functionality is that I think it may enable #3344 - i.e. if you can annotate a task you specify what higher-level \"job\" the task belong too.\r\n\r\nI think this functionality is similar to what @shoyer was referring to:\r\n> *Another use case that comes to mind is keeping track of the provenance of a task, to enable better error tracebacks that point back directly to the source of the problem*\r\n\r\nOn my dask cluster I run jobs which are composed of multiple underlying tasks. When dozens of jobs are running at any given time it's hard to know the state of any particular \"job\" which is the level I actually care about.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/414880989/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/414881772",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-414881772",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 414881772,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDg4MTc3Mg==",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-22T02:00:23Z",
        "updated_at": "2018-08-22T02:00:23Z",
        "author_association": "MEMBER",
        "body": "Yes, TensorFlow uses task metadata to both keep track of the exact line of\nPython code where errors come from (for tracebacks) and to support explicit\ntask naming (typically strings of the form\n\"my_model/subcomponent/function/task\").\nOn Tue, Aug 21, 2018 at 6:56 PM Dave Hirschfeld <notifications@github.com>\nwrote:\n\n> My interest in this functionality is that I think it may enable #3344\n> <https://github.com/dask/dask/issues/3344> - i.e. if you can annotate a\n> task you specify what higher-level \"job\" the task belong too.\n>\n> I think this functionality is similar to what @shoyer\n> <https://github.com/shoyer> was referring to:\n>\n> *Another use case that comes to mind is keeping track of the provenance of\n> a task, to enable better error tracebacks that point back directly to the\n> source of the problem*\n>\n> On my dask cluster I run jobs which are composed of multiple underlying\n> tasks. When dozens of jobs are running at any given time it's hard to know\n> the state of any particular \"job\" which is the level I actually care about.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/3783#issuecomment-414880989>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ABKS1uhygq0zWsu9Lmcnp9ibOdqmbVBjks5uTLpAgaJpZM4VWULU>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/414881772/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/415762477",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-415762477",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 415762477,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTc2MjQ3Nw==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-08-24T13:42:28Z",
        "updated_at": "2018-08-24T13:42:28Z",
        "author_association": "MEMBER",
        "body": "Thanks for the input @shoyer, @dhirschfeld  and @crusaderky.\r\n\r\n> decorators in my opinion are a no-no, because if you apply a decorator on the fly it can't be pickled, and it will confuse anything that relies on detecting specific functions in the graph\r\n\r\nI envisaged using decorators to place Annotation (and possibly now Task) objects within the graph via a rewrite mechanism, rather than embedding the decorators themselves.\r\n\r\nOne thing that should be considered is that adding Cython as a dependency could move dask away from being a pure python source distribution. This might be avoided if we required users to install with the latest pip and therefore gaining the ability to specify cython as a build requirement under the new [PEP-518](https://www.python.org/dev/peps/pep-0518/#id27) system. Otherwise binary wheels would become necessary?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/415762477/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/418956979",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-418956979",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 418956979,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxODk1Njk3OQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-09-06T03:59:19Z",
        "updated_at": "2018-09-06T03:59:19Z",
        "author_association": "MEMBER",
        "body": "We could always move any Cython portions into an optional external dependency. That way users can install it if they like and get the speed up or not and enjoy Dask's pure Python implementation.\r\n\r\nHaving not looked into this problem as deeply as others, this may be a naive suggestion, but is Numba useful here? If so, this might be another way to solve the problem that might alleviate some of the distribution concerns. Again this could be made optional, but would have the benefit of avoiding code duplication in Python and Cython forms.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/418956979/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/419202961",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-419202961",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 419202961,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTIwMjk2MQ==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-09-06T18:51:29Z",
        "updated_at": "2019-05-01T08:36:29Z",
        "author_association": "MEMBER",
        "body": "> We could always move any Cython portions into an optional external dependency. That way users can install it if they like and get the speed up or not and enjoy Dask's pure Python implementation.\r\n\r\nYes, I'm more keen on initial support for a pure python Task object which, while more expensive in terms of creation and serialisation than tuples, doesn't appreciably affect the execution performance existing schedulers. I think it's more important to work on:\r\n\r\n1. defining a set of standard annotations.\r\n2. interfaces (array_plugins) for creating annotations and by implication, new Task objects.\r\n3. possible updates to the Scheduler plugin interface\r\n\r\nrather than looking to chase performance first. In any case, the older tuple tasks will still need to be supported for backwards compatibility while I expect the new Task object will not be widely used at first\r\n\r\nMy plan is to look at 1. first, supplementing the arguments passed in to [update_graph](https://github.com/dask/distributed/blob/07949bd05ad8b2de37bc6ca7d608542be7fb1386/distributed/scheduler.py#L1339-L1556) with similarly named annotations ('resource', 'restrictions'). Then there'd be feature parity with the existing resource/worker restriction interface.\r\n\r\nI just need to block out some time for this...\r\n\r\n> Having not looked into this problem as deeply as others, this may be a naive suggestion, but is Numba useful here? If so, this might be another way to solve the problem that might alleviate some of the distribution concerns. Again this could be made optional, but would have the benefit of avoiding code duplication in Python and Cython forms.\r\n\r\nIf you mean in terms of creating a Task object, then I would say no. As I understand numba it transforms\r\n\r\n- python types => [numba type representation](https://numba.pydata.org/numba-doc/dev/reference/types.html) => LLVM IR code => machine code.\r\n\r\nbut not the inverse, which I think would be needed.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/419202961/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/423134635",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-423134635",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 423134635,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzEzNDYzNQ==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-09-20T10:38:51Z",
        "updated_at": "2018-09-20T10:38:51Z",
        "author_association": "MEMBER",
        "body": "I hacked away at this in https://github.com/dask/distributed/pull/2180. Its still fairly exploratory, but the basic idea seems to be working. See for e.g. [this](https://github.com/dask/distributed/pull/2180/files#diff-5ea4b28b4d9e3d8d8bbf63b3fdc984caR562) test case.\r\n\r\nOne issue that I hadn't considered was [nested tasks](https://github.com/dask/distributed/pull/2180/files#diff-5ea4b28b4d9e3d8d8bbf63b3fdc984caR593). Tasks like `(inc, (inc, (inc, 2)))` are regarded as complex and are serialised into a blob by `Worker.dumps_task`, as opposed to `(inc, 1)` whose function and args are serialised separately and stored as entries in  a dict. \r\n\r\nIt seems there's a grey area here that relates to dask optimization (i.e. `fuse_linear`). Keys that may have existed in the graph and might be passed to `worker` kwargs in `compute/persist` could be removed by `fuse_linear`. Effectively the `worker` kwarg directive gets ignored, as the blob gets sent to t a worker, deserialised and recursively processed by `execute_task`. As the code is currently structured, it looks like the same can only be assumed for Annotations.\r\n\r\nCould the requirement for serialising nested tasks be explained? It would be useful to relax this in `Worker.dumps_task` to handle the outer level in the same way as a simple task. This allows a single annotation to be specified for the entire nested task.\r\n\r\nThis also opens up the question of how Annotations should be merged or even culled during an optimisation process.  Its not immediately clear to me how to support generality here -- perhaps some sort of user hook per annotation type that indicates whether fusing is possible. For example, if two tasks have `{'worker': 'a'}` and `{'worker': 'b'}` annotations respectively, then a fusing should be disallowed.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/423134635/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/488025476",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-488025476",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 488025476,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODAyNTQ3Ng==",
        "user": {
            "login": "quasiben",
            "id": 1403768,
            "node_id": "MDQ6VXNlcjE0MDM3Njg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1403768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/quasiben",
            "html_url": "https://github.com/quasiben",
            "followers_url": "https://api.github.com/users/quasiben/followers",
            "following_url": "https://api.github.com/users/quasiben/following{/other_user}",
            "gists_url": "https://api.github.com/users/quasiben/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/quasiben/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/quasiben/subscriptions",
            "organizations_url": "https://api.github.com/users/quasiben/orgs",
            "repos_url": "https://api.github.com/users/quasiben/repos",
            "events_url": "https://api.github.com/users/quasiben/events{/privacy}",
            "received_events_url": "https://api.github.com/users/quasiben/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-30T16:40:50Z",
        "updated_at": "2019-04-30T16:40:50Z",
        "author_association": "MEMBER",
        "body": "ping @mrocklin (this issue had a fair amount of activity last fall and we should probably pick it back up)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/488025476/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/488070888",
        "html_url": "https://github.com/dask/dask/issues/3783#issuecomment-488070888",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3783",
        "id": 488070888,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODA3MDg4OA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-30T18:50:37Z",
        "updated_at": "2019-04-30T18:50:37Z",
        "author_association": "MEMBER",
        "body": "Agreed that it had activity.  No objection to people picking it up.  Just to make it clear though, despite being pinged, I personally am unlikely to work on this short term.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/488070888/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]