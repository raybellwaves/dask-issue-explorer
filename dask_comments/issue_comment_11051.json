[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/2056383317",
        "html_url": "https://github.com/dask/dask/issues/11051#issuecomment-2056383317",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/11051",
        "id": 2056383317,
        "node_id": "IC_kwDOAbcwm856ketV",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-04-15T09:34:28Z",
        "updated_at": "2024-04-15T09:34:28Z",
        "author_association": "MEMBER",
        "body": "Thanks for the report. This is unfortunately a known issue of the async Client and one we will likely not be able to fix. However, there are ways to avoid this problem\r\n\r\nFirst of all, it's important to understand where this is coming from. Your `data_bag.to_dataframe()` method call is not providing any `meta`, i.e. we have to guess / determine what the schema of the dataframe is going to look like. To do this, we actually run the very first task of the bag ourselves to check the schema. This is typically something users want to avoid and providing `meta` specifically avoids this issue, i.e.\r\n\r\n```python\r\nasync def create_dataframe():\r\n    ...\r\n    return data_bag.to_dataframe(meta={\"id\": int, \"name\": str})\r\n```\r\nfixes the issue. The reason is that the internal call to compute the first partition is not handling async code. This is a shortcoming of the async Client when working with dask collections.\r\n\r\n\r\nIdeally, you wouldn't load the data locally, though, but do this on the cluster as well. Most users are not using the async dask Client unless they work with the lower level `Future` interface.\r\n\r\nFor example, using `dask.delayed` and `dask.dataframe` this would look as\r\n\r\n\r\n```python\r\nimport dask\r\nfrom dask.distributed import Client\r\nimport dask.dataframe as dd\r\nimport pandas as pd\r\n\r\n@dask.delayed()\r\ndef get_data_from_one_source(ix):\r\n    data = {\"_id\": ix, \"name\": \"Bob\"}\r\n    return pd.DataFrame([data])\r\n\r\ndef create_dataframe():\r\n    # Data from sources stuff...\r\n    data = [\r\n        get_data_from_one_source(0)\r\n    ]\r\n    ddf = dd.from_delayed(data)\r\n    ddf = ddf.rename(columns={\"_id\": \"id\"})\r\n    ddf[\"name\"] = ddf.name.str.lower()\r\n    return ddf\r\n\r\nwith Client() as client:\r\n    df = create_dataframe()\r\n    df = df.compute()\r\ndf\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/2056383317/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/2058031499",
        "html_url": "https://github.com/dask/dask/issues/11051#issuecomment-2058031499",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/11051",
        "id": 2058031499,
        "node_id": "IC_kwDOAbcwm856qxGL",
        "user": {
            "login": "SGaviriaBrickell",
            "id": 104637780,
            "node_id": "U_kgDOBjylVA",
            "avatar_url": "https://avatars.githubusercontent.com/u/104637780?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SGaviriaBrickell",
            "html_url": "https://github.com/SGaviriaBrickell",
            "followers_url": "https://api.github.com/users/SGaviriaBrickell/followers",
            "following_url": "https://api.github.com/users/SGaviriaBrickell/following{/other_user}",
            "gists_url": "https://api.github.com/users/SGaviriaBrickell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SGaviriaBrickell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SGaviriaBrickell/subscriptions",
            "organizations_url": "https://api.github.com/users/SGaviriaBrickell/orgs",
            "repos_url": "https://api.github.com/users/SGaviriaBrickell/repos",
            "events_url": "https://api.github.com/users/SGaviriaBrickell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SGaviriaBrickell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-04-16T00:31:18Z",
        "updated_at": "2024-04-16T00:31:18Z",
        "author_association": "NONE",
        "body": "Thanks, i changed the implementation with dask dataframe.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/2058031499/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]