[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1110062646",
        "html_url": "https://github.com/dask/dask/issues/8983#issuecomment-1110062646",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8983",
        "id": 1110062646,
        "node_id": "IC_kwDOAbcwm85CKjY2",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-04-26T17:26:46Z",
        "updated_at": "2022-04-26T17:26:46Z",
        "author_association": "MEMBER",
        "body": "I think what's happening here is that the initial dataframes are using `pd.RangeIndex`, which has a negligible memory footprint, but upon repartitioning they are turned into `pd.Int64Index`, which increases the memory footprint of your partitions by 5-10%, pushing it over the partition limit.\r\n\r\nIf I manually turn the `RangeIndex` in your example into an `Int64Index`, then the repartitioning respects the limit. There's probably a way to make `repartition` better at reasoning about a range index, though I haven't delved into the code.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1110062646/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1111171911",
        "html_url": "https://github.com/dask/dask/issues/8983#issuecomment-1111171911",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8983",
        "id": 1111171911,
        "node_id": "IC_kwDOAbcwm85COyNH",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-04-27T15:55:28Z",
        "updated_at": "2022-04-27T15:55:28Z",
        "author_association": "MEMBER",
        "body": "I think a fix for this would be to make sure that the resulting partitions of `dd.read_csv()` have compatible `RangeIndex` indices (that is, each one starting from the last row number of the previous partition). Then when partitions are concatenated in the repartitioning step, they won't be coerced to `Int64Index`.\r\n\r\nThis would require a synchronization step at the end to reset the indices for the partitions based on the lengths of each, but not a full shuffle since the index is fully under our control.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1111171911/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]