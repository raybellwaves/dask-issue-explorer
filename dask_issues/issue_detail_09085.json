{
    "url": "https://api.github.com/repos/dask/dask/issues/9085",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9085/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9085/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9085/events",
    "html_url": "https://github.com/dask/dask/issues/9085",
    "id": 1235701628,
    "node_id": "I_kwDOAbcwm85Jp098",
    "number": 9085,
    "title": "Poor performance when combining many blockwise operations",
    "user": {
        "login": "ian-r-rose",
        "id": 5728311,
        "node_id": "MDQ6VXNlcjU3MjgzMTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ian-r-rose",
        "html_url": "https://github.com/ian-r-rose",
        "followers_url": "https://api.github.com/users/ian-r-rose/followers",
        "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
        "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
        "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
        "repos_url": "https://api.github.com/users/ian-r-rose/repos",
        "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 2156573524,
            "node_id": "MDU6TGFiZWwyMTU2NTczNTI0",
            "url": "https://api.github.com/repos/dask/dask/labels/highlevelgraph",
            "name": "highlevelgraph",
            "color": "8c24d6",
            "default": false,
            "description": "Issues relating to HighLevelGraphs."
        },
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "ian-r-rose",
        "id": 5728311,
        "node_id": "MDQ6VXNlcjU3MjgzMTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ian-r-rose",
        "html_url": "https://github.com/ian-r-rose",
        "followers_url": "https://api.github.com/users/ian-r-rose/followers",
        "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
        "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
        "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
        "repos_url": "https://api.github.com/users/ian-r-rose/repos",
        "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-05-13T20:52:44Z",
    "updated_at": "2022-06-24T16:00:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "## The Problem\r\n\r\nI was doing some performance tests and ran into some pretty poor behavior when a lot (>100) of `Blockwise` operations are applied in series. The same example framed with a single `map_partitions` call performs *much* better. A minimal reproducer:\r\n\r\n```python\r\nimport distributed\r\nimport dask.dataframe as dd\r\nfrom dask.datasets import timeseries\r\n\r\n# A dataframe with a lot of columns to mess with\r\nddf = timeseries(\r\n    dtypes={\r\n        **{f\"name-{i}\": str for i in range(25)},\r\n        **{f\"price-{i}\": float for i in range(25)},\r\n        **{f\"id-{i}\": int for i in range(25)},\r\n        **{f\"cat-{i}\": \"category\" for i in range(25)},\r\n    },\r\n    freq=\"5s\"\r\n)\r\n\r\ndef transform(df):\r\n    \"\"\"\r\n    Transform the columns of a pandas or dask dataframe.\r\n    \"\"\"\r\n    transform = {}\r\n    for c in df.columns:\r\n        dtype = str(df[c].dtype)\r\n        if dtype == \"object\":\r\n            transform[c] = df[c].str.upper()\r\n        elif dtype == \"int64\":\r\n            transform[c] = df[c] * 2\r\n        elif dtype == \"float64\":\r\n            transform[c] = df[c] / 2\r\n    return df.assign(**transform)\r\n\r\nddf.map_partitions(transform).compute()  # does okay!\r\ntransform(ddf).compute()  # does *very* badly\r\n\r\n```\r\n\r\nThis reproduces on both local and distributed schedulers, but a comparison of the two from the dask dashboard is shown here (purple is `map_partitions`, teal uses the top-level dataframe API):\r\n\r\n![image](https://user-images.githubusercontent.com/5728311/168383651-0d08100b-e479-44b4-a6d6-818b9939b9b5.png)\r\n\r\nNot only does using the top-level Dask APIs take several times longer, but it also takes several times as much memory, and it's not hard to knock over workers with the second approach.\r\n\r\nA bit of exploration and reflection reveals what's going on: the `Blockwise` layers are being correctly fused into a single layer as we want during optimization. But the resulting local subgraph is pretty complex, and has a ton of intermediate results! If I drill into the layer and plot the subgraph, I get the following:\r\n![subgraph](https://user-images.githubusercontent.com/5728311/168386197-cd839a4c-3aa7-41e0-bfe6-d33f1f0d359b.png)\r\n\r\nThe performance characteristics of this graph are way worse than just bundling them into the one `map_partitions` call and letting pandas handle intermediate results internally.\r\n\r\nDoes this matter? I think so. I don't think what I'm doing is too far from \"best practices\". It is embarrassingly parallel, has immutable operations, and batches all of my transformations together into a single `compute()` call. From an API design perspective, I want to be able to tell users to use the top level API and use `map_partitions` as an escape hatch. I'm not really sure what to do about this behavior right now. It's not necessarily a bug, since `Blockwise` is more-or-less doing the right thing. But it's performing so much worse that I thought I'd write this up for discussion. Fixing cases like this might be worth considering in any HLG redesign we do (cf #8980, #9076).\r\n\r\n### Appendix: why am I using `DataFrame.assign?\r\n\r\nI don't see too many people using `DataFrame.assign` like I am here. But I like it for a few reasons:\r\n* It is immutable as opposed to `__setitem__`\r\n* It makes it easier to use method chaining\r\n* I understand it, and `__setitem__` is too complicated.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9085/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9085/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}