[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/326638351",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-326638351",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 326638351,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYzODM1MQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-09-01T17:26:13Z",
        "updated_at": "2017-09-01T17:26:13Z",
        "author_association": "MEMBER",
        "body": "The challenge here is balancing against optimization time.  This might be a lot easier to justify if we do something like https://github.com/dask/dask/pull/2608 at which point graph optimization becomes a lot cheaper.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/326638351/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/326639540",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-326639540",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 326639540,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYzOTU0MA==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-09-01T17:31:23Z",
        "updated_at": "2017-09-01T17:31:23Z",
        "author_association": "MEMBER",
        "body": "While doable, I don't think this is an optimization we should be doing. I think if you want `a + b` instead of `b + a`, you should write `a + b`. Further, while mathematically `+` may commute, in python it doesn't (`__add__` vs `__radd__`). For numpy chunks we can legally reorder them, but since dask array supports arbitrary chunk types we can't. Observe:\r\n\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: x = np.array([1, 2, 3])\r\n\r\nIn [3]: y = np.ma.masked_array([4, 5, 6], [0, 1, 0])\r\n\r\nIn [4]: z = x + y\r\n\r\nIn [5]: z2 = y + x\r\n\r\nIn [6]: z.data\r\nOut[6]: array([5, 2, 9])\r\n\r\nIn [7]: z2.data\r\nOut[7]: array([5, 5, 9])\r\n```\r\n\r\nThe output of the operation depends on the order, thus `+` doesn't really commute here.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/326639540/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/326639802",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-326639802",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 326639802,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYzOTgwMg==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-09-01T17:32:31Z",
        "updated_at": "2017-09-01T17:32:31Z",
        "author_association": "MEMBER",
        "body": "> This might be a lot easier to justify if we do something like #2608 at which point graph optimization becomes a lot cheaper.\r\n\r\nIf we were to do this I'd just normalize the inputs to `elemwise`, sorting on the `name` key. Then we generate the same graph for `a == b` and `b == a`, avoiding optimization cost.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/326639802/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/326640352",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-326640352",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 326640352,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY0MDM1Mg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-09-01T17:34:53Z",
        "updated_at": "2017-09-01T17:34:53Z",
        "author_association": "MEMBER",
        "body": "Valid point\n\nOn Fri, Sep 1, 2017 at 1:32 PM, Jim Crist <notifications@github.com> wrote:\n\n> This might be a lot easier to justify if we do something like #2608\n> <https://github.com/dask/dask/pull/2608> at which point graph\n> optimization becomes a lot cheaper.\n>\n> If we were to do this I'd just normalize the inputs to elemwise, sorting\n> on the name key. Then we generate the same graph for a == b and b == a,\n> avoiding optimization cost.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/2648#issuecomment-326639802>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AASszPKMK-ip8-E89gXTq_KT5aKWA0K4ks5seD-ygaJpZM4PKVt3>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/326640352/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/326645207",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-326645207",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 326645207,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY0NTIwNw==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-09-01T17:56:05Z",
        "updated_at": "2017-09-01T17:59:41Z",
        "author_association": "MEMBER",
        "body": "I don't think one can have any expectations about how the masked elements in the data are handled in masked arrays. While it is true we can envision situations where order matters for the masked elements, they are ultimately masked and so are considered bad data to be disregarded in spite of what value they might be or become.\r\n\r\n> If we were to do this I'd just normalize the inputs to `elemwise`, sorting on the `name` key.\r\n\r\nThis is the level of optimization I had in mind.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/326645207/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/326646857",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-326646857",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 326646857,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY0Njg1Nw==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-09-01T18:03:15Z",
        "updated_at": "2017-09-01T18:03:15Z",
        "author_association": "MEMBER",
        "body": "Sure. That was just an example showing that `__add__`/`__radd__` does matter for differing array arguments, any other `array_like` could be used instead giving results that *do* differ. This might be an imagined issue, but an optimization like this is not something that I'd expect when using a library like dask.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/326646857/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/332300902",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-332300902",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 332300902,
        "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjMwMDkwMg==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-09-26T18:59:04Z",
        "updated_at": "2017-09-26T18:59:04Z",
        "author_association": "MEMBER",
        "body": "To provide a particular use case where this is of interest, when one is computing the pairwise distance by some metric of a large number of high dimensional points. In these cases, roughly half of the computations can be avoided by simply looking for this optimization. Of course there are other tricks if one is only interested in approximating proximity.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/332300902/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/359334541",
        "html_url": "https://github.com/dask/dask/issues/2648#issuecomment-359334541",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/2648",
        "id": 359334541,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTMzNDU0MQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-01-22T06:16:29Z",
        "updated_at": "2018-01-22T06:16:29Z",
        "author_association": "MEMBER",
        "body": "Perhaps an agreeable resolution to this would be an example doc showing how to use `RewriteRule`s (or similar) to handle commuting to eliminate equivalent operations.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/359334541/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]