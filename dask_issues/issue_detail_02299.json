{
    "url": "https://api.github.com/repos/dask/dask/issues/2299",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/2299/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/2299/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/2299/events",
    "html_url": "https://github.com/dask/dask/issues/2299",
    "id": 226381034,
    "node_id": "MDU6SXNzdWUyMjYzODEwMzQ=",
    "number": 2299,
    "title": "Key and Task classes",
    "user": {
        "login": "shoyer",
        "id": 1217238,
        "node_id": "MDQ6VXNlcjEyMTcyMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shoyer",
        "html_url": "https://github.com/shoyer",
        "followers_url": "https://api.github.com/users/shoyer/followers",
        "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
        "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
        "organizations_url": "https://api.github.com/users/shoyer/orgs",
        "repos_url": "https://api.github.com/users/shoyer/repos",
        "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shoyer/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 1372867996,
            "node_id": "MDU6TGFiZWwxMzcyODY3OTk2",
            "url": "https://api.github.com/repos/dask/dask/labels/discussion",
            "name": "discussion",
            "color": "bebaf4",
            "default": false,
            "description": "Discussing a topic with no specific actions yet"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2017-05-04T19:15:59Z",
    "updated_at": "2021-10-12T02:44:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "I think it would be worth considering adding optional light-weight classes to represent keys and tasks in a dask graph. These would complement the existing `dask.core.quote` for literals.\r\n\r\nThis would allow for much clearer intent when creating dask graphs, and better error messages when things go wrong (e.g., for #2298), because dask could know unambiguously what an object is intended to represent without needing to guess about what it is. For example, if a key is not found, dask could raise an error instead of using it as a literal.\r\n\r\nThese could be simple `tuple` subclasses, e.g.,\r\n```\r\nclass Key(tuple):\r\n  __slots__ = ()\r\n  \r\n  def __new__(cls, *args):\r\n    return tuple.__new__(Key, args)\r\n\r\n  def __repr__(self):\r\n    contents = repr(tuple(self))\r\n    if len(self) == 1:\r\n      contents = contents[:-len(',)')] + ')'\r\n    return 'Key{}'.format(contents)\r\n```\r\n\r\nThe `Task` class could automatically handle `**kwargs` in the proper fashion, e.g., `Task(pd.read_csv, filename, sep='\\t')`.\r\n\r\nThis is more verbose than using Python builtins, but not onerously so. E.g., adapting the [\"Custom Graphs\" example](http://dask.pydata.org/en/latest/custom-graphs.html) from the docs:\r\n```python\r\nfrom dask import Task, Key\r\n\r\n...\r\ndsk = {'load-1': Task(load, 'myfile.a.data'),\r\n       'load-2': Task(load, 'myfile.b.data'),\r\n       'load-3': Task(load, 'myfile.c.data'),\r\n       'clean-1': Task(clean, Key('load-1')),\r\n       'clean-2': Task(clean, Key('load-2')),\r\n       'clean-3': Task(clean, Key('load-3')),\r\n       'analyze': Task(analyze, [Key('clean-%d') % i for i in [1, 2, 3]]),\r\n       'store': Task(store, Key('analyze'))}\r\n```\r\n\r\nPossibly, we would want a \"strict evaluation\" mode that requires all tasks and keys to be wrapped in the appropriate classes, and switches the default interpretation for everything else to be a literal. Think of this as \"strong typing\" for dask.\r\n\r\nI think this would be really valuable for library code, such as the existing dask collections.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/2299/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/2299/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}