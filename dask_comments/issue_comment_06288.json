[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/639525873",
        "html_url": "https://github.com/dask/dask/issues/6288#issuecomment-639525873",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6288",
        "id": 639525873,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTUyNTg3Mw==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T14:19:22Z",
        "updated_at": "2020-06-05T14:19:22Z",
        "author_association": "MEMBER",
        "body": "I am not quite sure I understand your question. It'd help to have a reproducible example. Can you replace tbd with a numpy array that looks like your tiledb object?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/639525873/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/639537625",
        "html_url": "https://github.com/dask/dask/issues/6288#issuecomment-639537625",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6288",
        "id": 639537625,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTUzNzYyNQ==",
        "user": {
            "login": "Hoeze",
            "id": 1200058,
            "node_id": "MDQ6VXNlcjEyMDAwNTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1200058?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hoeze",
            "html_url": "https://github.com/Hoeze",
            "followers_url": "https://api.github.com/users/Hoeze/followers",
            "following_url": "https://api.github.com/users/Hoeze/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hoeze/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hoeze/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hoeze/subscriptions",
            "organizations_url": "https://api.github.com/users/Hoeze/orgs",
            "repos_url": "https://api.github.com/users/Hoeze/repos",
            "events_url": "https://api.github.com/users/Hoeze/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hoeze/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T14:40:04Z",
        "updated_at": "2020-06-05T14:49:18Z",
        "author_association": "NONE",
        "body": "OK, maybe this example shows my problem better.\r\n\r\nThe query:\r\n```python\r\ndask.array.zeros(200000000000, chunks=(100000000000,))[10:20].compute()\r\n```\r\nExpected result:\r\n```python\r\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\r\n```\r\nActual result:\r\n```python\r\nMemoryError: Unable to allocate array with shape (100000000000,) and data type float64\r\n```\r\n\r\nSo Dask tried to materialize the first chunk and failed, right?\r\nWould the same thing happen if I had used `dask.array.from_array(some_other_array, chunks=(100000000000,))` or would it pass the slicing operator down to the underlying array?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/639537625/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/639558989",
        "html_url": "https://github.com/dask/dask/issues/6288#issuecomment-639558989",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6288",
        "id": 639558989,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTU1ODk4OQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T15:17:08Z",
        "updated_at": "2020-06-05T15:17:08Z",
        "author_association": "MEMBER",
        "body": "> or would it pass the slicing operator down to the underlying array?\r\n\r\nNope, we don't do predicate pushdown yet. This is one of the goals mentioned in https://github.com/dask/dask/issues/5644.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/639558989/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/639578373",
        "html_url": "https://github.com/dask/dask/issues/6288#issuecomment-639578373",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6288",
        "id": 639578373,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTU3ODM3Mw==",
        "user": {
            "login": "Hoeze",
            "id": 1200058,
            "node_id": "MDQ6VXNlcjEyMDAwNTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1200058?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hoeze",
            "html_url": "https://github.com/Hoeze",
            "followers_url": "https://api.github.com/users/Hoeze/followers",
            "following_url": "https://api.github.com/users/Hoeze/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hoeze/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hoeze/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hoeze/subscriptions",
            "organizations_url": "https://api.github.com/users/Hoeze/orgs",
            "repos_url": "https://api.github.com/users/Hoeze/repos",
            "events_url": "https://api.github.com/users/Hoeze/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hoeze/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T15:44:02Z",
        "updated_at": "2020-06-05T15:51:50Z",
        "author_association": "NONE",
        "body": "Thank you for your answer @TomAugspurger .\r\n\r\nIs there an easy way to hack the slicing operator, e.g. by inheriting from Dask array?\r\n- This way, I could create an `ArrayView` that caches all slicing operations instead of materializing them.\r\n- `ArrayView` could return optimally-sized Dask chunks, depending on the slices\r\n- Slicing an `ArrayView` again would return an `ArrayView` with a merged set of slicing operations\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/639578373/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/639589485",
        "html_url": "https://github.com/dask/dask/issues/6288#issuecomment-639589485",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6288",
        "id": 639589485,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTU4OTQ4NQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-05T15:52:50Z",
        "updated_at": "2020-06-05T15:52:50Z",
        "author_association": "MEMBER",
        "body": "I'm not sure, but that sounds somewhat difficult.\n\nI'm not familiar with tiledb, but you might be able to construct smaller\nchunks by using tiledb operations to do the filtering before it gets to\nDask data? Or perhaps your initial tasks could include the slicing?\n\n\nOn Fri, Jun 5, 2020 at 10:44 AM Florian R. H\u00f6lzlwimmer <\nnotifications@github.com> wrote:\n\n> Thank you for your answer @TomAugspurger\n> <https://github.com/TomAugspurger> .\n>\n> Is there an easy way to hack the slicing operator, e.g. by inheriting from\n> Dask array?\n> This way, I could create an ArrayView that caches all slicing operations\n> instead of materializing them.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/6288#issuecomment-639578373>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAKAOIXPNDYVUYIAWUMFILDRVEHFFANCNFSM4NTBO6AQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/639589485/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1479817449",
        "html_url": "https://github.com/dask/dask/issues/6288#issuecomment-1479817449",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6288",
        "id": 1479817449,
        "node_id": "IC_kwDOAbcwm85YNDjp",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-22T15:47:57Z",
        "updated_at": "2023-03-22T15:47:57Z",
        "author_association": "MEMBER",
        "body": "I see now that this is asking for the same thing as https://github.com/dask/dask/issues/8526.\r\n\r\nAfter thinking about it a bit more, this might be doable, but sounds pretty challenging. I suspect we'll need some proofs of concept that demonstrate doing things \"manually\" first (explicitly doing the fancy, sliced reads from storage and building the rechunked array).\r\n\r\nCopying my comment from there.\r\n\r\n---\r\n\r\nApologies for the vague request, but here goes. The tl/dr is\r\n\r\n1. Sometimes, the chunking of the storage format is different from the desired chunking for analysis, requiring rechunking and complex task graphs\r\n2. Some storage formats support reading windows, allowing for the construction of much simpler task graphs where each tasks consists of many reads + a concat\r\n3. It would be fantastic if Dask could do this automatically\r\n\r\n---\r\n\r\n## The Problem\r\n\r\nSee https://github.com/microsoft/PlanetaryComputer/issues/12 for a full description and runnable example, but the high-level task is to create a median composite of some imagery. The data forms a logical array with dimensions `(time, y, x)` of shape, e.g. `(365, 1000, 1000)`. Let's suppose that logical array is created by reading and concatting many files, where each file represents a chunk like `(1, 500, 500)`. This problem will use `median` as the computation, but any computation where you want to rechunk to a pattern other than what's on disk would be helped by this feature request.\r\n\r\nCurrently, `Array.median` requires the contraction axis have a `chunksize=-1` (i.e. a single chunk). So our operation is roughly `read_data(...).rechunk(-1, \"auto\", \"auto\").median(\"time\")`.\r\n\r\nThis leads to a complex task graph. Here's what that looks like for a single chunk from that linked example in https://github.com/microsoft/PlanetaryComputer/issues/12.\r\n\r\n![image](https://user-images.githubusercontent.com/1312546/147960589-f65f1b7d-4aa3-4430-a871-ac90be3275b4.png)\r\n\r\nEssentially, each worker\r\n\r\n1. Reads a \"large\" window (the whole file, with a single time step and large spatial component)\r\n2. Splits that large spatial component into many smaller components (to avoid blowing up memory on each chunk once `time` is consolidated)\r\n3. (in a distributed context): communicates the split chunks to whatever worker is gathering all the small chunks through time for that spatial region.\r\n\r\nIt's been greatly improved, but this type of communication-heavy workload still causes issues for the distributed scheduler, leading to high memory use and dying workers.\r\n\r\n## The workaround\r\n\r\nSome storage solutions (e.g. a collection of cloud-optimized GeoTIFFs) support \"windowed\" reads. With this, we're able to replace the \"single large read -> split -> communicate\" task graph with a much simpler one of \"many small reads + concat\" (no communication).  With the workaround, we get a task graph for a single output chunk like\r\n\r\n![image](https://user-images.githubusercontent.com/1312546/147961021-ac5af39d-c86e-476b-85f2-1769a295ff99.png)\r\n\r\nSince there's no communication, the memory usage is much lower and more predictable. The workaround is described in more detail in https://nbviewer.org/gist/TomAugspurger/c027408ae923222fab2a45d5109d114a.\r\n\r\n## The feature request\r\n\r\nCan Dask do this automatically? Where \"this\" means:\r\n\r\n1. Detect an I/O layer followed by a `.rechunk` layer\r\n2. Replace the two layers by a single layer that does the windowed reads + a concat?\r\n\r\nI'm not sure how feasible this is, but I figured I'd open this issue for discussion anyway.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1479817449/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1479941783",
        "html_url": "https://github.com/dask/dask/issues/6288#issuecomment-1479941783",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6288",
        "id": 1479941783,
        "node_id": "IC_kwDOAbcwm85YNh6X",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-03-22T17:02:22Z",
        "updated_at": "2023-03-22T17:02:22Z",
        "author_association": "MEMBER",
        "body": "> I'm not sure how feasible this is, but I figured I'd open this issue for discussion anyway.\r\n\r\nWe're lately looking again into https://github.com/dask/dask/issues/7933 and I expect us to push on this in the next couple of weeks/months. Part of this effort is to enable logical graph rewrites as you are suggesting here.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1479941783/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]