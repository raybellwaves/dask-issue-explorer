[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1126128842",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1126128842",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1126128842,
        "node_id": "IC_kwDOAbcwm85DH1zK",
        "user": {
            "login": "wence-",
            "id": 1126981,
            "node_id": "MDQ6VXNlcjExMjY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1126981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wence-",
            "html_url": "https://github.com/wence-",
            "followers_url": "https://api.github.com/users/wence-/followers",
            "following_url": "https://api.github.com/users/wence-/following{/other_user}",
            "gists_url": "https://api.github.com/users/wence-/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wence-/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wence-/subscriptions",
            "organizations_url": "https://api.github.com/users/wence-/orgs",
            "repos_url": "https://api.github.com/users/wence-/repos",
            "events_url": "https://api.github.com/users/wence-/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wence-/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-13T14:36:17Z",
        "updated_at": "2022-05-13T14:36:17Z",
        "author_association": "MEMBER",
        "body": "FWIW, here's a drive-by comment on the general expression design.\r\n\r\nI much prefer the pattern of separating the transformation passes that you might do on the expression from the classes that implement it. Right now you have `regenerate` and `optimize`, but `optimize` is a big hammer that it will likely make sense to split into multiple pieces. A lightweight visitor pattern with memoization of visits to shared nodes in the DAG might look something like:\r\n\r\n```python\r\nfrom functools import singledispatch\r\nclass MemoizingVisitor:\r\n    def __init__(self, func):\r\n        self.func = func\r\n        self.cache = {}\r\n\r\n    def __call__(self, expr):\r\n        try:\r\n            return self.cache[expr]\r\n        except KeyError:\r\n            return self.cache.setdefault(expr, func(expr, self))\r\n\r\n@singledispatch\r\ndef _optimize(expr, visitor):\r\n    raise AssertionError(f\"Unhandled type {type(expr)}\")\r\n\r\n@_optimize.register(TypeA)\r\ndef _(expr, visitor):\r\n    transformed_children = map(visitor, expr.children)\r\n    return expr.regenerate(transformed_children)\r\n\r\n...\r\n\r\ndef optimize(exprs):\r\n    visitor = MemoizingVisitor(_optimize)\r\n    return [visitor(expr) for expr in exprs]\r\n```\r\n\r\nYou could imagine writing the visitors as fixed points of the recursion and then tying the recursive knot outside, but that makes it slightly difficult to control the visitor order (pre- versus post-, or cutoff at some point).\r\n\r\nI like this approach though because it gives transparent handling of DAGs (as opposed to trees) without expanding the perceived size, and you can share the cache across transformations if wanted.\r\n\r\nThis relies on your expressions being hashable, so the structural part isn't allowed to be mutable.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1126128842/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1126576017",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1126576017",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1126576017,
        "node_id": "IC_kwDOAbcwm85DJi-R",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-13T23:25:47Z",
        "updated_at": "2022-05-13T23:26:00Z",
        "author_association": "MEMBER",
        "body": "Thanks for the feedback @wence-! I was definitely planning to clean up the regenerate/optimize traversal design. I just experimented with some quick changes based on your suggestion, and I agree that it is better to decouple traversal from the `CollectionOperation` class.  I still need to continue cleaning things up a lot more (graph generation is still a mess), but any/all design suggestions are welcome.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1126576017/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1131768796",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1131768796",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1131768796,
        "node_id": "IC_kwDOAbcwm85DdWvc",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T14:23:43Z",
        "updated_at": "2022-05-19T14:23:43Z",
        "author_association": "MEMBER",
        "body": "So, looking over this briefly my understanding is that the design here is ...\r\n\r\n1.  The same DataFrame class, useful for API\r\n2. A new Operation attribute which holds onto an expression tree and history\r\n3. This operation object has the relevant metadata like meta, divisions, and the graph\r\n4. Operations are replayable?\r\n\r\nEarlier you mentioned an idea where we removed the Mapping-style graph and instead treated the colleciton (or in this case operation) as that graph.  It seems like this is not implemented here yet, correct?  Do you have a plan here?\r\n\r\nStepping back a bit, I'm seeing a lot of low-level review on this PR, which is great.  However, I'm also curious about first thinking a bit  about the plan presented here and making larger changes first if we think that they're going to be useful.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1131768796/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1131946231",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1131946231",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1131946231,
        "node_id": "IC_kwDOAbcwm85DeCD3",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T16:42:12Z",
        "updated_at": "2022-05-19T16:42:12Z",
        "author_association": "MEMBER",
        "body": ">So, looking over this briefly my understanding is that the design here is ...\r\n> 1. The same DataFrame class, useful for API\r\n> 2. A new Operation attribute which holds onto an expression tree and history\r\n> 3. This operation object has the relevant metadata like meta, divisions, and the graph\r\n> 4. Operations are replayable?\r\n\r\nYes. This particular PR is experimenting with a few things that are likely to go away or change, but the primary concept that I do think is quite promising is the idea of adding a new `operation` attribute (or whatever name we can agree on).  The purpose of this attribute is to:\r\n\r\n1. Manage all relevant metadata for the collection (meta, divisions, whatever) so that the \u201cstate\u201d of a collection is completely defined by its current `operation` attribute\r\n2. Expose the necessary methods for low-level graph materialization\r\n3. Expose the necessary methods for \u201cregeneration\u201d (to simplify expression-tree optimization before a low-level graph is materialized)\r\n\r\nRight now, the state of a collection is completely decoupled from graph materialization (and optimization), and the overall idea here is to improve this pain point. Without doing something *like* this, I don\u2019t think we have much of a chance of ever supporting general graph optimization.\r\n\r\n>Earlier you mentioned an idea where we removed the Mapping-style graph and instead treated the collection (or in this case >operation) as that graph. It seems like this is not implemented here yet, correct? \r\n\r\nI think the answer to this is \u201cyes and no,\u201d but I may be misunderstanding.\r\n\r\nMy long-term vision was that the \u201coperation\u201d can replace the need for the HLG/Layer API altogether. However, my ideas for graph materialization do still require an operation to know how to generate the necessary graph to produce a specified set of output keys (which is still \u201cmapping\u201d like - even if the operation object is not a `Mapping`).\r\n\r\nAlthough my long-term vision was to replace HLGs, I don\u2019t think there is a practical path for completely bailing on HLG/Layers all at once.  In fact, one variation on the current POC is to allow a CollectionOperation to (optionally) manage its own HLG subgraph.  That is, we could lean on the graph-materialization logic we already have (for now), but use the cleaner CollectionOperation API for \"high-level\" optimization passes.\r\n\r\n>Do you have a plan here?\r\n\r\nThis PR is absolutely exploratory, and so I am not proposing a clear API or plan just yet. However, I do think I will be pushing hard for a design where the collection state and graph materialization logic live in the same place (like `operation`).\r\n\r\n>Stepping back a bit, I'm seeing a lot of low-level review on this PR, which is great. However, I'm also curious about first thinking a bit about the plan presented here and making larger changes first if we think that they're going to be useful.\r\n\r\nThe reviews so far have been very helpful to me. However, I agree that general design suggestions are most valuable at this point. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1131946231/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1132156257",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1132156257",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1132156257,
        "node_id": "IC_kwDOAbcwm85De1Vh",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T20:08:18Z",
        "updated_at": "2022-05-19T20:08:18Z",
        "author_association": "MEMBER",
        "body": ">  I don\u2019t think there is a practical path for completely bailing on HLG/Layers all at once.\r\n\r\nLet me push on this a little.  Why not?  If we think that this is a good idea, what would stop us from doing this to all of at least one of the major collections (dataframe, array) before pressing the green button?  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1132156257/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1132160133",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1132160133",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1132160133,
        "node_id": "IC_kwDOAbcwm85De2SF",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-19T20:11:44Z",
        "updated_at": "2022-05-19T20:11:44Z",
        "author_association": "MEMBER",
        "body": "> My long-term vision was that the \u201coperation\u201d can replace the need for the HLG/Layer API altogether. However, my ideas for graph materialization do still require an operation to know how to generate the necessary graph to produce a specified set of output keys (which is still \u201cmapping\u201d like - even if the operation object is not a Mapping).\r\n\r\nEvery operation could produce a mapping for the keys that define that operation.  We might not need a HLG as well though?  In my mind an objective of this work would be to _not_ have to create yet-another-system.  HLGs go away and get replaced by operations.  I would be sad if we had dataframe store operations store hlgs store layers store tasks.\r\n\r\n> However, I do think I will be pushing hard for a design where the collection state and graph materialization logic live in the same place (like operation).\r\n\r\n:+1: \r\n\r\n> The reviews so far have been very helpful to me. However, I agree that general design suggestions are most valuable at this point\r\n\r\nSounds great.  I like the idea of going back and forth.  I'd just want to make sure that at some point we take the learnings from this PR, take a step back, and propose a plan.  ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1132160133/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1135063314",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1135063314",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1135063314,
        "node_id": "IC_kwDOAbcwm85Dp7ES",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-23T19:33:58Z",
        "updated_at": "2022-05-23T19:33:58Z",
        "author_association": "MEMBER",
        "body": "**Update**: The current plan is to implement something similar to what I have here (and much more) in the `https://github.com/dask/dask/tree/collection-refactor` through multiple distinct PRs.  See general plan here: https://github.com/dask/dask/issues/9117",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1135063314/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1135215760",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1135215760",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1135215760,
        "node_id": "IC_kwDOAbcwm85DqgSQ",
        "user": {
            "login": "dhirschfeld",
            "id": 881019,
            "node_id": "MDQ6VXNlcjg4MTAxOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/881019?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhirschfeld",
            "html_url": "https://github.com/dhirschfeld",
            "followers_url": "https://api.github.com/users/dhirschfeld/followers",
            "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
            "repos_url": "https://api.github.com/users/dhirschfeld/repos",
            "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-23T22:58:46Z",
        "updated_at": "2022-05-23T22:58:46Z",
        "author_association": "NONE",
        "body": "It's great to see a lot of thought being put into fundamental improvements to the data structures! I was also very excited to see the design ideas around [high-level expressions](https://github.com/dask/dask/issues/7933) and so am wondering how (if at all) that fits into the work here?\r\n\r\nEven if they're off the table for now, it *might* be an idea to consider them in the design to make any future retro-fitting of expression graphs as easy / least disruptive as possible.\r\n\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1135215760/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1136166499",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1136166499",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1136166499,
        "node_id": "IC_kwDOAbcwm85DuIZj",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-24T16:48:35Z",
        "updated_at": "2022-05-24T16:48:35Z",
        "author_association": "MEMBER",
        "body": ">I was also very excited to see the design ideas around https://github.com/dask/dask/issues/7933 and so am wondering how (if at all) that fits into the work here?\r\n\r\nGood question @dhirschfeld !  The final goal of the proposed solution here is to capture the same behavior/features as a high-level expression system. However, the primary difference is in the proposed development path for getting to the final design (and the specifics of *where* the expression tree lives).\r\n\r\nThe general background here is that the current state of HighLevelGraph/Layer does not provide what we need for general \u201chigh-level\u201d optimization and/or efficient graph generation. There seem to be at least three different ways that we can attack these challenges:\r\n\r\n1. HLE-Focused Solution - Completely redesign the existing collection APIs to become high-level expressions themselves\r\n2. HLG/Layer-Focused Solution - Push information about the collection state into HLG/Layers and redefine the Layer contract to provide what we need for efficient graph generation/handling\r\n3. Something in the middle (i.e. This Proposal) - Incrementally move the collection APIs toward solution (1) by adding an HLE-like property to the existing collection APIs\r\n\r\nFrom my perspective, the original HLE plan stalled, because an incremental development path was just too difficult to articulate and justify.  @jcrist [described some of these challenges](https://github.com/dask/dask/issues/7933#issuecomment-1077914627), and pointed out that we might as well improve the existing HLG/Layer infrastructure to fit our needs (solution 2 above).  Therefore, when I set out to explore a tractable solution here, my original intention was to revise the existing HLG/Layer design. \r\n\r\nThe reason I eventually moved away from an HLG-based solution was that it was much easier for me to imagine an incremental development plan for something completely separate.  I am still very open to other solutions.  However, my gut tells me that we need to start by moving collection properties (like `meta`, `divisions`, etc) into the object that is responsible for graph materialization. My understanding is that this critical step is easiest for solution 3, but I could be wrong.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1136166499/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1136188273",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1136188273",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1136188273,
        "node_id": "IC_kwDOAbcwm85DuNtx",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-24T17:01:35Z",
        "updated_at": "2022-05-24T17:01:35Z",
        "author_association": "MEMBER",
        "body": "From my perspective these are all the same thing.  We're just trying to\nfind the least painful way to get to the same place :)\n\nOn Tue, May 24, 2022 at 11:48 AM Richard (Rick) Zamora <\n***@***.***> wrote:\n\n> I was also very excited to see the design ideas around #7933\n> <https://github.com/dask/dask/issues/7933> and so am wondering how (if at\n> all) that fits into the work here?\n>\n> Good question @dhirschfeld <https://github.com/dhirschfeld> ! The final\n> goal of the proposed solution here is to capture the same behavior/features\n> as a high-level expression system. However, the primary difference is in\n> the proposed development path for getting to the final design (and the\n> specifics of *where* the expression tree lives).\n>\n> The general background here is that the current state of\n> HighLevelGraph/Layer does not provide what we need for general \u201chigh-level\u201d\n> optimization and/or efficient graph generation. There seem to be at least\n> three different ways that we can attack these challenges:\n>\n>    1. HLE-Focused Solution - Completely redesign the existing collection\n>    APIs to become high-level expressions themselves\n>    2. HLG/Layer-Focused Solution - Push information about the collection\n>    state into HLG/Layers and redefine the Layer contract to provide what we\n>    need for efficient graph generation/handling\n>    3. Something in the middle (i.e. This Proposal) - Incrementally move\n>    the collection APIs toward solution (1) by adding an HLE-like property to\n>    the existing collection APIs\n>\n> From my perspective, the original HLE plan stalled, because an incremental\n> development path was just too difficult to articulate and justify. @jcrist\n> <https://github.com/jcrist> described some of these challenges\n> <https://github.com/dask/dask/issues/7933#issuecomment-1077914627>, and\n> pointed out that we might as well improve the existing HLG/Layer\n> infrastructure to fit our needs (solution 2 above). Therefore, when I set\n> out to explore a tractable solution here, my original intention was to\n> revise the existing HLG/Layer design.\n>\n> The reason I eventually moved away from an HLG-based solution was that it\n> was much easier for me to imagine an incremental development plan for\n> something completely separate. I am still very open to other solutions.\n> However, my gut tells me that we need to start by moving collection\n> properties (like meta, divisions, etc) into the object that is\n> responsible for graph materialization. My understanding is that this\n> critical step is easiest for solution 3, but I could be wrong.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/pull/9076#issuecomment-1136166499>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTH6MMMHLPMGF6E7HB3VLUB65ANCNFSM5VZIDNOA>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1136188273/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1136233538",
        "html_url": "https://github.com/dask/dask/pull/9076#issuecomment-1136233538",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9076",
        "id": 1136233538,
        "node_id": "IC_kwDOAbcwm85DuYxC",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-24T17:25:13Z",
        "updated_at": "2022-05-24T17:25:13Z",
        "author_association": "MEMBER",
        "body": ">From my perspective these are all the same thing.  We're just trying to\r\nfind the least painful way to get to the same place :)\r\n\r\nYep! The main differences are definitely in the \"pathway\" to the solution.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1136233538/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]