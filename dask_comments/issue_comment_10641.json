[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1822395718",
        "html_url": "https://github.com/dask/dask/issues/10641#issuecomment-1822395718",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10641",
        "id": 1822395718,
        "node_id": "IC_kwDOAbcwm85sn41G",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-22T09:25:04Z",
        "updated_at": "2023-11-22T09:25:04Z",
        "author_association": "MEMBER",
        "body": "This appears to be a problem with culling. cc @rjzamora \r\n\r\n```python-traceback\r\nKeyError                                  Traceback (most recent call last)\r\nCell In[1], line 13\r\n     10 a = dd.from_delayed([dask.delayed(make_df)() for n in range(1)], meta={'A': int, 'B': int})\r\n     11 b = dd.from_delayed([dask.delayed(process_df)(dask.delayed(make_df)()) for n in range(3)], meta={'A': int, 'B': int})\r\n---> 13 dd.merge(a, b, on='B').compute()\r\n\r\nFile ~/workspace/dask/dask/base.py:342, in DaskMethodsMixin.compute(self, **kwargs)\r\n    318 def compute(self, **kwargs):\r\n    319     \"\"\"Compute this dask collection\r\n    320 \r\n    321     This turns a lazy Dask collection into its in-memory equivalent.\r\n   (...)\r\n    340     dask.compute\r\n    341     \"\"\"\r\n--> 342     (result,) = compute(self, traverse=False, **kwargs)\r\n    343     return result\r\n\r\nFile ~/workspace/dask/dask/base.py:621, in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)\r\n    613     return args\r\n    615 schedule = get_scheduler(\r\n    616     scheduler=scheduler,\r\n    617     collections=collections,\r\n    618     get=get,\r\n    619 )\r\n--> 621 dsk = collections_to_dsk(collections, optimize_graph, **kwargs)\r\n    622 keys, postcomputes = [], []\r\n    623 for x in collections:\r\n\r\nFile ~/workspace/dask/dask/base.py:394, in collections_to_dsk(collections, optimize_graph, optimizations, **kwargs)\r\n    392 for opt, val in groups.items():\r\n    393     dsk, keys = _extract_graph_and_keys(val)\r\n--> 394     dsk = opt(dsk, keys, **kwargs)\r\n    396     for opt_inner in optimizations:\r\n    397         dsk = opt_inner(dsk, keys, **kwargs)\r\n\r\nFile ~/workspace/dask/dask/dataframe/optimize.py:27, in optimize(dsk, keys, **kwargs)\r\n     25     dsk = optimize_blockwise(dsk, keys=keys)\r\n     26     dsk = fuse_roots(dsk, keys=keys)\r\n---> 27 dsk = dsk.cull(set(keys))\r\n     29 # Do not perform low-level fusion unless the user has\r\n     30 # specified True explicitly. The configuration will\r\n     31 # be None by default.\r\n     32 if not config.get(\"optimization.fuse.active\"):\r\n\r\nFile ~/workspace/dask/dask/highlevelgraph.py:738, in HighLevelGraph.cull(self, keys)\r\n    736 output_keys = keys_set.intersection(layer.get_output_keys())\r\n    737 if output_keys:\r\n--> 738     culled_layer, culled_deps = layer.cull(output_keys, all_ext_keys)\r\n    739     # Update `keys` with all layer's external key dependencies, which\r\n    740     # are all the layer's dependencies (`culled_deps`) excluding\r\n    741     # the layer's output keys.\r\n    742     external_deps = set()\r\n\r\nFile ~/workspace/dask/dask/blockwise.py:592, in Blockwise.cull(self, keys, all_hlg_keys)\r\n    590     if key[0] == self.output:\r\n    591         output_blocks.add(key[1:])\r\n--> 592 culled_deps = self._cull_dependencies(all_hlg_keys, output_blocks)\r\n    593 out_size_iter = (self.dims[i] for i in self.output_indices)\r\n    594 if prod(out_size_iter) != len(culled_deps):\r\n\r\nFile ~/workspace/dask/dask/blockwise.py:562, in Blockwise._cull_dependencies(self, all_hlg_keys, output_blocks)\r\n    560         for out_coords in output_blocks:\r\n    561             key = (self.output,) + out_coords\r\n--> 562             valid_key_dep = io_dep[out_coords]\r\n    563             key_deps[key] |= {valid_key_dep}\r\n    565 return key_deps\r\n\r\nFile ~/workspace/dask/dask/blockwise.py:176, in BlockwiseDepDict.__getitem__(self, idx)\r\n    174 if flat_idx in self.mapping:\r\n    175     return self.mapping[flat_idx]\r\n--> 176 raise err\r\n\r\nFile ~/workspace/dask/dask/blockwise.py:165, in BlockwiseDepDict.__getitem__(self, idx)\r\n    163 def __getitem__(self, idx: tuple[int, ...]) -> Any:\r\n    164     try:\r\n--> 165         return self.mapping[idx]\r\n    166     except KeyError as err:\r\n    167         # If a DataFrame collection was converted\r\n    168         # to an Array collection, the dimesion of\r\n   (...)\r\n    171         # use `self.numblocks` to check for a key\r\n    172         # match in the leading elements of `idx`\r\n    173         flat_idx = idx[: len(self.numblocks)]\r\n\r\nKeyError: (1,)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1822395718/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]