[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725495134",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725495134",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725495134,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTQ5NTEzNA==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T15:41:17Z",
        "updated_at": "2020-11-11T15:41:17Z",
        "author_association": "MEMBER",
        "body": "I can reproduce this locally and I think the issue is actually with `da.unique`. I tried to compute `unique_indices` and was able to kill my workers. I think `return_inverse` might be causing the issue here. \r\n\r\n```python\r\nchn0 = np.random.randint(0, 500, (63, 300, 300), dtype=np.uint16)\r\nsource = da.from_array(chn0)\r\n\r\n_, src_unique_indices, src_counts = da.unique(source.ravel(), return_inverse=True, return_counts=True)\r\nsrc_unique_indices.compute()\r\n```\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725495134/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725516096",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725516096",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725516096,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTUxNjA5Ng==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T16:17:48Z",
        "updated_at": "2020-11-11T16:17:48Z",
        "author_association": "MEMBER",
        "body": "Pinging @jakirkham on this since it seems like you implemented `da.unique`.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725516096/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725586231",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725586231",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725586231,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTU4NjIzMQ==",
        "user": {
            "login": "chrisroat",
            "id": 1053153,
            "node_id": "MDQ6VXNlcjEwNTMxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1053153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrisroat",
            "html_url": "https://github.com/chrisroat",
            "followers_url": "https://api.github.com/users/chrisroat/followers",
            "following_url": "https://api.github.com/users/chrisroat/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrisroat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrisroat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrisroat/subscriptions",
            "organizations_url": "https://api.github.com/users/chrisroat/orgs",
            "repos_url": "https://api.github.com/users/chrisroat/repos",
            "events_url": "https://api.github.com/users/chrisroat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrisroat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T18:26:45Z",
        "updated_at": "2020-11-11T18:26:45Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for finding the root issue.  I'm still trying to wrap my head around the code, but here's a better minimum example.  The graph, below, isn't complex.\r\n\r\n```python\r\nimport dask\r\nimport dask.array as da\r\narr = da.random.randint(500, size=10**6)\r\n_, indices = da.unique(arr, return_inverse=True)\r\nindices_c = indices.compute()\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1053153/98849558-43288780-2408-11eb-8927-84bfb6ef4201.png)\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725586231/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725612370",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725612370",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725612370,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTYxMjM3MA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T19:20:52Z",
        "updated_at": "2020-11-11T19:20:52Z",
        "author_association": "MEMBER",
        "body": "It's worth noting that `Delayed` forces all chunks into a single chunk. If that single chunk doesn't fit in memory, that would potentially cause issues. Is it possible to avoid using `Delayed` and do something else?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725612370/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725624136",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725624136",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725624136,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTYyNDEzNg==",
        "user": {
            "login": "chrisroat",
            "id": 1053153,
            "node_id": "MDQ6VXNlcjEwNTMxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1053153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrisroat",
            "html_url": "https://github.com/chrisroat",
            "followers_url": "https://api.github.com/users/chrisroat/followers",
            "following_url": "https://api.github.com/users/chrisroat/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrisroat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrisroat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrisroat/subscriptions",
            "organizations_url": "https://api.github.com/users/chrisroat/orgs",
            "repos_url": "https://api.github.com/users/chrisroat/repos",
            "events_url": "https://api.github.com/users/chrisroat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrisroat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T19:44:50Z",
        "updated_at": "2020-11-11T19:46:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "That `delayed` call is intended to fit in memory.  It works as long as an array of unique values fits in memory (which is fine for arrays with dtype up to uint16).  I have checks in my actual code to enforce this.  It's a bottleneck, but I believe it is necessary.\r\n\r\nThe culprit for the memory use looks to be the following during the inverse calculation.  The `ar` variable is the incoming array, and the `out[\"values\"]` is the list of unique elements. So it creates a size (num_orig_array_elements, num_unique_elements) array of int64.  For the example with 1M elements using 500 values, that's a few GB.  My data has far more unique values.\r\nhttps://github.com/dask/dask/blob/3b1303f83a463549fac74a0657e7b67395d5ba12/dask/array/routines.py#L1058-L1059\r\n\r\nI don't know if there is a different approach, but will think on it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725624136/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725684022",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725684022",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725684022,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTY4NDAyMg==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T21:58:08Z",
        "updated_at": "2020-11-11T21:58:08Z",
        "author_association": "MEMBER",
        "body": "There is a comment in the `unique` code that it could be rewritten using a tree reduction approach. Maybe now's the time?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725684022/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725696235",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725696235",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725696235,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTY5NjIzNQ==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T22:27:29Z",
        "updated_at": "2020-11-11T22:27:29Z",
        "author_association": "MEMBER",
        "body": "Yeah that's tracked as issue ( https://github.com/dask/dask/issues/2851 ). It's certainly a doable thing if someone has interest in doing that.\r\n\r\nI thought about bring it up. However as we are putting all of the data into a single chunk, which `unique` is running on, I don't think it would help.\r\n\r\nThis actually raises another question @chrisroat. Is there any reason not to just call `map_blocks` (or perhaps use `delayed`) with `np.unique` in this case? It seems like `da.unique` doesn't offer much for this use case that can't be easily accomplished some other way.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725696235/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725704738",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725704738",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725704738,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTcwNDczOA==",
        "user": {
            "login": "chrisroat",
            "id": 1053153,
            "node_id": "MDQ6VXNlcjEwNTMxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1053153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrisroat",
            "html_url": "https://github.com/chrisroat",
            "followers_url": "https://api.github.com/users/chrisroat/followers",
            "following_url": "https://api.github.com/users/chrisroat/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrisroat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrisroat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrisroat/subscriptions",
            "organizations_url": "https://api.github.com/users/chrisroat/orgs",
            "repos_url": "https://api.github.com/users/chrisroat/repos",
            "events_url": "https://api.github.com/users/chrisroat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrisroat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-11T22:49:54Z",
        "updated_at": "2020-11-11T22:49:54Z",
        "author_association": "CONTRIBUTOR",
        "body": "In this case, the `unique` call is over all the data, not just per-block.   It's the interpolation being done on a single chunk via delayed.\r\n\r\nI'll take a look at the tree reduction idea.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725704738/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/725934114",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-725934114",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 725934114,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTkzNDExNA==",
        "user": {
            "login": "chrisroat",
            "id": 1053153,
            "node_id": "MDQ6VXNlcjEwNTMxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1053153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chrisroat",
            "html_url": "https://github.com/chrisroat",
            "followers_url": "https://api.github.com/users/chrisroat/followers",
            "following_url": "https://api.github.com/users/chrisroat/following{/other_user}",
            "gists_url": "https://api.github.com/users/chrisroat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chrisroat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chrisroat/subscriptions",
            "organizations_url": "https://api.github.com/users/chrisroat/orgs",
            "repos_url": "https://api.github.com/users/chrisroat/repos",
            "events_url": "https://api.github.com/users/chrisroat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chrisroat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-12T08:47:06Z",
        "updated_at": "2020-11-12T08:47:06Z",
        "author_association": "CONTRIBUTOR",
        "body": "I took a peak at how this might work, and have to say that I don't fully follow all the meta and reduction code.\r\n\r\nFor the moment, I have the following which seems to be working, though not optimized or vetted on large data.  It's pieced together from some ideas on this and related threads.  I didn't figure out how to pass unknown-shapes around without triggering problems, so it conservatively passes around fixed-size histograms of size 256 or 65536.\r\nhttps://gist.github.com/chrisroat/7314ba14eeb28390349a9c9d97477b91\r\n\r\nI did make some attempts to fit it into the current reductions/routines....\r\n\r\nI tried first ignoring the return_xxx arguments, and seeing how we might approach a super simple unique via [reduction](https://github.com/dask/dask/blob/061613eb8ef983e6bc1d620ed43634d8a4f6e1af/dask/array/reductions.py#L49).  It straightforward to use `np.unique` (wrapped for `keepdims`) as the `chunk` and `aggregate` arguments.  \r\n\r\nI then tried the next level of complexity, using a structured array with \"values\" and \"counts\".  I believe this is where @jakirkham was going with the `_unique_internal` method.  It looks like:\r\n\r\n```python\r\ndef combine_unique(arr, axis=None, keepdims=None):\r\n    return _unique_internal(arr[\"values\"], None, arr[\"counts\"])\r\n\r\ndef unique(a, split_every=None):\r\n    a = a.ravel()\r\n    dt = [(\"values\", a.dtype), (\"counts\", np.intp)]\r\n    arr = np.empty(a.shape, dtype=dt)\r\n    arr[\"values\"] = a\r\n    arr[\"counts\"] = da.ones_like(a, dtype=np.intp)\r\n    result = reduction(\r\n        arr,\r\n        combine_unique,\r\n        combine_unique,\r\n        dtype=arr.dtype,\r\n        split_every=split_every,\r\n    )\r\n    # TODO: unpack result in the end.\r\n    return result\r\n```\r\nThe problem I run into is that in the reduction, I bump into `TypeError: cannot perform reduce with flexible type` here:\r\nhttps://github.com/dask/dask/blob/061613eb8ef983e6bc1d620ed43634d8a4f6e1af/dask/array/reductions.py#L331\r\n\r\nRegarding the inverse mapping, I presume that is done as a subsequent map_blocks after the values list has been created (as in my gist above).\r\n\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/725934114/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/726222416",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-726222416",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 726222416,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjIyMjQxNg==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-12T17:26:49Z",
        "updated_at": "2020-11-12T17:26:49Z",
        "author_association": "MEMBER",
        "body": "Basically it is complaining that structured `dtype`s can't be reduced\r\n\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: a = np.array([(0, 1.0)], dtype=[(\"a\", int), (\"b\", float)])\r\n\r\nIn [3]: a.sum()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-393d3db239ee> in <module>\r\n----> 1 a.sum()\r\n\r\n~/miniconda/envs/dask/lib/python3.8/site-packages/numpy/core/_methods.py in _sum(a, axis, dtype, out, keepdims, initial, where)\r\n     45 def _sum(a, axis=None, dtype=None, out=None, keepdims=False,\r\n     46          initial=_NoValue, where=True):\r\n---> 47     return umr_sum(a, axis, dtype, out, keepdims, initial, where)\r\n     48 \r\n     49 def _prod(a, axis=None, dtype=None, out=None, keepdims=False,\r\n\r\nTypeError: cannot perform reduce with flexible type\r\n```\r\n\r\nI think structured `dtype`s are unique to NumPy. It doesn't seem possible to create them with CuPy and I doubt Sparse supports them. Would suggest just special casing this when they show up. Can do a check like `meta.dtype.kind == \"V\"` to see if a structured `dtype` is present.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/726222416/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/727176266",
        "html_url": "https://github.com/dask/dask/issues/6828#issuecomment-727176266",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6828",
        "id": 727176266,
        "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzE3NjI2Ng==",
        "user": {
            "login": "sjperkins",
            "id": 3530212,
            "node_id": "MDQ6VXNlcjM1MzAyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3530212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sjperkins",
            "html_url": "https://github.com/sjperkins",
            "followers_url": "https://api.github.com/users/sjperkins/followers",
            "following_url": "https://api.github.com/users/sjperkins/following{/other_user}",
            "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions",
            "organizations_url": "https://api.github.com/users/sjperkins/orgs",
            "repos_url": "https://api.github.com/users/sjperkins/repos",
            "events_url": "https://api.github.com/users/sjperkins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sjperkins/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-11-14T09:49:50Z",
        "updated_at": "2020-11-14T09:49:50Z",
        "author_association": "MEMBER",
        "body": "I suspect the memory issues are similar to those described in https://github.com/dask/dask/issues/874, as unique creates a single output node for the values (similar to the mean computation in https://github.com/dask/dask/issues/874)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/727176266/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]