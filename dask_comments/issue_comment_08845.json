[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1079674006",
        "html_url": "https://github.com/dask/dask/issues/8845#issuecomment-1079674006",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8845",
        "id": 1079674006,
        "node_id": "IC_kwDOAbcwm85AWoSW",
        "user": {
            "login": "aomirolis",
            "id": 72865596,
            "node_id": "MDQ6VXNlcjcyODY1NTk2",
            "avatar_url": "https://avatars.githubusercontent.com/u/72865596?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aomirolis",
            "html_url": "https://github.com/aomirolis",
            "followers_url": "https://api.github.com/users/aomirolis/followers",
            "following_url": "https://api.github.com/users/aomirolis/following{/other_user}",
            "gists_url": "https://api.github.com/users/aomirolis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aomirolis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aomirolis/subscriptions",
            "organizations_url": "https://api.github.com/users/aomirolis/orgs",
            "repos_url": "https://api.github.com/users/aomirolis/repos",
            "events_url": "https://api.github.com/users/aomirolis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aomirolis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-26T12:15:51Z",
        "updated_at": "2022-03-26T12:15:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hi, I am new to this project but I would like to work on this issue.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1079674006/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1080333880",
        "html_url": "https://github.com/dask/dask/issues/8845#issuecomment-1080333880",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8845",
        "id": 1080333880,
        "node_id": "IC_kwDOAbcwm85AZJY4",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-28T08:13:21Z",
        "updated_at": "2022-03-28T08:14:31Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you @aomirolis . In this particular case if some core developer can confirm that the only place to change is where I suggest in `dd.concat` (points 1 and 2) and that my understanding is correct, I don't mind doing it myself. It'd be just a single change, and perhaps some test checking that things work.\r\n\r\nRegarding the `divisions` discussion and passing `divisions` to `from_pandas` (points 3 and 4), I'd also like to receive some feedback. Perhaps we could move those to specific feature demands.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1080333880/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1080676197",
        "html_url": "https://github.com/dask/dask/issues/8845#issuecomment-1080676197",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8845",
        "id": 1080676197,
        "node_id": "IC_kwDOAbcwm85Aac9l",
        "user": {
            "login": "bryanwweber",
            "id": 4396228,
            "node_id": "MDQ6VXNlcjQzOTYyMjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4396228?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bryanwweber",
            "html_url": "https://github.com/bryanwweber",
            "followers_url": "https://api.github.com/users/bryanwweber/followers",
            "following_url": "https://api.github.com/users/bryanwweber/following{/other_user}",
            "gists_url": "https://api.github.com/users/bryanwweber/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bryanwweber/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bryanwweber/subscriptions",
            "organizations_url": "https://api.github.com/users/bryanwweber/orgs",
            "repos_url": "https://api.github.com/users/bryanwweber/repos",
            "events_url": "https://api.github.com/users/bryanwweber/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bryanwweber/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-28T13:48:48Z",
        "updated_at": "2022-03-28T13:48:48Z",
        "author_association": "CONTRIBUTOR",
        "body": "> that do not have any overlap, but that naturally follow each other (so `ddf1.divisions[-1] == ddf2.divisions[0]`, and `ddf2.divisions[-1] == ddf3.divisions[0]`\r\n\r\nThis implies to me that they _do_ have overlap, since the last element of `ddf1` is the same as the first element of `ddf2`. Can you clarify about that?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1080676197/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1080698253",
        "html_url": "https://github.com/dask/dask/issues/8845#issuecomment-1080698253",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8845",
        "id": 1080698253,
        "node_id": "IC_kwDOAbcwm85AaiWN",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-28T14:06:41Z",
        "updated_at": "2022-03-28T14:17:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "They don't, because for the `i`-th partition, `divisions[i+1]` is supposed to be the first element that is **NOT** included in the index of the `i`-th dataframe. See for example the [documentation of set_index](https://docs.dask.org/en/latest/generated/dask.dataframe.DataFrame.set_index.html?highlight=set_index#dask.dataframe.DataFrame.set_index), when it says:\r\n\r\n> divisions: list, optional\r\nThe \u201cdividing lines\u201d used to split the new index into partitions. For divisions=[0, 10, 50, 100], there would be three output partitions, where the new index contained [0, 10), [10, 50), and [50, 100), respectively.\r\n\r\nHowever, in the specific [doc about partitions](https://docs.dask.org/en/latest/dataframe-design.html#partitions), it claims:\r\n\r\n> Divisions includes the minimum value of every partition\u2019s index and the maximum value of the last partition\u2019s index.\r\n\r\nWhich I interpret as **`divisions[-1]` is actually a value included in the last partition**. But this means an asymmetry: \r\n* All partitions are semi-open, so that their index values are in the semi-open range between `divisions[i]` (inclusive) and `divisions[i+1]` (exclusive).\r\n* Except for the last one, which ranges from `divisions[-2]` (inclusive) to `divisions[-1]` (also inclusive). \r\n\r\nSo in the example above, last partition would lie in `[50, 100]` and not in `[50, 100)`. This is why I suggest to unify things so that there's no ambiguity, either with:\r\n* 2 separate division arrays, one for the minimum value of each partition, and another one with the maximum value of each partition. \r\n* Not being ambiguous about whether `divisions[-1]` is present in data or not. If it's a value that must be present in data, an error should be raised if setting  `divisions[-1]` to a value that isn't really there. And if it's a value that isn't there, one has the problem that it can't be automatically inferred from data...\r\n\r\nIn any case, this doesn't affect the example I chose where `concat` doesn't work as expected, because the ambiguous behavior happens only for the last partition. All other partitions are clearly left-closed and right-open. You can play with data of your own to verify this is so.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1080698253/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1080993648",
        "html_url": "https://github.com/dask/dask/issues/8845#issuecomment-1080993648",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8845",
        "id": 1080993648,
        "node_id": "IC_kwDOAbcwm85Abqdw",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-28T18:24:25Z",
        "updated_at": "2022-03-28T18:24:25Z",
        "author_association": "MEMBER",
        "body": "Thanks for writing this up and thinking about how this can be better @jorloplaz. \r\n\r\nI tend to agree that keeping track of `min` and `max` would be more useful than keeping track of divisions. The more I have thought about divisions the more I am convinced that it is not reasonable to enforce that all partitions except the last one are unique. For instance it makes it impossible to split a partition where all the index values are the same into two partitions. \r\n\r\nIn terms of your original suggestions:\r\n\r\n> 1. Change the code of `concat` with `<=`.\r\n\r\nHow we calculate divisions internally is we calculate the min and max of every partition and then we take all the mins and the last max. So it seems a little risky to drop the `=`.\r\n\r\n> 2. See if there are other parts of code where this same error could be present.\r\n\r\nI'm sure there are.\r\n\r\n> 3. Think about whether `divisions[-1]` is really necessary. Do we need to have it? \r\n\r\nThis is a very interesting idea. But I don't really get how it would help in this case since if we only know the lower bound then there is no way to keep the divisions since we can't say anything about the overlap. \r\n\r\n> 4a. `from_pandas` should accept a `divisions` argument.\r\n\r\nThis seems totally reasonable.\r\n\r\n> 4b. If it doesn't receive `divisions` and turns out that the resulting `npartitions` isn't the one requested by the user, at least raise a warning.\r\n\r\nThis also seems reasonable.\r\n\r\n\r\n@aomirolis - this issue is pretty involved and it's going to take a while to arrive at a solution :smile: . I recommend looking for a [\"good first issue\" tag](https://github.com/dask/dask/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) if you are interested in contributing sometime in the near future.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1080993648/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1081584276",
        "html_url": "https://github.com/dask/dask/issues/8845#issuecomment-1081584276",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/8845",
        "id": 1081584276,
        "node_id": "IC_kwDOAbcwm85Ad6qU",
        "user": {
            "login": "jorloplaz",
            "id": 12827365,
            "node_id": "MDQ6VXNlcjEyODI3MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12827365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorloplaz",
            "html_url": "https://github.com/jorloplaz",
            "followers_url": "https://api.github.com/users/jorloplaz/followers",
            "following_url": "https://api.github.com/users/jorloplaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorloplaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorloplaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorloplaz/subscriptions",
            "organizations_url": "https://api.github.com/users/jorloplaz/orgs",
            "repos_url": "https://api.github.com/users/jorloplaz/repos",
            "events_url": "https://api.github.com/users/jorloplaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorloplaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-29T08:31:05Z",
        "updated_at": "2022-03-29T15:40:43Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for revising @jsignell . I think the problem here is that we're mixing several concepts into one issue. Let me try to decompose them, basing on your comments:\r\n\r\n> The more I have thought about divisions the more I am convinced that it is not reasonable to enforce that all partitions except the last one are unique.\r\n\r\nWell, my understanding is that we ensure uniqueness in order to accelerate searches, e.g.,  when indexing with `loc`. In my mind this is doing a kind of `bisect_left` of the value we're searching in the `divisions` list, then we know in which partition to look for that particular value, and then it's just calling `loc` on the particular dataframe that lies inside that partition. Is this so?\r\n\r\n> For instance it makes it impossible to split a partition where all the index values are the same into two partitions.\r\n\r\nTrue, but I think this is reasonable, because of the above. If several partitions could hold the same index value, then you wouldn't know easily in which ones to look for it, or you should look in all of them in a parallel way... Not sure if that's really convenient.\r\n\r\nAnyway, if it turns out that all the index values are the same, that column doesn't really make sense as an index, does it? At least in SQL terms of what an index should be.\r\n\r\nWhat can indeed happen is that as a result of this uniqueness, partition sizes are quite imbalanced in the dask dataframe, in the sense that there are partitions with many more rows than others. This is why in my company we coded a custom solution to try to rebalance this, by looking at `index.value_counts()` and making partitions as equally row-sized as possible, while also maintaining uniqueness (remember [my comment here](https://github.com/dask/dask/pull/8517#issuecomment-1050616485)).\r\n\r\nIn short, I think that uniqueness is a good idea, but it has to be complemented with some smart rebalancing so that partition `len`s are reasonably similar.\r\n\r\nTurning back to the `concat` problem:\r\n\r\n> How we calculate divisions internally is we calculate the min and max of every partition and then we take all the mins and the last max. So it seems a little risky to drop the =.\r\n\r\nIn this case I'm trying to concatenate several dataframes, each of which has data for a different day. And those are consecutive days, so clearly the resulting divisions should be the concatenation of the divisions of each dataframe. \r\n\r\nIn other words, for my example it'd be absolutely correct that the execution flow entered the `if all(...)` and then called `stack_partitions`. But it doesn't because there's a `<` in the condition and not a `<=`!\r\n\r\nThe thing is that there's an inconsistency in `divisions` that is causing these troubles:\r\n* If Dask infers them internally, it's true that it's as you say: all the `min`s and the last `max`. Note that **in this case `divisions[-1]` is included in the last partition**.\r\n* If we set them manually (e.g., `divisions` passed on to `set_index`), **it isn't checked that `divisions[-1]` is really the `max` of the last partition. Actually, the [doc](https://docs.dask.org/en/latest/generated/dask.dataframe.DataFrame.set_index.html?highlight=set_index) encourages that it's a value that isn't there!**\r\n\r\nI reproduce my example here. **Notice how I passed `'2019-01-11'` to be `divisions[-1]`, and it's set directly in the dataframe. But the `max` is `'2019-01-10'`!**\r\n\r\n```python\r\n>>> ddf.compute()\r\n            col1  col2\r\ndate                  \r\n2019-01-01     0     9\r\n2019-01-02     1     8\r\n2019-01-03     2     7\r\n2019-01-04     3     6\r\n2019-01-05     4     5\r\n2019-01-06     5     4\r\n2019-01-07     6     3\r\n2019-01-08     7     2\r\n2019-01-09     8     1\r\n2019-01-10     9     0\r\n>>> ddf.divisions\r\n(Timestamp('2019-01-01 00:00:00'), Timestamp('2019-01-02 00:00:00'), Timestamp('2019-01-03 00:00:00'), Timestamp('2019-01-04 00:00:00'), Timestamp('2019-01-05 00:00:00'), Timestamp('2019-01-06 00:00:00'), Timestamp('2019-01-07 00:00:00'), Timestamp('2019-01-08 00:00:00'), Timestamp('2019-01-09 00:00:00'), Timestamp('2019-01-10 00:00:00'), Timestamp('2019-01-11 00:00:00'))\r\n```\r\n\r\nSo, the decomposition of this issue I think is:\r\n\r\n1. Establishing whether `divisions[-1]` should be the `max` of the last partition or not:\r\n    * If it should be, then the current `concat` code with `<` is correct. If there's no overlap, it should hold that `dfs[i].divisions[-1] < dfs[i+1].divisions[0]` and we can close this issue when we've covered points 2 and 3 below.\r\n    * If it shouldn't be, then it would suffice with `<=`.\r\n2. If it should be, then when passing `divisions` as in `set_index`, **an error should be raised if what is passed doesn't comply with this logic of \"the min of each partition and the last max\". In particular, the last division passed should be a value that is present in the data!**\r\n3. Once this logic is guaranteed, make `from_pandas` support a `divisions` argument.\r\n4. (Independently from all the above) Reconsidering whether `divisions` should be a single or a double array, and whether partitions should be unique or not.\r\n\r\nDo you agree?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1081584276/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]