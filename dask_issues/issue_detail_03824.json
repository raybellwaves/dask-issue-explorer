{
    "url": "https://api.github.com/repos/dask/dask/issues/3824",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/3824/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/3824/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/3824/events",
    "html_url": "https://github.com/dask/dask/issues/3824",
    "id": 345227530,
    "node_id": "MDU6SXNzdWUzNDUyMjc1MzA=",
    "number": 3824,
    "title": "Chaining slicing one dask array with another dask array",
    "user": {
        "login": "DPeterK",
        "id": 3473068,
        "node_id": "MDQ6VXNlcjM0NzMwNjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3473068?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DPeterK",
        "html_url": "https://github.com/DPeterK",
        "followers_url": "https://api.github.com/users/DPeterK/followers",
        "following_url": "https://api.github.com/users/DPeterK/following{/other_user}",
        "gists_url": "https://api.github.com/users/DPeterK/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DPeterK/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DPeterK/subscriptions",
        "organizations_url": "https://api.github.com/users/DPeterK/orgs",
        "repos_url": "https://api.github.com/users/DPeterK/repos",
        "events_url": "https://api.github.com/users/DPeterK/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DPeterK/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 1342304743,
            "node_id": "MDU6TGFiZWwxMzQyMzA0NzQz",
            "url": "https://api.github.com/repos/dask/dask/labels/core",
            "name": "core",
            "color": "000000",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-07-27T13:32:25Z",
    "updated_at": "2020-04-30T13:46:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I don't seem to be able to chain multiple slices of one dask array with another (without realising the intermediate result):\r\n\r\n```python\r\nd = da.from_array(np.arange(16), chunks=-1)\r\ne = da.from_array(np.arange(16) + 10, chunks=-1)\r\nf = d[e > 15]\r\nf\r\ndask.array<getitem, shape=(nan,), dtype=int64, chunksize=(nan,)>\r\ng = da.from_array(np.arange(6), chunks=-1)\r\nf[g > 4]\r\n```\r\n\r\n```python-traceback\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-12-4212770cc0ff> in <module>()\r\n----> 1 f[g > 4]\r\n\r\n~/miniconda3/envs/scitools_dev/lib/python3.6/site-packages/dask/array/core.py in __getitem__(self, index)\r\n   1375             self, index2 = slice_with_int_dask_array(self, index2)\r\n   1376         if any(isinstance(i, Array) and i.dtype == bool for i in index2):\r\n-> 1377             self, index2 = slice_with_bool_dask_array(self, index2)\r\n   1378 \r\n   1379         if all(isinstance(i, slice) and i == slice(None) for i in index2):\r\n\r\n~/miniconda3/envs/scitools_dev/lib/python3.6/site-packages/dask/array/slicing.py in slice_with_bool_dask_array(x, index)\r\n    989 \r\n    990     if len(index) == 1 and index[0].ndim == x.ndim:\r\n--> 991         y = elemwise(getitem, x, *index, dtype=x.dtype)\r\n    992         name = 'getitem-' + tokenize(x, index)\r\n    993         dsk = {(name, i): k for i, k in enumerate(core.flatten(y.__dask_keys__()))}\r\n\r\n~/miniconda3/envs/scitools_dev/lib/python3.6/site-packages/dask/array/core.py in elemwise(op, *args, **kwargs)\r\n   3430     shapes = [getattr(arg, 'shape', ()) for arg in args]\r\n   3431     shapes = [s if isinstance(s, Iterable) else () for s in shapes]\r\n-> 3432     out_ndim = len(broadcast_shapes(*shapes))   # Raises ValueError if dimensions mismatch\r\n   3433     expr_inds = tuple(range(out_ndim))[::-1]\r\n   3434 \r\n\r\n~/miniconda3/envs/scitools_dev/lib/python3.6/site-packages/dask/array/core.py in broadcast_shapes(*shapes)\r\n   3402         if any(i not in [-1, 0, 1, dim] and not np.isnan(i) for i in sizes):\r\n   3403             raise ValueError(\"operands could not be broadcast together with \"\r\n-> 3404                              \"shapes {0}\".format(' '.join(map(str, shapes))))\r\n   3405         out.append(dim)\r\n   3406     return tuple(reversed(out))\r\n\r\nValueError: operands could not be broadcast together with shapes (nan,) (6,)\r\n```\r\n\r\nIt looks like the chunks of the intermediate result aren't being calculated (correctly?), which is preventing following operations.\r\n\r\nIs there a way to achieve this indexing in dask?\r\n\r\nAs per the suggestion in #3096, I tried reproducing the indexing using `map_blocks` but that also didn't work:\r\n\r\n```python\r\nfmb = da.map_blocks(lambda d, e: d[e > 15], chunks=(3,))\r\n```\r\n```python-traceback\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-30-7b39e2419a05> in <module>()\r\n----> 1 fmb = da.map_blocks(lambda d, e: d[e > 15], chunks=(3,))\r\n\r\n~/miniconda3/envs/scitools_dev/lib/python3.6/site-packages/dask/array/core.py in map_blocks(func, *args, **kwargs)\r\n    709     numblocks = {a.name: a.numblocks for a in arrs}\r\n    710     arginds = list(concat(argpairs))\r\n--> 711     out_ind = tuple(range(max(a.ndim for a in arrs)))[::-1]\r\n    712 \r\n    713     if has_keyword(func, 'block_id'):\r\n\r\nValueError: max() arg is an empty sequence\r\n```\r\n\r\nI'm using dask v0.18.2.\r\n\r\nNote: my underlying use-case is chaining multiple lazy array operations on large Iris cubes.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/3824/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/3824/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}