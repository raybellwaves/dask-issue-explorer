[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/521364486",
        "html_url": "https://github.com/dask/dask/issues/5278#issuecomment-521364486",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5278",
        "id": 521364486,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTM2NDQ4Ng==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-14T18:31:26Z",
        "updated_at": "2019-08-14T18:31:26Z",
        "author_association": "MEMBER",
        "body": "@pentschev it looks like we now require user defined functions to accept a\ncompute_meta= keyword.  Do you know if there is a way where we can avoid\nthis?\n\nOn Wed, Aug 14, 2019 at 1:50 PM Stephanie Gott <notifications@github.com>\nwrote:\n\n> Ran into this error while attempting to use\n> dask.array.reductions.reduction to wrap numpy.ma.median. This only\n> happens when axis=(0,1) or axis=(2,3) or similar. Does not happen with\n> axis=0 or similar.\n>\n> Traceback (most recent call last):\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/dask/array/reductions.py\", line 304, in partial_reduce\n>     meta = func(reduced_meta, computing_meta=True)\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/toolz/functoolz.py\", line 486, in __call__\n>     ret = self.first(*args, **kwargs)\n> TypeError: _concatenate2() got an unexpected keyword argument 'computing_meta'\n>\n> During handling of the above exception, another exception occurred:\n>\n> Traceback (most recent call last):\n>   File \"test_reduction.py\", line 14, in <module>\n>     keepdims=True\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/dask/array/reductions.py\", line 188, in reduction\n>     reduced_meta=reduced_meta,\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/dask/array/reductions.py\", line 253, in _tree_reduce\n>     reduced_meta=reduced_meta,\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/dask/array/reductions.py\", line 307, in partial_reduce\n>     meta = func(reduced_meta)\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/toolz/functoolz.py\", line 488, in __call__\n>     ret = f(ret)\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/numpy/ma/extras.py\", line 687, in median\n>     keepdims=keepdims)\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/numpy/lib/function_base.py\", line 3497, in median\n>     overwrite_input=overwrite_input)\n>   File \"/home/stephanie/.local/lib/python3.6/site-packages/numpy/lib/function_base.py\", line 3399, in _ureduce\n>     a = a.reshape(a.shape[:nkeep] + (-1,))\n> ValueError: cannot reshape array of size 0 into shape (0,0,newaxis)\n>\n> Can be reproduced with the following code:\n>\n> import dask.array as da\n> import numpy as np\n>\n> arr = da.from_array(np.arange(384).reshape(3,4,4,8)).rechunk((1,1,4,8))\n>\n> reduced = da.reductions.reduction(\n>         arr,\n>         chunk=lambda arr, axis, keepdims: arr,\n>         aggregate=np.ma.median,\n>         split_every={ax: arr.shape[ax] for ax in range(len(arr.shape))},\n>         concatenate=True,\n>         dtype=np.int64,\n>         axis=(0,1),\n>         keepdims=True\n> )\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/5278?email_source=notifications&email_token=AACKZTHFPTY4N3P4K7RP66DQERAU7A5CNFSM4ILXLU42YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HFIRJRQ>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AACKZTFWUOGRKENKFF2MT4TQERAU7ANCNFSM4ILXLU4Q>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/521364486/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/521413880",
        "html_url": "https://github.com/dask/dask/issues/5278#issuecomment-521413880",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5278",
        "id": 521413880,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTQxMzg4MA==",
        "user": {
            "login": "pentschev",
            "id": 4398246,
            "node_id": "MDQ6VXNlcjQzOTgyNDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4398246?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pentschev",
            "html_url": "https://github.com/pentschev",
            "followers_url": "https://api.github.com/users/pentschev/followers",
            "following_url": "https://api.github.com/users/pentschev/following{/other_user}",
            "gists_url": "https://api.github.com/users/pentschev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pentschev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pentschev/subscriptions",
            "organizations_url": "https://api.github.com/users/pentschev/orgs",
            "repos_url": "https://api.github.com/users/pentschev/repos",
            "events_url": "https://api.github.com/users/pentschev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pentschev/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-14T20:51:51Z",
        "updated_at": "2019-08-14T20:51:51Z",
        "author_association": "MEMBER",
        "body": "Sure, the user could add the `compute_meta=` keyword in the `chunk`/`aggregate` functions that would simply return the input array, which is probably only required in a few more complex cases.\r\n\r\nHowever, the issue here isn't due to the user defined functions, but that `np.ma.median` doesn't work well with 0-length dimension arrays. Ideally, the fix would live there, but that would take some time for a release, though I think we should raise an issue (but ultimately, I suspect we'll be the ones who will have to submit a PR).\r\n\r\nBesides the issue above, I think we have a case that we didn't foresee. The way we compute meta in https://github.com/dask/dask/blob/master/dask/array/reductions.py#L303-L310, means we handle `TypeError` if we don't have a `computing_meta=` keyword, and `pass` if the function raises a `ValueError`. In the case here we have a partial function https://github.com/dask/dask/blob/master/dask/array/reductions.py#L243-L245 where `_concatenate2` raises a `TypeError` and later `np.ma.median` raises a `ValueError`.\r\n\r\nI see two options here: we add `computing_meta` to `_contenate2` (but it won't do anything), or making an uglier exception handling:\r\n\r\n```python\r\n        try:\r\n            meta = func(reduced_meta, computing_meta=True)\r\n        # no meta keyword argument exists for func, and it isn't required\r\n        except TypeError:\r\n            try:\r\n                meta = func(reduced_meta)\r\n            except:\r\n                pass\r\n        # when no work can be computed on the empty array (e.g., func is a ufunc)\r\n        except ValueError:\r\n            pass\r\n```\r\n\r\nI can't really think of a cleaner way of doing it right now. Can you think of any @mrocklin?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/521413880/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]