[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1124227170",
        "html_url": "https://github.com/dask/dask/issues/9047#issuecomment-1124227170",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9047",
        "id": 1124227170,
        "node_id": "IC_kwDOAbcwm85DAlhi",
        "user": {
            "login": "pavithraes",
            "id": 33131404,
            "node_id": "MDQ6VXNlcjMzMTMxNDA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/33131404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pavithraes",
            "html_url": "https://github.com/pavithraes",
            "followers_url": "https://api.github.com/users/pavithraes/followers",
            "following_url": "https://api.github.com/users/pavithraes/following{/other_user}",
            "gists_url": "https://api.github.com/users/pavithraes/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pavithraes/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pavithraes/subscriptions",
            "organizations_url": "https://api.github.com/users/pavithraes/orgs",
            "repos_url": "https://api.github.com/users/pavithraes/repos",
            "events_url": "https://api.github.com/users/pavithraes/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pavithraes/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-11T19:52:34Z",
        "updated_at": "2022-05-11T19:52:34Z",
        "author_association": "MEMBER",
        "body": "@multimeric Thanks for opening this issue! I agree it'll be a helpful feature. :)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1124227170/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1137231584",
        "html_url": "https://github.com/dask/dask/issues/9047#issuecomment-1137231584",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9047",
        "id": 1137231584,
        "node_id": "IC_kwDOAbcwm85DyMbg",
        "user": {
            "login": "douglasdavis",
            "id": 3202090,
            "node_id": "MDQ6VXNlcjMyMDIwOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3202090?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/douglasdavis",
            "html_url": "https://github.com/douglasdavis",
            "followers_url": "https://api.github.com/users/douglasdavis/followers",
            "following_url": "https://api.github.com/users/douglasdavis/following{/other_user}",
            "gists_url": "https://api.github.com/users/douglasdavis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/douglasdavis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/douglasdavis/subscriptions",
            "organizations_url": "https://api.github.com/users/douglasdavis/orgs",
            "repos_url": "https://api.github.com/users/douglasdavis/repos",
            "events_url": "https://api.github.com/users/douglasdavis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/douglasdavis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-25T13:21:25Z",
        "updated_at": "2022-05-25T13:23:43Z",
        "author_association": "MEMBER",
        "body": "The new `from_map` dask.dataframe API includes a `label=` named argument. Perhaps this is a place to start.\r\n\r\nUser facing:\r\n\r\n```python\r\nwith dask.task_label(\"my-label\"):\r\n    a = df.groupby(\"x\")\r\n```\r\n\r\nImplementation:\r\nperhaps in `dask.config`?\r\n\r\n```python\r\nlabel_override: str | None = None\r\n\r\ndef get_label_override() -> str | None:\r\n    global label_override\r\n    return label_override\r\n\r\ndef set_label_override(label: str | None):\r\n    global label_override\r\n    label_override = label\r\n\r\n@contextlib.contextmanager\r\ndef task_label(label: str):\r\n    try:\r\n        set_label_override(label)\r\n        yield\r\n    finally:\r\n        set_label_override(None)\r\n```\r\n\r\nand in `from_map` for example\r\n```python\r\ndef from_map(..., label=None, ...):\r\n    # ...\r\n    token = tokenize(...)\r\n    if label is None:\r\n        label = dask.config.get_label_override() or \"default-label\"\r\n        #       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `None` if the context manager isn't used\r\n    name = f\"{label}-{token}\"\r\n    # ...\r\n```\r\n\r\nThe only difficulty I see in adding this feature is the number if places where task prefixes/labels are defined. It's basically in every function body that creates a new task! For example `groupby` has multiple places where code would need to be adjusted in the style of my example `from_map` above.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1137231584/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1138122094",
        "html_url": "https://github.com/dask/dask/issues/9047#issuecomment-1138122094",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9047",
        "id": 1138122094,
        "node_id": "IC_kwDOAbcwm85D1l1u",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-26T03:48:13Z",
        "updated_at": "2022-05-26T03:48:13Z",
        "author_association": "CONTRIBUTOR",
        "body": "I see that it would be annoying to change in so many places, but it sounds like a good code refactor to have a `def make_task_id(label: str, token: str) -> str` function in a central place so that you can adjust this behaviour in one single place.\r\n\r\nI think a good architecture for Dask futures and collections would be the event emitter pattern, so that you can listen to a given collection, and it emits the tasks as events whenever it generates them (and copies of the collection also copy its listeners). \r\nThen the user could do something like building up a dictionary of `task-id: label`, and this could even be added as a utility class in dask, which might bypass the need to actually change the ID-generation logic. For example:\r\n```python\r\nddf = dd.from_pandas(df, ...)\r\n\r\ncurrent_label = \"\"\r\ntask_labels = {}\r\n\r\n@ddf.on(\"new_task\")\r\ndef new_task(task_id):\r\n    task_labels[task_id] = current_label\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1138122094/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1210932751",
        "html_url": "https://github.com/dask/dask/issues/9047#issuecomment-1210932751",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/9047",
        "id": 1210932751,
        "node_id": "IC_kwDOAbcwm85ILV4P",
        "user": {
            "login": "multimeric",
            "id": 5019367,
            "node_id": "MDQ6VXNlcjUwMTkzNjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/multimeric",
            "html_url": "https://github.com/multimeric",
            "followers_url": "https://api.github.com/users/multimeric/followers",
            "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
            "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
            "organizations_url": "https://api.github.com/users/multimeric/orgs",
            "repos_url": "https://api.github.com/users/multimeric/repos",
            "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
            "received_events_url": "https://api.github.com/users/multimeric/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-08-10T16:09:46Z",
        "updated_at": "2022-08-10T16:09:46Z",
        "author_association": "CONTRIBUTOR",
        "body": "Another important use case for this feature that I forgot to mention is error handling. Frequently you will get an error like this, and it won't be trivial to work out what part of your code is actually to blame, especially because a function like `concat` might not even have been called directly by the user, and it might be called by a different dask function:\r\n```\r\nWARNING:distributed.worker:Compute Failed\r\nKey:       ('concat-5212a0953270f5ee1a5f01741a676409', 0)\r\nFunction:  concat_and_check\r\n```\r\n\r\nAnd the call stack is of course of no help, because it will just point to the part of your code where you asked dask to evaluate the graph, which might be a `.compute()` call or similar.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1210932751/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]