[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/512905122",
        "html_url": "https://github.com/dask/dask/issues/5113#issuecomment-512905122",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5113",
        "id": 512905122,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjkwNTEyMg==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-18T17:09:39Z",
        "updated_at": "2019-07-18T17:09:39Z",
        "author_association": "MEMBER",
        "body": "IIUC, you're asking for something like predicate pushdown where\r\n\r\n```python\r\ndf.apply(func).get_partition(0).compute()\r\n```\r\n\r\nis re-written as\r\n\r\n```python\r\ndf.get_partition(0).apply(func).compute()\r\n```\r\n\r\nThat's not possible today. I don't know how possible it is in general for user-defined functions, because we don't necessarily know that that rewrite is valid.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/512905122/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/512906368",
        "html_url": "https://github.com/dask/dask/issues/5113#issuecomment-512906368",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5113",
        "id": 512906368,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjkwNjM2OA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-18T17:13:16Z",
        "updated_at": "2019-07-18T17:13:16Z",
        "author_association": "MEMBER",
        "body": "Although... perhaps we achieve something like that today.\r\n\r\n```python\r\nIn [20]: df = dd.from_pandas(pd.Series(range(100)), 2).to_frame(name='a')\r\n\r\nIn [21]: a = df.assign(b=1).head(compute=False)\r\n\r\nIn [22]: a.visualize(optimize_graph=True)\r\nOut[22]: <IPython.core.display.Image object>\r\n```\r\n\r\n![mydask](https://user-images.githubusercontent.com/1312546/61477649-5d0da380-a955-11e9-8dc2-9ac5466c3d18.png)\r\n\r\nThat shows just the first partition's worth of operations are actually done Can you check your computation?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/512906368/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/512912934",
        "html_url": "https://github.com/dask/dask/issues/5113#issuecomment-512912934",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5113",
        "id": 512912934,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjkxMjkzNA==",
        "user": {
            "login": "ddebernardy",
            "id": 225259,
            "node_id": "MDQ6VXNlcjIyNTI1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/225259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ddebernardy",
            "html_url": "https://github.com/ddebernardy",
            "followers_url": "https://api.github.com/users/ddebernardy/followers",
            "following_url": "https://api.github.com/users/ddebernardy/following{/other_user}",
            "gists_url": "https://api.github.com/users/ddebernardy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ddebernardy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ddebernardy/subscriptions",
            "organizations_url": "https://api.github.com/users/ddebernardy/orgs",
            "repos_url": "https://api.github.com/users/ddebernardy/repos",
            "events_url": "https://api.github.com/users/ddebernardy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ddebernardy/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-18T17:31:20Z",
        "updated_at": "2019-07-18T17:35:27Z",
        "author_association": "NONE",
        "body": "@TomAugspurger: Something more like this, actually:\r\n\r\nIf I'm not mistaking, calling `head()` or `tail()` triggers the computation and returns a Pandas dataframe with the relevant records. I'm not privy with Dask's internals but it seems like `head()` could iterate through the underlying (Pandas?) partitions and bail as soon as it found enough records, and `tail()` could similarly iterate through partitions in reverse order.\r\n\r\nThere also might be an underlying optimization that's missing over in Pandas, too, whereby Pandas should be bailing early. (I haven't checked the code.)\r\n\r\nYou did that graph using iPython, correct?\r\n\r\nWhat I'm doing specifically is:\r\n\r\n```python\r\n\r\ndef add_url_parts(record):\r\n    full_url = urljoin(record.url, record.href)\r\n    record['full_href'] = full_url\r\n    parts = urlsplit(full_url)\r\n    for part in ('netloc', 'path', 'query', 'fragment'):\r\n        record[part] = getattr(parts, part, np.nan)\r\n    return record\r\n\r\ndef process(df):\r\n    df = df.apply(add_url_parts, axis=1, meta={\r\n        'url': 'object', 'href': 'object', 'text': 'object', 'selector': 'object',\r\n        'full_href': 'object', 'netloc': 'object',\r\n        'path': 'object', 'query': 'object', 'fragment': 'object'})\r\n    return df\r\n```\r\n\r\n... and I then print df.head(5) to stdout to check what it's doing (still learning Python, Pandas, and Dask).\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/512912934/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/512935592",
        "html_url": "https://github.com/dask/dask/issues/5113#issuecomment-512935592",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5113",
        "id": 512935592,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxMjkzNTU5Mg==",
        "user": {
            "login": "ddebernardy",
            "id": 225259,
            "node_id": "MDQ6VXNlcjIyNTI1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/225259?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ddebernardy",
            "html_url": "https://github.com/ddebernardy",
            "followers_url": "https://api.github.com/users/ddebernardy/followers",
            "following_url": "https://api.github.com/users/ddebernardy/following{/other_user}",
            "gists_url": "https://api.github.com/users/ddebernardy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ddebernardy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ddebernardy/subscriptions",
            "organizations_url": "https://api.github.com/users/ddebernardy/orgs",
            "repos_url": "https://api.github.com/users/ddebernardy/repos",
            "events_url": "https://api.github.com/users/ddebernardy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ddebernardy/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-18T18:34:40Z",
        "updated_at": "2019-07-18T18:41:43Z",
        "author_association": "NONE",
        "body": "Quick aside, if you don't mind trying to help me understand why what I was initially trying to do went wrong. If I modify the above as follows, it breaks:\r\n\r\n```python\r\ndef get_url_parts(record):\r\n    full_href = urljoin(record.url, record.href)\r\n    parts = urlsplit(full_href)\r\n    return {\r\n        'full_href': full_href,\r\n        'netloc': parts.netloc,\r\n        'path': parts.path,\r\n        'query': parts.query,\r\n        'fragment': parts.fragment\r\n    }\r\n\r\ndef process(df):\r\n    extra = df.apply(get_url_parts, axis=1, meta={\r\n            'full_href': 'object', 'netloc': 'object',\r\n            'path': 'object', 'query': 'object', 'fragment': 'object'})\r\n    df['full_href'] = extra['full_href']\r\n    return df\r\n```\r\n\r\n> ValueError: The columns in the computed data do not match the columns in the provided metadata\r\n\r\nI also tried `df['full_href'] = extra.full_href` (same error) and `df.assign(full_href=extra.full_href)` (same error) and `df.assign(*extra)` as well as:\r\n\r\n`df.assign(**extra)`:\r\n\r\n> assign() argument after ** must be a mapping, not DataFrame\r\n\r\n`df.assign(extra)`:\r\n\r\n>TypeError: assign() takes 1 positional argument but 2 were given\r\n\r\nThe docs aren't of much help:\r\n\r\nhttps://docs.dask.org/en/latest/dataframe-api.html#dask.dataframe.DataFrame.assign\r\n\r\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html\r\n\r\nGoogling the error messages systematically yield mostly useless StackOverflow answers that go something to the effect \"try this instead\" or \"here's an alternative\", sometimes with a link to the above-mentioned docs, or some other function, that likewise shed little to no light on what is going wrong.\r\n\r\nPut another way, while it's great to read Dask developer answers on SO, the answers I've run into are often so localized to the specific problem being asked that they aren't helpful to others. Methinks they'd benefit a lot from explaining what the actual underlying problem is -- if only using pointers to docs that do so.\r\n\r\nAt any rate: question if I may: why did my first attempt fail? Was it, as I suspect, because of a disconnect of sorts between the various partitions involved (indexes no longer overlap or something)? Or was it that the `assign()` function is not working as described when it gets a Series or a DataFrame as an argument?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/512935592/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]