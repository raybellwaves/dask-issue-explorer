{
    "url": "https://api.github.com/repos/dask/dask/issues/9393",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9393/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9393/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9393/events",
    "html_url": "https://github.com/dask/dask/issues/9393",
    "id": 1342083979,
    "node_id": "I_kwDOAbcwm85P_pOL",
    "number": 9393,
    "title": "Is there a good way to issue a warning from a task?",
    "user": {
        "login": "ian-r-rose",
        "id": 5728311,
        "node_id": "MDQ6VXNlcjU3MjgzMTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ian-r-rose",
        "html_url": "https://github.com/ian-r-rose",
        "followers_url": "https://api.github.com/users/ian-r-rose/followers",
        "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
        "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
        "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
        "repos_url": "https://api.github.com/users/ian-r-rose/repos",
        "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 162914698,
            "node_id": "MDU6TGFiZWwxNjI5MTQ2OTg=",
            "url": "https://api.github.com/repos/dask/dask/labels/good%20first%20issue",
            "name": "good first issue",
            "color": "159818",
            "default": true,
            "description": "Clearly described and easy to accomplish. Good for beginners to the project."
        },
        {
            "id": 3798602129,
            "node_id": "LA_kwDOAbcwm87iahGR",
            "url": "https://api.github.com/repos/dask/dask/labels/enhancement",
            "name": "enhancement",
            "color": "C2E0C6",
            "default": true,
            "description": "Improve existing functionality or make things work better"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2022-08-17T17:41:03Z",
    "updated_at": "2023-03-31T09:27:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "We have a number of places where we issue user warnings during graph construction time that a user may not be doing what they want to be doing (e.g., [here](https://github.com/dask/dask/blob/785c8456ea2f62e41b0110b07e883eea42f969d2/dask/array/reshape.py#L261-L272)). But in some cases, we may not have all the information we need to issue a warning until a task is actually executed (e.g., it may be based on a dataframe partition length which is unknown at construction time).\r\n\r\nIf I'm running a single-machine scheduler, I can just use `warnings.warn`, and I get what I want:\r\n```python\r\nimport warnings\r\nimport dask\r\n\r\n\r\n@dask.delayed\r\ndef do_expensive_thing():\r\n    warnings.warn(\"Are you sure you want to do this?\")\r\n    return 10\r\n\r\ndask.compute(do_expensive_thing(), scheduler=\"processes\")\r\n```\r\n\r\nBut if I'm running with a `distributed` scheduler, that warning gets swallowed, or at least is not easy to recover. I can see the warning again if I swap `distributed.warn` for `warning.warn`:\r\n\r\n```python\r\nimport distributed\r\nimport dask\r\n\r\nclient = distributed.Client()\r\n\r\n@dask.delayed\r\ndef do_expensive_thing():\r\n    distributed.warn(\"Are you sure you want to do this?\")\r\n    return 10\r\n\r\nclient.compute(do_expensive_thing())\r\n```\r\n\r\nHowever, if I'm working in the `dask/dask` collections APIs, I want to remain scheduler-agnostic, and avoid importing `distributed` all over the place. I don't think I have a good way to do that today. One possible way forward could be to create a `dask.warn` utility, along the lines of:\r\n\r\n```python\r\ndef warn(...):\r\n    try:\r\n        import distributed\r\n        distributed.warn(...)\r\n    except ImportError:\r\n        import warnings\r\n        warnings.warn(...)\r\n```\r\n\r\nbut there may be better ways.",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9393/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9393/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}