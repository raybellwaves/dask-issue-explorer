{
    "url": "https://api.github.com/repos/dask/dask/issues/9380",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9380/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9380/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9380/events",
    "html_url": "https://github.com/dask/dask/issues/9380",
    "id": 1337480200,
    "node_id": "I_kwDOAbcwm85PuFQI",
    "number": 9380,
    "title": "ValueError when trying to reassign an index column",
    "user": {
        "login": "multimeric",
        "id": 5019367,
        "node_id": "MDQ6VXNlcjUwMTkzNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5019367?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/multimeric",
        "html_url": "https://github.com/multimeric",
        "followers_url": "https://api.github.com/users/multimeric/followers",
        "following_url": "https://api.github.com/users/multimeric/following{/other_user}",
        "gists_url": "https://api.github.com/users/multimeric/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/multimeric/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/multimeric/subscriptions",
        "organizations_url": "https://api.github.com/users/multimeric/orgs",
        "repos_url": "https://api.github.com/users/multimeric/repos",
        "events_url": "https://api.github.com/users/multimeric/events{/privacy}",
        "received_events_url": "https://api.github.com/users/multimeric/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 3798450413,
            "node_id": "LA_kwDOAbcwm87iZ8Dt",
            "url": "https://api.github.com/repos/dask/dask/labels/bug",
            "name": "bug",
            "color": "faadaf",
            "default": true,
            "description": "Something is broken"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2022-08-12T17:06:38Z",
    "updated_at": "2022-08-24T11:30:32Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!-- Please include a self-contained copy-pastable example that generates the issue if possible.\r\n\r\nPlease be concise with code posted. See guidelines below on how to provide a good bug report:\r\n\r\n- Craft Minimal Bug Reports http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\r\n- Minimal Complete Verifiable Examples https://stackoverflow.com/help/mcve\r\n\r\nBug reports that follow these guidelines are easier to diagnose, and so are often handled much more quickly.\r\n-->\r\n\r\n**What happened**:\r\n\r\nThe following error:\r\n```\r\nValueError: The columns in the computed data do not match the columns in the provided metadata\r\n  Extra:   [0]\r\n  Missing: ['index']\r\n```\r\n\r\n**What you expected to happen**:\r\nNo error in this situation, it should compute as expected.\r\n\r\n**Minimal Complete Verifiable Example**:\r\nThis is highly contrived, because I spent a long time reducing this error to a minimal state from my real world workflow. The `shuffle` method call here is used to represent any more complex operation like a hash join, which is more common in real usage.\r\n```python\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\n\r\ndf = pd.DataFrame({\r\n    \"uniprot\": [\"P42684\", \"P42684\", \"P42684\"]\r\n}, index=pd.Series([\"1:179108338:G>C\", \"1:179109432:C>T\", \"1:179126409:G>C\"], name=\"index\"))\r\nddf = dd.from_pandas(df, npartitions=2)\r\n\r\nuniprots = ddf.uniprot.unique()\r\nx = uniprots.to_frame().assign(index = uniprots).set_index(\"index\")\r\nx.shuffle(x.index).compute()\r\n```\r\n\r\n**Anything else we need to know?**:\r\nAll parts of this weird example seem to be required. The `.unique()` call, and the fact that I start with a named index, and then I create a column with the same name as that index.\r\n\r\n**Environment**:\r\n\r\n- Dask version: `2022.8.0`\r\n- Python version: `3.9.5`\r\n- Operating System: Ubuntu 21.10\r\n- Install method (conda, pip, source): pip\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9380/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9380/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}