{
    "url": "https://api.github.com/repos/dask/dask/issues/10072",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/10072/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/10072/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/10072/events",
    "html_url": "https://github.com/dask/dask/pull/10072",
    "id": 1625850798,
    "node_id": "PR_kwDOAbcwm85MH6Mj",
    "number": 10072,
    "title": "Use empty column projection to optimize `DataFrame.__len__`",
    "user": {
        "login": "rjzamora",
        "id": 20461013,
        "node_id": "MDQ6VXNlcjIwNDYxMDEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rjzamora",
        "html_url": "https://github.com/rjzamora",
        "followers_url": "https://api.github.com/users/rjzamora/followers",
        "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
        "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
        "organizations_url": "https://api.github.com/users/rjzamora/orgs",
        "repos_url": "https://api.github.com/users/rjzamora/repos",
        "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rjzamora/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 365513534,
            "node_id": "MDU6TGFiZWwzNjU1MTM1MzQ=",
            "url": "https://api.github.com/repos/dask/dask/labels/io",
            "name": "io",
            "color": "6f871c",
            "default": false,
            "description": ""
        },
        {
            "id": 2949099791,
            "node_id": "MDU6TGFiZWwyOTQ5MDk5Nzkx",
            "url": "https://api.github.com/repos/dask/dask/labels/parquet",
            "name": "parquet",
            "color": "77A66C",
            "default": false,
            "description": ""
        },
        {
            "id": 3798602129,
            "node_id": "LA_kwDOAbcwm87iahGR",
            "url": "https://api.github.com/repos/dask/dask/labels/enhancement",
            "name": "enhancement",
            "color": "C2E0C6",
            "default": true,
            "description": "Improve existing functionality or make things work better"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-03-15T16:22:29Z",
    "updated_at": "2023-03-15T23:12:12Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": true,
    "pull_request": {
        "url": "https://api.github.com/repos/dask/dask/pulls/10072",
        "html_url": "https://github.com/dask/dask/pull/10072",
        "diff_url": "https://github.com/dask/dask/pull/10072.diff",
        "patch_url": "https://github.com/dask/dask/pull/10072.patch",
        "merged_at": null
    },
    "body": "While experimenting with https://github.com/dask/dask/pull/10067, I realized that we are not taking full advantage of `DataFrameIOLayer` column-projection within ~`DataFrame.index` or~ `DataFrame.__len__`. That is, there is no reason we need to read in **any** column data to do something like `len(dd.read_parquet(path))` unless one of the columns is being used as the index. Instead, we can just project an empty column-list into the read-parquet layer, and find the global length of the index (which may not require us to read in **any** file data at all).\r\n\r\nThe performance bump is most obvious for cases in which it is expensive to read a single column for each partition. For example, there is a 40x improvement for the 266GB Criteo dataset:\r\n\r\n```python\r\nimport dask.dataframe as dd\r\n\r\nddf = dd.read_parquet(\"/data/crit_pq_int\", blocksize=\"1GiB\")\r\n%time len(ddf)\r\n```\r\n\r\nNew result:\r\n```\r\nCPU times: user 4.28 s, sys: 377 ms, total: 4.66 s\r\nWall time: 1.23 s\r\n4373472305\r\n```\r\n\r\nOld result:\r\n```\r\nCPU times: user 1min 8s, sys: 2min 59s, total: 4min 8s\r\nWall time: 47.8 s\r\n4373472305\r\n```\r\n\r\nThe speedup is much less significant when you have many small partitions, because we still need to access the the file(s) for each partition.  However, we may be able to improve that case in the future as well.\r\n\r\n- [ ] Closes #xxxx\r\n- [ ] Tests added / passed\r\n- [ ] Passes `pre-commit run --all-files`\r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/10072/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/10072/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}