{
    "url": "https://api.github.com/repos/dask/dask/issues/11116",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/11116/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/11116/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/11116/events",
    "html_url": "https://github.com/dask/dask/issues/11116",
    "id": 2289370607,
    "node_id": "I_kwDOAbcwm86IdQXv",
    "number": 11116,
    "title": "When using PyArrow dtypes, aggregations create NaNs of unexpected type",
    "user": {
        "login": "nprihodko",
        "id": 67439573,
        "node_id": "MDQ6VXNlcjY3NDM5NTcz",
        "avatar_url": "https://avatars.githubusercontent.com/u/67439573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nprihodko",
        "html_url": "https://github.com/nprihodko",
        "followers_url": "https://api.github.com/users/nprihodko/followers",
        "following_url": "https://api.github.com/users/nprihodko/following{/other_user}",
        "gists_url": "https://api.github.com/users/nprihodko/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nprihodko/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nprihodko/subscriptions",
        "organizations_url": "https://api.github.com/users/nprihodko/orgs",
        "repos_url": "https://api.github.com/users/nprihodko/repos",
        "events_url": "https://api.github.com/users/nprihodko/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nprihodko/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3880424463,
            "node_id": "LA_kwDOAbcwm87nSpQP",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20triage",
            "name": "needs triage",
            "color": "eeeeee",
            "default": false,
            "description": "Needs a response from a contributor"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-05-10T09:33:59Z",
    "updated_at": "2024-05-10T09:36:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Please include a self-contained copy-pastable example that generates the issue if possible.\r\n\r\nPlease be concise with code posted. See guidelines below on how to provide a good bug report:\r\n\r\n- Craft Minimal Bug Reports http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\r\n- Minimal Complete Verifiable Examples https://stackoverflow.com/help/mcve\r\n\r\nBug reports that follow these guidelines are easier to diagnose, and so are often handled much more quickly.\r\n-->\r\n\r\n**Describe the issue**:\r\n\r\nUnder certain conditions\u2014aggregations of groups that have only missing values, when using PyArrow floats\u2014Dask creates NaNs of an unexpected type. PyArrow types are nullable, so it should create `<NA>` but it creates `NaN`, which are then incorrectly not treated as missing values. \r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\n\r\ndf = pd.DataFrame({\r\n    \"x\": range(15),\r\n    \"y\": [pd.NA] * 10 + [1.0] * 5,\r\n    \"group\": [\"a\"] * 5 + [\"b\"] * 5 + [\"c\"] * 5\r\n})\r\n\r\nddf = dd.from_pandas(df, npartitions=2).astype({\r\n    \"y\": \"double[pyarrow]\"\r\n})\r\nprint(ddf.compute())\r\n#      x     y group\r\n# 0    0  <NA>     a\r\n# 1    1  <NA>     a\r\n# 2    2  <NA>     a\r\n# 3    3  <NA>     a\r\n# 4    4  <NA>     a\r\n# 5    5  <NA>     b\r\n# 6    6  <NA>     b\r\n# 7    7  <NA>     b\r\n# 8    8  <NA>     b\r\n# 9    9  <NA>     b\r\n# 10  10   1.0     c\r\n# 11  11   1.0     c\r\n# 12  12   1.0     c\r\n# 13  13   1.0     c\r\n# 14  14   1.0     c\r\n\r\nddf = ddf.groupby(\"group\").agg(x=(\"x\", \"mean\"), y=(\"y\", \"mean\"))\r\nprint(ddf.compute())\r\n#           x    y\r\n# group           \r\n# a       2.0  NaN\r\n# b       7.0  NaN\r\n# c      12.0  1.0\r\n# (Note that groups with <NA> resulted in NaN rather than <NA>)\r\n\r\n# These NaNs are then not recognized as missing values\r\nprint(ddf[\"y\"].isnull().sum().compute())\r\n# 0\r\n# (While the expected result is 2).\r\n\r\n# This breaks other functions, example further aggregations in Pandas\r\nprint(ddf[\"y\"].compute().mean(skipna=True))\r\n# nan\r\n# (While the exected result is 1.0).\r\n\r\n# And also further aggreations in Dask, albeit with a different unexpected result\r\nprint(ddf[\"y\"].mean(skipna=True).compute())\r\n# 0.0\r\n# (While the exected result is 1.0)\r\n```\r\n\r\n**Anything else we need to know?**:\r\n\r\nIf we use Numpy dtypes, i.e. convert `y` to `float64` rather than `double[pyarrow]` everything works as expected. \r\n\r\n\r\n\r\n**Environment**:\r\n\r\n- Dask version: 2024.4.1\r\n- Python version: 3.10.13\r\n- Operating System: MacOS on the client, dask running inside Docker based on ghcr.io/dask/dask image on the cluster. \r\n- Install method (conda, pip, source): pip on the client, using ghcr.io/dask/dask as the base image on the cluster. \r\n",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/11116/reactions",
        "total_count": 1,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/11116/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}