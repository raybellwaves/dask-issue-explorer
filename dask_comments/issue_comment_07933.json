[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/886824572",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-886824572",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 886824572,
        "node_id": "IC_kwDOAbcwm8402958",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T15:56:20Z",
        "updated_at": "2021-07-26T15:56:20Z",
        "author_association": "MEMBER",
        "body": "Thank you for taking the time to think through this problem and write this up.  I 100% agree that it will be a challenge to get what we really want out of the `Layer`-based approach.  As you stated: *\u201cToday there is no real place where we capture a user's intent or their lines of code. We immediately create a task graph for the requested operation, dump it into a mapping, and create a new dask.dataframe.DataFrame or dask.array.Array instance\u201d.*  As you know, this limitation has been driving me a bit crazy, because it feels like the \u201cleast-disruptive\u201d solution is still very disruptive (likely requiring us to add a **lot** more complex machinery and structure to the existing HLG Layers).\r\n\r\nFor the reasons above, I am certainly open to the idea of making radical changes to the way Dask-collections operate.  To me, the only important consideration that you haven\u2019t really discussed is: **How should collection subclasses interact with HighLevelGraph Layers (if at all)?** The general purpose of the HLG is currently two-fold: (1) To provide a \u201chigh-level\u201d optimization mechanism, and (2) to avoid communicating a fully-materialized graph over the wire during distributed execution.  It seems like collection-subclasses can address both of these requirements.  However, we learned over the past year that enabling materialization on the scheduler can significantly limit the kind of logic that we can include in the corresponding `Layer` class.  Therefore, it seems reasonable that we will want `ReadParquet._generate_dask_layer` to produce a `Layer` object on the `client` (rather than a `dict`).\r\n\r\nSince we will probably still need to deal with all the HLG materialization headaches with the new collection-subclass approach, I do want to establish that the Layer-focused approach would probably require about the same level of effort to achieve the same functionality. I say this, because we could still attach the same `inputs` and `args` information to the `Layer` class and regenerate a collection by traversing a tree in a very similar way. With that said, I do like the idea of separating the \u201cstate\u201d of the collection from the HLG.  Also, I think I like the idea of using collection subclasses on the client, while continuing to use the HLG representation for communicating the graph to the scheduler.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/886824572/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/886848173",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-886848173",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 886848173,
        "node_id": "IC_kwDOAbcwm8403Dqt",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T16:25:21Z",
        "updated_at": "2021-07-26T16:25:21Z",
        "author_association": "MEMBER",
        "body": "If we had a good high level expression system on the collections side, what do you think the right design around layers would be?  Some of this stuff becomes redundant. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/886848173/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/886856083",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-886856083",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 886856083,
        "node_id": "IC_kwDOAbcwm8403FmT",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T16:37:42Z",
        "updated_at": "2021-07-26T16:37:42Z",
        "author_association": "MEMBER",
        "body": "Right - exactly. It feels like the HLG becomes redundant unless we preserve a stripped-down version for serialization/materialization purposes only.  However, in the end the most-maintainable structure would probably remove HLGs altogether and simply require the same \u201cclean\u201d graph-materialization logic we already require in Layers.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/886856083/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/886982919",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-886982919",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 886982919,
        "node_id": "IC_kwDOAbcwm8403kkH",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T19:55:02Z",
        "updated_at": "2021-07-26T19:55:02Z",
        "author_association": "MEMBER",
        "body": "The scheduler could grow a `def update_collection_graph` method or something similar that was a peer to the `update_graph_hlg` method.  I think that it's reasonable to think broadly here for a while.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/886982919/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/887003011",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-887003011",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 887003011,
        "node_id": "IC_kwDOAbcwm8403peD",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T20:25:40Z",
        "updated_at": "2021-07-26T20:25:40Z",
        "author_association": "MEMBER",
        "body": "I really like the idea of using collections this way.  Historically have people proposed other approaches to this issue that were considered too high-level at the time? ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/887003011/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/887063783",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-887063783",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 887063783,
        "node_id": "IC_kwDOAbcwm84034Tn",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T22:14:56Z",
        "updated_at": "2021-07-26T22:14:56Z",
        "author_association": "MEMBER",
        "body": "People have certainly said things like \"it would be great if Dask could do predicate pushdown\", but I'm not sure that there has ever been a fully thought out proposal on expressions in Dask.  The efforts I've played with / proposed in the past have been for layers surrounding Dask.  That adds more complexity though.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/887063783/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/887075107",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-887075107",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 887075107,
        "node_id": "IC_kwDOAbcwm84037Ej",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-26T22:40:47Z",
        "updated_at": "2021-07-26T22:40:47Z",
        "author_association": "MEMBER",
        "body": ">I think that it's reasonable to think broadly here for a while.\r\n\r\nI totally agree - I am honestly very attracted to the idea of converting the collections themselves into something closer to symbolic expressions, and I like that you are thinking \u201cradical.\u201d In the previous two comments I was just making an honest attempt to play \u201cdevil\u2019s advocate.\u201d  I want to make sure we are acknowledging the fact that we will need to address similar materialization/serialization challenges to the ones we have faced with `Layers`.  Also, since we have already faced this for Layers, it is worth considering that the HLG class structure *could* also be redesigned as high-level expressions in a similar way.\r\n\r\nOf course, I do expect that the long-term user API would be much more elegant with the collection approach.  It is actually somewhat similar to what NVTabular is currently doing (the \u201chigh-level\u201d column-group dependencies and computations are defined separately from Dask).",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/887075107/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/887880425",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-887880425",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 887880425,
        "node_id": "IC_kwDOAbcwm8406_rp",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-27T22:39:18Z",
        "updated_at": "2021-07-27T22:39:18Z",
        "author_association": "MEMBER",
        "body": "I made the simplest possible system that I could think of in https://github.com/dask/dask/pull/7948.  It supports elementwise unary operations, binary operations, and  column selection.  It is also a valid dask collection and produces high level graphs. \r\n\r\nI don't like the way we use args/inputs, but these aren't important until we get optimizations around.  Other folks can probably suggest something smoother here.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/887880425/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/887882607",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-887882607",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 887882607,
        "node_id": "IC_kwDOAbcwm8407ANv",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-27T22:45:12Z",
        "updated_at": "2021-07-27T22:45:12Z",
        "author_association": "MEMBER",
        "body": "So I think that the approach taken in that PR is somewhat smooth, in that it doesn't ask us to give up on HLGs as the communication mechanism to the scheduler.  We can shift things over smoothly without doing a massive disruptive change.  Then once we're ready we can change how we send things over.  \r\n\r\nThis doesn't fix any of the dask layer serialization stuff, but it also doesn't break it any further :)\r\n\r\nIn the meantime we get to solve things like your parquet metadata length problem.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/887882607/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/887887949",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-887887949",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 887887949,
        "node_id": "IC_kwDOAbcwm8407BhN",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-27T22:59:03Z",
        "updated_at": "2021-07-27T22:59:03Z",
        "author_association": "MEMBER",
        "body": ">We can shift things over smoothly without doing a massive disruptive change\r\n\r\nNice!\r\n\r\n>In the meantime we get to solve things like your parquet metadata length problem.\r\n\r\nWoohoo!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/887887949/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/887899563",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-887899563",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 887899563,
        "node_id": "IC_kwDOAbcwm8407EWr",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-27T23:28:02Z",
        "updated_at": "2021-07-27T23:28:02Z",
        "author_association": "MEMBER",
        "body": "I looked briefly at what it would take to implement reduction/apply_concat_apply and in general it seems like most of our methods are of the form ...\r\n\r\n1. Scrape some metadata from the input dataframes (meta, divisions, ...) and make new meta and divisions\r\n2. Do a ton of complex work to make an intesting graph layer\r\n3. Wrap that into a HighLevelGraph\r\n4. Wrap that into a new dataframe object\r\n\r\nReally, we want to peel off layers 3 and 4, and just copy over step 1 into `__init__` and step 2 into `_generate_dask_layer`.  The main difference of the design is that these stages to all of our methods are broken up, and so we can easily redo `1` many times as we perform optimizations and such, and only do 2-4 when we're ready to compute.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/887899563/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/889492905",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-889492905",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 889492905,
        "node_id": "IC_kwDOAbcwm841BJWp",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-29T22:08:49Z",
        "updated_at": "2021-07-29T22:08:49Z",
        "author_association": "MEMBER",
        "body": "I think an expression system for dask arrays (and/or dataframes) sounds great!\r\n\r\nOne question is how closely tied this should be to Dask itself. I can see advantages (especially backwards compatibility) to using subclasses of existing dask data structures, but on the other hand I can see an abstract expression system for arrays potentially being useful for much more than only Dask.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/889492905/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/889509467",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-889509467",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 889509467,
        "node_id": "IC_kwDOAbcwm841BNZb",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-29T22:48:13Z",
        "updated_at": "2021-07-29T22:48:13Z",
        "author_association": "MEMBER",
        "body": "I agree that a general abstract expression system for arrays would be\nvaluable.  If such a system existed then we would support its use.  I see a\npath of modest cost to add this to Dask array/dataframe/bag and so barring\nthe existence of such a full solution that's probably what I would do.  I\ndo not personally intend to implement a full independent symbolic system\n(at least not without a lot of support).\n\nOn Thu, Jul 29, 2021 at 3:09 PM Stephan Hoyer ***@***.***>\nwrote:\n\n> I think an expression system for dask arrays (and/or dataframes) sounds\n> great!\n>\n> One question is how closely tied this should be to Dask itself. I can see\n> advantages (especially backwards compatibility) to using subclasses of\n> existing dask data structures, but on the other hand I can see an abstract\n> expression system for arrays potentially being useful for much more than\n> only Dask.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/7933#issuecomment-889492905>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTBAUT22FNCM5JK5WDDT2HGP3ANCNFSM5A6YCJQA>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/889509467/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/889577050",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-889577050",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 889577050,
        "node_id": "IC_kwDOAbcwm841Bd5a",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T02:12:47Z",
        "updated_at": "2021-07-30T02:12:47Z",
        "author_association": "MEMBER",
        "body": "In https://github.com/dask/dask/pull/7948 I tried adding this sort of system directly into the existing class.  It's not great, but also not terrible.  It does allow for smooth changes and does allow us to reuse a lot of our code (I moved over the elemwise and aca functions, which account for a great deal of our methods).\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/889577050/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/889875342",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-889875342",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 889875342,
        "node_id": "IC_kwDOAbcwm841CmuO",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T12:58:18Z",
        "updated_at": "2021-07-30T12:58:18Z",
        "author_association": "MEMBER",
        "body": "OK, so taking a step back here we have a few classes with a few different requirements and considerations\r\n\r\n### Collections\r\n\r\n[Documented here](https://docs.dask.org/en/latest/custom-collections.html)\r\n\r\nThese require methods like `__dask_graph__`, `__dask_keys__`, and have methods like `__dask_optimize__`. In general these carry and manipulate dask graphs, which are mappings of individual tasks.\r\n\r\nSubclasses of these typically also include attributes that show elementwise structure, namely `_meta`, as well as collection-wide structure, namely \r\n\r\n-  Bag: npartitions\r\n-  Dataframe: divisions\r\n-  Array: chunks\r\n\r\n### Expr\r\n\r\nThese contain enough information to quickly recreate themselves (`args`) as well as information to traverse down to dependencies (`dependencies`).  Using these, as well as a class hierarchy, they could implement their own optimization methods.  It is important that little work is done on initialization, because we reserve the right to re-create these things frequently.  \r\n\r\n## Can we do everything at once?\r\n\r\nSure!  But we need to be a little bit careful.  \r\n\r\nIn principle we could take the existing dask collection functions, turn them into classes which in the constructor do all of the following:\r\n\r\n1. store the args/dependencies on the object (required by expr)\r\n2. store the meta, divisions/chunks, and graph on the object (required by collections)\r\n\r\nStep 2 here is what is already written, so adding this into the constructor would be the easiest path, but this can also be slow.  Instead we want to move the slow parts of 2 to some other function (currently named `_generate_dask_layer`) but we want to keep the structural parts of 2 (meta, divisions/chunks) in the constructor like the following:\r\n\r\n1.  **On initialization:** Create args/dependencies for expr and meta/divisions for collection\r\n2.  **On demand later on:** Create graph\r\n\r\nThe challenge here is that some of our code creates the divisions and the graph and the meta at the same time.  We need to tease apart this creation.  I suspect that this is going to be possible almost all of the time, and in the other times we can always just create and store the graph in the constructor (slow, but not the end of the world).  Really, we just need to go through and tease apart all of our methods.  I think that calling out these necessary pieces of metadata is useful.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/889875342/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/889879629",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-889879629",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 889879629,
        "node_id": "IC_kwDOAbcwm841CnxN",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T13:05:30Z",
        "updated_at": "2021-07-30T13:05:30Z",
        "author_association": "MEMBER",
        "body": "For args/dependencies I've gone through a few different options of representation.  \r\n\r\nAs a reminder we need these for the following reasons:\r\n\r\n1.  **args**: we need to be able to recreate an object with different inputs.  Something like the following should always work\r\n\r\n    ```python\r\n    new = type(obj)(*obj.args)\r\n    assert new == obj\r\n    ```\r\n\r\n2.  **dependencies**: we need to be able to see the other dask expressions on which this one was based so that we can traverse down this tree when optimizing\r\n\r\n### How do we store these things?\r\n\r\nI first started with the names of attributes, like the following:\r\n\r\n```python\r\nclass BinOp:\r\n    args = (\"operator\", \"left\", \"right\")\r\n    dependencies = (\"left\", \"right\")\r\n\r\n    def __init__(self, operator, left, right):\r\n        ...\r\n```\r\n\r\n(we should traverse down left and right, but don't need to traverse down the operator, which is unlikely to be a dask expression.\r\n\r\nHowever this is challenging because there are a lot of getattr calls, and often the dependencies at least aren't known ahead of time.  For example in the case of `x + 1`, where expr.right is not a dask collection.\r\n\r\nSo in the more recent implementation when I change the dd._Frame class directly I use attributes and properties \r\n\r\n```python\r\nclass Binop:\r\n    def __init__(self, operator, left, right):\r\n        ...\r\n\r\n    @property\r\n    def args(self):\r\n        return self.operator, self.left, self.right\r\n\r\n    @property\r\n    def dependencies(self):\r\n        out = []\r\n        if is_dask_collection(self.left):\r\n            out.append(self.left)\r\n        if is_dask_colleciton(self.right):\r\n            out.append(self.right)\r\n        return out\r\n```\r\n\r\nThis seemed to work better.\r\n\r\nI also found that using only `*args` was limiting, because in many cases we encourage the use of **kwargs.  I wonder if instead we want the invariant `new = type(obj)(*obj.args)` to instead be `new = type(obj)(**obj.parameters)`, where we use a dictionary with named parameters instead.  This seems more predictable.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/889879629/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/889920548",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-889920548",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 889920548,
        "node_id": "IC_kwDOAbcwm841Cxwk",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T14:12:07Z",
        "updated_at": "2021-07-30T14:12:07Z",
        "author_association": "MEMBER",
        "body": "In dask dataframe I ran into problems with subclassing.  Currently we have four classes, DataFrame, Series, Index, and Scalar.  (More if you include RAPIDS and GeoPandas).  I found that I had to make classes like `ElemwiseDataFrame`, `ElemwiseSeries`, and so on.  These were very simple definitions\r\n\r\n```python\r\nclass ElemwiseDataFrame(ElemwiseBase, DataFrame):\r\n    pass\r\n```\r\n\r\nBut still it was a code smell that pointed to some of the bad behaviors of object inheritance.  I suspect that this approach would put us in even more pain when it came to downstream projects like RAPIDS/GeoPandas, and also maybe Pint.\r\n\r\nA common approach in this case is to switch from inheritance to encapsulation.  I don't yet have a clean design for that.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/889920548/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/890023021",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-890023021",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 890023021,
        "node_id": "IC_kwDOAbcwm841DKxt",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T16:50:51Z",
        "updated_at": "2021-07-30T16:50:51Z",
        "author_association": "MEMBER",
        "body": "@quasiben @rjzamora and I spoke this morning (along with some other folks).  It looks like @rjzamora has time and interest to look into executing something like this starting around one-to-two weeks from now.  I would like for folks here to come to some consensus on a path forward before then.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/890023021/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/890054535",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-890054535",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 890054535,
        "node_id": "IC_kwDOAbcwm841DSeH",
        "user": {
            "login": "douglasdavis",
            "id": 3202090,
            "node_id": "MDQ6VXNlcjMyMDIwOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3202090?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/douglasdavis",
            "html_url": "https://github.com/douglasdavis",
            "followers_url": "https://api.github.com/users/douglasdavis/followers",
            "following_url": "https://api.github.com/users/douglasdavis/following{/other_user}",
            "gists_url": "https://api.github.com/users/douglasdavis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/douglasdavis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/douglasdavis/subscriptions",
            "organizations_url": "https://api.github.com/users/douglasdavis/orgs",
            "repos_url": "https://api.github.com/users/douglasdavis/repos",
            "events_url": "https://api.github.com/users/douglasdavis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/douglasdavis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T17:48:28Z",
        "updated_at": "2021-07-30T17:48:28Z",
        "author_association": "MEMBER",
        "body": "This has been fun to read (along with https://github.com/dask/dask/pull/7948/). I'm really interested in helping in the effort. w.r.t. consensus on a path forward: do you mean having an answer to the handful of proposed questions that you've laid out in the issue so far? Like property vs. attribute args/dependencies, `*args` vs. `**parameters`, and inheritance vs encapsulation? Or something more broad, like incremental implementation vs all at once? Or all of the above!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/890054535/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/890076838",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-890076838",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 890076838,
        "node_id": "IC_kwDOAbcwm841DX6m",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T18:30:09Z",
        "updated_at": "2021-07-30T18:30:09Z",
        "author_association": "MEMBER",
        "body": "> consensus on a path forward: do you mean having an answer to the handful of proposed questions that you've laid out in the issue so far\r\n\r\nMostly I'm looking to hear from people who have different experiences than me and who can anticipate issues that I haven't.  My expectation is that this will mostly come from some of the other grizzled maintainers :)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/890076838/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/890092487",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-890092487",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 890092487,
        "node_id": "IC_kwDOAbcwm841DbvH",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-30T19:00:26Z",
        "updated_at": "2021-07-30T19:00:26Z",
        "author_association": "MEMBER",
        "body": "> I'm really interested in helping in the effort.\r\n\r\nI'm glad to hear this.  My sense is that when we first start there will lots of false starts and redesigns that will be frustrating for anyone who is not familiar with and comfortable with tearing apart Dask's design.  (this is what I'm going through now).  However, I think that once we find a path that seems to be working then there will be a lot of work that I think many people could probably participate in in parallel more effectively.  \r\n\r\nIn particular, I expect @rjzamora to focus his work on Dask Dataframe (due to the RAPIDS connection) but probably not invest as much effort in Dask array.  Doing the rewrite process within Dask array would probably be a good month-long project for someone if they were interested. ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/890092487/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/890331490",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-890331490",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 890331490,
        "node_id": "IC_kwDOAbcwm841EWFi",
        "user": {
            "login": "dhirschfeld",
            "id": 881019,
            "node_id": "MDQ6VXNlcjg4MTAxOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/881019?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhirschfeld",
            "html_url": "https://github.com/dhirschfeld",
            "followers_url": "https://api.github.com/users/dhirschfeld/followers",
            "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
            "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
            "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
            "repos_url": "https://api.github.com/users/dhirschfeld/repos",
            "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-07-31T11:07:06Z",
        "updated_at": "2021-07-31T11:07:06Z",
        "author_association": "NONE",
        "body": "> I agree that a general abstract expression system for arrays would be valuable. \r\n\r\nThat sounds a bit like what [`metadsl`](https://github.com/Quansight-Labs/metadsl) was intended to support? Unfortunately development has stalled there but think the concept has a lot of merit so I'm very interested to see this proposal evolve...",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/890331490/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/891827826",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-891827826",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 891827826,
        "node_id": "IC_kwDOAbcwm841KDZy",
        "user": {
            "login": "douglasdavis",
            "id": 3202090,
            "node_id": "MDQ6VXNlcjMyMDIwOTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3202090?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/douglasdavis",
            "html_url": "https://github.com/douglasdavis",
            "followers_url": "https://api.github.com/users/douglasdavis/followers",
            "following_url": "https://api.github.com/users/douglasdavis/following{/other_user}",
            "gists_url": "https://api.github.com/users/douglasdavis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/douglasdavis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/douglasdavis/subscriptions",
            "organizations_url": "https://api.github.com/users/douglasdavis/orgs",
            "repos_url": "https://api.github.com/users/douglasdavis/repos",
            "events_url": "https://api.github.com/users/douglasdavis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/douglasdavis/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-03T13:02:03Z",
        "updated_at": "2021-08-03T13:02:03Z",
        "author_association": "MEMBER",
        "body": "> In particular, I expect @rjzamora to focus his work on Dask Dataframe (due to the RAPIDS connection) but probably not invest as much effort in Dask array.\r\n\r\nYea I've sensed that this is the case\r\n\r\n> Doing the rewrite process within Dask array would probably be a good month-long project for someone if they were interested.\r\n\r\nHappy to target this. Will keep an eye on the path planning ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/891827826/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/891994727",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-891994727",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 891994727,
        "node_id": "IC_kwDOAbcwm841KsJn",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-03T16:37:26Z",
        "updated_at": "2021-08-03T16:37:26Z",
        "author_association": "MEMBER",
        "body": "I think that this design would be incompatible with ``dask.graph_manipulation`` and any other (third party?) code that perform collection-agnostic graph alterations. The way that module works is:\r\n\r\n1. fetch the HLG from the collection with ``__dask_graph__()``\r\n2. add its own layers on top\r\n3. rebuild the collection using ``__dask_postpersist__(..., rename={old_collection_name: new_collection_name})``)\r\n\r\nThe module has no clue about which specific collections it's working with.\r\nWithout HLG, it would be forced to completely materialise the graph client side - or am I missing something?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/891994727/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/892087327",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-892087327",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 892087327,
        "node_id": "IC_kwDOAbcwm841LCwf",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-03T18:58:37Z",
        "updated_at": "2021-08-03T18:58:37Z",
        "author_association": "MEMBER",
        "body": "I gave encapsulation some thought today.  I didn't actually do any work on it though, so these thoughts may be completely silly once we hit actual code. \r\n\r\nThere is an open question of where all of the necessary metadata sits.  This metadata includes task graph construction, meta object, divisions, expression tree, and the dataframe/series/index API type.  \r\n\r\nThe challenge of subclassing is that we want the API to depend strongly on the dataframe/series/index API type, so that needs to have a strong influence on the class.  Adding the expression tree into that typing structure creates two different dimensions and so an cartesian product of subclasses.  \r\n\r\nSo we leave the top-level class to the API type (dataframe/series/index) and have that contain an expression\r\n\r\n```python\r\nclass FrameExpr:\r\n    ...\r\n\r\nclass DataFrame:\r\n    expr: FrameExpr\r\n    ...\r\n```\r\n\r\nWhile all of the graph, metadata, divisions, etc need to be accessible from the DataFrame/Series/Index classes, it's not clear where the logic for these things should live.  Should they live on the DataFrame/Series/Index classes (I'm going to start calling these user API classes) or should they live on the expression classes (Elemwise/IO/ReadParquet/Reduction/...)?  This is an open quesiton.\r\n\r\nMy gut reaction right now though is that *everything* should go on the FrameExpr.  This leaves the user API classes to be quite  simple\r\n\r\n```python\r\nclass DataFrame:\r\n    def __init__(self, expr):\r\n        self.expr = expr\r\n\r\n    @property\r\n    def _meta(self):\r\n        return self.expr._meta\r\n\r\n    ... # and so on\r\n```\r\n\r\nThis ends up being a bit less clean from an implementation perspective.  We need to change *all* calls to functions like `new_dd_object`, which is unpleasant.\r\n\r\n## Backwards compatibility\r\n\r\nOr not?\r\n\r\nWe should have a fallback, an expression that contains a task graph/meta/divisions without provenance.  \r\n\r\n```python\r\nclass LeafFrame(FrameExpr):\r\n    def __init__(self, dsk, name, meta, divisions):\r\n        ...\r\n    @property\r\n    def args(self):\r\n        return ()\r\n\r\n    @property\r\n    def dependencies(self):\r\n        return ()\r\n```\r\n\r\nAnd then current API points that create dask dataframes, like `new_dd_object` will have a legacy mode\r\n\r\n```python\r\ndef new_dd_object(dsk=None, name=None, meta=None, divisions=None, expr=None):\r\n    if expr is None:\r\n        expr = LeafFrame(dsk, name, meta, divisions)\r\n    return get_parallel_type(expr._meta)(expr)\r\n```\r\n\r\nI don't think that calling `dd.DataFrame` is particularly common any more, but we can probably do the same thing there.\r\n\r\n\r\n## Adding actual operations\r\n\r\nFunctions like elemwise will move their logic into classes, as before, and then they'll create a new_dd_object with that expression\r\n\r\n```python\r\ndef elemwise(*args, **kwargs):\r\n    expr = Elemwise(*args, **kwargs)\r\n    return new_dd_object(expr)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/892087327/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/892165714",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-892165714",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 892165714,
        "node_id": "IC_kwDOAbcwm841LV5S",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-03T21:05:23Z",
        "updated_at": "2021-08-03T21:05:23Z",
        "author_association": "MEMBER",
        "body": "It's a good point Guido.\n\nFirst, nothing proposed here removes high level graphs (yet) so I would\nexpect that current behavior would continue, although possibly without the\nbenefit of expression optimizations.\n\nIn general the experiments have so far included backwards compatibility\nwith opaque single node expression trees.\n\nOn Tue, Aug 3, 2021, 11:37 AM crusaderky ***@***.***> wrote:\n\n> I think that this design would be incompatible with\n> dask.graph_manipulation and any other (third party?) code that perform\n> collection-agnostic graph alterations. The way that module works is:\n>\n>    1. fetch the HLG from the collection with __dask_graph__()\n>    2. add its own layers on top\n>    3. rebuild the collection using __dask_postpersist__(...,\n>    rename={old_collection_name: new_collection_name}))\n>\n> The module has no clue about which specific collections it's working with.\n> Without HLG, it would be forced to completely materialise the graph client\n> side - or am I missing something?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/7933#issuecomment-891994727>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTEJOCRRA3AKOP6H34LT3ALNBANCNFSM5A6YCJQA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/892165714/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895552688",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-895552688",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 895552688,
        "node_id": "IC_kwDOAbcwm841YQyw",
        "user": {
            "login": "asmeurer",
            "id": 71486,
            "node_id": "MDQ6VXNlcjcxNDg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asmeurer",
            "html_url": "https://github.com/asmeurer",
            "followers_url": "https://api.github.com/users/asmeurer/followers",
            "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
            "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
            "organizations_url": "https://api.github.com/users/asmeurer/orgs",
            "repos_url": "https://api.github.com/users/asmeurer/repos",
            "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asmeurer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T21:11:44Z",
        "updated_at": "2021-08-09T21:11:44Z",
        "author_association": "NONE",
        "body": "> Mostly I'm looking to hear from people who have different experiences than me and who can anticipate issues that I haven't. My expectation is that this will mostly come from some of the other grizzled maintainers :)\r\n\r\nHere are some thoughts from a SymPy maintainer. You'll have to pardon my ignorance of the dask internals. If something I say here doesn't make sense, please let me know.\r\n\r\n- My first thought when I saw this idea is that the expression system would be separate from the classes. However, Matt makes a good point that this may require keeping the separate things in sync too much. You considered making the collections classes themselves the expression tree classes, and [having collections link to separate expression tree classes](https://github.com/dask/dask/issues/7933#issuecomment-892087327), but what about the reverse, expression tree classes that contain the collections? Anyway, it's not clear to me yet which is the best option. I honestly don't feel I have enough knowledge of the dask internals to say. \r\n\r\n- My biggest question here is whether or not these collection objects you plan to make into expression trees are immutable. If they are, you should be good to go. If they aren't, you may run into a lot of headaches. The issue being that if you mutate an expression that may require updating any tree that contains it, but expression tree DAGs point down the tree not up (expressions don't know which other expressions contain them).\r\n\r\n- Regarding using `type(*obj)(**obj.parameters)` instead of `type(obj)(*obj.args)`, that sounds good. The only limitation of `**parameters` is that to support an actual `*args` signature you'd to also support passing them in as a parameter. But that's should be easily doable with `def func(*args, **, _args=())` or something. You also wouldn't be able to use Python 3.8+ positional-only args.\r\n\r\nI will say that one thing I have always found nice about the SymPy expression system that I would recommend emulating is that every expression tree can be uniformly walked using `.args`. Compare this to the Python ast module, which only has attributes, and a list of the attributes. The resulting system is annoying to work with by hand, because you have to know the exact type of each node in order to walk down it. You are effectively forced to use the visitor pattern to examine and manipulate AST objects. But the visitor pattern is only one way to manipulate expressions. It works well when you have different code for each expression tree type, or when you want the visiting operations to be extensible. But it is also quite verbose, as it requires you to write a class for even the simplest manipulation. There are other ways, which are more terse and simpler to reason about. For example, you could just use recursive functions that walk through the tree. Another way, which I know Matt is fond of (because he wrote it), is a functional API like that found in [sympy.strategies](https://github.com/sympy/sympy/tree/master/sympy/strategies), where you have a lot of expression manipulation functions that compose nicely, allowing you to write code like `bottom_up(f, expr)` (see the [sympy.simplify.fu](https://github.com/sympy/sympy/blob/master/sympy/simplify/fu.py) module for a large example of code written in this style). Yet another way is based on pattern matching, e.g., using something like MatchPy (which is indicendally the route I would recommend for doing expression optimizations). The point isn't that one way is better than any other. All methods have their valid uses. The point is that the simpler expression tree design doesn't lock you into only one way of thinking about manipulation.\r\n\r\nSymPy has the additional restriction that every element of `.args` should itself be a SymPy class, which has both advantages and disadvantages (I know Matt and I have disagreed about that in the past). The main disadvantage of not making this requirement is that you always have to be on guard for non-expression tree classes when walking an expression tree. It especially hinders the second type of tree walking I mentioned above (manual recursive functions). On the other hand, the main disadvantage of having the requirement is that you have to have classes to wrap basic collection types like tuples or str. And for instance the BinOp class in https://github.com/dask/dask/pull/7948 wouldn't be possible in SymPy. Each operation has to have a separate class (not that that's necessarily a bad thing; it's not clear to me from a pattern matching perspective whether BinOp would be a good idea). Matt's idea of separating `args` and `dependencies` might be a clean way of dealing with this issue, assuming I understood correctly the purpose of that distinction (although I would personally change `dependencies` to just `deps` or something else that is shorter to type). \r\n\r\nI do think you can make the design here simpler than SymPy's in many ways. SymPy uses `expr.func(*expr.args)` instead of `type(expr)(*expr.args)` to allow for expressions' head object to not necessarily be its class. But for a simple expression tree design, this is unnecessary complexity. As another point, you should avoid the temptation to do automatic simplification on the expressions at instantiation time, instead preferring to represent exactly what the user input. All simplification, even \"trivial\" simplifications, should be done separately as optimizations (although any kind of type checking that would lead to an error can be done in the constructors). In SymPy, basic simplifications like `x + x -> 2*x` happen, but what this means internally is that `Add(x, x)` has to return `Mul(2, x)`, so the structure requires the use of `__new__`. Automatic simplification is also a bane for many other reasons. See https://github.com/sympy/sympy/wiki/Automatic-Simplification for a list of some of the problems it can lead to.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895552688/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895582991",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-895582991",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 895582991,
        "node_id": "IC_kwDOAbcwm841YYMP",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T22:07:05Z",
        "updated_at": "2021-08-09T22:07:05Z",
        "author_association": "MEMBER",
        "body": "Thank you for the comments @asmeurer .  Some responses! \r\n\r\n-  So far I like expressions being in collections.  This keeps the user API the same as it is today.\r\n- I think that mutability will be ok.  Expressions can be immutable, but operations on a collection can create and swap out a new expression.  We do this today with Dask graphs.  It is also what Theano did back in the day.\r\n- \"every expression tree can be uniformly walked using .args\" Yup.  Totally agreed.  This is definitely a part of SymPy that I would like for us to steal.\r\n- Regarding traversal techniques I think that we can leave this for a future stage.  Just getting expressions, and doing a dead simple optimization routine (maybe just with recursive method calls) seems like a good first step.  We can do lots of things after we have that base.\r\n- I like the args/deps separation.  I think that it is a pragmatic choice.  It's been a while, but I think that we might have done this in Blaze?  (my memory is hazy.)  If so then I think it might have worked out well?  \r\n- I agree with avoiding automatic simplification.  I'd like to avoid the use of `__new__` (I suspect that you will agree)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895582991/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895603257",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-895603257",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 895603257,
        "node_id": "IC_kwDOAbcwm841YdI5",
        "user": {
            "login": "asmeurer",
            "id": 71486,
            "node_id": "MDQ6VXNlcjcxNDg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asmeurer",
            "html_url": "https://github.com/asmeurer",
            "followers_url": "https://api.github.com/users/asmeurer/followers",
            "following_url": "https://api.github.com/users/asmeurer/following{/other_user}",
            "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions",
            "organizations_url": "https://api.github.com/users/asmeurer/orgs",
            "repos_url": "https://api.github.com/users/asmeurer/repos",
            "events_url": "https://api.github.com/users/asmeurer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asmeurer/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T22:53:46Z",
        "updated_at": "2021-08-09T22:53:46Z",
        "author_association": "NONE",
        "body": "> I think that mutability will be ok. Expressions can be immutable, but operations on a collection can create and swap out a new expression. We do this today with Dask graphs. It is also what Theano did back in the day.\r\n\r\nIt sounds like you are saying that the design of collections containing corresponding expressions makes it so that collections can be mutable with expressions immutable. If collections are indeed mutable, I agree this is the best design.\r\n\r\n> Regarding traversal techniques I think that we can leave this for a future stage. Just getting expressions, and doing a dead simple optimization routine (maybe just with recursive method calls) seems like a good first step. We can do lots of things after we have that base.\r\n\r\nThis sounds good. It might be worth getting some basic familiarity with MatchPy to make sure you don't design your way out of the possibility of using it. But other than that, my point is that as long as you have a simple expression tree structure, different kinds of traversal techniques are straightforward to implement.\r\n\r\n> I think that it is a pragmatic choice. It's been a while, but I think that we might have done this in Blaze? (my memory is hazy.) If so then I think it might have worked out well?\r\n\r\nI never worked with Blaze. I'll have to take a look at how it was designed.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895603257/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895603743",
        "html_url": "https://github.com/dask/dask/issues/7933#issuecomment-895603743",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7933",
        "id": 895603743,
        "node_id": "IC_kwDOAbcwm841YdQf",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T22:55:06Z",
        "updated_at": "2021-08-09T22:55:06Z",
        "author_association": "MEMBER",
        "body": "> This sounds good. It might be worth getting some basic familiarity with MatchPy to make sure you don't design your way out of the possibility of using it. But other than that, my point is that as long as you have a simple expression tree structure, different kinds of traversal techniques are straightforward to implement.\r\n\r\nWe'll have to make sure that someone who works on this is familiar with MatchPy ;) \r\n\r\n> I never worked with Blaze. I'll have to take a look at how it was designed.\r\n\r\nI wouldn't look too closely :)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895603743/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]