[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/822538967",
        "html_url": "https://github.com/dask/dask/issues/7574#issuecomment-822538967",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7574",
        "id": 822538967,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjUzODk2Nw==",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-04-19T15:02:26Z",
        "updated_at": "2021-04-19T15:02:26Z",
        "author_association": "MEMBER",
        "body": "CC @jrbourbeau @gjoseph92 @mrocklin ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/822538967/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/822624796",
        "html_url": "https://github.com/dask/dask/issues/7574#issuecomment-822624796",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7574",
        "id": 822624796,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjYyNDc5Ng==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-04-19T16:57:37Z",
        "updated_at": "2021-04-19T16:57:37Z",
        "author_association": "MEMBER",
        "body": "> duplicates data upon msgpack serialization\r\n\r\nCould you explain this? I guess I'm not familiar enough with how serialization uses `__len__` to know what data is being duplicated.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/822624796/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/822632627",
        "html_url": "https://github.com/dask/dask/issues/7574#issuecomment-822632627",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7574",
        "id": 822632627,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjYzMjYyNw==",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-04-19T17:09:41Z",
        "updated_at": "2021-04-19T17:09:41Z",
        "author_association": "MEMBER",
        "body": "> > duplicates data upon msgpack serialization\r\n> \r\n> Could you explain this? I guess I'm not familiar enough with how serialization uses `__len__` to know what data is being duplicated.\r\n\r\nit doesn't. \r\n\r\nIf you disable (some) optimizations, the layers are going to be transferred whole to the scheduler, serialised with msgpack. Unlike pickle, msgpack does not have the notion of multiple references to an object. If (as it is today) you have two keys of ``HighLevelGraph.layers`` pointing to the same dsk dict, that dict will be deep-copied when it is serialised with msgpack.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/822632627/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/822636595",
        "html_url": "https://github.com/dask/dask/issues/7574#issuecomment-822636595",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7574",
        "id": 822636595,
        "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjYzNjU5NQ==",
        "user": {
            "login": "gjoseph92",
            "id": 3309802,
            "node_id": "MDQ6VXNlcjMzMDk4MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gjoseph92",
            "html_url": "https://github.com/gjoseph92",
            "followers_url": "https://api.github.com/users/gjoseph92/followers",
            "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
            "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
            "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
            "repos_url": "https://api.github.com/users/gjoseph92/repos",
            "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-04-19T17:16:00Z",
        "updated_at": "2021-04-19T17:16:00Z",
        "author_association": "MEMBER",
        "body": "Got it, thanks. So it sounds like that's an issue regardless of the `__len__` situation, but it would also be solved by your \"Set Array.layers\" idea, since that would allow us to share the same underlying dict for both layers.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/822636595/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1002232150",
        "html_url": "https://github.com/dask/dask/issues/7574#issuecomment-1002232150",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7574",
        "id": 1002232150,
        "node_id": "IC_kwDOAbcwm847vNlW",
        "user": {
            "login": "abergou",
            "id": 1166198,
            "node_id": "MDQ6VXNlcjExNjYxOTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1166198?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abergou",
            "html_url": "https://github.com/abergou",
            "followers_url": "https://api.github.com/users/abergou/followers",
            "following_url": "https://api.github.com/users/abergou/following{/other_user}",
            "gists_url": "https://api.github.com/users/abergou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abergou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abergou/subscriptions",
            "organizations_url": "https://api.github.com/users/abergou/orgs",
            "repos_url": "https://api.github.com/users/abergou/repos",
            "events_url": "https://api.github.com/users/abergou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abergou/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-12-28T18:33:01Z",
        "updated_at": "2021-12-28T18:33:01Z",
        "author_association": "CONTRIBUTOR",
        "body": "@crusaderky I ran across this in a different context and looked your proposed solutions above. If I understand `HighLevelGraph` correctly then I think the DummyLayer solution you propose above can be made much simpler. I believe that the Dummy layers can simply be empty, but dependent on the \"combined layer\" that contains all of the logic. I think that this solution is quite simple and should generally fix the issues. For cholesky, the fix is then simply the following patch:\r\n```diff\r\ndiff --git a/dask/array/linalg.py b/dask/array/linalg.py\r\nindex fa28423b..2b79cb89 100644\r\n--- a/dask/array/linalg.py\r\n+++ b/dask/array/linalg.py\r\n@@ -1307,6 +1307,8 @@ def _cholesky(a):\r\n     # we can build graph for upper triangular simultaneously\r\n     name_upper = \"cholesky-upper-\" + token\r\n \r\n+    name_combined = \"cholesky-combined-\" + token\r\n+\r\n     # calculates lower triangulars because subscriptions get simpler\r\n     dsk = {}\r\n     for i in range(vdim):\r\n@@ -1343,8 +1345,11 @@ def _cholesky(a):\r\n                 dsk[name_upper, j, i] = (_solve_triangular_lower, (name, j, j), target)\r\n                 dsk[name, i, j] = (np.transpose, (name_upper, j, i))\r\n \r\n-    graph_upper = HighLevelGraph.from_collections(name_upper, dsk, dependencies=[a])\r\n-    graph_lower = HighLevelGraph.from_collections(name, dsk, dependencies=[a])\r\n+    graph = HighLevelGraph.from_collections(name_combined, dsk, dependencies=[a])\r\n+    graph_upper = HighLevelGraph({name_upper: {}, name_combined: graph},\r\n+                                 {name_upper: {name_combined}})\r\n+    graph_lower = HighLevelGraph({name: {}, name_combined: graph},\r\n+                                 {name: {name_combined}})\r\n     a_meta = meta_from_array(a)\r\n     cho = np.linalg.cholesky(array_safe([[1, 2], [2, 5]], dtype=a.dtype, like=a_meta))\r\n     meta = meta_from_array(a, dtype=cho.dtype)\r\n```\r\nThis patch appears to fix the issue; before the patch:\r\n```\r\n>>> a = da.random.normal(size=(3, 3), chunks=-1)\r\n>>> b = da.random.normal(size=(3, 3), chunks=-1)\r\n>>> c = da.linalg.solve(a, b, sym_pos=True)\r\n>>> len(c.dask)\r\n8\r\n>>> len(c.dask.to_dict())\r\n6\r\n```\r\nAfter the patch:\r\n```\r\n>>> a = da.random.normal(size=(3, 3), chunks=-1)\r\n>>> b = da.random.normal(size=(3, 3), chunks=-1)\r\n>>> c = da.linalg.solve(a, b, sym_pos=True)\r\n>>> len(c.dask)\r\n6\r\n>>> len(c.dask.to_dict())\r\n6\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1002232150/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1007549088",
        "html_url": "https://github.com/dask/dask/issues/7574#issuecomment-1007549088",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7574",
        "id": 1007549088,
        "node_id": "IC_kwDOAbcwm848Dfqg",
        "user": {
            "login": "crusaderky",
            "id": 6213168,
            "node_id": "MDQ6VXNlcjYyMTMxNjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6213168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crusaderky",
            "html_url": "https://github.com/crusaderky",
            "followers_url": "https://api.github.com/users/crusaderky/followers",
            "following_url": "https://api.github.com/users/crusaderky/following{/other_user}",
            "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions",
            "organizations_url": "https://api.github.com/users/crusaderky/orgs",
            "repos_url": "https://api.github.com/users/crusaderky/repos",
            "events_url": "https://api.github.com/users/crusaderky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crusaderky/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-01-07T16:33:01Z",
        "updated_at": "2022-01-07T16:33:01Z",
        "author_association": "MEMBER",
        "body": "@abergou the layers returned by ``__dask_layers__`` should contain all the keys returned by ``__dask_keys__``, see\r\nhttps://docs.dask.org/en/latest/custom-collections.html#dask_layers__\r\n\r\nI'm not adverse in principle to changing the spec of the method from\r\n```\r\nTuple of names of the HighLevelGraph layers which contain all keys returned by __dask_keys__().\r\n```\r\nto\r\n```\r\nTuple of names of the HighLevelGraph layers which either contain all keys returned by __dask_keys__()\r\nor directly or indirectly link, through the layers dependency graph, to the layers that do.\r\n```\r\n\r\nHowever we'd need to investigate all current uses of ``__dask_layers__`` - namely I suspect it may not play nice with ``dask.graph_optmization``.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1007549088/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1007601253",
        "html_url": "https://github.com/dask/dask/issues/7574#issuecomment-1007601253",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7574",
        "id": 1007601253,
        "node_id": "IC_kwDOAbcwm848DsZl",
        "user": {
            "login": "abergou",
            "id": 1166198,
            "node_id": "MDQ6VXNlcjExNjYxOTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1166198?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/abergou",
            "html_url": "https://github.com/abergou",
            "followers_url": "https://api.github.com/users/abergou/followers",
            "following_url": "https://api.github.com/users/abergou/following{/other_user}",
            "gists_url": "https://api.github.com/users/abergou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/abergou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/abergou/subscriptions",
            "organizations_url": "https://api.github.com/users/abergou/orgs",
            "repos_url": "https://api.github.com/users/abergou/repos",
            "events_url": "https://api.github.com/users/abergou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/abergou/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-01-07T17:41:36Z",
        "updated_at": "2022-01-07T17:41:36Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for clarifying @crusaderky! I did just notice that this change seems to break visualization suggesting that it would require some work to get this working well. I guess, let's call this solution 3B. Then to summarize: 3 would require no changes to dask aside from localized somewhat ugly changes to the function that use this functionality, 3B would require some changes to change the invariant (maybe it would be useful to assert this invariant somewhere if it's important?) or modifications to highlevelgraph.py to automatically rewrite the graphs to enforce the invariant, 4 would require modifications to dask. It's unclear which is simpler / better 3B or 4 in my mind. For now in my own functions I'll just go with 3.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1007601253/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]