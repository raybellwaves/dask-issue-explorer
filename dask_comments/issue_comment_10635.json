[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1818698804",
        "html_url": "https://github.com/dask/dask/issues/10635#issuecomment-1818698804",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/10635",
        "id": 1818698804,
        "node_id": "IC_kwDOAbcwm85sZyQ0",
        "user": {
            "login": "fjetter",
            "id": 8629629,
            "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8629629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjetter",
            "html_url": "https://github.com/fjetter",
            "followers_url": "https://api.github.com/users/fjetter/followers",
            "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
            "organizations_url": "https://api.github.com/users/fjetter/orgs",
            "repos_url": "https://api.github.com/users/fjetter/repos",
            "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjetter/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2023-11-20T09:46:26Z",
        "updated_at": "2023-11-20T09:46:54Z",
        "author_association": "MEMBER",
        "body": "This is expected behavior. Contrary to pandas, dask is almost always writing multiple files in a directory-like structure and we'll need to check whether that directory exists or not. At least for non-remote file systems... For remotes this is not a big difference but there are similar checks in place.\r\n\r\nI haven't verified this but I believe this implementation is performing a simple HEAD request to the object path to get some metadata so you'll probably just need a [`GetObjectAttributes`](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAttributes.html) and not a full `GetObject` if that makes a difference to you. We're not actually reading any payload data here, just scouting the area.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1818698804/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]