[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/642303578",
        "html_url": "https://github.com/dask/dask/issues/6312#issuecomment-642303578",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6312",
        "id": 642303578,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjMwMzU3OA==",
        "user": {
            "login": "kortemaki",
            "id": 6666028,
            "node_id": "MDQ6VXNlcjY2NjYwMjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6666028?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kortemaki",
            "html_url": "https://github.com/kortemaki",
            "followers_url": "https://api.github.com/users/kortemaki/followers",
            "following_url": "https://api.github.com/users/kortemaki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kortemaki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kortemaki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kortemaki/subscriptions",
            "organizations_url": "https://api.github.com/users/kortemaki/orgs",
            "repos_url": "https://api.github.com/users/kortemaki/repos",
            "events_url": "https://api.github.com/users/kortemaki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kortemaki/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-10T22:37:08Z",
        "updated_at": "2020-06-10T22:37:08Z",
        "author_association": "NONE",
        "body": "Using named axes seems to get me a bit closer from the graph side of things but no longer computes the correct blockwise matrix and still breaks when it comes time to run the full task graph.\r\n```python\r\nmat = da.blockwise(\r\n    (lambda x,y: cosine_similarity(x[0], y[0])), 'ij',\r\n    inputs, 'i',\r\n    inputs, 'j',\r\n    dtype='f8',\r\n    new_axes={'i':4,'j':4}\r\n)\r\n\r\nprint(mat.compute().shape) \r\n### (2, 2)\r\n\r\nprint(mat.compute().ravel().shape\r\n### (4,)\r\n\r\nmat.compute().ravel()\r\n### array([1. , 0.5, 0.5, 1. ])\r\n\r\nprint(mat.shape) \r\n### (4, 4)\r\n\r\nprint(mat.ravel().shape)\r\n### (16,)\r\n\r\nmat.ravel().compute()\r\n### ValueError: cannot reshape array of size 4 into shape (16,)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/642303578/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/642800150",
        "html_url": "https://github.com/dask/dask/issues/6312#issuecomment-642800150",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6312",
        "id": 642800150,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjgwMDE1MA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-11T16:42:29Z",
        "updated_at": "2020-06-11T16:42:29Z",
        "author_association": "MEMBER",
        "body": "Are your input arrays correct? Do you really want a 1D Dask Array of 2D sparse matricies, or do you rather want a 2D Dask Array?\r\n\r\n\r\n```python\r\nIn [90]: inputs[0]\r\nOut[90]: dask.array<getitem, shape=(), dtype=int64, chunksize=(), chunktype=numpy.ndarray>\r\n\r\nIn [91]: inputs[0].compute()\r\nOut[91]:\r\n<2x4 sparse matrix of type '<class 'numpy.float64'>'\r\n        with 4 stored elements in Compressed Sparse Row format>\r\n```\r\n\r\nIf you want a 2D Dask Array, you might want to investigate the `sparse` package. Something like\r\n\r\n```python\r\nIn [94]: x = sparse.COO.from_scipy_sparse(tfidf[:2, :])\r\n\r\nIn [95]: a = da.from_delayed(dask.delayed(x), shape=x.shape, meta=x)\r\n\r\nIn [96]: b = da.from_delayed(dask.delayed(x), shape=x.shape, meta=x)\r\n\r\nIn [97]: da.concatenate([a, b])\r\nOut[97]: dask.array<concatenate, shape=(4, 4), dtype=float64, chunksize=(2, 4), chunktype=sparse.COO>\r\n```\r\n\r\nI don't have time to look further right now unfortunately. But hopefully that gets you started.\r\n\r\nAs an aside, dask-ml implements FeatureHasher & HashingVectorizer: https://ml.dask.org/modules/api.html#dask-ml-feature-extraction-text-feature-extraction",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/642800150/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/642812153",
        "html_url": "https://github.com/dask/dask/issues/6312#issuecomment-642812153",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6312",
        "id": 642812153,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjgxMjE1Mw==",
        "user": {
            "login": "kortemaki",
            "id": 6666028,
            "node_id": "MDQ6VXNlcjY2NjYwMjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6666028?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kortemaki",
            "html_url": "https://github.com/kortemaki",
            "followers_url": "https://api.github.com/users/kortemaki/followers",
            "following_url": "https://api.github.com/users/kortemaki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kortemaki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kortemaki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kortemaki/subscriptions",
            "organizations_url": "https://api.github.com/users/kortemaki/orgs",
            "repos_url": "https://api.github.com/users/kortemaki/repos",
            "events_url": "https://api.github.com/users/kortemaki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kortemaki/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-11T17:04:05Z",
        "updated_at": "2020-06-11T17:04:05Z",
        "author_association": "NONE",
        "body": "Thanks for the response, I'll see if I can use sparse to get past this on the user side and will update once I find something that works.\r\n\r\nI'm sure it's possible to compute tfidf in dask by vectorizing the texts and normalizing from there, but it's beyond the scope of the issue here.  As an aside, our input dataset is of manageable size N, it's computations over the N^2 similarity matrix that absolutely need to be distributed.\r\n\r\nI still believe it should be possible to define a blockwise operation that changes the number of elements in each chunk (as a result of the computation, not re-chunking).  I have no idea why the new_axes parameter doesn't seem to affect the output shape until the computation is run, and I think it's a bug that you can't chain operations like ravel onto the resulting matrix.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/642812153/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/642868911",
        "html_url": "https://github.com/dask/dask/issues/6312#issuecomment-642868911",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6312",
        "id": 642868911,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjg2ODkxMQ==",
        "user": {
            "login": "kortemaki",
            "id": 6666028,
            "node_id": "MDQ6VXNlcjY2NjYwMjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6666028?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kortemaki",
            "html_url": "https://github.com/kortemaki",
            "followers_url": "https://api.github.com/users/kortemaki/followers",
            "following_url": "https://api.github.com/users/kortemaki/following{/other_user}",
            "gists_url": "https://api.github.com/users/kortemaki/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kortemaki/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kortemaki/subscriptions",
            "organizations_url": "https://api.github.com/users/kortemaki/orgs",
            "repos_url": "https://api.github.com/users/kortemaki/repos",
            "events_url": "https://api.github.com/users/kortemaki/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kortemaki/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-11T18:55:35Z",
        "updated_at": "2020-06-11T18:55:35Z",
        "author_association": "NONE",
        "body": "Alright, the approach suggested by TomAugspurger works as long as you convert the sparse blocks back to scipy representation before calling cosine_similarity!  I'll keep following to see what ultimately happens with this but I'm no longer blocked.  The moral here I guess is if you can at all get your arrays into a native dask format, do so.  I wasn't aware of the sparse.COO chunktype!\r\n\r\n```python\r\nmat = da.blockwise(\r\n    (lambda x,y: cosine_similarity(x[0].to_scipy_sparse(), y[0].to_scipy_sparse())), 'ij',\r\n    inputs, 'ik',\r\n    inputs, 'jk',\r\n    dtype='f8',\r\n)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/642868911/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/642870037",
        "html_url": "https://github.com/dask/dask/issues/6312#issuecomment-642870037",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6312",
        "id": 642870037,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjg3MDAzNw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-06-11T18:57:50Z",
        "updated_at": "2020-06-11T18:57:50Z",
        "author_association": "MEMBER",
        "body": "> I'm sure it's possible to compute tfidf in dask by vectorizing the texts and normalizing from there, but it's beyond the scope of the issue here. \r\n\r\nAgreed. We can chat about that in https://github.com/dask/dask-ml/issues/5 if you have questions / code it share :)\r\n\r\nGlad to hear you got something working. One other important lesson though, is that operations like `.ravel()` might not work if the actual shape of the chunks doesn't match Dask's expectation.\r\n\r\nSo things like the following:\r\n\r\n```python\r\nIn [2]: mat\r\nOut[2]: dask.array<lambda, shape=(2, 2), dtype=float64, chunksize=(1, 1), chunktype=numpy.ndarray>\r\n\r\nIn [3]: mat.shape\r\nOut[3]: (2, 2)\r\n\r\nIn [4]: mat.compute().shape\r\nOut[4]: (4, 4)\r\n```\r\n\r\nare a sign that something has gone wrong. There might still be issues in `blockwise`, but we should addess issues with the block shapes first.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/642870037/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]