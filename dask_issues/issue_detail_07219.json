{
    "url": "https://api.github.com/repos/dask/dask/issues/7219",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/7219/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/7219/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/7219/events",
    "html_url": "https://github.com/dask/dask/issues/7219",
    "id": 808648481,
    "node_id": "MDU6SXNzdWU4MDg2NDg0ODE=",
    "number": 7219,
    "title": "dask.dataframe cannot handle timestamps-as-objects, even though Pandas can",
    "user": {
        "login": "itamarst",
        "id": 3266662,
        "node_id": "MDQ6VXNlcjMyNjY2NjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3266662?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itamarst",
        "html_url": "https://github.com/itamarst",
        "followers_url": "https://api.github.com/users/itamarst/followers",
        "following_url": "https://api.github.com/users/itamarst/following{/other_user}",
        "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions",
        "organizations_url": "https://api.github.com/users/itamarst/orgs",
        "repos_url": "https://api.github.com/users/itamarst/repos",
        "events_url": "https://api.github.com/users/itamarst/events{/privacy}",
        "received_events_url": "https://api.github.com/users/itamarst/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862289,
            "node_id": "MDU6TGFiZWwyNDI4NjIyODk=",
            "url": "https://api.github.com/repos/dask/dask/labels/dataframe",
            "name": "dataframe",
            "color": "fbca04",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 23,
    "created_at": "2021-02-15T15:53:31Z",
    "updated_at": "2023-01-24T20:27:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**What happened**:\r\n\r\nComparing a column that is a timestamp-with-dtype-object to a `datetime.datetime()` object blows up.\r\n\r\n**What you expected to happen**:\r\n\r\nIn Pandas, the comparison works.\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\nThis happens when using a fairly new Pyarrow feature that allows loading timestamps as objects in order to handle larger date ranges.\r\n\r\n```python\r\nimport pyarrow as pa\r\nfrom pyarrow import parquet as pq\r\nimport numpy as np\r\nfrom dask import dataframe as dd\r\nimport pandas as pd\r\nfrom pandas.testing import assert_frame_equal\r\nfrom datetime import datetime\r\n\r\n\r\ndef make_df_with_timestamps():\r\n    # Some of the milliseconds timestamps deliberately don't fit in the range\r\n    # that is possible with nanosecond timestamps.\r\n    df = pd.DataFrame(\r\n        {\r\n            \"dateTimeMs\": [\r\n                np.datetime64(\"0001-01-01 00:00\", \"ms\"),\r\n                np.datetime64(\"2012-05-02 12:35\", \"ms\"),\r\n                np.datetime64(\"2012-05-03 15:42\", \"ms\"),\r\n                np.datetime64(\"3000-05-03 15:42\", \"ms\"),\r\n            ],\r\n            \"dateTimeNs\": [\r\n                np.datetime64(\"1991-01-01 00:00\", \"ns\"),\r\n                np.datetime64(\"2012-05-02 12:35\", \"ns\"),\r\n                np.datetime64(\"2012-05-03 15:42\", \"ns\"),\r\n                np.datetime64(\"2050-05-03 15:42\", \"ns\"),\r\n            ],\r\n        }\r\n    )\r\n    # Not part of what we're testing, just ensuring that the inputs are what we\r\n    # expect.\r\n    assert (df.dateTimeMs.dtype, df.dateTimeNs.dtype) == (\r\n        # O == object, <M8[ns] == timestamp64[ns]\r\n        np.dtype(\"O\"),\r\n        np.dtype(\"<M8[ns]\"),\r\n    )\r\n    return df\r\n\r\n\r\ndef test_timestamp_as_object_out_of_range(tmpdir):\r\n    # Out of range timestamps can be converted Arrow and reloaded into Dask\r\n    # DataFrame with no loss of information if the timestamp_as_object option\r\n    # is True.\r\n    pandas_df = make_df_with_timestamps()\r\n    table = pa.Table.from_pandas(pandas_df)\r\n    filename = tmpdir / \"timestamps_from_pandas.parquet\"\r\n    pq.write_table(table, filename, version=\"2.0\")\r\n\r\n    dask_df = dd.read_parquet(\r\n        filename, engine=\"pyarrow\", arrow_to_pandas={\"timestamp_as_object\": True}\r\n    )\r\n\r\n    # Check roundtripping:\r\n    print(pandas_df)\r\n    pandas_df2 = dask_df.compute()\r\n    print(pandas_df2)\r\n    assert (pandas_df2.dateTimeMs.dtype, pandas_df2.dateTimeNs.dtype) == (\r\n        # O == object, <M8[ns] == timestamp64[ns]\r\n        np.dtype(\"O\"),\r\n        np.dtype(\"<M8[ns]\"),\r\n    )\r\n\r\n    assert_frame_equal(pandas_df, pandas_df2)\r\n\r\n    # Check operations:\r\n    print(\"Dask metadata\", dask_df.dateTimeMs.dtype, dask_df.dateTimeNs.dtype)\r\n\r\n    # Comparing the nanoseconds datetime column works fine:\r\n    pandas_df[pandas_df.dateTimeNs > datetime(2050, 1, 1, 0, 0, 0)]\r\n    dask_df[dask_df.dateTimeNs > datetime(2050, 1, 1, 0, 0, 0)].compute()\r\n\r\n    # Comparing the milliseconds datetime column blows up:\r\n    pandas_df = pandas_df[pandas_df.dateTimeMs > datetime(2500, 1, 1, 0, 0, 0)]\r\n    print(\"Filtered to years>2500\", pandas_df)\r\n    # This next line blows up:\r\n    dask_df = dask_df[dask_df.dateTimeMs > datetime(2500, 1, 1, 0, 0, 0)]\r\n    assert_frame_equal(pandas_df, dask_df.compute())\r\n```\r\n\r\nThis blows up with ` TypeError(\"'>' not supported between instances of 'str' and 'datetime.datetime'\")` on the line doing the Dask comparison (line before last).\r\n\r\n**Anything else we need to know?**:\r\n\r\nI will attempt to provide a PR fixing this.\r\n\r\n**Environment**:\r\n\r\nThis is Dask from git as of Feb 15, 2021, but was reported to me by user using some other, released version. Python 3.8 on Linux.\r\n\r\n```\r\nPackage         Version              Location\r\n--------------- -------------------- -------------------------\r\nattrs           20.3.0\r\ndask            2021.2.0+8.g02b466d2 /home/itamarst/Devel/dask\r\nfsspec          0.8.5\r\niniconfig       1.1.1\r\nlocket          0.2.1\r\nnumpy           1.20.1\r\npackaging       20.9\r\npandas          1.2.2\r\npartd           1.1.0\r\npip             21.0.1\r\npluggy          0.13.1\r\npy              1.10.0\r\npyarrow         3.0.0\r\npyparsing       2.4.7\r\npytest          6.2.2\r\npython-dateutil 2.8.1\r\npytz            2021.1\r\nPyYAML          5.4.1\r\nsetuptools      49.1.3\r\nsix             1.15.0\r\ntoml            0.10.2\r\ntoolz           0.11.1\r\n```",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/7219/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/7219/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}