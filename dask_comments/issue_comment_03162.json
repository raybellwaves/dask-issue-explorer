[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/365098933",
        "html_url": "https://github.com/dask/dask/issues/3162#issuecomment-365098933",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3162",
        "id": 365098933,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTA5ODkzMw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-02-12T23:28:44Z",
        "updated_at": "2018-02-12T23:28:44Z",
        "author_association": "MEMBER",
        "body": "Yeah, it's not clear to me what the right solution is here.  I think that the solution we want for arithmetic operations is \"if it's object dtype, set the result dtype as object also, otherwise test against sample data\".  This might also lead to bad behavior though\r\n\r\n```python\r\nx = np.array(['a', 'b', 'c'])\r\nd = da.from_array(x, chunks=(2,))\r\nd / 2  # we want this to err\r\n```\r\n\r\nI'm curious, how did you run into this situation?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/365098933/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/365104565",
        "html_url": "https://github.com/dask/dask/issues/3162#issuecomment-365104565",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3162",
        "id": 365104565,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTEwNDU2NQ==",
        "user": {
            "login": "fujiisoup",
            "id": 6815844,
            "node_id": "MDQ6VXNlcjY4MTU4NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6815844?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fujiisoup",
            "html_url": "https://github.com/fujiisoup",
            "followers_url": "https://api.github.com/users/fujiisoup/followers",
            "following_url": "https://api.github.com/users/fujiisoup/following{/other_user}",
            "gists_url": "https://api.github.com/users/fujiisoup/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fujiisoup/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fujiisoup/subscriptions",
            "organizations_url": "https://api.github.com/users/fujiisoup/orgs",
            "repos_url": "https://api.github.com/users/fujiisoup/repos",
            "events_url": "https://api.github.com/users/fujiisoup/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fujiisoup/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-02-12T23:58:12Z",
        "updated_at": "2018-02-12T23:58:12Z",
        "author_association": "CONTRIBUTOR",
        "body": "> I'm curious, how did you run into this situation?\r\n\r\nIt's a good point.\r\n\r\nI am working to support nan-reduce method in xarray, in which we use np.nan for missing points.\r\nFrom the parametric testing with many dtype/function combinations, I just noticed that `nanmean`\r\n(we make division in it) fails for an object-typed array with dask backend, while it succeeds with `np.ndarray` backend.\r\n\r\nBut as you pointed out, the actual usecases of `nanmean` with object-dtype would be rare.\r\nIf the design decision or implementation is difficult, I think it's not very worth to work with it...",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/365104565/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/520859308",
        "html_url": "https://github.com/dask/dask/issues/3162#issuecomment-520859308",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/3162",
        "id": 520859308,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDg1OTMwOA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-13T14:30:11Z",
        "updated_at": "2019-08-13T14:30:11Z",
        "author_association": "MEMBER",
        "body": "In theory, we can use `._meta` to do this.\r\n\r\n```python\r\nIn [44]: d._meta / 2  # from @mrocklin's example\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-44-d6b80c3f7fa9> in <module>\r\n----> 1 d._meta / 2\r\n\r\nTypeError: ufunc 'true_divide' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n\r\nIn [45]: dx._meta  # from @fujiisoup's example\r\nOut[45]: array([], dtype=object)\r\n\r\nIn [46]: dx._meta / 2\r\nOut[46]: array([], dtype=object)\r\n```\r\n\r\nBut, do we actually want to do that?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/520859308/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]