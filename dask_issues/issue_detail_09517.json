{
    "url": "https://api.github.com/repos/dask/dask/issues/9517",
    "repository_url": "https://api.github.com/repos/dask/dask",
    "labels_url": "https://api.github.com/repos/dask/dask/issues/9517/labels{/name}",
    "comments_url": "https://api.github.com/repos/dask/dask/issues/9517/comments",
    "events_url": "https://api.github.com/repos/dask/dask/issues/9517/events",
    "html_url": "https://github.com/dask/dask/issues/9517",
    "id": 1384429089,
    "node_id": "I_kwDOAbcwm85ShLYh",
    "number": 9517,
    "title": "Avoid expanding \"broadcast-trick\" NumPy arrays when possible",
    "user": {
        "login": "gjoseph92",
        "id": 3309802,
        "node_id": "MDQ6VXNlcjMzMDk4MDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3309802?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gjoseph92",
        "html_url": "https://github.com/gjoseph92",
        "followers_url": "https://api.github.com/users/gjoseph92/followers",
        "following_url": "https://api.github.com/users/gjoseph92/following{/other_user}",
        "gists_url": "https://api.github.com/users/gjoseph92/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gjoseph92/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gjoseph92/subscriptions",
        "organizations_url": "https://api.github.com/users/gjoseph92/orgs",
        "repos_url": "https://api.github.com/users/gjoseph92/repos",
        "events_url": "https://api.github.com/users/gjoseph92/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gjoseph92/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 242862305,
            "node_id": "MDU6TGFiZWwyNDI4NjIzMDU=",
            "url": "https://api.github.com/repos/dask/dask/labels/array",
            "name": "array",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 3468123446,
            "node_id": "LA_kwDOAbcwm87Ot102",
            "url": "https://api.github.com/repos/dask/dask/labels/needs%20attention",
            "name": "needs attention",
            "color": "6d626c",
            "default": false,
            "description": "It's been a while since this was pushed on. Needs attention from the owner or a maintainer."
        },
        {
            "id": 3798602129,
            "node_id": "LA_kwDOAbcwm87iahGR",
            "url": "https://api.github.com/repos/dask/dask/labels/enhancement",
            "name": "enhancement",
            "color": "C2E0C6",
            "default": true,
            "description": "Improve existing functionality or make things work better"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-09-23T23:12:29Z",
    "updated_at": "2022-10-24T02:14:49Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "A common request for advanced dask array users is wanting some way to represent sparsely-chunked arrays (where many/most chunks contain all empty data).\r\n\r\nAs a stopgap for implementing a data structure like this, what if we made it easy to use something with a tiny memory representation for the empty chunks, and operations on or between empty chunks would preserve their tininess?\r\n\r\nThe graph wouldn't be smaller, but at least you'd spend much, much less CPU, memory, and network processing the empty parts. Plus, this could be used when loading large datasets, when you don't know in advance which chunks are going to be empty. In `from_zarr`, for example, if a chunk ends up being all 0 when read from cloud storage, it could return a \"tiny thing\" instead of a full array of 0s.\r\n\r\nWell, turns out there already is a thing with a tiny memory representation for NumPy arrays: a \"broadcast-trick\" NumPy array. \r\n\r\n```python\r\nimport numpy as np\r\nfrom dask.sizeof import sizeof\r\n\r\na = np.broadcast_to(1, (10, 10))\r\na.shape  # (10, 10)\r\nsizeof(a)  # 8\r\nsizeof(a + 1)  # 800\r\n```\r\n\r\nAnd, Dask already uses this broadcast trick internally for things like `ones`, `zeros`, `full`, etc:\r\nhttps://github.com/dask/dask/blob/72832d4bd685a25000ee646966a1aa5d0d8a1793/dask/array/wrap.py#L140-L158\r\n\r\nThe problem is that right now, NumPy doesn't preserve the tininess of these things. Any operation on a broadcast-trick array materializes it into a full-size array.\r\n\r\nBut it would be pretty feasible to make basic dask operators aware of these. We'd need a small wrapper function for arithmetic operations (`__add__`, etc.), and trivial implementations for basic reductions (`sum`, `prod`, etc.).\r\n\r\nThen, I think libraries or users could produce broadcast-trick input chunks, and everything downstream would just work. And it wouldn't break any existing code, since they're still valid NumPy arrays\u2014worst case, they just get materialized like they used to be.\r\n\r\nOffhand, it seems that broadcast-trick-aware operations would be 5-10x faster\u2014and, of course, use effectively no memory:\r\n\r\n```python\r\nIn [5]: arr = np.ones(100_000)\r\n\r\nIn [6]: %timeit arr.sum()\r\n30.1 \u00b5s \u00b1 1.05 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [7]: ae = np.broadcast_to(1, arr.shape)\r\n\r\nIn [8]: %timeit ae.sum()\r\n30 \u00b5s \u00b1 206 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [9]: %timeit ae.base * ae.size\r\n651 ns \u00b1 10.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 1,000,000 loops each)\r\n```\r\n\r\n```python\r\nIn [13]: %timeit arr + arr\r\n27.2 \u00b5s \u00b1 496 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [14]: %timeit ae + ae\r\n46 \u00b5s \u00b1 310 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [15]: %timeit np.broadcast_to(ae.base + ae.base, ae.shape)\r\n4.69 \u00b5s \u00b1 96 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\r\n```\r\n\r\ncc @ian-r-rose @jrbourbeau ",
    "closed_by": null,
    "reactions": {
        "url": "https://api.github.com/repos/dask/dask/issues/9517/reactions",
        "total_count": 2,
        "+1": 1,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/dask/dask/issues/9517/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}