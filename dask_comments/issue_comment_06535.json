[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/677733830",
        "html_url": "https://github.com/dask/dask/issues/6535#issuecomment-677733830",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6535",
        "id": 677733830,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzczMzgzMA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-20T15:26:07Z",
        "updated_at": "2020-08-20T15:26:07Z",
        "author_association": "MEMBER",
        "body": "Thanks for opening the issue. Could you edit the post to include a small example to ensure that we're all on the same page? This is something I've wondered about myself.\r\n\r\nThe current setup (apply gives the user-defined function pandas objects) perhaps works well when the UDF was written for pandas and you're updating your code to use dask.\r\n\r\nI also thought that there were cases where the function would be called more than once per group, but I'm not seeing that right now.\r\n\r\nDo you have any suggestions for how this could be improved? I'm not sure that we can just outright change `.apply` to pass dask rather than pandas objects. Perhaps we add this as a different method?\r\n\r\n---\r\n\r\n> Better yet, developing a concept of a nested dataframe would encapsulate this idea even better as it would be less destructive (though admittidly it is a bit more ambitious in scope).\r\n\r\nI'm not sure I understand this suggestion.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/677733830/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/677735335",
        "html_url": "https://github.com/dask/dask/issues/6535#issuecomment-677735335",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6535",
        "id": 677735335,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzczNTMzNQ==",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-20T15:28:35Z",
        "updated_at": "2020-08-20T15:28:35Z",
        "author_association": "MEMBER",
        "body": "I was wondering if the kwargs `split_out` or `split_every` could be implemented in apply. But I am still trying to work out how apply currently works.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/677735335/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/677834117",
        "html_url": "https://github.com/dask/dask/issues/6535#issuecomment-677834117",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6535",
        "id": 677834117,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzgzNDExNw==",
        "user": {
            "login": "kyprifog",
            "id": 991756,
            "node_id": "MDQ6VXNlcjk5MTc1Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/991756?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kyprifog",
            "html_url": "https://github.com/kyprifog",
            "followers_url": "https://api.github.com/users/kyprifog/followers",
            "following_url": "https://api.github.com/users/kyprifog/following{/other_user}",
            "gists_url": "https://api.github.com/users/kyprifog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kyprifog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kyprifog/subscriptions",
            "organizations_url": "https://api.github.com/users/kyprifog/orgs",
            "repos_url": "https://api.github.com/users/kyprifog/repos",
            "events_url": "https://api.github.com/users/kyprifog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kyprifog/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-20T18:43:56Z",
        "updated_at": "2020-08-20T18:57:49Z",
        "author_association": "NONE",
        "body": "Here is a contrived example:  say for example you had a function that grouped the dataframe by a value with high cardinality in order to save files segmented by a particular column value like:\r\n\r\n```\r\ndef write_file(df: DataFrame, label_column: str):\r\n   partition_value = df[label].unique()[0]\r\n   df.to_csv(f\"{self.output_path}{label_column}={partition_value}.csv\")\r\n   return None\r\n\r\ndf.groupby(col).apply(self.df_to, col, meta=('x', 'f8')).compute()\r\n```\r\n\r\nRight now DataFrame is assumed to be a pd.DataFrame, but it would be nice if it could be a dask.DataFrame as well, you can see in this case you would need to deconstruct dask dataframes \"to_csv\".   This type of operation would typically return groupings with a high cardinality, so would not play well if df is a pandas DF.\r\n\r\nEventually it would be nice to also be able to subsegment those grouped part files `[col=value.part0, col=value.part1]`, so this change would make that easier (in user code).\r\n\r\nAs far as NestedDataFrames what I am talking about is essentially the nested analogue of DataFrameGroupBy.  You could treat it like a matrix (i,j) where i represents the group index, and j represents the row within the group. You would then partition on sets of (i,j) and distribute those to workers.   It would be similar to the Dask analogue to multi-indexing:  https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html , which appears to be in progress here:  https://github.com/dask/dask/issues/1493\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/677834117/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/677839521",
        "html_url": "https://github.com/dask/dask/issues/6535#issuecomment-677839521",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6535",
        "id": 677839521,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzgzOTUyMQ==",
        "user": {
            "login": "kyprifog",
            "id": 991756,
            "node_id": "MDQ6VXNlcjk5MTc1Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/991756?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kyprifog",
            "html_url": "https://github.com/kyprifog",
            "followers_url": "https://api.github.com/users/kyprifog/followers",
            "following_url": "https://api.github.com/users/kyprifog/following{/other_user}",
            "gists_url": "https://api.github.com/users/kyprifog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kyprifog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kyprifog/subscriptions",
            "organizations_url": "https://api.github.com/users/kyprifog/orgs",
            "repos_url": "https://api.github.com/users/kyprifog/repos",
            "events_url": "https://api.github.com/users/kyprifog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kyprifog/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-20T18:55:21Z",
        "updated_at": "2020-08-20T18:59:36Z",
        "author_association": "NONE",
        "body": "Another potentially related issue:  https://github.com/dask/dask/issues/6070",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/677839521/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/678018644",
        "html_url": "https://github.com/dask/dask/issues/6535#issuecomment-678018644",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6535",
        "id": 678018644,
        "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODAxODY0NA==",
        "user": {
            "login": "kyprifog",
            "id": 991756,
            "node_id": "MDQ6VXNlcjk5MTc1Ng==",
            "avatar_url": "https://avatars.githubusercontent.com/u/991756?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kyprifog",
            "html_url": "https://github.com/kyprifog",
            "followers_url": "https://api.github.com/users/kyprifog/followers",
            "following_url": "https://api.github.com/users/kyprifog/following{/other_user}",
            "gists_url": "https://api.github.com/users/kyprifog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kyprifog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kyprifog/subscriptions",
            "organizations_url": "https://api.github.com/users/kyprifog/orgs",
            "repos_url": "https://api.github.com/users/kyprifog/repos",
            "events_url": "https://api.github.com/users/kyprifog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kyprifog/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-08-21T03:32:21Z",
        "updated_at": "2020-08-21T03:32:21Z",
        "author_association": "NONE",
        "body": "I was able to get around this issue by just casting the pandas dataframe back to a dask dataframe within write_file but I'm still working through the performance impact.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/678018644/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/920331648",
        "html_url": "https://github.com/dask/dask/issues/6535#issuecomment-920331648",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6535",
        "id": 920331648,
        "node_id": "IC_kwDOAbcwm8422yWA",
        "user": {
            "login": "jsignell",
            "id": 4806877,
            "node_id": "MDQ6VXNlcjQ4MDY4Nzc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4806877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsignell",
            "html_url": "https://github.com/jsignell",
            "followers_url": "https://api.github.com/users/jsignell/followers",
            "following_url": "https://api.github.com/users/jsignell/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsignell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsignell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsignell/subscriptions",
            "organizations_url": "https://api.github.com/users/jsignell/orgs",
            "repos_url": "https://api.github.com/users/jsignell/repos",
            "events_url": "https://api.github.com/users/jsignell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsignell/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-09-15T19:55:16Z",
        "updated_at": "2021-09-15T19:55:16Z",
        "author_association": "MEMBER",
        "body": "I just came across this issue again and now I'm wondering if it might make more sense to use `set_index` to reorganize the data by the column that you are grouping by. Another option would be to use `groupby.get_group` and iterate through all the groups. That would make more sense when you have a low cardinality in your `by` column.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/920331648/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]