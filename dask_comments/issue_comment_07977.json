[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894232199",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894232199",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894232199,
        "node_id": "IC_kwDOAbcwm841TOaH",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-06T12:40:29Z",
        "updated_at": "2021-08-06T12:40:29Z",
        "author_association": "MEMBER",
        "body": "cc also @jorisvandenbossche ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894232199/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894257529",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894257529",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894257529,
        "node_id": "IC_kwDOAbcwm841TUl5",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-06T13:22:57Z",
        "updated_at": "2021-08-06T13:22:57Z",
        "author_association": "MEMBER",
        "body": "Any other information about the case that is failing here (e.g. pyarrow version, dask version, data properties)?  I cannot reproduce with the first few simple examples I tried.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894257529/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894278830",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894278830",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894278830,
        "node_id": "IC_kwDOAbcwm841TZyu",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-06T13:57:16Z",
        "updated_at": "2021-08-06T13:57:16Z",
        "author_association": "MEMBER",
        "body": "cc @ian-r-rose ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894278830/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894356321",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894356321",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894356321,
        "node_id": "IC_kwDOAbcwm841Tsth",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-06T15:58:27Z",
        "updated_at": "2021-08-06T15:58:27Z",
        "author_association": "MEMBER",
        "body": "I've seen this, but only on large dataframes (hundreds of millions of rows, hundreds of columns, and thousands of partitions). I'll see if I can come up with a public reproducer, but the versions I was using are:\r\n\r\n`dask==2021.7.2`\r\n`distributed==2021.7.2`\r\n`pyarrow==5.0.0`",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894356321/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894376815",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894376815",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894376815,
        "node_id": "IC_kwDOAbcwm841Txtv",
        "user": {
            "login": "jorisvandenbossche",
            "id": 1020496,
            "node_id": "MDQ6VXNlcjEwMjA0OTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorisvandenbossche",
            "html_url": "https://github.com/jorisvandenbossche",
            "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
            "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
            "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
            "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
            "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-06T16:32:40Z",
        "updated_at": "2021-08-06T16:32:40Z",
        "author_association": "MEMBER",
        "body": "The error comes from here while \"closing\" the ParquetWriter: https://github.com/apache/arrow/blob/227a718efc6dbf57b0cec41a9b8cc432cd849566/python/pyarrow/parquet.py#L697-L700, which accesses the metadata after having closed the file. The metadata property is defined here: https://github.com/apache/arrow/blob/227a718efc6dbf57b0cec41a9b8cc432cd849566/python/pyarrow/_parquet.pyx#L1443-L1454. So it seems that the error might also mask anything that went wrong with creating the metadata.\r\n\r\nDoes using `write_metadata_file=False` eliminate the error?\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894376815/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894425680",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894425680",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894425680,
        "node_id": "IC_kwDOAbcwm841T9pQ",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-06T18:01:18Z",
        "updated_at": "2021-08-06T18:01:18Z",
        "author_association": "MEMBER",
        "body": "> Does using write_metadata_file=False eliminate the error?\n\nI'm only getting this information second-hand, but my understanding is that\nno, this does not eliminate the error.\n\nOn Fri, Aug 6, 2021 at 11:32 AM Joris Van den Bossche <\n***@***.***> wrote:\n\n> The error comes from here while \"closing\" the ParquetWriter:\n> https://github.com/apache/arrow/blob/227a718efc6dbf57b0cec41a9b8cc432cd849566/python/pyarrow/parquet.py#L697-L700,\n> which accesses the metadata after having closed the file. The metadata\n> property is defined here:\n> https://github.com/apache/arrow/blob/227a718efc6dbf57b0cec41a9b8cc432cd849566/python/pyarrow/_parquet.pyx#L1443-L1454.\n> So it seems that the error might also mask anything that went wrong with\n> creating the metadata.\n>\n> Does using write_metadata_file=False eliminate the error?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/7977#issuecomment-894376815>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTGVS3EQF3YRG4ON6BTT3QFDFANCNFSM5BNMFECQ>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894425680/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894578227",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894578227",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894578227,
        "node_id": "IC_kwDOAbcwm841Ui4z",
        "user": {
            "login": "kinghuang",
            "id": 27340,
            "node_id": "MDQ6VXNlcjI3MzQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/27340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kinghuang",
            "html_url": "https://github.com/kinghuang",
            "followers_url": "https://api.github.com/users/kinghuang/followers",
            "following_url": "https://api.github.com/users/kinghuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/kinghuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kinghuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kinghuang/subscriptions",
            "organizations_url": "https://api.github.com/users/kinghuang/orgs",
            "repos_url": "https://api.github.com/users/kinghuang/repos",
            "events_url": "https://api.github.com/users/kinghuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kinghuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-07T00:36:02Z",
        "updated_at": "2021-08-07T00:36:02Z",
        "author_association": "NONE",
        "body": "I'm also running into this problem. Setting `write_metadata_file=False` doesn't eliminate the error.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894578227/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894581994",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894581994",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894581994,
        "node_id": "IC_kwDOAbcwm841Ujzq",
        "user": {
            "login": "kinghuang",
            "id": 27340,
            "node_id": "MDQ6VXNlcjI3MzQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/27340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kinghuang",
            "html_url": "https://github.com/kinghuang",
            "followers_url": "https://api.github.com/users/kinghuang/followers",
            "following_url": "https://api.github.com/users/kinghuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/kinghuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kinghuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kinghuang/subscriptions",
            "organizations_url": "https://api.github.com/users/kinghuang/orgs",
            "repos_url": "https://api.github.com/users/kinghuang/repos",
            "events_url": "https://api.github.com/users/kinghuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kinghuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-07T01:02:35Z",
        "updated_at": "2021-08-07T01:02:35Z",
        "author_association": "NONE",
        "body": "Here's some details for my case. The dataframe to be written has 3.5 million rows, 27 columns, and 12 partitions. Source and destination are on S3. The Dask cluster is running on ECS.\r\n\r\n<details>\r\n<summary>Main part of the code</summary>\r\n\r\n```\r\ndf = dd.read_parquet(\"s3://HIDDEN\", columns=[\r\n\t\"detail_id\",\r\n\t\"invoice_id\",\r\n\t\"line_item_desc\",\r\n\t\"vendor_service_code\",\r\n\t\"vendor_service_category\",\r\n\t\"buyer_id\",\r\n\t\"supplier_id\",\r\n\t\"invoice_date\",\r\n\t\"approved_date\",\r\n\t\"line_item_subtotal\",\r\n\t\"line_item_tax_total\",\r\n\t\"line_item_total\",\r\n\t\"coding_total_usd\",\r\n\t\"uom\",\r\n\t\"unit_price\",\r\n\t\"quantity\",\r\n\t\"category_name\",\r\n\t\"category_method\",\r\n\t\"ft_category\",\r\n\t\"ft_percentage\",\r\n\t\"sql_category\",\r\n\t\"sql_id\",\r\n\t\"ft_rule_category\",\r\n\t\"ft_rule_id\",\r\n\t\"sql_rule_category\",\r\n\t\"sql_rule_id\",\r\n\t\"year\",\r\n\t\"month\",\r\n], filters=[[(\"year\", \"=\", \"2018\"), (\"month\", \"=\", \"3\")]])\r\ndf = df.drop_duplicates(subset=[\"detail_id\"])\r\ndf = df.repartition(npartitions=12, force=True)\r\ndf = df.set_index(\"detail_id\")\r\ndf.to_parquet(\"s3://HIDDEN\", partition_on=[\"year\", \"month\"], write_metadata_file=False)\r\n\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Error traceback</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/core.py\", line 4389, in to_parquet\r\n    return to_parquet(self, path, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/io/parquet/core.py\", line 653, in to_parquet\r\n    out = out.compute(**compute_kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/base.py\", line 286, in compute\r\n    (result,) = compute(self, traverse=False, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/base.py\", line 568, in compute\r\n    results = schedule(dsk, keys, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 2704, in get\r\n    results = self.gather(packed, asynchronous=asynchronous, direct=direct)\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 2018, in gather\r\n    return self.sync(\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 859, in sync\r\n    return sync(\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/utils.py\", line 326, in sync\r\n    raise exc.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/utils.py\", line 309, in f\r\n    result[0] = yield future\r\n  File \"/usr/local/lib/python3.8/site-packages/tornado/gen.py\", line 762, in run\r\n    value = future.result()\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 1883, in _gather\r\n    raise exception.with_traceback(traceback)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/io/parquet/arrow.py\", line 869, in write_partition\r\n    md_list = _write_partitioned(\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/io/parquet/arrow.py\", line 119, in _write_partitioned\r\n    pq.write_table(subtable, f, metadata_collector=md_list, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/pyarrow/parquet.py\", line 1817, in write_table\r\n    writer.write_table(table, row_group_size=row_group_size)\r\n  File \"/usr/local/lib/python3.8/site-packages/pyarrow/parquet.py\", line 662, in __exit__\r\n    self.close()\r\n  File \"/usr/local/lib/python3.8/site-packages/pyarrow/parquet.py\", line 684, in close\r\n    self._metadata_collector.append(self.writer.metadata)\r\n  File \"pyarrow/_parquet.pyx\", line 1434, in pyarrow._parquet.ParquetWriter.metadata.__get__\r\nRuntimeError: file metadata is only available after writer close\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>pip list</summary>\r\n\r\n```\r\nPackage                Version\r\n---------------------- -----------\r\naiobotocore            1.3.3\r\naiohttp                3.7.4.post0\r\naioitertools           0.7.1\r\nalembic                1.6.5\r\nasync-timeout          3.0.1\r\nattrs                  21.2.0\r\nblis                   0.7.4\r\nbokeh                  2.3.3\r\nboto3                  1.17.106\r\nbotocore               1.20.106\r\ncatalogue              2.0.4\r\ncertifi                2021.5.30\r\nchardet                3.0.4\r\ncharset-normalizer     2.0.1\r\nclick                  7.1.2\r\ncloudpickle            1.6.0\r\ncoloredlogs            14.0\r\ncroniter               1.0.15\r\ncymem                  2.0.5\r\ndagster                0.12.1\r\ndagster-aws            0.12.1\r\ndagster-dask           0.12.1\r\ndagster-postgres       0.12.1\r\ndask                   2021.7.0\r\ndask-cloudprovider     2021.6.0\r\ndistributed            2021.7.0\r\ndocstring-parser       0.7.1\r\nfsspec                 2021.7.0\r\nfuture                 0.18.2\r\ngreenlet               1.1.0\r\ngrpcio                 1.38.1\r\ngrpcio-health-checking 1.38.1\r\nHeapDict               1.0.1\r\nhumanfriendly          9.2\r\nidna                   3.2\r\nJinja2                 2.11.3\r\njmespath               0.10.0\r\njoblib                 1.0.1\r\nlocket                 0.2.1\r\nMako                   1.1.4\r\nMarkupSafe             2.0.1\r\nmsgpack                1.0.2\r\nmultidict              5.1.0\r\nmurmurhash             1.0.5\r\nnltk                   3.6.2\r\nnumpy                  1.21.0\r\npackaging              21.0\r\npandas                 1.3.0\r\npartd                  1.2.0\r\npathy                  0.6.0\r\npendulum               2.1.2\r\nPillow                 8.3.1\r\npip                    21.1.3\r\npreshed                3.0.5\r\nprotobuf               3.17.3\r\npsutil                 5.8.0\r\npsycopg2-binary        2.8.6\r\npyarrow                4.0.1\r\npydantic               1.8.2\r\npyenchant              3.2.1\r\npyparsing              2.4.7\r\npython-dateutil        2.8.2\r\npython-editor          1.0.4\r\npytz                   2021.1\r\npytzdata               2020.1\r\nPyYAML                 5.4.1\r\nregex                  2021.7.6\r\nrequests               2.26.0\r\nRx                     1.6.1\r\ns3fs                   0.4.2\r\ns3transfer             0.4.2\r\nsetuptools             57.0.0\r\nsix                    1.16.0\r\nsmart-open             5.1.0\r\nsortedcontainers       2.4.0\r\nspacy                  3.1.1\r\nspacy-legacy           3.0.8\r\nSQLAlchemy             1.4.21\r\nsrsly                  2.4.1\r\ntabulate               0.8.9\r\ntblib                  1.7.0\r\nthinc                  8.0.8\r\ntoolz                  0.11.1\r\ntoposort               1.6\r\ntornado                6.1\r\ntqdm                   4.61.2\r\ntyper                  0.3.2\r\ntyping-compat          0.1.0\r\ntyping-extensions      3.10.0.0\r\nurllib3                1.26.6\r\nwasabi                 0.8.2\r\nwatchdog               2.1.3\r\nwheel                  0.36.2\r\nwordninja              2.0.0\r\nwrapt                  1.12.1\r\nyarl                   1.6.3\r\nzict                   2.0.0\r\n```\r\n</details>\r\n\r\nI have `s3fs` pinned to `0.4.2` due to #6782. Not sure if that has any impact here.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894581994/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894586689",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894586689",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894586689,
        "node_id": "IC_kwDOAbcwm841Uk9B",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-07T01:41:10Z",
        "updated_at": "2021-08-07T01:41:10Z",
        "author_association": "MEMBER",
        "body": ">> Does using write_metadata_file=False eliminate the error?\r\n>\r\n>I'm only getting this information second-hand, but my understanding is that\r\nno, this does not eliminate the error.\r\n\r\nIt looks like we are always collecting the metadata from pyarrow (even when `write_metadata_file=False`). I'd like to know what is causing the problem in pyarrow, but it should be easy to change the `write_metadata_file=False`-behavior on the Dask side.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894586689/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/894826947",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-894826947",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 894826947,
        "node_id": "IC_kwDOAbcwm841VfnD",
        "user": {
            "login": "kinghuang",
            "id": 27340,
            "node_id": "MDQ6VXNlcjI3MzQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/27340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kinghuang",
            "html_url": "https://github.com/kinghuang",
            "followers_url": "https://api.github.com/users/kinghuang/followers",
            "following_url": "https://api.github.com/users/kinghuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/kinghuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kinghuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kinghuang/subscriptions",
            "organizations_url": "https://api.github.com/users/kinghuang/orgs",
            "repos_url": "https://api.github.com/users/kinghuang/repos",
            "events_url": "https://api.github.com/users/kinghuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kinghuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-08T17:08:38Z",
        "updated_at": "2021-08-08T17:09:13Z",
        "author_association": "NONE",
        "body": "I've been able to find the underlying cause of the error for my case! The Dask workers lacked permissions to put objects to the target S3 bucket. The `RuntimeError` went away once that was corrected.\r\n\r\nI'm guessing there's an underlying error being gobbled up in PyArrow when it's writing a table. The metadata thing is likely a red herring.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/894826947/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895027932",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-895027932",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 895027932,
        "node_id": "IC_kwDOAbcwm841WQrc",
        "user": {
            "login": "jorisvandenbossche",
            "id": 1020496,
            "node_id": "MDQ6VXNlcjEwMjA0OTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorisvandenbossche",
            "html_url": "https://github.com/jorisvandenbossche",
            "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
            "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
            "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
            "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
            "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T08:04:59Z",
        "updated_at": "2021-08-09T08:04:59Z",
        "author_association": "MEMBER",
        "body": "Ah, good catch! That aligns with my observation from above (https://github.com/dask/dask/issues/7977#issuecomment-894376815) that the current code in pyarrow might mask any other error that prevented the metadata file from being created. \r\n\r\nAlthough with lacking write permissions, I would have expected that it would only error when *writing* it and not yet when *creating* the metadata object in the attribute.  \r\n\r\nWhen trying to reproduce this locally (with a local filesystem with a read-only directory), the `pq.write_table(subtable, f, metadata_collector=md_list, **kwargs)` already fails when creating `f` (`with fs.open(.., \"wb\") as f)`), so you never get to the metadata error. But maybe with s3fs, depending on your authentication, it only gives a permission error when closing the OpenFile context?\r\n\r\n(having a reproducer would help to check if we can improve this error message on the pyarrow side)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895027932/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895050160",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-895050160",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 895050160,
        "node_id": "IC_kwDOAbcwm841WWGw",
        "user": {
            "login": "jorisvandenbossche",
            "id": 1020496,
            "node_id": "MDQ6VXNlcjEwMjA0OTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorisvandenbossche",
            "html_url": "https://github.com/jorisvandenbossche",
            "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
            "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
            "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
            "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
            "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T08:43:32Z",
        "updated_at": "2021-08-10T08:56:30Z",
        "author_association": "MEMBER",
        "body": "I tried a small reproducer with a public S3 bucket for which I don't have write permissions:\r\n\r\n```python\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\nimport s3fs\r\n\r\ntable = pa.table({'a': [1, 2, 3]})\r\nfs = s3fs.S3FileSystem(anon=True)\r\nmd_list = []\r\n\r\nwith fs.open(\"ursa-labs-taxi-data/data.parquet\", \"wb\") as f:\r\n    with pq.ParquetWriter(f, table.schema, metadata_collector=md_list) as writer:\r\n        writer.write_table(table)\r\n        # small edit to the example, don't call metadata here, since we didn't yet close the writer this always error\r\n        # meta = writer.writer.metadata\r\n```\r\n\r\nfor the latest s3fs that gives a \"PermissionError: Access Denied\" / \"ClientError: An error occurred (AccessDenied) when calling the PutObject operation: Access Denied\". \r\nBut trying the older s3fs 0.4.2 as you listed, I see the RuntimeError as well (although also AccessDenied).\r\n\r\n<details>\r\n<summary>Full traceback</summary>\r\n\r\n```\r\nIn [9]: with fs.open(\"ursa-labs-taxi-data/data.parquet\", \"wb\") as f:\r\n   ...:     with pq.ParquetWriter(f, table.schema) as writer:\r\n   ...:         writer.write_table(table)\r\n   ...:         meta = writer.writer.metadata\r\n   ...: \r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-9-60f024fa1700> in <module>\r\n      3         writer.write_table(table)\r\n----> 4         meta = writer.writer.metadata\r\n      5 \r\n\r\n~/scipy/repos/arrow/python/pyarrow/_parquet.pyx in pyarrow._parquet.ParquetWriter.metadata.__get__()\r\n\r\nRuntimeError: file metadata is only available after writer close\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nClientError                               Traceback (most recent call last)\r\n<ipython-input-9-60f024fa1700> in <module>\r\n      2     with pq.ParquetWriter(f, table.schema) as writer:\r\n      3         writer.write_table(table)\r\n----> 4         meta = writer.writer.metadata\r\n      5 \r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/fsspec/spec.py in __exit__(self, *args)\r\n   1600 \r\n   1601     def __exit__(self, *args):\r\n-> 1602         self.close()\r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/fsspec/spec.py in close(self)\r\n   1567         else:\r\n   1568             if not self.forced:\r\n-> 1569                 self.flush(force=True)\r\n   1570 \r\n   1571             if self.fs is not None:\r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/fsspec/spec.py in flush(self, force)\r\n   1438                 raise\r\n   1439 \r\n-> 1440         if self._upload_chunk(final=force) is not False:\r\n   1441             self.offset += self.buffer.seek(0, 2)\r\n   1442             self.buffer = io.BytesIO()\r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/s3fs/core.py in _upload_chunk(self, final)\r\n   1250 \r\n   1251         if self.autocommit and final:\r\n-> 1252             self.commit()\r\n   1253         return not final\r\n   1254 \r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/s3fs/core.py in commit(self)\r\n   1265                 self.buffer.seek(0)\r\n   1266                 data = self.buffer.read()\r\n-> 1267                 write_result = self._call_s3(\r\n   1268                     self.fs.s3.put_object,\r\n   1269                     Key=self.key, Bucket=self.bucket, Body=data, **self.kwargs\r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/s3fs/core.py in _call_s3(self, method, *kwarglist, **kwargs)\r\n   1128 \r\n   1129     def _call_s3(self, method, *kwarglist, **kwargs):\r\n-> 1130         return self.fs._call_s3(method, self.s3_additional_kwargs, *kwarglist,\r\n   1131                                 **kwargs)\r\n   1132 \r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/s3fs/core.py in _call_s3(self, method, *akwarglist, **kwargs)\r\n    198         additional_kwargs = self._get_s3_method_kwargs(method, *akwarglist,\r\n    199                                                        **kwargs)\r\n--> 200         return method(**additional_kwargs)\r\n    201 \r\n    202     def _get_s3_method_kwargs(self, method, *akwarglist, **kwargs):\r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/botocore/client.py in _api_call(self, *args, **kwargs)\r\n    355                     \"%s() only accepts keyword arguments.\" % py_operation_name)\r\n    356             # The \"self\" in this scope is referring to the BaseClient.\r\n--> 357             return self._make_api_call(operation_name, kwargs)\r\n    358 \r\n    359         _api_call.__name__ = str(py_operation_name)\r\n\r\n~/miniconda3/envs/arrow-dev/lib/python3.8/site-packages/botocore/client.py in _make_api_call(self, operation_name, api_params)\r\n    674             error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n    675             error_class = self.exceptions.from_code(error_code)\r\n--> 676             raise error_class(parsed_response, operation_name)\r\n    677         else:\r\n    678             return parsed_response\r\n\r\nClientError: An error occurred (AccessDenied) when calling the PutObject operation: Access Denied\r\n```\r\n\r\n</details>\r\n\r\n@kinghuang could you try with a more recent version of s3fs to see if that gives a more informative error message? You mentioned https://github.com/dask/dask/issues/6782 as a reason to have pinned s3fs to 0.4.2, but I think those issues should be resolved in the latest versions of s3fs / fsspec / pyarrow.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895050160/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895336106",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-895336106",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 895336106,
        "node_id": "IC_kwDOAbcwm841Xb6q",
        "user": {
            "login": "kinghuang",
            "id": 27340,
            "node_id": "MDQ6VXNlcjI3MzQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/27340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kinghuang",
            "html_url": "https://github.com/kinghuang",
            "followers_url": "https://api.github.com/users/kinghuang/followers",
            "following_url": "https://api.github.com/users/kinghuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/kinghuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kinghuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kinghuang/subscriptions",
            "organizations_url": "https://api.github.com/users/kinghuang/orgs",
            "repos_url": "https://api.github.com/users/kinghuang/repos",
            "events_url": "https://api.github.com/users/kinghuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kinghuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T15:50:23Z",
        "updated_at": "2021-08-09T15:50:23Z",
        "author_association": "NONE",
        "body": "I spun up a Dask cluster with the following modules.\r\n\r\n```\r\nPackage                Version\r\n---------------------- -----------\r\nboto3                  1.17.106\r\nbotocore               1.20.106\r\ndask                   2021.7.2\r\ndask-cloudprovider     2021.6.0\r\ndistributed            2021.7.2\r\nfsspec                 2021.7.0\r\npyarrow                5.0.0\r\ns3fs                   2021.7.0\r\n```\r\n\r\nIt still produces a `RuntimeError` about the metadata.\r\n\r\n<details>\r\n<summary>Traceback</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/core.py\", line 4453, in to_parquet\r\n    return to_parquet(self, path, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/io/parquet/core.py\", line 722, in to_parquet\r\n    out = out.compute(**compute_kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/base.py\", line 286, in compute\r\n    (result,) = compute(self, traverse=False, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/base.py\", line 568, in compute\r\n    results = schedule(dsk, keys, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 2748, in get\r\n    results = self.gather(packed, asynchronous=asynchronous, direct=direct)\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 2025, in gather\r\n    return self.sync(\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 866, in sync\r\n    return sync(\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/utils.py\", line 326, in sync\r\n    raise exc.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/utils.py\", line 309, in f\r\n    result[0] = yield future\r\n  File \"/usr/local/lib/python3.8/site-packages/tornado/gen.py\", line 762, in run\r\n    value = future.result()\r\n  File \"/usr/local/lib/python3.8/site-packages/distributed/client.py\", line 1890, in _gather\r\n    raise exception.with_traceback(traceback)\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/io/parquet/arrow.py\", line 930, in write_partition\r\n    md_list = _write_partitioned(\r\n  File \"/usr/local/lib/python3.8/site-packages/dask/dataframe/io/parquet/arrow.py\", line 123, in _write_partitioned\r\n    pq.write_table(subtable, f, metadata_collector=md_list, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/pyarrow/parquet.py\", line 1987, in write_table\r\n    writer.write_table(table, row_group_size=row_group_size)\r\n  File \"/usr/local/lib/python3.8/site-packages/pyarrow/parquet.py\", line 678, in __exit__\r\n    self.close()\r\n  File \"/usr/local/lib/python3.8/site-packages/pyarrow/parquet.py\", line 700, in close\r\n    self._metadata_collector.append(self.writer.metadata)\r\n  File \"pyarrow/_parquet.pyx\", line 1453, in pyarrow._parquet.ParquetWriter.metadata.__get__\r\nRuntimeError: file metadata is only available after writer close\r\n```\r\n</details>\r\n\r\nIf I go to one of the cluster nodes and run the reproducer, I do see the same `PermissionError` that you got.\r\n\r\n<details>\r\n<summary>Traceback</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/s3fs/core.py\", line 246, in _call_s3\r\n    out = await method(**additional_kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/aiobotocore/client.py\", line 155, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (AccessDenied) when calling the PutObject operation: Access Denied\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 4, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/fsspec/spec.py\", line 1602, in __exit__\r\n    self.close()\r\n  File \"/usr/local/lib/python3.8/site-packages/fsspec/spec.py\", line 1569, in close\r\n    self.flush(force=True)\r\n  File \"/usr/local/lib/python3.8/site-packages/fsspec/spec.py\", line 1440, in flush\r\n    if self._upload_chunk(final=force) is not False:\r\n  File \"/usr/local/lib/python3.8/site-packages/s3fs/core.py\", line 1977, in _upload_chunk\r\n    self.commit()\r\n  File \"/usr/local/lib/python3.8/site-packages/s3fs/core.py\", line 1992, in commit\r\n    write_result = self._call_s3(\r\n  File \"/usr/local/lib/python3.8/site-packages/s3fs/core.py\", line 1844, in _call_s3\r\n    return self.fs.call_s3(method, self.s3_additional_kwargs, *kwarglist, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/fsspec/asyn.py\", line 88, in wrapper\r\n    return sync(self.loop, func, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/fsspec/asyn.py\", line 69, in sync\r\n    raise result[0]\r\n  File \"/usr/local/lib/python3.8/site-packages/fsspec/asyn.py\", line 25, in _runner\r\n    result[0] = await coro\r\n  File \"/usr/local/lib/python3.8/site-packages/s3fs/core.py\", line 265, in _call_s3\r\n    raise translate_boto_error(err)\r\nPermissionError: Access Denied\r\n```\r\n</details>",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895336106/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895354688",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-895354688",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 895354688,
        "node_id": "IC_kwDOAbcwm841XgdA",
        "user": {
            "login": "kinghuang",
            "id": 27340,
            "node_id": "MDQ6VXNlcjI3MzQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/27340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kinghuang",
            "html_url": "https://github.com/kinghuang",
            "followers_url": "https://api.github.com/users/kinghuang/followers",
            "following_url": "https://api.github.com/users/kinghuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/kinghuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kinghuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kinghuang/subscriptions",
            "organizations_url": "https://api.github.com/users/kinghuang/orgs",
            "repos_url": "https://api.github.com/users/kinghuang/repos",
            "events_url": "https://api.github.com/users/kinghuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kinghuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T16:14:42Z",
        "updated_at": "2021-08-09T16:18:49Z",
        "author_association": "NONE",
        "body": "I suspect the problem lies in one of the context managers, though I'm not sure if it's the file's context manager or the `ParquetWriter`'s context manager. fsspec's [`AbstractBufferedFile` context manager](https://github.com/intake/filesystem_spec/blob/master/fsspec/spec.py#L1601) doesn't consider whether an exception was thrown. PyArrow's [ParquetWriter context manager](https://github.com/apache/arrow/blob/master/python/pyarrow/parquet.py#L677) explicitly propagates.\r\n\r\nOverall, this means that [`ParquetWriter.close()`](https://github.com/apache/arrow/blob/0f1c3a3bddf46c8981c2582b81bf6ffbea0b41a8/python/pyarrow/parquet.py#L695) is being called without considering that an `AccessDenied` occurred on the `PutObject` operation. So the metadata is being accessed in the `close()` even though the write didn't succeed in the first place.\r\n\r\nThe [documentation for `object.__exit__`](https://docs.python.org/3/reference/datamodel.html#object.__exit__) describes how the exception is passed if the context was exited *because* of an exception, which is processed *after* the exit completes if it returns a non-true value.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895354688/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895361508",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-895361508",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 895361508,
        "node_id": "IC_kwDOAbcwm841XiHk",
        "user": {
            "login": "kinghuang",
            "id": 27340,
            "node_id": "MDQ6VXNlcjI3MzQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/27340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kinghuang",
            "html_url": "https://github.com/kinghuang",
            "followers_url": "https://api.github.com/users/kinghuang/followers",
            "following_url": "https://api.github.com/users/kinghuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/kinghuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kinghuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kinghuang/subscriptions",
            "organizations_url": "https://api.github.com/users/kinghuang/orgs",
            "repos_url": "https://api.github.com/users/kinghuang/repos",
            "events_url": "https://api.github.com/users/kinghuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kinghuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-09T16:23:52Z",
        "updated_at": "2021-08-09T16:24:29Z",
        "author_association": "NONE",
        "body": "Looking at it some more, I'm pretty sure it's the PyArrow ParquetWriter context manager that needs to explicitly consider whether an exception was thrown in [`__exit__()`](https://github.com/apache/arrow/blob/0f1c3a3bddf46c8981c2582b81bf6ffbea0b41a8/python/pyarrow/parquet.py#L677), in addition to propagating it. I think it needs to tell the [`close()`](https://github.com/apache/arrow/blob/0f1c3a3bddf46c8981c2582b81bf6ffbea0b41a8/python/pyarrow/parquet.py#L695) method to only clean up and not attempt to collect metadata when an exception is raised.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895361508/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/895854610",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-895854610",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 895854610,
        "node_id": "IC_kwDOAbcwm841ZagS",
        "user": {
            "login": "jorisvandenbossche",
            "id": 1020496,
            "node_id": "MDQ6VXNlcjEwMjA0OTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorisvandenbossche",
            "html_url": "https://github.com/jorisvandenbossche",
            "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
            "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
            "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
            "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
            "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-10T08:57:09Z",
        "updated_at": "2021-08-10T08:57:09Z",
        "author_association": "MEMBER",
        "body": ">  I think it needs to tell the close() method to only clean up and not attempt to collect metadata when an exception is raised.\r\n\r\nSomething like the following?\r\n\r\n```diff\r\n--- a/python/pyarrow/parquet.py\r\n+++ b/python/pyarrow/parquet.py\r\n@@ -675,7 +675,7 @@ schema : arrow Schema\r\n         return self\r\n \r\n     def __exit__(self, *args, **kwargs):\r\n-        self.close()\r\n+        self.close(successful=args[0] is None)\r\n         # return false since we want to propagate exceptions\r\n         return False\r\n \r\n@@ -692,11 +692,11 @@ schema : arrow Schema\r\n \r\n         self.writer.write_table(table, row_group_size=row_group_size)\r\n \r\n-    def close(self):\r\n+    def close(self, successful=True):\r\n         if self.is_open:\r\n             self.writer.close()\r\n             self.is_open = False\r\n-            if self._metadata_collector is not None:\r\n+            if self._metadata_collector is not None and successful:\r\n                 self._metadata_collector.append(self.writer.metadata)\r\n         if self.file_handle is not None:\r\n             self.file_handle.close()\r\n```\r\n\r\nI still can't reproduce it locally (so difficult to check the above patch). With my small test (with a read-only bucket and anonymous access, this might certainly be different), the Permission error only happens after the closing of the ParquetWriter context (ParquetWriter itself doesn't error, and thus can also access the metadata fine, it's only the closing of the s3fs open context that gives a PermissionError)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/895854610/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/896055430",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-896055430",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 896055430,
        "node_id": "IC_kwDOAbcwm841aLiG",
        "user": {
            "login": "kinghuang",
            "id": 27340,
            "node_id": "MDQ6VXNlcjI3MzQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/27340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kinghuang",
            "html_url": "https://github.com/kinghuang",
            "followers_url": "https://api.github.com/users/kinghuang/followers",
            "following_url": "https://api.github.com/users/kinghuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/kinghuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kinghuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kinghuang/subscriptions",
            "organizations_url": "https://api.github.com/users/kinghuang/orgs",
            "repos_url": "https://api.github.com/users/kinghuang/repos",
            "events_url": "https://api.github.com/users/kinghuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kinghuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-10T14:02:47Z",
        "updated_at": "2021-08-10T14:02:47Z",
        "author_association": "NONE",
        "body": "That looks reasonable. I'll monkeypatch a cluster with that change and see what happens.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/896055430/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/905943340",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-905943340",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 905943340,
        "node_id": "IC_kwDOAbcwm841_5ks",
        "user": {
            "login": "jrbourbeau",
            "id": 11656932,
            "node_id": "MDQ6VXNlcjExNjU2OTMy",
            "avatar_url": "https://avatars.githubusercontent.com/u/11656932?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrbourbeau",
            "html_url": "https://github.com/jrbourbeau",
            "followers_url": "https://api.github.com/users/jrbourbeau/followers",
            "following_url": "https://api.github.com/users/jrbourbeau/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrbourbeau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrbourbeau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrbourbeau/subscriptions",
            "organizations_url": "https://api.github.com/users/jrbourbeau/orgs",
            "repos_url": "https://api.github.com/users/jrbourbeau/repos",
            "events_url": "https://api.github.com/users/jrbourbeau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrbourbeau/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2021-08-25T23:31:02Z",
        "updated_at": "2021-08-25T23:31:02Z",
        "author_association": "MEMBER",
        "body": "Thanks for working through things here @kinghuang @jorisvandenbossche. I tried but am not able to reproduce the `RuntimeError: file metadata is only available after writer close` error consistently. @kinghuang are you able to reproduce? Does Joris' patch help? ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/905943340/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1055747624",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1055747624",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1055747624,
        "node_id": "IC_kwDOAbcwm84-7W4o",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-01T18:47:05Z",
        "updated_at": "2022-03-01T18:47:05Z",
        "author_association": "MEMBER",
        "body": "Just checking in here, @kinghuang were you able to retest with Joris's patch? Was any work ever done upstream in pyarrow to resolve this?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1055747624/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1063461523",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1063461523",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1063461523,
        "node_id": "IC_kwDOAbcwm84_YyKT",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-03-09T22:54:33Z",
        "updated_at": "2022-03-09T22:54:33Z",
        "author_association": "MEMBER",
        "body": "I ran into this again today -- not sure if I'll be able to reproduce it reliably, but if I can I'll try the above patch.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1063461523/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1087736991",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1087736991",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1087736991,
        "node_id": "IC_kwDOAbcwm85A1Yyf",
        "user": {
            "login": "jorisvandenbossche",
            "id": 1020496,
            "node_id": "MDQ6VXNlcjEwMjA0OTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorisvandenbossche",
            "html_url": "https://github.com/jorisvandenbossche",
            "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
            "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
            "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
            "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
            "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-04-04T16:01:39Z",
        "updated_at": "2022-04-04T16:01:39Z",
        "author_association": "MEMBER",
        "body": "@ian-r-rose were you able to get something reproducible?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1087736991/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1087738938",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1087738938",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1087738938,
        "node_id": "IC_kwDOAbcwm85A1ZQ6",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-04-04T16:03:23Z",
        "updated_at": "2022-04-04T16:03:23Z",
        "author_association": "MEMBER",
        "body": "Unfortunately not, I thought I had it, and it went away again...",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1087738938/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1112657211",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1112657211",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1112657211,
        "node_id": "IC_kwDOAbcwm85CUc07",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-04-28T21:10:24Z",
        "updated_at": "2022-04-28T21:10:24Z",
        "author_association": "MEMBER",
        "body": "Okay, I finally have a snippet that reproduces the above error, though I have no idea how close it is to the original error. The trick is to create an invalid arrow dataset (in this case by not allowing timestamp coercion):\r\n\r\n```\r\ndask==2022.4.1\r\npandas==1.4.2\r\npyarrow=7.0\r\n```\r\n\r\n```python\r\nimport pandas as pd\r\nimport dask.dataframe as dd\r\n\r\ndf = pd.DataFrame({\"time\": pd.date_range(\"2022-01-01\", \"2022-01-02\", periods=500)})\r\nddf = dd.from_pandas(df, chunksize=100)\r\nddf.to_parquet(\r\n    \"tmp.parquet\",\r\n    engine=\"pyarrow\",\r\n    write_metadata_file=True,\r\n    coerce_timestamps=\"us\",\r\n    allow_truncated_timestamps=False,\r\n)\r\n```\r\n\r\nProduces:\r\n\r\n<details>\r\n\r\n<summary>Traceback</summary>\r\n\r\n```python-traceback\r\n---------------------------------------------------------------------------\r\nArrowInvalid                              Traceback (most recent call last)\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/parquet.py in write_table(table, where, row_group_size, version, use_dictionary, compression, write_statistics, use_deprecated_int96_timestamps, coerce_timestamps, allow_truncated_timestamps, data_page_size, flavor, filesystem, compression_level, use_byte_stream_split, column_encoding, data_page_version, use_compliant_nested_type, **kwargs)\r\n   2091                 **kwargs) as writer:\r\n-> 2092             writer.write_table(table, row_group_size=row_group_size)\r\n   2093     except Exception:\r\n\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/parquet.py in write_table(self, table, row_group_size)\r\n    753 \r\n--> 754         self.writer.write_table(table, row_group_size=row_group_size)\r\n    755 \r\n\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/_parquet.pyx in pyarrow._parquet.ParquetWriter.write_table()\r\n\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowInvalid: Casting from timestamp[ns] to timestamp[us] would lose data: 1641064458517034068\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nRuntimeError                              Traceback (most recent call last)\r\n/tmp/ipykernel_768746/3301203153.py in <module>\r\n      4 df = pd.DataFrame({\"time\": pd.date_range(\"2022-01-01\", \"2022-01-02\", periods=500)})\r\n      5 ddf = dd.from_pandas(df, chunksize=100)\r\n----> 6 ddf.to_parquet(\r\n      7     \"tmp.parquet\",\r\n      8     engine=\"pyarrow\",\r\n\r\n~/dask/dask/dask/dataframe/core.py in to_parquet(self, path, *args, **kwargs)\r\n   4988         from dask.dataframe.io import to_parquet\r\n   4989 \r\n-> 4990         return to_parquet(self, path, *args, **kwargs)\r\n   4991 \r\n   4992     def to_orc(self, path, *args, **kwargs):\r\n\r\n~/dask/dask/dask/dataframe/io/parquet/core.py in to_parquet(df, path, engine, compression, write_index, append, overwrite, ignore_divisions, partition_on, storage_options, custom_metadata, write_metadata_file, compute, compute_kwargs, schema, name_function, **kwargs)\r\n    884 \r\n    885     if compute:\r\n--> 886         out = out.compute(**compute_kwargs)\r\n    887 \r\n    888     # Invalidate the filesystem listing cache for the output path after write.\r\n\r\n~/dask/dask/dask/base.py in compute(self, **kwargs)\r\n    290         dask.base.compute\r\n    291         \"\"\"\r\n--> 292         (result,) = compute(self, traverse=False, **kwargs)\r\n    293         return result\r\n    294 \r\n\r\n~/dask/dask/dask/base.py in compute(traverse, optimize_graph, scheduler, get, *args, **kwargs)\r\n    573         postcomputes.append(x.__dask_postcompute__())\r\n    574 \r\n--> 575     results = schedule(dsk, keys, **kwargs)\r\n    576     return repack([f(r, *a) for r, (f, a) in zip(results, postcomputes)])\r\n    577 \r\n\r\n~/dask/dask/dask/threaded.py in get(dsk, result, cache, num_workers, pool, **kwargs)\r\n     79             pool = MultiprocessingPoolExecutor(pool)\r\n     80 \r\n---> 81     results = get_async(\r\n     82         pool.submit,\r\n     83         pool._max_workers,\r\n\r\n~/dask/dask/dask/local.py in get_async(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)\r\n    506                             _execute_task(task, data)  # Re-execute locally\r\n    507                         else:\r\n--> 508                             raise_exception(exc, tb)\r\n    509                     res, worker_id = loads(res_info)\r\n    510                     state[\"cache\"][key] = res\r\n\r\n~/dask/dask/dask/local.py in reraise(exc, tb)\r\n    314     if exc.__traceback__ is not tb:\r\n    315         raise exc.with_traceback(tb)\r\n--> 316     raise exc\r\n    317 \r\n    318 \r\n\r\n~/dask/dask/dask/local.py in execute_task(key, task_info, dumps, loads, get_id, pack_exception)\r\n    219     try:\r\n    220         task, data = loads(task_info)\r\n--> 221         result = _execute_task(task, data)\r\n    222         id = get_id()\r\n    223         result = dumps((result, id))\r\n\r\n~/dask/dask/dask/core.py in _execute_task(arg, cache, dsk)\r\n    117         # temporaries by their reference count and can execute certain\r\n    118         # operations in-place.\r\n--> 119         return func(*(_execute_task(a, cache) for a in args))\r\n    120     elif not ishashable(arg):\r\n    121         return arg\r\n\r\n~/dask/dask/dask/optimization.py in __call__(self, *args)\r\n    988         if not len(args) == len(self.inkeys):\r\n    989             raise ValueError(\"Expected %d args, got %d\" % (len(self.inkeys), len(args)))\r\n--> 990         return core.get(self.dsk, self.outkey, dict(zip(self.inkeys, args)))\r\n    991 \r\n    992     def __reduce__(self):\r\n\r\n~/dask/dask/dask/core.py in get(dsk, out, cache)\r\n    147     for key in toposort(dsk):\r\n    148         task = dsk[key]\r\n--> 149         result = _execute_task(task, cache)\r\n    150         cache[key] = result\r\n    151     result = _execute_task(out, cache)\r\n\r\n~/dask/dask/dask/core.py in _execute_task(arg, cache, dsk)\r\n    117         # temporaries by their reference count and can execute certain\r\n    118         # operations in-place.\r\n--> 119         return func(*(_execute_task(a, cache) for a in args))\r\n    120     elif not ishashable(arg):\r\n    121         return arg\r\n\r\n~/dask/dask/dask/dataframe/io/parquet/core.py in __call__(self, df, block_index)\r\n    148 \r\n    149         # Write out data\r\n--> 150         return self.engine.write_partition(\r\n    151             df,\r\n    152             self.path,\r\n\r\n~/dask/dask/dask/dataframe/io/parquet/arrow.py in write_partition(cls, df, path, fs, filename, partition_on, return_metadata, fmd, compression, index_cols, schema, head, custom_metadata, **kwargs)\r\n    706             md_list = []\r\n    707             with fs.open(fs.sep.join([path, filename]), \"wb\") as fil:\r\n--> 708                 pq.write_table(\r\n    709                     t,\r\n    710                     fil,\r\n\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/parquet.py in write_table(table, where, row_group_size, version, use_dictionary, compression, write_statistics, use_deprecated_int96_timestamps, coerce_timestamps, allow_truncated_timestamps, data_page_size, flavor, filesystem, compression_level, use_byte_stream_split, column_encoding, data_page_version, use_compliant_nested_type, **kwargs)\r\n   2090                 use_compliant_nested_type=use_compliant_nested_type,\r\n   2091                 **kwargs) as writer:\r\n-> 2092             writer.write_table(table, row_group_size=row_group_size)\r\n   2093     except Exception:\r\n   2094         if _is_path_like(where):\r\n\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/parquet.py in __exit__(self, *args, **kwargs)\r\n    692 \r\n    693     def __exit__(self, *args, **kwargs):\r\n--> 694         self.close(successful=args[0] is None)\r\n    695         # return false since we want to propagate exceptions\r\n    696         return False\r\n\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/parquet.py in close(self, successful)\r\n    759             self.is_open = False\r\n    760             if self._metadata_collector is not None: #  and successful:\r\n--> 761                 self._metadata_collector.append(self.writer.metadata)\r\n    762         if self.file_handle is not None:\r\n    763             self.file_handle.close()\r\n\r\n~/miniconda3/envs/dask/lib/python3.8/site-packages/pyarrow/_parquet.pyx in pyarrow._parquet.ParquetWriter.metadata.__get__()\r\n\r\nRuntimeError: file metadata is only available after writer close\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n@jorisvandenbossche I can confirm that your patch above does fix the `RuntimeError` (though of course the `ArrowInvalid` error then makes its way to the user).\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1112657211/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1129045833",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1129045833",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1129045833,
        "node_id": "IC_kwDOAbcwm85DS99J",
        "user": {
            "login": "ian-r-rose",
            "id": 5728311,
            "node_id": "MDQ6VXNlcjU3MjgzMTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ian-r-rose",
            "html_url": "https://github.com/ian-r-rose",
            "followers_url": "https://api.github.com/users/ian-r-rose/followers",
            "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
            "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
            "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
            "repos_url": "https://api.github.com/users/ian-r-rose/repos",
            "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-17T15:58:10Z",
        "updated_at": "2022-05-17T15:58:10Z",
        "author_association": "MEMBER",
        "body": "Hi @jorisvandenbossche, any thoughts on whether we should apply your above patch?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1129045833/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1135671909",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1135671909",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1135671909,
        "node_id": "IC_kwDOAbcwm85DsPpl",
        "user": {
            "login": "jorisvandenbossche",
            "id": 1020496,
            "node_id": "MDQ6VXNlcjEwMjA0OTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1020496?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jorisvandenbossche",
            "html_url": "https://github.com/jorisvandenbossche",
            "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
            "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
            "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
            "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
            "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
            "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2022-05-24T09:45:07Z",
        "updated_at": "2022-05-24T09:45:07Z",
        "author_association": "MEMBER",
        "body": "Thanks for the reproducer! I can reproduce it with the above dask example, but if I try to extract the relevant pyarrow example, I don't see the failure:\r\n\r\n```\r\nimport pandas as pd\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\ndf = pd.DataFrame({\"time\": pd.date_range(\"2022-01-01\", \"2022-01-02\", periods=500)})\r\ntable = pa.table(df)\r\n\r\nmetadata_collector = []\r\n\r\nwith open(\"test_invalid.parquet\", \"wb\") as fil:\r\n    pq.write_table(table, fil, coerce_timestamps=\"us\", allow_truncated_timestamps=False, metadata_collector=metadata_collector)\r\n```\r\n\r\n(I get the correct error about \"Casting from timestamp[ns] to timestamp[us] would lose data\", and the `metadata_collector` actually gets filled with a FileMetaData object)\r\n\r\nWould the fact that it is executed in threads when using dask influence it somehow?\r\n\r\nSo if it fixes the error for you, we can certainly apply the patch. But it would be nice to have a reproducer for our own test suite as well that doesn't rely on dask.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1135671909/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/1925392308",
        "html_url": "https://github.com/dask/dask/issues/7977#issuecomment-1925392308",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/7977",
        "id": 1925392308,
        "node_id": "IC_kwDOAbcwm85ywye0",
        "user": {
            "login": "jonashaag",
            "id": 175722,
            "node_id": "MDQ6VXNlcjE3NTcyMg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/175722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonashaag",
            "html_url": "https://github.com/jonashaag",
            "followers_url": "https://api.github.com/users/jonashaag/followers",
            "following_url": "https://api.github.com/users/jonashaag/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonashaag/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonashaag/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonashaag/subscriptions",
            "organizations_url": "https://api.github.com/users/jonashaag/orgs",
            "repos_url": "https://api.github.com/users/jonashaag/repos",
            "events_url": "https://api.github.com/users/jonashaag/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonashaag/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2024-02-03T16:46:39Z",
        "updated_at": "2024-02-03T16:46:39Z",
        "author_association": "NONE",
        "body": "I can reproduce this with PyArrow 14.0.2 alone (no Dask involved)",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/1925392308/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]