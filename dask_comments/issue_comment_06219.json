[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630216250",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630216250",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630216250,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDIxNjI1MA==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T14:23:01Z",
        "updated_at": "2020-05-18T14:23:01Z",
        "author_association": "MEMBER",
        "body": "The functions in `dask.optimization` currently don't know anything about `HighLevelGraph` objects, they're meant to work with the underlying `dict` interface instead. You'll need to use `dask.utils.ensure_dict` to convert to raw dictionaries beforehand. The optimization and `HighLevelGraph` interfaces kind of evolved organically to fit our internal needs - there are definitely rough edges for external use.\r\n\r\nApologies, but I don't have time right now to respond to your actual issue of fusing these tasks, but if you get stuck ping again and I can try to take a look.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630216250/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630251883",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630251883",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630251883,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI1MTg4Mw==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:17:15Z",
        "updated_at": "2020-05-18T15:17:15Z",
        "author_association": "MEMBER",
        "body": "> You'll need to use `dask.utils.ensure_dict` to convert to raw dictionaries beforehand.\r\n\r\nThanks for the tip. I think figured out some version of this in my last code example. But what I don't understand is how to go **back to a Delayed object** from the raw optimized graph:\r\n```python\r\ndsk_fused = fuse(dask.utils.ensure_dict(store_future.dask))\r\ndask.compute(dsk_fused) # doesn't compute, just returns a the same dict\r\n```\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630251883/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630258957",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630258957",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630258957,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI1ODk1Nw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:28:23Z",
        "updated_at": "2020-05-18T15:35:57Z",
        "author_association": "MEMBER",
        "body": "@rabernat `Delayed` can be built from a dask graph.\r\n\r\n```python\r\n\r\nIn [1]: from dask.delayed import Delayed\r\n\r\nIn [2]: def inc(x): return x + 1\r\n\r\nIn [3]: dsk = {'data': 0, 'result': (inc, 'data')}\r\n\r\nIn [4]: r = Delayed(\"result\", dsk)\r\n\r\nIn [5]: r.compute()\r\nOut[5]: 1\r\n```\r\n\r\nLooking into why it doesn't fuse now. I have a guess.\r\n\r\nEdit: For \"why doesn't this fuse\", I think it's because we don't call `fuse` on Delayed collections. With this diff\r\n\r\n```diff\r\ndiff --git a/dask/delayed.py b/dask/delayed.py\r\nindex 2d9ba5fdd..eba1da8c7 100644\r\n--- a/dask/delayed.py\r\n+++ b/dask/delayed.py\r\n@@ -13,7 +13,7 @@ from .compatibility import is_dataclass, dataclass_fields\r\n \r\n from .core import quote\r\n from .context import globalmethod\r\n-from .optimization import cull\r\n+from .optimization import cull, fuse\r\n from .utils import funcname, methodcaller, OperatorMethodMixin, ensure_dict, apply\r\n from .highlevelgraph import HighLevelGraph\r\n \r\n@@ -456,8 +456,9 @@ def right(method):\r\n \r\n def optimize(dsk, keys, **kwargs):\r\n     dsk = ensure_dict(dsk)\r\n-    dsk2, _ = cull(dsk, keys)\r\n-    return dsk2\r\n+    dsk2, deps = cull(dsk, keys)\r\n+    dsk3, deps = fuse(dsk2, keys, dependencies=deps)\r\n+    return dsk3\r\n \r\n \r\n def rebuild(dsk, key, length):\r\n```\r\n\r\nThen we get fusion, assuming the `ave-width` is configured appropriately (`>= 4 in this case).\r\n\r\n```python\r\nwith dask.config.set(**{\"optimization.fuse.ave-width\": 4}):\r\n    display(store_future.visualize(optimize_graph=True, verbose=True))\r\n```\r\n\r\n![Screen Shot 2020-05-18 at 10 33 21 AM](https://user-images.githubusercontent.com/1312546/82231663-12511500-98f3-11ea-981e-3821bdb53f31.png)\r\n\r\n\r\nShould we be fusing `Delayed` (thoughts @eriknw?). I think not fusing is the proper default, if we view `delayed` as specifying an appropriate point for parallelization. Or perhaps we might be able to specify conditions under which we should fuse?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630258957/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630263891",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630263891",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630263891,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI2Mzg5MQ==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:36:44Z",
        "updated_at": "2020-05-18T15:36:44Z",
        "author_association": "MEMBER",
        "body": "Thanks for the tip @TomAugspurger! Seems obvious in retrospect, and is probably well documented. With that hint, I got to\r\n```python\r\nfrom dask.delayed import Delayed\r\ndelayed_fused = Delayed(\"read-and-store\", dsk_fused)\r\ndelayed_fused.compute()\r\n```\r\n\r\nHowever, this brought me a new error:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-74-07ddfa95cb06> in <module>\r\n      1 from dask.delayed import Delayed\r\n      2 delayed_fused = Delayed(\"read-and-store\", dsk_fused)\r\n----> 3 delayed_fused.compute()\r\n\r\n~/opt/miniconda3/envs/pangeo-py38/lib/python3.8/site-packages/dask/base.py in compute(self, **kwargs)\r\n    163         dask.base.compute\r\n    164         \"\"\"\r\n--> 165         (result,) = compute(self, traverse=False, **kwargs)\r\n    166         return result\r\n    167 \r\n\r\n~/opt/miniconda3/envs/pangeo-py38/lib/python3.8/site-packages/dask/base.py in compute(*args, **kwargs)\r\n    431     )\r\n    432 \r\n--> 433     dsk = collections_to_dsk(collections, optimize_graph, **kwargs)\r\n    434     keys = [x.__dask_keys__() for x in collections]\r\n    435     postcomputes = [x.__dask_postcompute__() for x in collections]\r\n\r\n~/opt/miniconda3/envs/pangeo-py38/lib/python3.8/site-packages/dask/base.py in collections_to_dsk(collections, optimize_graph, **kwargs)\r\n    209     if optimize_graph:\r\n    210         groups = groupby(optimization_function, collections)\r\n--> 211         groups = {opt: _extract_graph_and_keys(val) for opt, val in groups.items()}\r\n    212 \r\n    213         for opt in optimizations:\r\n\r\n~/opt/miniconda3/envs/pangeo-py38/lib/python3.8/site-packages/dask/base.py in <dictcomp>(.0)\r\n    209     if optimize_graph:\r\n    210         groups = groupby(optimization_function, collections)\r\n--> 211         groups = {opt: _extract_graph_and_keys(val) for opt, val in groups.items()}\r\n    212 \r\n    213         for opt in optimizations:\r\n\r\n~/opt/miniconda3/envs/pangeo-py38/lib/python3.8/site-packages/dask/base.py in _extract_graph_and_keys(vals)\r\n    237         graph = HighLevelGraph.merge(*graphs)\r\n    238     else:\r\n--> 239         graph = merge(*map(ensure_dict, graphs))\r\n    240 \r\n    241     return graph, keys\r\n\r\n~/opt/miniconda3/envs/pangeo-py38/lib/python3.8/site-packages/dask/utils.py in ensure_dict(d)\r\n   1021                 seen.add(dd_id)\r\n   1022         return result\r\n-> 1023     return dict(d)\r\n   1024 \r\n   1025 \r\n\r\nValueError: dictionary update sequence element #0 has length 10; 2 is required\r\n```\r\n\r\nI have concluded that the way forward for many of my problems is to become more hands-on with dask optimizations, so this issue represents me trying to figure out how to apply them. Sorry if the issue tracker is not the ideal place for this to play out. I do feel that this reveals some opportunities for improving the documentation.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630263891/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630265333",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630265333",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630265333,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI2NTMzMw==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:39:11Z",
        "updated_at": "2020-05-18T15:39:11Z",
        "author_association": "MEMBER",
        "body": "> ![Screen Shot 2020-05-18 at 10 33 21 AM](https://user-images.githubusercontent.com/1312546/82231663-12511500-98f3-11ea-981e-3821bdb53f31.png)\r\n\r\nI'm not sure this is the graph I want though. I want to fuse vertically, not horizontally. I don't want all my reads in one task and all my writes in the next task. Although this would reduce the total number of tasks, it would make my memory and communication problems worse.\r\n\r\nInstead, I want four distinct `from-zarr-store` tasks.\r\n\r\nDoes this make sense?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630265333/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630267477",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630267477",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630267477,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI2NzQ3Nw==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:42:48Z",
        "updated_at": "2020-05-18T15:42:48Z",
        "author_association": "MEMBER",
        "body": "To your error, `fuse` returns a tuple of `dsk, dependencies`, and the `key` passed to `Delayed` needs to be in the task graph. Try\r\n\r\n```python\r\ndsk_fused, deps = fuse(dask.utils.ensure_dict(store_future.dask))\r\ndelayed_fused = Delayed(store_future._key, dsk_fused)\r\ndelayed_fused.compute()\r\n```\r\n\r\nI'm thinking more about your desired task graph.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630267477/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630272024",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630272024",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630272024,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI3MjAyNA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:50:13Z",
        "updated_at": "2020-05-18T15:50:13Z",
        "author_association": "MEMBER",
        "body": "Do we have a sense for why a workaround is needed here?  If possible I\nthink it would be best to focus efforts there first if people have the\ntime.  That way users less sophisticated than Ryan will also benefit.\n\nOn Mon, May 18, 2020 at 8:43 AM Tom Augspurger <notifications@github.com>\nwrote:\n\n> To your error, fuse returns a tuple of dsk, dependencies, and the key\n> passed to Delayed needs to be in the task graph. Try\n>\n> dsk_fused, deps = fuse(dask.utils.ensure_dict(store_future.dask))delayed_fused = Delayed(store_future._key, dsk_fused)delayed_fused.compute()\n>\n> I'm thinking more about your desired task graph.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/6219#issuecomment-630267477>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTBH6OTOK6RVMED77A3RSFJQTANCNFSM4NDXEKPA>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630272024/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630272472",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630272472",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630272472,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI3MjQ3Mg==",
        "user": {
            "login": "rabernat",
            "id": 1197350,
            "node_id": "MDQ6VXNlcjExOTczNTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rabernat",
            "html_url": "https://github.com/rabernat",
            "followers_url": "https://api.github.com/users/rabernat/followers",
            "following_url": "https://api.github.com/users/rabernat/following{/other_user}",
            "gists_url": "https://api.github.com/users/rabernat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rabernat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rabernat/subscriptions",
            "organizations_url": "https://api.github.com/users/rabernat/orgs",
            "repos_url": "https://api.github.com/users/rabernat/repos",
            "events_url": "https://api.github.com/users/rabernat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rabernat/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:50:55Z",
        "updated_at": "2020-05-18T15:50:55Z",
        "author_association": "MEMBER",
        "body": "\ud83d\ude00 your code worked and gave me exactly what I wanted\r\n```python\r\ndelayed_fused.visualize()\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1197350/82233282-c6f03400-98fd-11ea-910f-a5cf4653da18.png)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630272472/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630272570",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630272570",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630272570,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI3MjU3MA==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:51:05Z",
        "updated_at": "2020-05-18T15:51:05Z",
        "author_association": "MEMBER",
        "body": "> Should we be fusing Delayed (thoughts @eriknw?). I think not fusing is the proper default, if we view delayed as specifying an appropriate point for parallelization. Or perhaps we might be able to specify conditions under which we should fuse?\r\n\r\nMy 2 cents: I think we should leave fuse off for delayed (in my experience long linear chains of `Delayed` tasks are rarer), but for workloads that `compute` (like `store`) we should handle this optimization explicitly. That said, if `fuse` overhead is low enough, maybe it doesn't matter if we enable it for `Delayed`.\r\n\r\n> I'm not sure this is the graph I want though. I want to fuse vertically, not horizontally. I don't want all my reads in one task and all my writes in the next task. Although this would reduce the total number of tasks, it would make my memory and communication problems worse.\r\n\r\nThe issue was the configuration, if you drop setting the width, you get a single fused chain for each branch.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630272570/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630276674",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630276674",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630276674,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI3NjY3NA==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:57:44Z",
        "updated_at": "2020-05-18T15:57:44Z",
        "author_association": "MEMBER",
        "body": "> My 2 cents: I think we should leave fuse off for delayed (in my experience long linear chains of Delayed tasks are rarer), but for workloads that compute (like store) we should handle this optimization explicitly.\r\n\r\nRethinking this - most workloads using `Delayed` to build graphs are paying a speed cost anyway (working with `Delayed` is more ergonomic, but slower than using the raw graph api). As such, adding the small overhead of `fuse` always being on seems minor. I'll toss up a PR.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630276674/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630277684",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630277684",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630277684,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI3NzY4NA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T15:58:48Z",
        "updated_at": "2020-05-18T15:58:58Z",
        "author_association": "MEMBER",
        "body": "@jcrist to make sure I understand: you'll explicitly call `fuse` in `da.store` before creating the `Delayed` that's returned? If so, then +1.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630277684/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630279815",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630279815",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630279815,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI3OTgxNQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T16:02:05Z",
        "updated_at": "2020-05-18T16:02:05Z",
        "author_association": "MEMBER",
        "body": "Rather than call fuse perhaps we want to call `dask.optimize` so that all\narray optimizations are called?  I think that we do this in other\nsituations where we cross collection type boundaries.\n\nOn Mon, May 18, 2020 at 8:59 AM Tom Augspurger <notifications@github.com>\nwrote:\n\n> @jcrist <https://github.com/jcrist> to make sure I understand: you'll\n> explicitly call fuse in da.store before creating the Delayed that's\n> returned? If so, then +1.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/6219#issuecomment-630277684>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AACKZTGJODVPMR7QEKU5QXLRSFLMRANCNFSM4NDXEKPA>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630279815/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/630286238",
        "html_url": "https://github.com/dask/dask/issues/6219#issuecomment-630286238",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/6219",
        "id": 630286238,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI4NjIzOA==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-05-18T16:11:15Z",
        "updated_at": "2020-05-18T16:11:15Z",
        "author_association": "MEMBER",
        "body": "There are two fixes here:\r\n\r\n- Use `fuse` in delayed's optimize routine. Compared to the cost of using delayed to build the graphs, the cost of applying the optimization is negligible. In this case, this fixes @rabernat's issue. See #6222 for this.\r\n- Call `optimize()` in store beforehand to optimize the array explicitly before converting.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/630286238/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]