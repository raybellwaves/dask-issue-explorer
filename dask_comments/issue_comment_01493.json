[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/241219497",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-241219497",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 241219497,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTIxOTQ5Nw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-20T19:37:45Z",
        "updated_at": "2016-08-20T19:37:45Z",
        "author_association": "MEMBER",
        "body": "I encourage you to prototype this, perhaps with `dask.delayed`.  http://dask.readthedocs.io/en/latest/delayed-collections.html\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/241219497/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/241588548",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-241588548",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 241588548,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTU4ODU0OA==",
        "user": {
            "login": "dirkbike",
            "id": 3711678,
            "node_id": "MDQ6VXNlcjM3MTE2Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3711678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dirkbike",
            "html_url": "https://github.com/dirkbike",
            "followers_url": "https://api.github.com/users/dirkbike/followers",
            "following_url": "https://api.github.com/users/dirkbike/following{/other_user}",
            "gists_url": "https://api.github.com/users/dirkbike/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dirkbike/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dirkbike/subscriptions",
            "organizations_url": "https://api.github.com/users/dirkbike/orgs",
            "repos_url": "https://api.github.com/users/dirkbike/repos",
            "events_url": "https://api.github.com/users/dirkbike/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dirkbike/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-23T00:05:40Z",
        "updated_at": "2016-08-23T00:05:40Z",
        "author_association": "NONE",
        "body": "I was originally thinking of doing this as a `dict` that wraps a bunch of `dask.dataframe`s, but as you recommended I'm trying this with `dask.delayed`.  I am using pandas to read/write the hdf data rather than pytables using these functions:\n\n```\nimport pandas as pd\n\ndef custom_load(key):\n    return pd.read_hdf('test.hdf', key)\n\ndef custom_save(df, key):\n    df.to_hdf('test.hdf', key)\n```\n\nUnfortunately, when I try to use them to build a `dask.dataframe` I get a `TypeError` exception:\n\n```\nimport dask.dataframe as dd\nfrom dask.delayed import delayed\n\ndfs = [delayed(custom_load)(key) for key in ['msft','aapl']]\ndf = dd.from_delayed(dfs)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-19-59138932b0db> in <module>()\n----> 1 df = dd.from_delayed(dfs)\n\nC:\\Python34\\lib\\site-packages\\dask\\dataframe\\io.py in from_delayed(dfs, metadata, divisions, columns, prefix)\n    670         return Series(merge(dsk, dsk2), name, metadata, divisions)\n    671     else:\n--> 672         return DataFrame(merge(dsk, dsk2), name, metadata, divisions)\n    673\n    674\n\nC:\\Python34\\lib\\site-packages\\dask\\dataframe\\core.py in __new__(cls, dask, name, columns, divisions)\n   1322         result._name = name\n   1323\n-> 1324         result._pd, result._known_dtype = cls._build_pd(columns)\n   1325         result.divisions = tuple(divisions)\n   1326         return result\n\nC:\\Python34\\lib\\site-packages\\dask\\dataframe\\core.py in _build_pd(cls, metadata)\n    201         else:\n    202             if np.isscalar(metadata) or metadata is None:\n--> 203                 _pd = cls._partition_type([], name=metadata)\n    204             else:\n    205                 _pd = cls._partition_type(columns=metadata)\n\nTypeError: __init__() got an unexpected keyword argument 'name'\n```\n\nI don't have much experience with `dask.delayed` so I'm not sure what the problem is.  For reference, this is how I built `test.hdf`:\n\n```\nfrom pandas_datareader import data as web\n\ndf1 = web.get_data_yahoo('msft', '2000-01-01', '2016-01-01')\ndf2 = web.get_data_yahoo('aapl', '2000-01-01', '2016-01-01')\n\ndf1.to_hdf('test.hdf', 'msft', format='table', complevel=9, complib='blosc')\ndf2.to_hdf('test.hdf', 'aapl', format='table', complevel=9, complib='blosc')\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/241588548/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/241708608",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-241708608",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 241708608,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTcwODYwOA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-23T11:59:08Z",
        "updated_at": "2016-08-23T11:59:08Z",
        "author_association": "MEMBER",
        "body": "Can you do me a favor and try this from git master?\n\nOn Mon, Aug 22, 2016 at 8:05 PM, dirkbike notifications@github.com wrote:\n\n> I was originally thinking of doing this as a dict that wraps a bunch of\n> dask.dataframes, but as you recommended I'm trying this with dask.delayed.\n> I am using pandas to read/write the hdf data rather than pytables using\n> these functions:\n> \n> import pandas as pd\n> \n> def custom_load(key):\n>     return pd.read_hdf('test.hdf', key)\n> \n> def custom_save(df, key):\n>     df.to_hdf('test.hdf', key)\n> \n> Unfortunately, when I try to use them to build a dask.dataframe I get a\n> TypeError exception:\n> \n> import dask.dataframe as dd\n> from dask.delayed import delayed\n> \n> dfs = [delayed(custom_load)(key) for key in ['msft','aapl']]\n> \n> ## df = dd.from_delayed(dfs)\n> \n> TypeError                                 Traceback (most recent call last)\n> <ipython-input-19-59138932b0db> in <module>()\n> ----> 1 df = dd.from_delayed(dfs)\n> \n> C:\\Python34\\lib\\site-packages\\dask\\dataframe\\io.py in from_delayed(dfs, metadata, divisions, columns, prefix)\n>     670         return Series(merge(dsk, dsk2), name, metadata, divisions)\n>     671     else:\n> --> 672         return DataFrame(merge(dsk, dsk2), name, metadata, divisions)\n>     673\n>     674\n> \n> C:\\Python34\\lib\\site-packages\\dask\\dataframe\\core.py in **new**(cls, dask, name, columns, divisions)\n>    1322         result._name = name\n>    1323\n> -> 1324         result._pd, result._known_dtype = cls._build_pd(columns)\n>    1325         result.divisions = tuple(divisions)\n>    1326         return result\n> \n> C:\\Python34\\lib\\site-packages\\dask\\dataframe\\core.py in _build_pd(cls, metadata)\n>     201         else:\n>     202             if np.isscalar(metadata) or metadata is None:\n> --> 203                 _pd = cls._partition_type([], name=metadata)\n>     204             else:\n>     205                 _pd = cls._partition_type(columns=metadata)\n> \n> TypeError: **init**() got an unexpected keyword argument 'name'\n> \n> I don't have much experience with dask.delayed so I'm not sure what the\n> problem is. For reference, this is how I built test.hdf:\n> \n> from pandas_datareader import data as web\n> \n> df1 = web.get_data_yahoo('msft', '2000-01-01', '2016-01-01')\n> df2 = web.get_data_yahoo('aapl', '2000-01-01', '2016-01-01')\n> \n> df1.to_hdf('test.hdf', 'msft', format='table', complevel=9, complib='blosc')\n> df2.to_hdf('test.hdf', 'aapl', format='table', complevel=9, complib='blosc')\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/dask/dask/issues/1493#issuecomment-241588548, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AASszLSaZvyokPKWr5qE1Kdj6Dnnq2Tkks5qijlVgaJpZM4JpFvx\n> .\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/241708608/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/241940555",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-241940555",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 241940555,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTk0MDU1NQ==",
        "user": {
            "login": "dirkbike",
            "id": 3711678,
            "node_id": "MDQ6VXNlcjM3MTE2Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3711678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dirkbike",
            "html_url": "https://github.com/dirkbike",
            "followers_url": "https://api.github.com/users/dirkbike/followers",
            "following_url": "https://api.github.com/users/dirkbike/following{/other_user}",
            "gists_url": "https://api.github.com/users/dirkbike/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dirkbike/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dirkbike/subscriptions",
            "organizations_url": "https://api.github.com/users/dirkbike/orgs",
            "repos_url": "https://api.github.com/users/dirkbike/repos",
            "events_url": "https://api.github.com/users/dirkbike/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dirkbike/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-24T02:30:00Z",
        "updated_at": "2016-08-24T02:30:00Z",
        "author_association": "NONE",
        "body": "That worked, thanks.  So, what happened is that all of the 'aapl' data was concatenated to the end of 'msft' data in one large dataframe.  However, in this case it would be more desirable to have a top-level index that uses `key` from `custom_load` in a way similar to this:\n\n```\ndf1 = pd.read_hdf('test.hdf', 'msft')\ndf2 = pd.read_hdf('test.hdf', 'aapl')\ndf = pd.concat([df1, df2], keys=['msft','aapl'], axis=1)\ndf['msft'].head() # first key\n                Open     High       Low     Close    Volume  Adj Close\nDate\n2000-01-03  117.3750  118.625  112.0000  116.5625  53228400  39.840438\n2000-01-04  113.5625  117.125  112.2500  112.6250  54119000  38.494621\n2000-01-05  111.1250  116.375  109.3750  113.8125  64059600  38.900502\n2000-01-06  112.1875  113.875  108.3750  110.0000  54976600  37.597410\n2000-01-07  108.6250  112.250  107.3125  111.4375  62013600  38.088740\n\ndf['aapl'].head() # second key\n                  Open        High         Low       Close     Volume  Adj Close\nDate\n2000-01-03  104.874997  112.499998  101.687501  111.937502  133949200   3.660058\n2000-01-04  108.250001  110.625002  101.187503  102.500003  128094400   3.351477\n2000-01-05  103.749998  110.562497  103.000001  103.999997  194580400   3.400523\n2000-01-06  106.124999  106.999999   94.999998   94.999998  191993200   3.106247\n2000-01-07   96.499999  101.000002   95.500003   99.500001  115183600   3.253385\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/241940555/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242031065",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242031065",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242031065,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjAzMTA2NQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-24T11:23:00Z",
        "updated_at": "2016-08-24T11:23:00Z",
        "author_association": "MEMBER",
        "body": "Then perhaps you're right that your dict-of-dataframes idea would suit better\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242031065/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242260493",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242260493",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242260493,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjI2MDQ5Mw==",
        "user": {
            "login": "dirkbike",
            "id": 3711678,
            "node_id": "MDQ6VXNlcjM3MTE2Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3711678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dirkbike",
            "html_url": "https://github.com/dirkbike",
            "followers_url": "https://api.github.com/users/dirkbike/followers",
            "following_url": "https://api.github.com/users/dirkbike/following{/other_user}",
            "gists_url": "https://api.github.com/users/dirkbike/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dirkbike/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dirkbike/subscriptions",
            "organizations_url": "https://api.github.com/users/dirkbike/orgs",
            "repos_url": "https://api.github.com/users/dirkbike/repos",
            "events_url": "https://api.github.com/users/dirkbike/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dirkbike/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-25T01:54:25Z",
        "updated_at": "2016-08-25T01:54:25Z",
        "author_association": "NONE",
        "body": "Just curious, but why can't the `dask.dataframe` object support these kinds of keys internally?  I think that is all that's necessary to simulate a pandas multiindex (at least across columns).  Would modifying the `_Frame` class be the best place for this?\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242260493/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242264506",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242264506",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242264506,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjI2NDUwNg==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-25T02:25:10Z",
        "updated_at": "2016-08-25T02:25:10Z",
        "author_association": "MEMBER",
        "body": "Eventually yes, it would be nice for DataFrame to support multiindices.  It's non-trivial to change all functions within dask.dataframe to support this.  I budget this task at somewhere between a week and a month of developer time, though I am often pessimistic in things like this.\n\nHave you read through the design documentation of dask.dataframe? http://dask.readthedocs.io/en/latest/dataframe-partitions.html\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242264506/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242761328",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242761328",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242761328,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjc2MTMyOA==",
        "user": {
            "login": "dirkbike",
            "id": 3711678,
            "node_id": "MDQ6VXNlcjM3MTE2Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3711678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dirkbike",
            "html_url": "https://github.com/dirkbike",
            "followers_url": "https://api.github.com/users/dirkbike/followers",
            "following_url": "https://api.github.com/users/dirkbike/following{/other_user}",
            "gists_url": "https://api.github.com/users/dirkbike/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dirkbike/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dirkbike/subscriptions",
            "organizations_url": "https://api.github.com/users/dirkbike/orgs",
            "repos_url": "https://api.github.com/users/dirkbike/repos",
            "events_url": "https://api.github.com/users/dirkbike/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dirkbike/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-26T15:05:44Z",
        "updated_at": "2016-08-26T15:05:44Z",
        "author_association": "NONE",
        "body": "So if I'm understanding correctly, it seems that the best way to support multiindex would be to map them to multiple dimensions of partitions since the multiindex itself provides a natural place to create a partition.  My example above would only add a second dimension to the partitions (partitions would span time index and then first-level column keys).  It would be a lot easier to maintain these partitions outside of dask by managing multiple `dask.dataframe` objects, but you would lose the ability to slice across multiple of these partitions and won't guarantee the data stays aligned with the index.  I agree that this is non-trivial, since it looks like it would require changing how all of the blocked algorithms are handled and might add undesired overhead.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242761328/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242764007",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242764007",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242764007,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjc2NDAwNw==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-26T15:15:32Z",
        "updated_at": "2016-08-26T15:15:32Z",
        "author_association": "MEMBER",
        "body": "Yes, that seems like a reasonable synopsis.  We would choose some depth of the multi-index along with to partition.  For example we might partition along the second or third step of the multi-index.  Partitions would then hold a list of tuples of values rather than a list of single values.  Many of the operations can probably be changed in bulk, by changing some of the heavier functions, like elemwise and reduction, but I would expect groupbys, joins, etc. to take a fair amount of finesse.  I don't yet see a way to do this incrementally.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242764007/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242855820",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242855820",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242855820,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjg1NTgyMA==",
        "user": {
            "login": "dirkbike",
            "id": 3711678,
            "node_id": "MDQ6VXNlcjM3MTE2Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3711678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dirkbike",
            "html_url": "https://github.com/dirkbike",
            "followers_url": "https://api.github.com/users/dirkbike/followers",
            "following_url": "https://api.github.com/users/dirkbike/following{/other_user}",
            "gists_url": "https://api.github.com/users/dirkbike/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dirkbike/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dirkbike/subscriptions",
            "organizations_url": "https://api.github.com/users/dirkbike/orgs",
            "repos_url": "https://api.github.com/users/dirkbike/repos",
            "events_url": "https://api.github.com/users/dirkbike/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dirkbike/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-26T21:25:30Z",
        "updated_at": "2016-08-26T21:25:30Z",
        "author_association": "NONE",
        "body": "This may be a bit of a stretch, but maybe it's worth considering more abstract partitioning. I got some inspiration from this paper [A Hierarchical Aggregation Framework for Efficient Multilevel Visual Exploration and Analysis](http://arxiv.org/abs/1511.04750) that breaks data into hierarchical chunks of smaller and smaller index-slices to make data exploration faster.  Partitioning the data would be an expensive operation, but can be done as data is collected.  You would need at least one hierarchy for the index and possibly one for the columns (column groupings can come from an existing storage hierarchy or can be made dynamically using groupbys).  The index hierarchy would define the partitions similar to dask's current structure except using multiple levels (i.e. days are grouped into months, which are grouped into years, etc.).  Columns could use a pseudo-index to map to the main index (i.e. a range or years, months, or specific days) to keep the data dense (no filler NaNs) and allow calculations to quickly skip regions with no data.  Index and column groupings would be exposed to the end user via indexing and slicing methods and would provide natural partition boundaries for applied computation.  A column hierarchy also provides an organized structure for caching intermediate computation results.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242855820/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242856781",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242856781",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242856781,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mjg1Njc4MQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-26T21:30:18Z",
        "updated_at": "2016-08-26T21:30:18Z",
        "author_association": "MEMBER",
        "body": "Sounds very cool.  I encourage you to explore that further.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242856781/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/242924476",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-242924476",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 242924476,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjkyNDQ3Ng==",
        "user": {
            "login": "dirkbike",
            "id": 3711678,
            "node_id": "MDQ6VXNlcjM3MTE2Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3711678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dirkbike",
            "html_url": "https://github.com/dirkbike",
            "followers_url": "https://api.github.com/users/dirkbike/followers",
            "following_url": "https://api.github.com/users/dirkbike/following{/other_user}",
            "gists_url": "https://api.github.com/users/dirkbike/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dirkbike/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dirkbike/subscriptions",
            "organizations_url": "https://api.github.com/users/dirkbike/orgs",
            "repos_url": "https://api.github.com/users/dirkbike/repos",
            "events_url": "https://api.github.com/users/dirkbike/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dirkbike/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-08-27T15:46:16Z",
        "updated_at": "2016-08-27T15:46:16Z",
        "author_association": "NONE",
        "body": "I started a prototype using basic python structures (dicts, and subclasses of lists) and realized that data columns either need to use a sequence of index labels to identify each element (because of the hierarchical index), or the columns can map to a flat representation of the hierarchical index (using a pseudo-index).  I couldn't think of another way to do this, and mapping each element individually with labels would be very wasteful.  The problem with using a pseudo-index is that when data is appended to the data set, the pseudo-index needs to be recalculated. I'm starting to re-think the use of hierarchies at all.  Relational databases can represent hierarchical structures by referencing keys between tables of data, and joining tables on a specific column already aligns tables to each other.  Perhaps it's better to treat every chunk of data (of n-columns) as a regular 2D dataframe, and use a relational representation to tie all of the dataframes together.  Each dataframe would have its own independent index, avoiding the pseudo-index problem, and only when chunks are joined would the index need to be adjusted.  The end user could still reference a specific subset of data using slices and labels, but chunks of data would be dynamically joined (or split if necessary) behind the scenes.  I'm going to try and prototype something using sqlite and pandas with some more stock data and see how that might work.\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/242924476/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/299504487",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-299504487",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 299504487,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTUwNDQ4Nw==",
        "user": {
            "login": "liorshk",
            "id": 7127502,
            "node_id": "MDQ6VXNlcjcxMjc1MDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7127502?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/liorshk",
            "html_url": "https://github.com/liorshk",
            "followers_url": "https://api.github.com/users/liorshk/followers",
            "following_url": "https://api.github.com/users/liorshk/following{/other_user}",
            "gists_url": "https://api.github.com/users/liorshk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/liorshk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/liorshk/subscriptions",
            "organizations_url": "https://api.github.com/users/liorshk/orgs",
            "repos_url": "https://api.github.com/users/liorshk/repos",
            "events_url": "https://api.github.com/users/liorshk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/liorshk/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-05-05T15:59:47Z",
        "updated_at": "2017-05-05T15:59:47Z",
        "author_association": "NONE",
        "body": "Any update on this issue?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/299504487/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/299575615",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-299575615",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 299575615,
        "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTU3NTYxNQ==",
        "user": {
            "login": "dirkbike",
            "id": 3711678,
            "node_id": "MDQ6VXNlcjM3MTE2Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3711678?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dirkbike",
            "html_url": "https://github.com/dirkbike",
            "followers_url": "https://api.github.com/users/dirkbike/followers",
            "following_url": "https://api.github.com/users/dirkbike/following{/other_user}",
            "gists_url": "https://api.github.com/users/dirkbike/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dirkbike/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dirkbike/subscriptions",
            "organizations_url": "https://api.github.com/users/dirkbike/orgs",
            "repos_url": "https://api.github.com/users/dirkbike/repos",
            "events_url": "https://api.github.com/users/dirkbike/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dirkbike/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2017-05-05T21:05:22Z",
        "updated_at": "2017-05-05T21:05:22Z",
        "author_association": "NONE",
        "body": "I ended up using a regular SQL database to track chunks of data and assembling them as necessary into Pandas DataFrames.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/299575615/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/375382522",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-375382522",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 375382522,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTM4MjUyMg==",
        "user": {
            "login": "timothydmorton",
            "id": 1895387,
            "node_id": "MDQ6VXNlcjE4OTUzODc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1895387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/timothydmorton",
            "html_url": "https://github.com/timothydmorton",
            "followers_url": "https://api.github.com/users/timothydmorton/followers",
            "following_url": "https://api.github.com/users/timothydmorton/following{/other_user}",
            "gists_url": "https://api.github.com/users/timothydmorton/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/timothydmorton/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/timothydmorton/subscriptions",
            "organizations_url": "https://api.github.com/users/timothydmorton/orgs",
            "repos_url": "https://api.github.com/users/timothydmorton/repos",
            "events_url": "https://api.github.com/users/timothydmorton/events{/privacy}",
            "received_events_url": "https://api.github.com/users/timothydmorton/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-03-22T17:04:26Z",
        "updated_at": "2018-03-22T17:04:26Z",
        "author_association": "NONE",
        "body": "Does dask support reading multi-level indices yet?  I'm particularly interested in reading a table written to parquet with a multi-level column index, and I'm getting the following traceback when I try to do this:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<timed exec> in <module>()\r\n\r\n/ssd/lsstsw/stack3_20171021/python/miniconda3-4.3.21/lib/python3.6/site-packages/dask/dataframe/io/parquet.py in read_parquet(path, columns, filters, categories, index, storage_options, engine)\r\n    797 \r\n    798     return read(fs, fs_token, paths, columns=columns, filters=filters,\r\n--> 799                 categories=categories, index=index)\r\n    800 \r\n    801 \r\n\r\n/ssd/lsstsw/stack3_20171021/python/miniconda3-4.3.21/lib/python3.6/site-packages/dask/dataframe/io/parquet.py in _read_pyarrow(fs, fs_token, paths, columns, filters, categories, index)\r\n    557     dtypes = {storage_name_mapping.get(k, k): v for k, v in dtypes.items()}\r\n    558 \r\n--> 559     meta = _meta_from_dtypes(all_columns, dtypes, index_names, column_index_names)\r\n    560 \r\n    561     if out_type == Series:\r\n\r\n/ssd/lsstsw/stack3_20171021/python/miniconda3-4.3.21/lib/python3.6/site-packages/dask/dataframe/io/parquet.py in _meta_from_dtypes(to_read_columns, file_dtypes, index_cols, column_index_names)\r\n    140         df.columns.name = column_index_names[0]\r\n    141     else:\r\n--> 142         df.columns.names = column_index_names\r\n    143     return df\r\n    144 \r\n\r\n~/.local/lib/python3.6/site-packages/pandas/core/indexes/base.py in _set_names(self, values, level)\r\n   1116         if len(values) != 1:\r\n   1117             raise ValueError('Length of new names must be 1, got %d' %\r\n-> 1118                              len(values))\r\n   1119         self.name = values[0]\r\n   1120 \r\n\r\nValueError: Length of new names must be 1, got 3\r\n```\r\nIf multi-level indices are generally supported, but not in `read_parquet`, then perhaps this should be a new issue?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/375382522/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/394013256",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-394013256",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 394013256,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDAxMzI1Ng==",
        "user": {
            "login": "vss888",
            "id": 20497083,
            "node_id": "MDQ6VXNlcjIwNDk3MDgz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20497083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vss888",
            "html_url": "https://github.com/vss888",
            "followers_url": "https://api.github.com/users/vss888/followers",
            "following_url": "https://api.github.com/users/vss888/following{/other_user}",
            "gists_url": "https://api.github.com/users/vss888/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vss888/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vss888/subscriptions",
            "organizations_url": "https://api.github.com/users/vss888/orgs",
            "repos_url": "https://api.github.com/users/vss888/repos",
            "events_url": "https://api.github.com/users/vss888/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vss888/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-01T21:25:44Z",
        "updated_at": "2018-06-01T21:25:44Z",
        "author_association": "NONE",
        "body": "To add my 5 cents: absence of MultiIndex support is the show-stopper for me in terms of doing anything with Dask beyond poking around a bit. It is the most important missing feature. Please, do consider implementing it in some form sooner.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/394013256/reactions",
            "total_count": 63,
            "+1": 63,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/394378778",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-394378778",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 394378778,
        "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDM3ODc3OA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2018-06-04T14:40:27Z",
        "updated_at": "2018-06-04T14:40:27Z",
        "author_association": "MEMBER",
        "body": "I definitely agree @vss888 if this is something that you'd like to contribute that would be very welcome!",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/394378778/reactions",
            "total_count": 8,
            "+1": 8,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/487099722",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-487099722",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 487099722,
        "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzA5OTcyMg==",
        "user": {
            "login": "mmann1123",
            "id": 5185364,
            "node_id": "MDQ6VXNlcjUxODUzNjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5185364?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mmann1123",
            "html_url": "https://github.com/mmann1123",
            "followers_url": "https://api.github.com/users/mmann1123/followers",
            "following_url": "https://api.github.com/users/mmann1123/following{/other_user}",
            "gists_url": "https://api.github.com/users/mmann1123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mmann1123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mmann1123/subscriptions",
            "organizations_url": "https://api.github.com/users/mmann1123/orgs",
            "repos_url": "https://api.github.com/users/mmann1123/repos",
            "events_url": "https://api.github.com/users/mmann1123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mmann1123/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-04-26T15:30:16Z",
        "updated_at": "2019-04-26T15:30:16Z",
        "author_association": "NONE",
        "body": "This is maybe a simple but not ideal hack with a less that idea resolution.  If there were a way to do element-wise concatenation on the two indexes you could create a unique multi-index value (sort of). \r\n\r\nThe issue that I am running into is that i can't figure out how to do element-wise concat on two dask arrays.  Any way to do the following?  \r\n```\r\nindex = np.array([x1 + x2 +x3 for x1,x2,x3 in zip(index_id1.astype('str'),\r\n                                           repeat('-', len(index_id1) ) ,\r\n                                           index_id2.astype('str'))])\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/487099722/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506895989",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-506895989",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 506895989,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjg5NTk4OQ==",
        "user": {
            "login": "mUtterberg",
            "id": 35174396,
            "node_id": "MDQ6VXNlcjM1MTc0Mzk2",
            "avatar_url": "https://avatars.githubusercontent.com/u/35174396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mUtterberg",
            "html_url": "https://github.com/mUtterberg",
            "followers_url": "https://api.github.com/users/mUtterberg/followers",
            "following_url": "https://api.github.com/users/mUtterberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/mUtterberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mUtterberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mUtterberg/subscriptions",
            "organizations_url": "https://api.github.com/users/mUtterberg/orgs",
            "repos_url": "https://api.github.com/users/mUtterberg/repos",
            "events_url": "https://api.github.com/users/mUtterberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mUtterberg/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-28T22:33:58Z",
        "updated_at": "2019-06-28T22:33:58Z",
        "author_association": "NONE",
        "body": "Hi there. I'm trying to get a handle on what all might be involved in supporting development on this. It sounds like a few options were previously explored, but the method discussed by @dirkbike and @mrocklin above is the preferred path forward, although the main blocker to that is the amount of work and inability to implement such a change incrementally. @mrocklin do you have a ballpark on the number of functions in the DataFrame API that would be affected by this? I see that it's a complex issue, but I'd like to at least look into supporting this or breaking it down and finding some people to help chip away at it.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506895989/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/506939518",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-506939518",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 506939518,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjkzOTUxOA==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-29T08:29:00Z",
        "updated_at": "2019-06-29T08:29:00Z",
        "author_association": "MEMBER",
        "body": "I don't personally have a ballpark estimate, no.  Others might though.\n\nOn Fri, Jun 28, 2019 at 11:33 PM Marissa <notifications@github.com> wrote:\n\n> Hi there. I'm trying to get a handle on what all might be involved in\n> supporting development on this. It sounds like a few options were\n> previously explored, but the method discussed by @dirkbike\n> <https://github.com/dirkbike> and @mrocklin <https://github.com/mrocklin>\n> above is the preferred path forward, although the main blocker to that is\n> the amount of work and inability to implement such a change incrementally.\n> @mrocklin <https://github.com/mrocklin> do you have a ballpark on the\n> number of functions in the DataFrame API that would be affected by this? I\n> see that it's a complex issue, but I'd like to at least look into\n> supporting this or breaking it down and finding some people to help chip\n> away at it.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/1493?email_source=notifications&email_token=AACKZTFSSIGDF4PLUZDU3XTP42GVPA5CNFSM4CNELPY2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODY3J45I#issuecomment-506895989>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AACKZTFAJLRMCFUKX5NDOITP42GVPANCNFSM4CNELPYQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/506939518/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/519568918",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-519568918",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 519568918,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTU2ODkxOA==",
        "user": {
            "login": "jakirkham",
            "id": 3019665,
            "node_id": "MDQ6VXNlcjMwMTk2NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jakirkham",
            "html_url": "https://github.com/jakirkham",
            "followers_url": "https://api.github.com/users/jakirkham/followers",
            "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
            "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
            "organizations_url": "https://api.github.com/users/jakirkham/orgs",
            "repos_url": "https://api.github.com/users/jakirkham/repos",
            "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jakirkham/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-08T15:31:18Z",
        "updated_at": "2019-08-08T15:31:18Z",
        "author_association": "MEMBER",
        "body": "@TomAugspurger, do you have any thoughts on this one?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/519568918/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/519569362",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-519569362",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 519569362,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTU2OTM2Mg==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-08T15:32:25Z",
        "updated_at": "2019-08-08T15:32:25Z",
        "author_association": "MEMBER",
        "body": "Still open, still worth doing.\n\nOn Thu, Aug 8, 2019 at 10:31 AM jakirkham <notifications@github.com> wrote:\n\n> @TomAugspurger <https://github.com/TomAugspurger>, do you have any\n> thoughts on this one?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dask/dask/issues/1493?email_source=notifications&email_token=AAKAOIU3Y7QFNSAWW2YUW2LQDQ34TA5CNFSM4CNELPY2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD3374FQ#issuecomment-519568918>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAKAOIVFR476BN5MDFKVICTQDQ34TANCNFSM4CNELPYQ>\n> .\n>\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/519569362/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/525044290",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-525044290",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 525044290,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTA0NDI5MA==",
        "user": {
            "login": "jvivian-atreca",
            "id": 51930816,
            "node_id": "MDQ6VXNlcjUxOTMwODE2",
            "avatar_url": "https://avatars.githubusercontent.com/u/51930816?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvivian-atreca",
            "html_url": "https://github.com/jvivian-atreca",
            "followers_url": "https://api.github.com/users/jvivian-atreca/followers",
            "following_url": "https://api.github.com/users/jvivian-atreca/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvivian-atreca/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvivian-atreca/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvivian-atreca/subscriptions",
            "organizations_url": "https://api.github.com/users/jvivian-atreca/orgs",
            "repos_url": "https://api.github.com/users/jvivian-atreca/repos",
            "events_url": "https://api.github.com/users/jvivian-atreca/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvivian-atreca/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-08-26T21:40:42Z",
        "updated_at": "2019-08-26T22:20:28Z",
        "author_association": "NONE",
        "body": "In the interim, does anyone have a workaround? I don't actually need the multi-index, but all of the intermediate operations I want to use output a multi-index dataframe (`pivot_table` or `groupby` with `first().unstack()` before I can call `reset_index`) .\r\n\r\nThese two operations produce the same result for my data, but both produce a multi-index as an intermediate step:\r\n\r\n```\r\n# First, pivot_table\r\ndf.pivot_table(index=['Query', 'Target'], columns='Path', values='Percent_similar').reset_index()\r\n# groupby with unstack\r\ndf.groupby(['Query', 'Target', 'Path'])['Percent_similar'].first().unstack().reset_index()\r\n```\r\n\r\nMy only workaround is to iterate over the unique values of one of the desired indices (in this case, `Query`), perform `pivot_table`, assign a new column to the value I'm iterating over, and finally concatenate them all back together. \r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/525044290/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610133516",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-610133516",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 610133516,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDEzMzUxNg==",
        "user": {
            "login": "victor-ab",
            "id": 26576394,
            "node_id": "MDQ6VXNlcjI2NTc2Mzk0",
            "avatar_url": "https://avatars.githubusercontent.com/u/26576394?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/victor-ab",
            "html_url": "https://github.com/victor-ab",
            "followers_url": "https://api.github.com/users/victor-ab/followers",
            "following_url": "https://api.github.com/users/victor-ab/following{/other_user}",
            "gists_url": "https://api.github.com/users/victor-ab/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/victor-ab/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/victor-ab/subscriptions",
            "organizations_url": "https://api.github.com/users/victor-ab/orgs",
            "repos_url": "https://api.github.com/users/victor-ab/repos",
            "events_url": "https://api.github.com/users/victor-ab/events{/privacy}",
            "received_events_url": "https://api.github.com/users/victor-ab/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-07T02:13:35Z",
        "updated_at": "2020-04-07T02:13:35Z",
        "author_association": "NONE",
        "body": "> In the interim, does anyone have a workaround? \r\n@jvivian-atreca have you found any?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610133516/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610342559",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-610342559",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 610342559,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDM0MjU1OQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-07T11:53:34Z",
        "updated_at": "2020-04-07T11:53:34Z",
        "author_association": "MEMBER",
        "body": "Small status update: I worked on this a bit. We need to find a good (approximate) quantile algorithm to discover the partitions. Everything we have right now works with 1D arrays. I think the primary difficulty is that the algorithm needs to work with heterogenous data if we want to avoid casting to object dtype.\r\n\r\nAlternatively, we can do just that: cast to object dtype and treat MutliIndex as a big list of tuples. With some slight modifications, that becomes 1-D enough for the purposes of quantiling and discovering partitions. Casting to object dtype is expensive though, so I'd like to avoid that if possible.\r\n\r\nA secondary issue is that pandas' indexing API isn't well specified with a MultiIndex. Some behaviors like `df.loc['A', 'B']` are ambiguous with a MultiIndex, since it's unclear whether that's specifying a slice into a 2-level MultiIndex, or a depth-1 slice on the index and a column selection. But that's a limitation we'll just have to document and accept.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610342559/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610425501",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-610425501",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 610425501,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDQyNTUwMQ==",
        "user": {
            "login": "mrocklin",
            "id": 306380,
            "node_id": "MDQ6VXNlcjMwNjM4MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrocklin",
            "html_url": "https://github.com/mrocklin",
            "followers_url": "https://api.github.com/users/mrocklin/followers",
            "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
            "organizations_url": "https://api.github.com/users/mrocklin/orgs",
            "repos_url": "https://api.github.com/users/mrocklin/repos",
            "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrocklin/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-07T14:38:34Z",
        "updated_at": "2020-04-07T14:38:34Z",
        "author_association": "MEMBER",
        "body": "@rjzamora and the RAPIDS folks have been playing with multi-column indexing I think\r\n\r\nOne of the nice things about approximate quantiles is that they're decently robust to sampling.  I imagine that if we collected 100 samples per partition, and then turned those into objects/tuples that we would still provide a decent solution most of the time.  cc @eriknw ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610425501/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610494222",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-610494222",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 610494222,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDQ5NDIyMg==",
        "user": {
            "login": "eriknw",
            "id": 2058401,
            "node_id": "MDQ6VXNlcjIwNTg0MDE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2058401?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eriknw",
            "html_url": "https://github.com/eriknw",
            "followers_url": "https://api.github.com/users/eriknw/followers",
            "following_url": "https://api.github.com/users/eriknw/following{/other_user}",
            "gists_url": "https://api.github.com/users/eriknw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eriknw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eriknw/subscriptions",
            "organizations_url": "https://api.github.com/users/eriknw/orgs",
            "repos_url": "https://api.github.com/users/eriknw/repos",
            "events_url": "https://api.github.com/users/eriknw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eriknw/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-07T16:39:06Z",
        "updated_at": "2020-04-07T18:45:35Z",
        "author_association": "MEMBER",
        "body": "To determine the partitions, I would have few reservations about creating a 1-D array of dtype `object` of tuples and then using the existing `partition_quantiles` method.  I realize this isn't the most performant (speed or memory), but I bet it would be \"good enough\" for a while, and `partition_quantiles` is written to work on any dtype.  This operation should be compared to what happens next: shuffling the data into new partitions, which is much more costly.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610494222/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610532905",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-610532905",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 610532905,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDUzMjkwNQ==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-07T17:54:59Z",
        "updated_at": "2020-04-07T17:54:59Z",
        "author_association": "MEMBER",
        "body": "That's good to hear. I'll dust off my branch that started down this path and push something up, hopefully later this week.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610532905/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610958532",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-610958532",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 610958532,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDk1ODUzMg==",
        "user": {
            "login": "martindurant",
            "id": 6042212,
            "node_id": "MDQ6VXNlcjYwNDIyMTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6042212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martindurant",
            "html_url": "https://github.com/martindurant",
            "followers_url": "https://api.github.com/users/martindurant/followers",
            "following_url": "https://api.github.com/users/martindurant/following{/other_user}",
            "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions",
            "organizations_url": "https://api.github.com/users/martindurant/orgs",
            "repos_url": "https://api.github.com/users/martindurant/repos",
            "events_url": "https://api.github.com/users/martindurant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martindurant/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-08T13:26:27Z",
        "updated_at": "2020-04-08T13:26:27Z",
        "author_association": "MEMBER",
        "body": "Related code suggestion in https://github.com/dask/dask/issues/6074 ",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610958532/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/610974280",
        "html_url": "https://github.com/dask/dask/issues/1493#issuecomment-610974280",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/1493",
        "id": 610974280,
        "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDk3NDI4MA==",
        "user": {
            "login": "rjzamora",
            "id": 20461013,
            "node_id": "MDQ6VXNlcjIwNDYxMDEz",
            "avatar_url": "https://avatars.githubusercontent.com/u/20461013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjzamora",
            "html_url": "https://github.com/rjzamora",
            "followers_url": "https://api.github.com/users/rjzamora/followers",
            "following_url": "https://api.github.com/users/rjzamora/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjzamora/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjzamora/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjzamora/subscriptions",
            "organizations_url": "https://api.github.com/users/rjzamora/orgs",
            "repos_url": "https://api.github.com/users/rjzamora/repos",
            "events_url": "https://api.github.com/users/rjzamora/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjzamora/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-04-08T13:54:47Z",
        "updated_at": "2020-04-08T13:55:06Z",
        "author_association": "MEMBER",
        "body": "@TomAugspurger - I support any effort to support multiIndex in dask.dataframe (including multi-column sort_values/set_index operations).\r\n\r\nJust a note (for your information) - In `dask_cudf` we currently support a multi-column `sort_values`.  This method uses the same logic as upstream dask to [calculate quantiles](https://github.com/rapidsai/cudf/blob/8c657965bf855167d824e4fc16a72d33cbd8203f/python/dask_cudf/dask_cudf/sorting.py#L243).  However, it works on multiple columns, because we have a `DataFrame`-level [`quantiles`](https://github.com/rapidsai/cudf/blob/8c657965bf855167d824e4fc16a72d33cbd8203f/python/dask_cudf/dask_cudf/sorting.py#L178) method, as well as a `DataFrame`-level [searchsorted](https://github.com/rapidsai/cudf/blob/8c657965bf855167d824e4fc16a72d33cbd8203f/python/dask_cudf/dask_cudf/sorting.py#L160) method (neither of which is available in pandas, if I understand/remember correctly).  Our general approach is to follow the same logic that dask already uses, but to allow divisions to be passed in or calculated/represented as a cudf DataFrame.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/610974280/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]