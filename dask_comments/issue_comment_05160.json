[
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/515544552",
        "html_url": "https://github.com/dask/dask/issues/5160#issuecomment-515544552",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5160",
        "id": 515544552,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU0NDU1Mg==",
        "user": {
            "login": "jcrist",
            "id": 2783717,
            "node_id": "MDQ6VXNlcjI3ODM3MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2783717?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jcrist",
            "html_url": "https://github.com/jcrist",
            "followers_url": "https://api.github.com/users/jcrist/followers",
            "following_url": "https://api.github.com/users/jcrist/following{/other_user}",
            "gists_url": "https://api.github.com/users/jcrist/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jcrist/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jcrist/subscriptions",
            "organizations_url": "https://api.github.com/users/jcrist/orgs",
            "repos_url": "https://api.github.com/users/jcrist/repos",
            "events_url": "https://api.github.com/users/jcrist/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jcrist/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-26T17:55:33Z",
        "updated_at": "2019-07-26T17:55:33Z",
        "author_association": "MEMBER",
        "body": "> Hello, is there an implementation of 1D interpolation function for irregularly sampled points for dask dataframe columns?\r\n\r\nNot that I know of.\r\n\r\n> Applying a numpy/scipy interpolation function to a column directly through DataFrame.apply() appears very slow, compared with, say, using them separately on an array of the same length without the dask framework.\r\n\r\nWithout a [minimal reproducible example](https://blog.dask.org/2018/02/28/minimal-bug-reports) it's hard for us to say why your code is slower than you'd expect. I recommend looking at `df.map_partitions` instead of `df.apply` (which needs to do more work) for tasks like this.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/515544552/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/515749693",
        "html_url": "https://github.com/dask/dask/issues/5160#issuecomment-515749693",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5160",
        "id": 515749693,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTc0OTY5Mw==",
        "user": {
            "login": "rettigl",
            "id": 53396064,
            "node_id": "MDQ6VXNlcjUzMzk2MDY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/53396064?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rettigl",
            "html_url": "https://github.com/rettigl",
            "followers_url": "https://api.github.com/users/rettigl/followers",
            "following_url": "https://api.github.com/users/rettigl/following{/other_user}",
            "gists_url": "https://api.github.com/users/rettigl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rettigl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rettigl/subscriptions",
            "organizations_url": "https://api.github.com/users/rettigl/orgs",
            "repos_url": "https://api.github.com/users/rettigl/repos",
            "events_url": "https://api.github.com/users/rettigl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rettigl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-28T10:04:05Z",
        "updated_at": "2019-07-28T10:04:05Z",
        "author_association": "NONE",
        "body": "Hi jcrist,\r\nthanks for your suggestion. Let me jump in here, as the original question was coming from me, but posted by RealPolitiX, as I did not have an account yet. \r\nI've created a minimal demonstrator now:\r\n\r\n```\r\nfrom dask import compute, dataframe as dd\r\nimport pandas as pd\r\nfrom dask.multiprocessing import get\r\nimport random\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame({'col_1':random.sample(range(1000000), 1000000)})\r\n\r\nddf = dd.from_pandas(df, npartitions=8)\r\n\r\ndef myinterp (xs, secs=[], vals=[]):\r\n    ret = np.interp(xs, secs, vals)\r\n    return ret\r\n\r\nall_data = np.array(compute(ddf.values))[0,:,:]\r\ndata = all_data[:,0]\r\n\r\nsecs = np.linspace(0,1000000,1000)\r\nvals = np.array(random.sample(range(1000000), 1000))\r\n\r\n%time res = myinterp(data, secs, vals)\r\n\r\nddf_copy = ddf\r\n\r\nddf_copy['col_2'] = ddf_copy['col_1'].apply(myinterp, args=(secs, vals), meta=('x', 'f8'))\r\n\r\n%time ddf_copy.compute()\r\n\r\ndef myinterp2 (df, secs=[], vals=[]):\r\n    df['col_2'] = np.interp(df['col_1'], secs, vals)\r\n    return df\r\n\r\nddf_copy = ddf\r\n\r\nddf_copy = ddf_copy.map_partitions(myinterp2, secs=secs, vals=vals)\r\n\r\n%time ddf_copy.compute()\r\nddf_copy.head(8)\r\n```\r\n\r\nthe timing on my machine (20 cores) takes:\r\n```\r\nCPU times: user 476 ms, sys: 948 ms, total: 1.42 s\r\nWall time: 71.4 ms\r\nCPU times: user 11.5 s, sys: 25 s, total: 36.5 s\r\nWall time: 21.9 s\r\nCPU times: user 11 s, sys: 21.8 s, total: 32.9 s\r\nWall time: 20.9 s\r\n```\r\n\r\n70 ms for the interpolation outside Dask, and more than 20s for both versions (apply and map_partitions) for the version with the dask dataframe. This is a factor of ~300 slower...\r\n\r\nBoth Dask versions work, though, and produce the right results, are just ridiculously slow.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/515749693/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/515750902",
        "html_url": "https://github.com/dask/dask/issues/5160#issuecomment-515750902",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5160",
        "id": 515750902,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTc1MDkwMg==",
        "user": {
            "login": "rettigl",
            "id": 53396064,
            "node_id": "MDQ6VXNlcjUzMzk2MDY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/53396064?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rettigl",
            "html_url": "https://github.com/rettigl",
            "followers_url": "https://api.github.com/users/rettigl/followers",
            "following_url": "https://api.github.com/users/rettigl/following{/other_user}",
            "gists_url": "https://api.github.com/users/rettigl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rettigl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rettigl/subscriptions",
            "organizations_url": "https://api.github.com/users/rettigl/orgs",
            "repos_url": "https://api.github.com/users/rettigl/repos",
            "events_url": "https://api.github.com/users/rettigl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rettigl/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-28T10:25:57Z",
        "updated_at": "2019-07-28T10:25:57Z",
        "author_association": "NONE",
        "body": "Just noticed that my code above did use the apply version twice, as it did not create copies of the data frame.\r\nA corrected code:\r\n\r\n```\r\nfrom dask import compute, dataframe as dd\r\nimport pandas as pd\r\nfrom dask.multiprocessing import get\r\nimport random\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame({'col_1':random.sample(range(10000000), 10000000)})\r\n\r\nddf = dd.from_pandas(df, npartitions=8)\r\n\r\ndef myinterp (xs, secs=[], vals=[]):\r\n    ret = np.interp(xs, secs, vals)\r\n    return ret\r\n\r\nall_data = np.array(compute(ddf.values))[0,:,:]\r\ndata = all_data[:,0]\r\n\r\nsecs = np.linspace(0,10000000,1000)\r\nvals = np.array(random.sample(range(10000000), 1000))\r\n\r\n%time res = myinterp(data, secs, vals)\r\n\r\nddf1 = dd.from_pandas(df, npartitions=8)\r\n\r\nddf1['col_2'] = ddf1['col_1'].apply(myinterp, args=(secs, vals), meta=('x', 'f8'))\r\n\r\n%time ddf1.compute()\r\n\r\ndef myinterp2 (df, secs=[], vals=[]):\r\n    df['col_2'] = np.interp(df['col_1'], secs, vals)\r\n    return df\r\n\r\nddf2 = dd.from_pandas(df, npartitions=8)\r\n\r\nddf2 = ddf2.map_partitions(myinterp2, secs=secs, vals=vals)\r\n\r\n%time ddf2.compute()\r\n```\r\n\r\nProduces for 10 Mio entries:\r\n\r\n```\r\nCPU times: user 4.04 s, sys: 204 ms, total: 4.24 s\r\nWall time: 754 ms\r\nCPU times: user 1min 53s, sys: 3min 56s, total: 5min 49s\r\nWall time: 3min 27s\r\nCPU times: user 2.74 s, sys: 5.91 s, total: 8.65 s\r\nWall time: 622 ms\r\n```\r\nNow, map_partitions is actually even faster than the native code. The difference seems ot be that .apply calls the function once per element of the data frame, and map_partition once per data frame partition, is that correct?",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/515750902/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/dask/dask/issues/comments/516035824",
        "html_url": "https://github.com/dask/dask/issues/5160#issuecomment-516035824",
        "issue_url": "https://api.github.com/repos/dask/dask/issues/5160",
        "id": 516035824,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUxNjAzNTgyNA==",
        "user": {
            "login": "TomAugspurger",
            "id": 1312546,
            "node_id": "MDQ6VXNlcjEzMTI1NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1312546?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/TomAugspurger",
            "html_url": "https://github.com/TomAugspurger",
            "followers_url": "https://api.github.com/users/TomAugspurger/followers",
            "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
            "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
            "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
            "repos_url": "https://api.github.com/users/TomAugspurger/repos",
            "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
            "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-07-29T15:17:31Z",
        "updated_at": "2019-07-29T15:17:31Z",
        "author_association": "MEMBER",
        "body": "You should verify that each is giving the same output before measuring performance. Series.apply and `map_partitions` are quite different.",
        "reactions": {
            "url": "https://api.github.com/repos/dask/dask/issues/comments/516035824/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "performed_via_github_app": null
    }
]